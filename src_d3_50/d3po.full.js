(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  for (var i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],2:[function(require,module,exports){
/**
 * Bit twiddling hacks for JavaScript.
 *
 * Author: Mikola Lysenko
 *
 * Ported from Stanford bit twiddling hack library:
 *    http://graphics.stanford.edu/~seander/bithacks.html
 */

"use strict"; "use restrict";

//Number of bits in an integer
var INT_BITS = 32;

//Constants
exports.INT_BITS  = INT_BITS;
exports.INT_MAX   =  0x7fffffff;
exports.INT_MIN   = -1<<(INT_BITS-1);

//Returns -1, 0, +1 depending on sign of x
exports.sign = function(v) {
  return (v > 0) - (v < 0);
}

//Computes absolute value of integer
exports.abs = function(v) {
  var mask = v >> (INT_BITS-1);
  return (v ^ mask) - mask;
}

//Computes minimum of integers x and y
exports.min = function(x, y) {
  return y ^ ((x ^ y) & -(x < y));
}

//Computes maximum of integers x and y
exports.max = function(x, y) {
  return x ^ ((x ^ y) & -(x < y));
}

//Checks if a number is a power of two
exports.isPow2 = function(v) {
  return !(v & (v-1)) && (!!v);
}

//Computes log base 2 of v
exports.log2 = function(v) {
  var r, shift;
  r =     (v > 0xFFFF) << 4; v >>>= r;
  shift = (v > 0xFF  ) << 3; v >>>= shift; r |= shift;
  shift = (v > 0xF   ) << 2; v >>>= shift; r |= shift;
  shift = (v > 0x3   ) << 1; v >>>= shift; r |= shift;
  return r | (v >> 1);
}

//Computes log base 10 of v
exports.log10 = function(v) {
  return  (v >= 1000000000) ? 9 : (v >= 100000000) ? 8 : (v >= 10000000) ? 7 :
          (v >= 1000000) ? 6 : (v >= 100000) ? 5 : (v >= 10000) ? 4 :
          (v >= 1000) ? 3 : (v >= 100) ? 2 : (v >= 10) ? 1 : 0;
}

//Counts number of bits
exports.popCount = function(v) {
  v = v - ((v >>> 1) & 0x55555555);
  v = (v & 0x33333333) + ((v >>> 2) & 0x33333333);
  return ((v + (v >>> 4) & 0xF0F0F0F) * 0x1010101) >>> 24;
}

//Counts number of trailing zeros
function countTrailingZeros(v) {
  var c = 32;
  v &= -v;
  if (v) c--;
  if (v & 0x0000FFFF) c -= 16;
  if (v & 0x00FF00FF) c -= 8;
  if (v & 0x0F0F0F0F) c -= 4;
  if (v & 0x33333333) c -= 2;
  if (v & 0x55555555) c -= 1;
  return c;
}
exports.countTrailingZeros = countTrailingZeros;

//Rounds to next power of 2
exports.nextPow2 = function(v) {
  v += v === 0;
  --v;
  v |= v >>> 1;
  v |= v >>> 2;
  v |= v >>> 4;
  v |= v >>> 8;
  v |= v >>> 16;
  return v + 1;
}

//Rounds down to previous power of 2
exports.prevPow2 = function(v) {
  v |= v >>> 1;
  v |= v >>> 2;
  v |= v >>> 4;
  v |= v >>> 8;
  v |= v >>> 16;
  return v - (v>>>1);
}

//Computes parity of word
exports.parity = function(v) {
  v ^= v >>> 16;
  v ^= v >>> 8;
  v ^= v >>> 4;
  v &= 0xf;
  return (0x6996 >>> v) & 1;
}

var REVERSE_TABLE = new Array(256);

(function(tab) {
  for(var i=0; i<256; ++i) {
    var v = i, r = i, s = 7;
    for (v >>>= 1; v; v >>>= 1) {
      r <<= 1;
      r |= v & 1;
      --s;
    }
    tab[i] = (r << s) & 0xff;
  }
})(REVERSE_TABLE);

//Reverse bits in a 32 bit word
exports.reverse = function(v) {
  return  (REVERSE_TABLE[ v         & 0xff] << 24) |
          (REVERSE_TABLE[(v >>> 8)  & 0xff] << 16) |
          (REVERSE_TABLE[(v >>> 16) & 0xff] << 8)  |
           REVERSE_TABLE[(v >>> 24) & 0xff];
}

//Interleave bits of 2 coordinates with 16 bits.  Useful for fast quadtree codes
exports.interleave2 = function(x, y) {
  x &= 0xFFFF;
  x = (x | (x << 8)) & 0x00FF00FF;
  x = (x | (x << 4)) & 0x0F0F0F0F;
  x = (x | (x << 2)) & 0x33333333;
  x = (x | (x << 1)) & 0x55555555;

  y &= 0xFFFF;
  y = (y | (y << 8)) & 0x00FF00FF;
  y = (y | (y << 4)) & 0x0F0F0F0F;
  y = (y | (y << 2)) & 0x33333333;
  y = (y | (y << 1)) & 0x55555555;

  return x | (y << 1);
}

//Extracts the nth interleaved component
exports.deinterleave2 = function(v, n) {
  v = (v >>> n) & 0x55555555;
  v = (v | (v >>> 1))  & 0x33333333;
  v = (v | (v >>> 2))  & 0x0F0F0F0F;
  v = (v | (v >>> 4))  & 0x00FF00FF;
  v = (v | (v >>> 16)) & 0x000FFFF;
  return (v << 16) >> 16;
}


//Interleave bits of 3 coordinates, each with 10 bits.  Useful for fast octree codes
exports.interleave3 = function(x, y, z) {
  x &= 0x3FF;
  x  = (x | (x<<16)) & 4278190335;
  x  = (x | (x<<8))  & 251719695;
  x  = (x | (x<<4))  & 3272356035;
  x  = (x | (x<<2))  & 1227133513;

  y &= 0x3FF;
  y  = (y | (y<<16)) & 4278190335;
  y  = (y | (y<<8))  & 251719695;
  y  = (y | (y<<4))  & 3272356035;
  y  = (y | (y<<2))  & 1227133513;
  x |= (y << 1);
  
  z &= 0x3FF;
  z  = (z | (z<<16)) & 4278190335;
  z  = (z | (z<<8))  & 251719695;
  z  = (z | (z<<4))  & 3272356035;
  z  = (z | (z<<2))  & 1227133513;
  
  return x | (z << 2);
}

//Extracts nth interleaved component of a 3-tuple
exports.deinterleave3 = function(v, n) {
  v = (v >>> n)       & 1227133513;
  v = (v | (v>>>2))   & 3272356035;
  v = (v | (v>>>4))   & 251719695;
  v = (v | (v>>>8))   & 4278190335;
  v = (v | (v>>>16))  & 0x3FF;
  return (v<<22)>>22;
}

//Computes next combination in colexicographic order (this is mistakenly called nextPermutation on the bit twiddling hacks page)
exports.nextCombination = function(v) {
  var t = v | (v - 1);
  return (t + 1) | (((~t & -~t) - 1) >>> (countTrailingZeros(v) + 1));
}


},{}],3:[function(require,module,exports){
(function (Buffer){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    var proto = { foo: function () { return 42 } }
    Object.setPrototypeOf(proto, Uint8Array.prototype)
    Object.setPrototypeOf(arr, proto)
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  Object.setPrototypeOf(buf, Buffer.prototype)
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)
Object.setPrototypeOf(Buffer, Uint8Array)

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(buf, Buffer.prototype)

  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(newBuf, Buffer.prototype)

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

}).call(this,require("buffer").Buffer)
},{"base64-js":1,"buffer":3,"ieee754":42}],4:[function(require,module,exports){
"use strict"

var createThunk = require("./lib/thunk.js")

function Procedure() {
  this.argTypes = []
  this.shimArgs = []
  this.arrayArgs = []
  this.arrayBlockIndices = []
  this.scalarArgs = []
  this.offsetArgs = []
  this.offsetArgIndex = []
  this.indexArgs = []
  this.shapeArgs = []
  this.funcName = ""
  this.pre = null
  this.body = null
  this.post = null
  this.debug = false
}

function compileCwise(user_args) {
  //Create procedure
  var proc = new Procedure()
  
  //Parse blocks
  proc.pre    = user_args.pre
  proc.body   = user_args.body
  proc.post   = user_args.post

  //Parse arguments
  var proc_args = user_args.args.slice(0)
  proc.argTypes = proc_args
  for(var i=0; i<proc_args.length; ++i) {
    var arg_type = proc_args[i]
    if(arg_type === "array" || (typeof arg_type === "object" && arg_type.blockIndices)) {
      proc.argTypes[i] = "array"
      proc.arrayArgs.push(i)
      proc.arrayBlockIndices.push(arg_type.blockIndices ? arg_type.blockIndices : 0)
      proc.shimArgs.push("array" + i)
      if(i < proc.pre.args.length && proc.pre.args[i].count>0) {
        throw new Error("cwise: pre() block may not reference array args")
      }
      if(i < proc.post.args.length && proc.post.args[i].count>0) {
        throw new Error("cwise: post() block may not reference array args")
      }
    } else if(arg_type === "scalar") {
      proc.scalarArgs.push(i)
      proc.shimArgs.push("scalar" + i)
    } else if(arg_type === "index") {
      proc.indexArgs.push(i)
      if(i < proc.pre.args.length && proc.pre.args[i].count > 0) {
        throw new Error("cwise: pre() block may not reference array index")
      }
      if(i < proc.body.args.length && proc.body.args[i].lvalue) {
        throw new Error("cwise: body() block may not write to array index")
      }
      if(i < proc.post.args.length && proc.post.args[i].count > 0) {
        throw new Error("cwise: post() block may not reference array index")
      }
    } else if(arg_type === "shape") {
      proc.shapeArgs.push(i)
      if(i < proc.pre.args.length && proc.pre.args[i].lvalue) {
        throw new Error("cwise: pre() block may not write to array shape")
      }
      if(i < proc.body.args.length && proc.body.args[i].lvalue) {
        throw new Error("cwise: body() block may not write to array shape")
      }
      if(i < proc.post.args.length && proc.post.args[i].lvalue) {
        throw new Error("cwise: post() block may not write to array shape")
      }
    } else if(typeof arg_type === "object" && arg_type.offset) {
      proc.argTypes[i] = "offset"
      proc.offsetArgs.push({ array: arg_type.array, offset:arg_type.offset })
      proc.offsetArgIndex.push(i)
    } else {
      throw new Error("cwise: Unknown argument type " + proc_args[i])
    }
  }
  
  //Make sure at least one array argument was specified
  if(proc.arrayArgs.length <= 0) {
    throw new Error("cwise: No array arguments specified")
  }
  
  //Make sure arguments are correct
  if(proc.pre.args.length > proc_args.length) {
    throw new Error("cwise: Too many arguments in pre() block")
  }
  if(proc.body.args.length > proc_args.length) {
    throw new Error("cwise: Too many arguments in body() block")
  }
  if(proc.post.args.length > proc_args.length) {
    throw new Error("cwise: Too many arguments in post() block")
  }

  //Check debug flag
  proc.debug = !!user_args.printCode || !!user_args.debug
  
  //Retrieve name
  proc.funcName = user_args.funcName || "cwise"
  
  //Read in block size
  proc.blockSize = user_args.blockSize || 64

  return createThunk(proc)
}

module.exports = compileCwise

},{"./lib/thunk.js":6}],5:[function(require,module,exports){
"use strict"

var uniq = require("uniq")

// This function generates very simple loops analogous to how you typically traverse arrays (the outermost loop corresponds to the slowest changing index, the innermost loop to the fastest changing index)
// TODO: If two arrays have the same strides (and offsets) there is potential for decreasing the number of "pointers" and related variables. The drawback is that the type signature would become more specific and that there would thus be less potential for caching, but it might still be worth it, especially when dealing with large numbers of arguments.
function innerFill(order, proc, body) {
  var dimension = order.length
    , nargs = proc.arrayArgs.length
    , has_index = proc.indexArgs.length>0
    , code = []
    , vars = []
    , idx=0, pidx=0, i, j
  for(i=0; i<dimension; ++i) { // Iteration variables
    vars.push(["i",i,"=0"].join(""))
  }
  //Compute scan deltas
  for(j=0; j<nargs; ++j) {
    for(i=0; i<dimension; ++i) {
      pidx = idx
      idx = order[i]
      if(i === 0) { // The innermost/fastest dimension's delta is simply its stride
        vars.push(["d",j,"s",i,"=t",j,"p",idx].join(""))
      } else { // For other dimensions the delta is basically the stride minus something which essentially "rewinds" the previous (more inner) dimension
        vars.push(["d",j,"s",i,"=(t",j,"p",idx,"-s",pidx,"*t",j,"p",pidx,")"].join(""))
      }
    }
  }
  if (vars.length > 0) {
    code.push("var " + vars.join(","))
  }  
  //Scan loop
  for(i=dimension-1; i>=0; --i) { // Start at largest stride and work your way inwards
    idx = order[i]
    code.push(["for(i",i,"=0;i",i,"<s",idx,";++i",i,"){"].join(""))
  }
  //Push body of inner loop
  code.push(body)
  //Advance scan pointers
  for(i=0; i<dimension; ++i) {
    pidx = idx
    idx = order[i]
    for(j=0; j<nargs; ++j) {
      code.push(["p",j,"+=d",j,"s",i].join(""))
    }
    if(has_index) {
      if(i > 0) {
        code.push(["index[",pidx,"]-=s",pidx].join(""))
      }
      code.push(["++index[",idx,"]"].join(""))
    }
    code.push("}")
  }
  return code.join("\n")
}

// Generate "outer" loops that loop over blocks of data, applying "inner" loops to the blocks by manipulating the local variables in such a way that the inner loop only "sees" the current block.
// TODO: If this is used, then the previous declaration (done by generateCwiseOp) of s* is essentially unnecessary.
//       I believe the s* are not used elsewhere (in particular, I don't think they're used in the pre/post parts and "shape" is defined independently), so it would be possible to make defining the s* dependent on what loop method is being used.
function outerFill(matched, order, proc, body) {
  var dimension = order.length
    , nargs = proc.arrayArgs.length
    , blockSize = proc.blockSize
    , has_index = proc.indexArgs.length > 0
    , code = []
  for(var i=0; i<nargs; ++i) {
    code.push(["var offset",i,"=p",i].join(""))
  }
  //Generate loops for unmatched dimensions
  // The order in which these dimensions are traversed is fairly arbitrary (from small stride to large stride, for the first argument)
  // TODO: It would be nice if the order in which these loops are placed would also be somehow "optimal" (at the very least we should check that it really doesn't hurt us if they're not).
  for(var i=matched; i<dimension; ++i) {
    code.push(["for(var j"+i+"=SS[", order[i], "]|0;j", i, ">0;){"].join("")) // Iterate back to front
    code.push(["if(j",i,"<",blockSize,"){"].join("")) // Either decrease j by blockSize (s = blockSize), or set it to zero (after setting s = j).
    code.push(["s",order[i],"=j",i].join(""))
    code.push(["j",i,"=0"].join(""))
    code.push(["}else{s",order[i],"=",blockSize].join(""))
    code.push(["j",i,"-=",blockSize,"}"].join(""))
    if(has_index) {
      code.push(["index[",order[i],"]=j",i].join(""))
    }
  }
  for(var i=0; i<nargs; ++i) {
    var indexStr = ["offset"+i]
    for(var j=matched; j<dimension; ++j) {
      indexStr.push(["j",j,"*t",i,"p",order[j]].join(""))
    }
    code.push(["p",i,"=(",indexStr.join("+"),")"].join(""))
  }
  code.push(innerFill(order, proc, body))
  for(var i=matched; i<dimension; ++i) {
    code.push("}")
  }
  return code.join("\n")
}

//Count the number of compatible inner orders
// This is the length of the longest common prefix of the arrays in orders.
// Each array in orders lists the dimensions of the correspond ndarray in order of increasing stride.
// This is thus the maximum number of dimensions that can be efficiently traversed by simple nested loops for all arrays.
function countMatches(orders) {
  var matched = 0, dimension = orders[0].length
  while(matched < dimension) {
    for(var j=1; j<orders.length; ++j) {
      if(orders[j][matched] !== orders[0][matched]) {
        return matched
      }
    }
    ++matched
  }
  return matched
}

//Processes a block according to the given data types
// Replaces variable names by different ones, either "local" ones (that are then ferried in and out of the given array) or ones matching the arguments that the function performing the ultimate loop will accept.
function processBlock(block, proc, dtypes) {
  var code = block.body
  var pre = []
  var post = []
  for(var i=0; i<block.args.length; ++i) {
    var carg = block.args[i]
    if(carg.count <= 0) {
      continue
    }
    var re = new RegExp(carg.name, "g")
    var ptrStr = ""
    var arrNum = proc.arrayArgs.indexOf(i)
    switch(proc.argTypes[i]) {
      case "offset":
        var offArgIndex = proc.offsetArgIndex.indexOf(i)
        var offArg = proc.offsetArgs[offArgIndex]
        arrNum = offArg.array
        ptrStr = "+q" + offArgIndex // Adds offset to the "pointer" in the array
      case "array":
        ptrStr = "p" + arrNum + ptrStr
        var localStr = "l" + i
        var arrStr = "a" + arrNum
        if (proc.arrayBlockIndices[arrNum] === 0) { // Argument to body is just a single value from this array
          if(carg.count === 1) { // Argument/array used only once(?)
            if(dtypes[arrNum] === "generic") {
              if(carg.lvalue) {
                pre.push(["var ", localStr, "=", arrStr, ".get(", ptrStr, ")"].join("")) // Is this necessary if the argument is ONLY used as an lvalue? (keep in mind that we can have a += something, so we would actually need to check carg.rvalue)
                code = code.replace(re, localStr)
                post.push([arrStr, ".set(", ptrStr, ",", localStr,")"].join(""))
              } else {
                code = code.replace(re, [arrStr, ".get(", ptrStr, ")"].join(""))
              }
            } else {
              code = code.replace(re, [arrStr, "[", ptrStr, "]"].join(""))
            }
          } else if(dtypes[arrNum] === "generic") {
            pre.push(["var ", localStr, "=", arrStr, ".get(", ptrStr, ")"].join("")) // TODO: Could we optimize by checking for carg.rvalue?
            code = code.replace(re, localStr)
            if(carg.lvalue) {
              post.push([arrStr, ".set(", ptrStr, ",", localStr,")"].join(""))
            }
          } else {
            pre.push(["var ", localStr, "=", arrStr, "[", ptrStr, "]"].join("")) // TODO: Could we optimize by checking for carg.rvalue?
            code = code.replace(re, localStr)
            if(carg.lvalue) {
              post.push([arrStr, "[", ptrStr, "]=", localStr].join(""))
            }
          }
        } else { // Argument to body is a "block"
          var reStrArr = [carg.name], ptrStrArr = [ptrStr]
          for(var j=0; j<Math.abs(proc.arrayBlockIndices[arrNum]); j++) {
            reStrArr.push("\\s*\\[([^\\]]+)\\]")
            ptrStrArr.push("$" + (j+1) + "*t" + arrNum + "b" + j) // Matched index times stride
          }
          re = new RegExp(reStrArr.join(""), "g")
          ptrStr = ptrStrArr.join("+")
          if(dtypes[arrNum] === "generic") {
            /*if(carg.lvalue) {
              pre.push(["var ", localStr, "=", arrStr, ".get(", ptrStr, ")"].join("")) // Is this necessary if the argument is ONLY used as an lvalue? (keep in mind that we can have a += something, so we would actually need to check carg.rvalue)
              code = code.replace(re, localStr)
              post.push([arrStr, ".set(", ptrStr, ",", localStr,")"].join(""))
            } else {
              code = code.replace(re, [arrStr, ".get(", ptrStr, ")"].join(""))
            }*/
            throw new Error("cwise: Generic arrays not supported in combination with blocks!")
          } else {
            // This does not produce any local variables, even if variables are used multiple times. It would be possible to do so, but it would complicate things quite a bit.
            code = code.replace(re, [arrStr, "[", ptrStr, "]"].join(""))
          }
        }
      break
      case "scalar":
        code = code.replace(re, "Y" + proc.scalarArgs.indexOf(i))
      break
      case "index":
        code = code.replace(re, "index")
      break
      case "shape":
        code = code.replace(re, "shape")
      break
    }
  }
  return [pre.join("\n"), code, post.join("\n")].join("\n").trim()
}

function typeSummary(dtypes) {
  var summary = new Array(dtypes.length)
  var allEqual = true
  for(var i=0; i<dtypes.length; ++i) {
    var t = dtypes[i]
    var digits = t.match(/\d+/)
    if(!digits) {
      digits = ""
    } else {
      digits = digits[0]
    }
    if(t.charAt(0) === 0) {
      summary[i] = "u" + t.charAt(1) + digits
    } else {
      summary[i] = t.charAt(0) + digits
    }
    if(i > 0) {
      allEqual = allEqual && summary[i] === summary[i-1]
    }
  }
  if(allEqual) {
    return summary[0]
  }
  return summary.join("")
}

//Generates a cwise operator
function generateCWiseOp(proc, typesig) {

  //Compute dimension
  // Arrays get put first in typesig, and there are two entries per array (dtype and order), so this gets the number of dimensions in the first array arg.
  var dimension = (typesig[1].length - Math.abs(proc.arrayBlockIndices[0]))|0
  var orders = new Array(proc.arrayArgs.length)
  var dtypes = new Array(proc.arrayArgs.length)
  for(var i=0; i<proc.arrayArgs.length; ++i) {
    dtypes[i] = typesig[2*i]
    orders[i] = typesig[2*i+1]
  }
  
  //Determine where block and loop indices start and end
  var blockBegin = [], blockEnd = [] // These indices are exposed as blocks
  var loopBegin = [], loopEnd = [] // These indices are iterated over
  var loopOrders = [] // orders restricted to the loop indices
  for(var i=0; i<proc.arrayArgs.length; ++i) {
    if (proc.arrayBlockIndices[i]<0) {
      loopBegin.push(0)
      loopEnd.push(dimension)
      blockBegin.push(dimension)
      blockEnd.push(dimension+proc.arrayBlockIndices[i])
    } else {
      loopBegin.push(proc.arrayBlockIndices[i]) // Non-negative
      loopEnd.push(proc.arrayBlockIndices[i]+dimension)
      blockBegin.push(0)
      blockEnd.push(proc.arrayBlockIndices[i])
    }
    var newOrder = []
    for(var j=0; j<orders[i].length; j++) {
      if (loopBegin[i]<=orders[i][j] && orders[i][j]<loopEnd[i]) {
        newOrder.push(orders[i][j]-loopBegin[i]) // If this is a loop index, put it in newOrder, subtracting loopBegin, to make sure that all loopOrders are using a common set of indices.
      }
    }
    loopOrders.push(newOrder)
  }

  //First create arguments for procedure
  var arglist = ["SS"] // SS is the overall shape over which we iterate
  var code = ["'use strict'"]
  var vars = []
  
  for(var j=0; j<dimension; ++j) {
    vars.push(["s", j, "=SS[", j, "]"].join("")) // The limits for each dimension.
  }
  for(var i=0; i<proc.arrayArgs.length; ++i) {
    arglist.push("a"+i) // Actual data array
    arglist.push("t"+i) // Strides
    arglist.push("p"+i) // Offset in the array at which the data starts (also used for iterating over the data)
    
    for(var j=0; j<dimension; ++j) { // Unpack the strides into vars for looping
      vars.push(["t",i,"p",j,"=t",i,"[",loopBegin[i]+j,"]"].join(""))
    }
    
    for(var j=0; j<Math.abs(proc.arrayBlockIndices[i]); ++j) { // Unpack the strides into vars for block iteration
      vars.push(["t",i,"b",j,"=t",i,"[",blockBegin[i]+j,"]"].join(""))
    }
  }
  for(var i=0; i<proc.scalarArgs.length; ++i) {
    arglist.push("Y" + i)
  }
  if(proc.shapeArgs.length > 0) {
    vars.push("shape=SS.slice(0)") // Makes the shape over which we iterate available to the user defined functions (so you can use width/height for example)
  }
  if(proc.indexArgs.length > 0) {
    // Prepare an array to keep track of the (logical) indices, initialized to dimension zeroes.
    var zeros = new Array(dimension)
    for(var i=0; i<dimension; ++i) {
      zeros[i] = "0"
    }
    vars.push(["index=[", zeros.join(","), "]"].join(""))
  }
  for(var i=0; i<proc.offsetArgs.length; ++i) { // Offset arguments used for stencil operations
    var off_arg = proc.offsetArgs[i]
    var init_string = []
    for(var j=0; j<off_arg.offset.length; ++j) {
      if(off_arg.offset[j] === 0) {
        continue
      } else if(off_arg.offset[j] === 1) {
        init_string.push(["t", off_arg.array, "p", j].join(""))      
      } else {
        init_string.push([off_arg.offset[j], "*t", off_arg.array, "p", j].join(""))
      }
    }
    if(init_string.length === 0) {
      vars.push("q" + i + "=0")
    } else {
      vars.push(["q", i, "=", init_string.join("+")].join(""))
    }
  }

  //Prepare this variables
  var thisVars = uniq([].concat(proc.pre.thisVars)
                      .concat(proc.body.thisVars)
                      .concat(proc.post.thisVars))
  vars = vars.concat(thisVars)
  if (vars.length > 0) {
    code.push("var " + vars.join(","))
  }
  for(var i=0; i<proc.arrayArgs.length; ++i) {
    code.push("p"+i+"|=0")
  }
  
  //Inline prelude
  if(proc.pre.body.length > 3) {
    code.push(processBlock(proc.pre, proc, dtypes))
  }

  //Process body
  var body = processBlock(proc.body, proc, dtypes)
  var matched = countMatches(loopOrders)
  if(matched < dimension) {
    code.push(outerFill(matched, loopOrders[0], proc, body)) // TODO: Rather than passing loopOrders[0], it might be interesting to look at passing an order that represents the majority of the arguments for example.
  } else {
    code.push(innerFill(loopOrders[0], proc, body))
  }

  //Inline epilog
  if(proc.post.body.length > 3) {
    code.push(processBlock(proc.post, proc, dtypes))
  }
  
  if(proc.debug) {
    console.log("-----Generated cwise routine for ", typesig, ":\n" + code.join("\n") + "\n----------")
  }
  
  var loopName = [(proc.funcName||"unnamed"), "_cwise_loop_", orders[0].join("s"),"m",matched,typeSummary(dtypes)].join("")
  var f = new Function(["function ",loopName,"(", arglist.join(","),"){", code.join("\n"),"} return ", loopName].join(""))
  return f()
}
module.exports = generateCWiseOp

},{"uniq":62}],6:[function(require,module,exports){
"use strict"

// The function below is called when constructing a cwise function object, and does the following:
// A function object is constructed which accepts as argument a compilation function and returns another function.
// It is this other function that is eventually returned by createThunk, and this function is the one that actually
// checks whether a certain pattern of arguments has already been used before and compiles new loops as needed.
// The compilation passed to the first function object is used for compiling new functions.
// Once this function object is created, it is called with compile as argument, where the first argument of compile
// is bound to "proc" (essentially containing a preprocessed version of the user arguments to cwise).
// So createThunk roughly works like this:
// function createThunk(proc) {
//   var thunk = function(compileBound) {
//     var CACHED = {}
//     return function(arrays and scalars) {
//       if (dtype and order of arrays in CACHED) {
//         var func = CACHED[dtype and order of arrays]
//       } else {
//         var func = CACHED[dtype and order of arrays] = compileBound(dtype and order of arrays)
//       }
//       return func(arrays and scalars)
//     }
//   }
//   return thunk(compile.bind1(proc))
// }

var compile = require("./compile.js")

function createThunk(proc) {
  var code = ["'use strict'", "var CACHED={}"]
  var vars = []
  var thunkName = proc.funcName + "_cwise_thunk"
  
  //Build thunk
  code.push(["return function ", thunkName, "(", proc.shimArgs.join(","), "){"].join(""))
  var typesig = []
  var string_typesig = []
  var proc_args = [["array",proc.arrayArgs[0],".shape.slice(", // Slice shape so that we only retain the shape over which we iterate (which gets passed to the cwise operator as SS).
                    Math.max(0,proc.arrayBlockIndices[0]),proc.arrayBlockIndices[0]<0?(","+proc.arrayBlockIndices[0]+")"):")"].join("")]
  var shapeLengthConditions = [], shapeConditions = []
  // Process array arguments
  for(var i=0; i<proc.arrayArgs.length; ++i) {
    var j = proc.arrayArgs[i]
    vars.push(["t", j, "=array", j, ".dtype,",
               "r", j, "=array", j, ".order"].join(""))
    typesig.push("t" + j)
    typesig.push("r" + j)
    string_typesig.push("t"+j)
    string_typesig.push("r"+j+".join()")
    proc_args.push("array" + j + ".data")
    proc_args.push("array" + j + ".stride")
    proc_args.push("array" + j + ".offset|0")
    if (i>0) { // Gather conditions to check for shape equality (ignoring block indices)
      shapeLengthConditions.push("array" + proc.arrayArgs[0] + ".shape.length===array" + j + ".shape.length+" + (Math.abs(proc.arrayBlockIndices[0])-Math.abs(proc.arrayBlockIndices[i])))
      shapeConditions.push("array" + proc.arrayArgs[0] + ".shape[shapeIndex+" + Math.max(0,proc.arrayBlockIndices[0]) + "]===array" + j + ".shape[shapeIndex+" + Math.max(0,proc.arrayBlockIndices[i]) + "]")
    }
  }
  // Check for shape equality
  if (proc.arrayArgs.length > 1) {
    code.push("if (!(" + shapeLengthConditions.join(" && ") + ")) throw new Error('cwise: Arrays do not all have the same dimensionality!')")
    code.push("for(var shapeIndex=array" + proc.arrayArgs[0] + ".shape.length-" + Math.abs(proc.arrayBlockIndices[0]) + "; shapeIndex-->0;) {")
    code.push("if (!(" + shapeConditions.join(" && ") + ")) throw new Error('cwise: Arrays do not all have the same shape!')")
    code.push("}")
  }
  // Process scalar arguments
  for(var i=0; i<proc.scalarArgs.length; ++i) {
    proc_args.push("scalar" + proc.scalarArgs[i])
  }
  // Check for cached function (and if not present, generate it)
  vars.push(["type=[", string_typesig.join(","), "].join()"].join(""))
  vars.push("proc=CACHED[type]")
  code.push("var " + vars.join(","))
  
  code.push(["if(!proc){",
             "CACHED[type]=proc=compile([", typesig.join(","), "])}",
             "return proc(", proc_args.join(","), ")}"].join(""))

  if(proc.debug) {
    console.log("-----Generated thunk:\n" + code.join("\n") + "\n----------")
  }
  
  //Compile thunk
  var thunk = new Function("compile", code.join("\n"))
  return thunk(compile.bind(undefined, proc))
}

module.exports = createThunk

},{"./compile.js":5}],7:[function(require,module,exports){
// https://d3js.org/d3-array/ v1.2.4 Copyright 2018 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
typeof define === 'function' && define.amd ? define(['exports'], factory) :
(factory((global.d3 = global.d3 || {})));
}(this, (function (exports) { 'use strict';

function ascending(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}

function bisector(compare) {
  if (compare.length === 1) compare = ascendingComparator(compare);
  return {
    left: function(a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;
      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) < 0) lo = mid + 1;
        else hi = mid;
      }
      return lo;
    },
    right: function(a, x, lo, hi) {
      if (lo == null) lo = 0;
      if (hi == null) hi = a.length;
      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a[mid], x) > 0) hi = mid;
        else lo = mid + 1;
      }
      return lo;
    }
  };
}

function ascendingComparator(f) {
  return function(d, x) {
    return ascending(f(d), x);
  };
}

var ascendingBisect = bisector(ascending);
var bisectRight = ascendingBisect.right;
var bisectLeft = ascendingBisect.left;

function pairs(array, f) {
  if (f == null) f = pair;
  var i = 0, n = array.length - 1, p = array[0], pairs = new Array(n < 0 ? 0 : n);
  while (i < n) pairs[i] = f(p, p = array[++i]);
  return pairs;
}

function pair(a, b) {
  return [a, b];
}

function cross(values0, values1, reduce) {
  var n0 = values0.length,
      n1 = values1.length,
      values = new Array(n0 * n1),
      i0,
      i1,
      i,
      value0;

  if (reduce == null) reduce = pair;

  for (i0 = i = 0; i0 < n0; ++i0) {
    for (value0 = values0[i0], i1 = 0; i1 < n1; ++i1, ++i) {
      values[i] = reduce(value0, values1[i1]);
    }
  }

  return values;
}

function descending(a, b) {
  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
}

function number(x) {
  return x === null ? NaN : +x;
}

function variance(values, valueof) {
  var n = values.length,
      m = 0,
      i = -1,
      mean = 0,
      value,
      delta,
      sum = 0;

  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = number(values[i]))) {
        delta = value - mean;
        mean += delta / ++m;
        sum += delta * (value - mean);
      }
    }
  }

  else {
    while (++i < n) {
      if (!isNaN(value = number(valueof(values[i], i, values)))) {
        delta = value - mean;
        mean += delta / ++m;
        sum += delta * (value - mean);
      }
    }
  }

  if (m > 1) return sum / (m - 1);
}

function deviation(array, f) {
  var v = variance(array, f);
  return v ? Math.sqrt(v) : v;
}

function extent(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      min,
      max;

  if (valueof == null) {
    while (++i < n) { // Find the first comparable value.
      if ((value = values[i]) != null && value >= value) {
        min = max = value;
        while (++i < n) { // Compare the remaining values.
          if ((value = values[i]) != null) {
            if (min > value) min = value;
            if (max < value) max = value;
          }
        }
      }
    }
  }

  else {
    while (++i < n) { // Find the first comparable value.
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        min = max = value;
        while (++i < n) { // Compare the remaining values.
          if ((value = valueof(values[i], i, values)) != null) {
            if (min > value) min = value;
            if (max < value) max = value;
          }
        }
      }
    }
  }

  return [min, max];
}

var array = Array.prototype;

var slice = array.slice;
var map = array.map;

function constant(x) {
  return function() {
    return x;
  };
}

function identity(x) {
  return x;
}

function range(start, stop, step) {
  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;

  var i = -1,
      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
      range = new Array(n);

  while (++i < n) {
    range[i] = start + i * step;
  }

  return range;
}

var e10 = Math.sqrt(50),
    e5 = Math.sqrt(10),
    e2 = Math.sqrt(2);

function ticks(start, stop, count) {
  var reverse,
      i = -1,
      n,
      ticks,
      step;

  stop = +stop, start = +start, count = +count;
  if (start === stop && count > 0) return [start];
  if (reverse = stop < start) n = start, start = stop, stop = n;
  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

  if (step > 0) {
    start = Math.ceil(start / step);
    stop = Math.floor(stop / step);
    ticks = new Array(n = Math.ceil(stop - start + 1));
    while (++i < n) ticks[i] = (start + i) * step;
  } else {
    start = Math.floor(start * step);
    stop = Math.ceil(stop * step);
    ticks = new Array(n = Math.ceil(start - stop + 1));
    while (++i < n) ticks[i] = (start - i) / step;
  }

  if (reverse) ticks.reverse();

  return ticks;
}

function tickIncrement(start, stop, count) {
  var step = (stop - start) / Math.max(0, count),
      power = Math.floor(Math.log(step) / Math.LN10),
      error = step / Math.pow(10, power);
  return power >= 0
      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)
      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
}

function tickStep(start, stop, count) {
  var step0 = Math.abs(stop - start) / Math.max(0, count),
      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
      error = step0 / step1;
  if (error >= e10) step1 *= 10;
  else if (error >= e5) step1 *= 5;
  else if (error >= e2) step1 *= 2;
  return stop < start ? -step1 : step1;
}

function sturges(values) {
  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;
}

function histogram() {
  var value = identity,
      domain = extent,
      threshold = sturges;

  function histogram(data) {
    var i,
        n = data.length,
        x,
        values = new Array(n);

    for (i = 0; i < n; ++i) {
      values[i] = value(data[i], i, data);
    }

    var xz = domain(values),
        x0 = xz[0],
        x1 = xz[1],
        tz = threshold(values, x0, x1);

    // Convert number of thresholds into uniform thresholds.
    if (!Array.isArray(tz)) {
      tz = tickStep(x0, x1, tz);
      tz = range(Math.ceil(x0 / tz) * tz, x1, tz); // exclusive
    }

    // Remove any thresholds outside the domain.
    var m = tz.length;
    while (tz[0] <= x0) tz.shift(), --m;
    while (tz[m - 1] > x1) tz.pop(), --m;

    var bins = new Array(m + 1),
        bin;

    // Initialize bins.
    for (i = 0; i <= m; ++i) {
      bin = bins[i] = [];
      bin.x0 = i > 0 ? tz[i - 1] : x0;
      bin.x1 = i < m ? tz[i] : x1;
    }

    // Assign data to bins by value, ignoring any outside the domain.
    for (i = 0; i < n; ++i) {
      x = values[i];
      if (x0 <= x && x <= x1) {
        bins[bisectRight(tz, x, 0, m)].push(data[i]);
      }
    }

    return bins;
  }

  histogram.value = function(_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : constant(_), histogram) : value;
  };

  histogram.domain = function(_) {
    return arguments.length ? (domain = typeof _ === "function" ? _ : constant([_[0], _[1]]), histogram) : domain;
  };

  histogram.thresholds = function(_) {
    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;
  };

  return histogram;
}

function quantile(values, p, valueof) {
  if (valueof == null) valueof = number;
  if (!(n = values.length)) return;
  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);
  if (p >= 1) return +valueof(values[n - 1], n - 1, values);
  var n,
      i = (n - 1) * p,
      i0 = Math.floor(i),
      value0 = +valueof(values[i0], i0, values),
      value1 = +valueof(values[i0 + 1], i0 + 1, values);
  return value0 + (value1 - value0) * (i - i0);
}

function freedmanDiaconis(values, min, max) {
  values = map.call(values, number).sort(ascending);
  return Math.ceil((max - min) / (2 * (quantile(values, 0.75) - quantile(values, 0.25)) * Math.pow(values.length, -1 / 3)));
}

function scott(values, min, max) {
  return Math.ceil((max - min) / (3.5 * deviation(values) * Math.pow(values.length, -1 / 3)));
}

function max(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      max;

  if (valueof == null) {
    while (++i < n) { // Find the first comparable value.
      if ((value = values[i]) != null && value >= value) {
        max = value;
        while (++i < n) { // Compare the remaining values.
          if ((value = values[i]) != null && value > max) {
            max = value;
          }
        }
      }
    }
  }

  else {
    while (++i < n) { // Find the first comparable value.
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        max = value;
        while (++i < n) { // Compare the remaining values.
          if ((value = valueof(values[i], i, values)) != null && value > max) {
            max = value;
          }
        }
      }
    }
  }

  return max;
}

function mean(values, valueof) {
  var n = values.length,
      m = n,
      i = -1,
      value,
      sum = 0;

  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = number(values[i]))) sum += value;
      else --m;
    }
  }

  else {
    while (++i < n) {
      if (!isNaN(value = number(valueof(values[i], i, values)))) sum += value;
      else --m;
    }
  }

  if (m) return sum / m;
}

function median(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      numbers = [];

  if (valueof == null) {
    while (++i < n) {
      if (!isNaN(value = number(values[i]))) {
        numbers.push(value);
      }
    }
  }

  else {
    while (++i < n) {
      if (!isNaN(value = number(valueof(values[i], i, values)))) {
        numbers.push(value);
      }
    }
  }

  return quantile(numbers.sort(ascending), 0.5);
}

function merge(arrays) {
  var n = arrays.length,
      m,
      i = -1,
      j = 0,
      merged,
      array;

  while (++i < n) j += arrays[i].length;
  merged = new Array(j);

  while (--n >= 0) {
    array = arrays[n];
    m = array.length;
    while (--m >= 0) {
      merged[--j] = array[m];
    }
  }

  return merged;
}

function min(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      min;

  if (valueof == null) {
    while (++i < n) { // Find the first comparable value.
      if ((value = values[i]) != null && value >= value) {
        min = value;
        while (++i < n) { // Compare the remaining values.
          if ((value = values[i]) != null && min > value) {
            min = value;
          }
        }
      }
    }
  }

  else {
    while (++i < n) { // Find the first comparable value.
      if ((value = valueof(values[i], i, values)) != null && value >= value) {
        min = value;
        while (++i < n) { // Compare the remaining values.
          if ((value = valueof(values[i], i, values)) != null && min > value) {
            min = value;
          }
        }
      }
    }
  }

  return min;
}

function permute(array, indexes) {
  var i = indexes.length, permutes = new Array(i);
  while (i--) permutes[i] = array[indexes[i]];
  return permutes;
}

function scan(values, compare) {
  if (!(n = values.length)) return;
  var n,
      i = 0,
      j = 0,
      xi,
      xj = values[j];

  if (compare == null) compare = ascending;

  while (++i < n) {
    if (compare(xi = values[i], xj) < 0 || compare(xj, xj) !== 0) {
      xj = xi, j = i;
    }
  }

  if (compare(xj, xj) === 0) return j;
}

function shuffle(array, i0, i1) {
  var m = (i1 == null ? array.length : i1) - (i0 = i0 == null ? 0 : +i0),
      t,
      i;

  while (m) {
    i = Math.random() * m-- | 0;
    t = array[m + i0];
    array[m + i0] = array[i + i0];
    array[i + i0] = t;
  }

  return array;
}

function sum(values, valueof) {
  var n = values.length,
      i = -1,
      value,
      sum = 0;

  if (valueof == null) {
    while (++i < n) {
      if (value = +values[i]) sum += value; // Note: zero and null are equivalent.
    }
  }

  else {
    while (++i < n) {
      if (value = +valueof(values[i], i, values)) sum += value;
    }
  }

  return sum;
}

function transpose(matrix) {
  if (!(n = matrix.length)) return [];
  for (var i = -1, m = min(matrix, length), transpose = new Array(m); ++i < m;) {
    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {
      row[j] = matrix[j][i];
    }
  }
  return transpose;
}

function length(d) {
  return d.length;
}

function zip() {
  return transpose(arguments);
}

exports.bisect = bisectRight;
exports.bisectRight = bisectRight;
exports.bisectLeft = bisectLeft;
exports.ascending = ascending;
exports.bisector = bisector;
exports.cross = cross;
exports.descending = descending;
exports.deviation = deviation;
exports.extent = extent;
exports.histogram = histogram;
exports.thresholdFreedmanDiaconis = freedmanDiaconis;
exports.thresholdScott = scott;
exports.thresholdSturges = sturges;
exports.max = max;
exports.mean = mean;
exports.median = median;
exports.merge = merge;
exports.min = min;
exports.pairs = pairs;
exports.permute = permute;
exports.quantile = quantile;
exports.range = range;
exports.scan = scan;
exports.shuffle = shuffle;
exports.sum = sum;
exports.ticks = ticks;
exports.tickIncrement = tickIncrement;
exports.tickStep = tickStep;
exports.transpose = transpose;
exports.variance = variance;
exports.zip = zip;

Object.defineProperty(exports, '__esModule', { value: true });

})));

},{}],8:[function(require,module,exports){
// https://d3js.org/d3-axis/ v1.0.12 Copyright 2018 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
typeof define === 'function' && define.amd ? define(['exports'], factory) :
(factory((global.d3 = global.d3 || {})));
}(this, (function (exports) { 'use strict';

var slice = Array.prototype.slice;

function identity(x) {
  return x;
}

var top = 1,
    right = 2,
    bottom = 3,
    left = 4,
    epsilon = 1e-6;

function translateX(x) {
  return "translate(" + (x + 0.5) + ",0)";
}

function translateY(y) {
  return "translate(0," + (y + 0.5) + ")";
}

function number(scale) {
  return function(d) {
    return +scale(d);
  };
}

function center(scale) {
  var offset = Math.max(0, scale.bandwidth() - 1) / 2; // Adjust for 0.5px offset.
  if (scale.round()) offset = Math.round(offset);
  return function(d) {
    return +scale(d) + offset;
  };
}

function entering() {
  return !this.__axis;
}

function axis(orient, scale) {
  var tickArguments = [],
      tickValues = null,
      tickFormat = null,
      tickSizeInner = 6,
      tickSizeOuter = 6,
      tickPadding = 3,
      k = orient === top || orient === left ? -1 : 1,
      x = orient === left || orient === right ? "x" : "y",
      transform = orient === top || orient === bottom ? translateX : translateY;

  function axis(context) {
    var values = tickValues == null ? (scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain()) : tickValues,
        format = tickFormat == null ? (scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity) : tickFormat,
        spacing = Math.max(tickSizeInner, 0) + tickPadding,
        range = scale.range(),
        range0 = +range[0] + 0.5,
        range1 = +range[range.length - 1] + 0.5,
        position = (scale.bandwidth ? center : number)(scale.copy()),
        selection = context.selection ? context.selection() : context,
        path = selection.selectAll(".domain").data([null]),
        tick = selection.selectAll(".tick").data(values, scale).order(),
        tickExit = tick.exit(),
        tickEnter = tick.enter().append("g").attr("class", "tick"),
        line = tick.select("line"),
        text = tick.select("text");

    path = path.merge(path.enter().insert("path", ".tick")
        .attr("class", "domain")
        .attr("stroke", "currentColor"));

    tick = tick.merge(tickEnter);

    line = line.merge(tickEnter.append("line")
        .attr("stroke", "currentColor")
        .attr(x + "2", k * tickSizeInner));

    text = text.merge(tickEnter.append("text")
        .attr("fill", "currentColor")
        .attr(x, k * spacing)
        .attr("dy", orient === top ? "0em" : orient === bottom ? "0.71em" : "0.32em"));

    if (context !== selection) {
      path = path.transition(context);
      tick = tick.transition(context);
      line = line.transition(context);
      text = text.transition(context);

      tickExit = tickExit.transition(context)
          .attr("opacity", epsilon)
          .attr("transform", function(d) { return isFinite(d = position(d)) ? transform(d) : this.getAttribute("transform"); });

      tickEnter
          .attr("opacity", epsilon)
          .attr("transform", function(d) { var p = this.parentNode.__axis; return transform(p && isFinite(p = p(d)) ? p : position(d)); });
    }

    tickExit.remove();

    path
        .attr("d", orient === left || orient == right
            ? (tickSizeOuter ? "M" + k * tickSizeOuter + "," + range0 + "H0.5V" + range1 + "H" + k * tickSizeOuter : "M0.5," + range0 + "V" + range1)
            : (tickSizeOuter ? "M" + range0 + "," + k * tickSizeOuter + "V0.5H" + range1 + "V" + k * tickSizeOuter : "M" + range0 + ",0.5H" + range1));

    tick
        .attr("opacity", 1)
        .attr("transform", function(d) { return transform(position(d)); });

    line
        .attr(x + "2", k * tickSizeInner);

    text
        .attr(x, k * spacing)
        .text(format);

    selection.filter(entering)
        .attr("fill", "none")
        .attr("font-size", 10)
        .attr("font-family", "sans-serif")
        .attr("text-anchor", orient === right ? "start" : orient === left ? "end" : "middle");

    selection
        .each(function() { this.__axis = position; });
  }

  axis.scale = function(_) {
    return arguments.length ? (scale = _, axis) : scale;
  };

  axis.ticks = function() {
    return tickArguments = slice.call(arguments), axis;
  };

  axis.tickArguments = function(_) {
    return arguments.length ? (tickArguments = _ == null ? [] : slice.call(_), axis) : tickArguments.slice();
  };

  axis.tickValues = function(_) {
    return arguments.length ? (tickValues = _ == null ? null : slice.call(_), axis) : tickValues && tickValues.slice();
  };

  axis.tickFormat = function(_) {
    return arguments.length ? (tickFormat = _, axis) : tickFormat;
  };

  axis.tickSize = function(_) {
    return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;
  };

  axis.tickSizeInner = function(_) {
    return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;
  };

  axis.tickSizeOuter = function(_) {
    return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;
  };

  axis.tickPadding = function(_) {
    return arguments.length ? (tickPadding = +_, axis) : tickPadding;
  };

  return axis;
}

function axisTop(scale) {
  return axis(top, scale);
}

function axisRight(scale) {
  return axis(right, scale);
}

function axisBottom(scale) {
  return axis(bottom, scale);
}

function axisLeft(scale) {
  return axis(left, scale);
}

exports.axisTop = axisTop;
exports.axisRight = axisRight;
exports.axisBottom = axisBottom;
exports.axisLeft = axisLeft;

Object.defineProperty(exports, '__esModule', { value: true });

})));

},{}],9:[function(require,module,exports){
// https://d3js.org/d3-brush/ v1.1.2 Copyright 2019 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-dispatch'), require('d3-drag'), require('d3-interpolate'), require('d3-selection'), require('d3-transition')) :
typeof define === 'function' && define.amd ? define(['exports', 'd3-dispatch', 'd3-drag', 'd3-interpolate', 'd3-selection', 'd3-transition'], factory) :
(global = global || self, factory(global.d3 = global.d3 || {}, global.d3, global.d3, global.d3, global.d3, global.d3));
}(this, function (exports, d3Dispatch, d3Drag, d3Interpolate, d3Selection, d3Transition) { 'use strict';

function constant(x) {
  return function() {
    return x;
  };
}

function BrushEvent(target, type, selection) {
  this.target = target;
  this.type = type;
  this.selection = selection;
}

function nopropagation() {
  d3Selection.event.stopImmediatePropagation();
}

function noevent() {
  d3Selection.event.preventDefault();
  d3Selection.event.stopImmediatePropagation();
}

var MODE_DRAG = {name: "drag"},
    MODE_SPACE = {name: "space"},
    MODE_HANDLE = {name: "handle"},
    MODE_CENTER = {name: "center"};

function number1(e) {
  return [+e[0], +e[1]];
}

function number2(e) {
  return [number1(e[0]), number1(e[1])];
}

var X = {
  name: "x",
  handles: ["w", "e"].map(type),
  input: function(x, e) { return x == null ? null : [[+x[0], e[0][1]], [+x[1], e[1][1]]]; },
  output: function(xy) { return xy && [xy[0][0], xy[1][0]]; }
};

var Y = {
  name: "y",
  handles: ["n", "s"].map(type),
  input: function(y, e) { return y == null ? null : [[e[0][0], +y[0]], [e[1][0], +y[1]]]; },
  output: function(xy) { return xy && [xy[0][1], xy[1][1]]; }
};

var XY = {
  name: "xy",
  handles: ["nw", "n", "ne", "w", "e", "sw", "s", "se"].map(type),
  input: function(xy) { return xy == null ? null : number2(xy); },
  output: function(xy) { return xy; }
};

var cursors = {
  overlay: "crosshair",
  selection: "move",
  n: "ns-resize",
  e: "ew-resize",
  s: "ns-resize",
  w: "ew-resize",
  nw: "nwse-resize",
  ne: "nesw-resize",
  se: "nwse-resize",
  sw: "nesw-resize"
};

var flipX = {
  e: "w",
  w: "e",
  nw: "ne",
  ne: "nw",
  se: "sw",
  sw: "se"
};

var flipY = {
  n: "s",
  s: "n",
  nw: "sw",
  ne: "se",
  se: "ne",
  sw: "nw"
};

var signsX = {
  overlay: +1,
  selection: +1,
  n: null,
  e: +1,
  s: null,
  w: -1,
  nw: -1,
  ne: +1,
  se: +1,
  sw: -1
};

var signsY = {
  overlay: +1,
  selection: +1,
  n: -1,
  e: null,
  s: +1,
  w: null,
  nw: -1,
  ne: -1,
  se: +1,
  sw: +1
};

function type(t) {
  return {type: t};
}

// Ignore right-click, since that should open the context menu.
function defaultFilter() {
  return !d3Selection.event.ctrlKey && !d3Selection.event.button;
}

function defaultExtent() {
  var svg = this.ownerSVGElement || this;
  if (svg.hasAttribute("viewBox")) {
    svg = svg.viewBox.baseVal;
    return [[svg.x, svg.y], [svg.x + svg.width, svg.y + svg.height]];
  }
  return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];
}

function defaultTouchable() {
  return navigator.maxTouchPoints || ("ontouchstart" in this);
}

// Like d3.local, but with the name “__brush” rather than auto-generated.
function local(node) {
  while (!node.__brush) if (!(node = node.parentNode)) return;
  return node.__brush;
}

function empty(extent) {
  return extent[0][0] === extent[1][0]
      || extent[0][1] === extent[1][1];
}

function brushSelection(node) {
  var state = node.__brush;
  return state ? state.dim.output(state.selection) : null;
}

function brushX() {
  return brush$1(X);
}

function brushY() {
  return brush$1(Y);
}

function brush() {
  return brush$1(XY);
}

function brush$1(dim) {
  var extent = defaultExtent,
      filter = defaultFilter,
      touchable = defaultTouchable,
      keys = true,
      listeners = d3Dispatch.dispatch(brush, "start", "brush", "end"),
      handleSize = 6,
      touchending;

  function brush(group) {
    var overlay = group
        .property("__brush", initialize)
      .selectAll(".overlay")
      .data([type("overlay")]);

    overlay.enter().append("rect")
        .attr("class", "overlay")
        .attr("pointer-events", "all")
        .attr("cursor", cursors.overlay)
      .merge(overlay)
        .each(function() {
          var extent = local(this).extent;
          d3Selection.select(this)
              .attr("x", extent[0][0])
              .attr("y", extent[0][1])
              .attr("width", extent[1][0] - extent[0][0])
              .attr("height", extent[1][1] - extent[0][1]);
        });

    group.selectAll(".selection")
      .data([type("selection")])
      .enter().append("rect")
        .attr("class", "selection")
        .attr("cursor", cursors.selection)
        .attr("fill", "#777")
        .attr("fill-opacity", 0.3)
        .attr("stroke", "#fff")
        .attr("shape-rendering", "crispEdges");

    var handle = group.selectAll(".handle")
      .data(dim.handles, function(d) { return d.type; });

    handle.exit().remove();

    handle.enter().append("rect")
        .attr("class", function(d) { return "handle handle--" + d.type; })
        .attr("cursor", function(d) { return cursors[d.type]; });

    group
        .each(redraw)
        .attr("fill", "none")
        .attr("pointer-events", "all")
        .on("mousedown.brush", started)
      .filter(touchable)
        .on("touchstart.brush", started)
        .on("touchmove.brush", touchmoved)
        .on("touchend.brush touchcancel.brush", touchended)
        .style("touch-action", "none")
        .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }

  brush.move = function(group, selection) {
    if (group.selection) {
      group
          .on("start.brush", function() { emitter(this, arguments).beforestart().start(); })
          .on("interrupt.brush end.brush", function() { emitter(this, arguments).end(); })
          .tween("brush", function() {
            var that = this,
                state = that.__brush,
                emit = emitter(that, arguments),
                selection0 = state.selection,
                selection1 = dim.input(typeof selection === "function" ? selection.apply(this, arguments) : selection, state.extent),
                i = d3Interpolate.interpolate(selection0, selection1);

            function tween(t) {
              state.selection = t === 1 && selection1 === null ? null : i(t);
              redraw.call(that);
              emit.brush();
            }

            return selection0 !== null && selection1 !== null ? tween : tween(1);
          });
    } else {
      group
          .each(function() {
            var that = this,
                args = arguments,
                state = that.__brush,
                selection1 = dim.input(typeof selection === "function" ? selection.apply(that, args) : selection, state.extent),
                emit = emitter(that, args).beforestart();

            d3Transition.interrupt(that);
            state.selection = selection1 === null ? null : selection1;
            redraw.call(that);
            emit.start().brush().end();
          });
    }
  };

  brush.clear = function(group) {
    brush.move(group, null);
  };

  function redraw() {
    var group = d3Selection.select(this),
        selection = local(this).selection;

    if (selection) {
      group.selectAll(".selection")
          .style("display", null)
          .attr("x", selection[0][0])
          .attr("y", selection[0][1])
          .attr("width", selection[1][0] - selection[0][0])
          .attr("height", selection[1][1] - selection[0][1]);

      group.selectAll(".handle")
          .style("display", null)
          .attr("x", function(d) { return d.type[d.type.length - 1] === "e" ? selection[1][0] - handleSize / 2 : selection[0][0] - handleSize / 2; })
          .attr("y", function(d) { return d.type[0] === "s" ? selection[1][1] - handleSize / 2 : selection[0][1] - handleSize / 2; })
          .attr("width", function(d) { return d.type === "n" || d.type === "s" ? selection[1][0] - selection[0][0] + handleSize : handleSize; })
          .attr("height", function(d) { return d.type === "e" || d.type === "w" ? selection[1][1] - selection[0][1] + handleSize : handleSize; });
    }

    else {
      group.selectAll(".selection,.handle")
          .style("display", "none")
          .attr("x", null)
          .attr("y", null)
          .attr("width", null)
          .attr("height", null);
    }
  }

  function emitter(that, args, clean) {
    return (!clean && that.__brush.emitter) || new Emitter(that, args);
  }

  function Emitter(that, args) {
    this.that = that;
    this.args = args;
    this.state = that.__brush;
    this.active = 0;
  }

  Emitter.prototype = {
    beforestart: function() {
      if (++this.active === 1) this.state.emitter = this, this.starting = true;
      return this;
    },
    start: function() {
      if (this.starting) this.starting = false, this.emit("start");
      else this.emit("brush");
      return this;
    },
    brush: function() {
      this.emit("brush");
      return this;
    },
    end: function() {
      if (--this.active === 0) delete this.state.emitter, this.emit("end");
      return this;
    },
    emit: function(type) {
      d3Selection.customEvent(new BrushEvent(brush, type, dim.output(this.state.selection)), listeners.apply, listeners, [type, this.that, this.args]);
    }
  };

  function pointer(target) {
    return d3Selection.clientPoint(target, d3Selection.event.touches ? d3Selection.event.touches[0] : d3Selection.event);
  }

  function started() {
    if (d3Selection.event.touches) { if (d3Selection.event.changedTouches.length < d3Selection.event.touches.length) return noevent(); }
    else if (touchending) return;
    if (!filter.apply(this, arguments)) return;

    var that = this,
        type = d3Selection.event.target.__data__.type,
        mode = (keys && d3Selection.event.metaKey ? type = "overlay" : type) === "selection" ? MODE_DRAG : (keys && d3Selection.event.altKey ? MODE_CENTER : MODE_HANDLE),
        signX = dim === Y ? null : signsX[type],
        signY = dim === X ? null : signsY[type],
        state = local(that),
        extent = state.extent,
        selection = state.selection,
        W = extent[0][0], w0, w1,
        N = extent[0][1], n0, n1,
        E = extent[1][0], e0, e1,
        S = extent[1][1], s0, s1,
        dx = 0,
        dy = 0,
        moving,
        shifting = signX && signY && keys && d3Selection.event.shiftKey,
        lockX,
        lockY,
        point0 = pointer(that),
        point = point0,
        emit = emitter(that, arguments, true).beforestart();

    if (type === "overlay") {
      if (selection) moving = true;
      state.selection = selection = [
        [w0 = dim === Y ? W : point0[0], n0 = dim === X ? N : point0[1]],
        [e0 = dim === Y ? E : w0, s0 = dim === X ? S : n0]
      ];
    } else {
      w0 = selection[0][0];
      n0 = selection[0][1];
      e0 = selection[1][0];
      s0 = selection[1][1];
    }

    w1 = w0;
    n1 = n0;
    e1 = e0;
    s1 = s0;

    var group = d3Selection.select(that)
        .attr("pointer-events", "none");

    var overlay = group.selectAll(".overlay")
        .attr("cursor", cursors[type]);

    if (d3Selection.event.touches) {
      emit.moved = moved;
      emit.ended = ended;
    } else {
      var view = d3Selection.select(d3Selection.event.view)
          .on("mousemove.brush", moved, true)
          .on("mouseup.brush", ended, true);
      if (keys) view
          .on("keydown.brush", keydowned, true)
          .on("keyup.brush", keyupped, true);

      d3Drag.dragDisable(d3Selection.event.view);
    }

    nopropagation();
    d3Transition.interrupt(that);
    redraw.call(that);
    emit.start();

    function moved() {
      var point1 = pointer(that);
      if (shifting && !lockX && !lockY) {
        if (Math.abs(point1[0] - point[0]) > Math.abs(point1[1] - point[1])) lockY = true;
        else lockX = true;
      }
      point = point1;
      moving = true;
      noevent();
      move();
    }

    function move() {
      var t;

      dx = point[0] - point0[0];
      dy = point[1] - point0[1];

      switch (mode) {
        case MODE_SPACE:
        case MODE_DRAG: {
          if (signX) dx = Math.max(W - w0, Math.min(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;
          if (signY) dy = Math.max(N - n0, Math.min(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;
          break;
        }
        case MODE_HANDLE: {
          if (signX < 0) dx = Math.max(W - w0, Math.min(E - w0, dx)), w1 = w0 + dx, e1 = e0;
          else if (signX > 0) dx = Math.max(W - e0, Math.min(E - e0, dx)), w1 = w0, e1 = e0 + dx;
          if (signY < 0) dy = Math.max(N - n0, Math.min(S - n0, dy)), n1 = n0 + dy, s1 = s0;
          else if (signY > 0) dy = Math.max(N - s0, Math.min(S - s0, dy)), n1 = n0, s1 = s0 + dy;
          break;
        }
        case MODE_CENTER: {
          if (signX) w1 = Math.max(W, Math.min(E, w0 - dx * signX)), e1 = Math.max(W, Math.min(E, e0 + dx * signX));
          if (signY) n1 = Math.max(N, Math.min(S, n0 - dy * signY)), s1 = Math.max(N, Math.min(S, s0 + dy * signY));
          break;
        }
      }

      if (e1 < w1) {
        signX *= -1;
        t = w0, w0 = e0, e0 = t;
        t = w1, w1 = e1, e1 = t;
        if (type in flipX) overlay.attr("cursor", cursors[type = flipX[type]]);
      }

      if (s1 < n1) {
        signY *= -1;
        t = n0, n0 = s0, s0 = t;
        t = n1, n1 = s1, s1 = t;
        if (type in flipY) overlay.attr("cursor", cursors[type = flipY[type]]);
      }

      if (state.selection) selection = state.selection; // May be set by brush.move!
      if (lockX) w1 = selection[0][0], e1 = selection[1][0];
      if (lockY) n1 = selection[0][1], s1 = selection[1][1];

      if (selection[0][0] !== w1
          || selection[0][1] !== n1
          || selection[1][0] !== e1
          || selection[1][1] !== s1) {
        state.selection = [[w1, n1], [e1, s1]];
        redraw.call(that);
        emit.brush();
      }
    }

    function ended() {
      nopropagation();
      if (d3Selection.event.touches) {
        if (d3Selection.event.touches.length) return;
        if (touchending) clearTimeout(touchending);
        touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!
      } else {
        d3Drag.dragEnable(d3Selection.event.view, moving);
        view.on("keydown.brush keyup.brush mousemove.brush mouseup.brush", null);
      }
      group.attr("pointer-events", "all");
      overlay.attr("cursor", cursors.overlay);
      if (state.selection) selection = state.selection; // May be set by brush.move (on start)!
      if (empty(selection)) state.selection = null, redraw.call(that);
      emit.end();
    }

    function keydowned() {
      switch (d3Selection.event.keyCode) {
        case 16: { // SHIFT
          shifting = signX && signY;
          break;
        }
        case 18: { // ALT
          if (mode === MODE_HANDLE) {
            if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
            if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
            mode = MODE_CENTER;
            move();
          }
          break;
        }
        case 32: { // SPACE; takes priority over ALT
          if (mode === MODE_HANDLE || mode === MODE_CENTER) {
            if (signX < 0) e0 = e1 - dx; else if (signX > 0) w0 = w1 - dx;
            if (signY < 0) s0 = s1 - dy; else if (signY > 0) n0 = n1 - dy;
            mode = MODE_SPACE;
            overlay.attr("cursor", cursors.selection);
            move();
          }
          break;
        }
        default: return;
      }
      noevent();
    }

    function keyupped() {
      switch (d3Selection.event.keyCode) {
        case 16: { // SHIFT
          if (shifting) {
            lockX = lockY = shifting = false;
            move();
          }
          break;
        }
        case 18: { // ALT
          if (mode === MODE_CENTER) {
            if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;
            if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;
            mode = MODE_HANDLE;
            move();
          }
          break;
        }
        case 32: { // SPACE
          if (mode === MODE_SPACE) {
            if (d3Selection.event.altKey) {
              if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
              if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
              mode = MODE_CENTER;
            } else {
              if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;
              if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;
              mode = MODE_HANDLE;
            }
            overlay.attr("cursor", cursors[type]);
            move();
          }
          break;
        }
        default: return;
      }
      noevent();
    }
  }

  function touchmoved() {
    emitter(this, arguments).moved();
  }

  function touchended() {
    emitter(this, arguments).ended();
  }

  function initialize() {
    var state = this.__brush || {selection: null};
    state.extent = number2(extent.apply(this, arguments));
    state.dim = dim;
    return state;
  }

  brush.extent = function(_) {
    return arguments.length ? (extent = typeof _ === "function" ? _ : constant(number2(_)), brush) : extent;
  };

  brush.filter = function(_) {
    return arguments.length ? (filter = typeof _ === "function" ? _ : constant(!!_), brush) : filter;
  };

  brush.handleSize = function(_) {
    return arguments.length ? (handleSize = +_, brush) : handleSize;
  };

  brush.keyModifiers = function(_) {
    return arguments.length ? (keys = !!_, brush) : keys;
  };

  brush.on = function() {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? brush : value;
  };

  return brush;
}

exports.brush = brush;
exports.brushSelection = brushSelection;
exports.brushX = brushX;
exports.brushY = brushY;

Object.defineProperty(exports, '__esModule', { value: true });

}));

},{"d3-dispatch":14,"d3-drag":15,"d3-interpolate":23,"d3-selection":30,"d3-transition":35}],10:[function(require,module,exports){
// https://d3js.org/d3-chord/ v1.0.6 Copyright 2018 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-array'), require('d3-path')) :
typeof define === 'function' && define.amd ? define(['exports', 'd3-array', 'd3-path'], factory) :
(factory((global.d3 = global.d3 || {}),global.d3,global.d3));
}(this, (function (exports,d3Array,d3Path) { 'use strict';

var cos = Math.cos;
var sin = Math.sin;
var pi = Math.PI;
var halfPi = pi / 2;
var tau = pi * 2;
var max = Math.max;

function compareValue(compare) {
  return function(a, b) {
    return compare(
      a.source.value + a.target.value,
      b.source.value + b.target.value
    );
  };
}

function chord() {
  var padAngle = 0,
      sortGroups = null,
      sortSubgroups = null,
      sortChords = null;

  function chord(matrix) {
    var n = matrix.length,
        groupSums = [],
        groupIndex = d3Array.range(n),
        subgroupIndex = [],
        chords = [],
        groups = chords.groups = new Array(n),
        subgroups = new Array(n * n),
        k,
        x,
        x0,
        dx,
        i,
        j;

    // Compute the sum.
    k = 0, i = -1; while (++i < n) {
      x = 0, j = -1; while (++j < n) {
        x += matrix[i][j];
      }
      groupSums.push(x);
      subgroupIndex.push(d3Array.range(n));
      k += x;
    }

    // Sort groups…
    if (sortGroups) groupIndex.sort(function(a, b) {
      return sortGroups(groupSums[a], groupSums[b]);
    });

    // Sort subgroups…
    if (sortSubgroups) subgroupIndex.forEach(function(d, i) {
      d.sort(function(a, b) {
        return sortSubgroups(matrix[i][a], matrix[i][b]);
      });
    });

    // Convert the sum to scaling factor for [0, 2pi].
    // TODO Allow start and end angle to be specified?
    // TODO Allow padding to be specified as percentage?
    k = max(0, tau - padAngle * n) / k;
    dx = k ? padAngle : tau / n;

    // Compute the start and end angle for each group and subgroup.
    // Note: Opera has a bug reordering object literal properties!
    x = 0, i = -1; while (++i < n) {
      x0 = x, j = -1; while (++j < n) {
        var di = groupIndex[i],
            dj = subgroupIndex[di][j],
            v = matrix[di][dj],
            a0 = x,
            a1 = x += v * k;
        subgroups[dj * n + di] = {
          index: di,
          subindex: dj,
          startAngle: a0,
          endAngle: a1,
          value: v
        };
      }
      groups[di] = {
        index: di,
        startAngle: x0,
        endAngle: x,
        value: groupSums[di]
      };
      x += dx;
    }

    // Generate chords for each (non-empty) subgroup-subgroup link.
    i = -1; while (++i < n) {
      j = i - 1; while (++j < n) {
        var source = subgroups[j * n + i],
            target = subgroups[i * n + j];
        if (source.value || target.value) {
          chords.push(source.value < target.value
              ? {source: target, target: source}
              : {source: source, target: target});
        }
      }
    }

    return sortChords ? chords.sort(sortChords) : chords;
  }

  chord.padAngle = function(_) {
    return arguments.length ? (padAngle = max(0, _), chord) : padAngle;
  };

  chord.sortGroups = function(_) {
    return arguments.length ? (sortGroups = _, chord) : sortGroups;
  };

  chord.sortSubgroups = function(_) {
    return arguments.length ? (sortSubgroups = _, chord) : sortSubgroups;
  };

  chord.sortChords = function(_) {
    return arguments.length ? (_ == null ? sortChords = null : (sortChords = compareValue(_))._ = _, chord) : sortChords && sortChords._;
  };

  return chord;
}

var slice = Array.prototype.slice;

function constant(x) {
  return function() {
    return x;
  };
}

function defaultSource(d) {
  return d.source;
}

function defaultTarget(d) {
  return d.target;
}

function defaultRadius(d) {
  return d.radius;
}

function defaultStartAngle(d) {
  return d.startAngle;
}

function defaultEndAngle(d) {
  return d.endAngle;
}

function ribbon() {
  var source = defaultSource,
      target = defaultTarget,
      radius = defaultRadius,
      startAngle = defaultStartAngle,
      endAngle = defaultEndAngle,
      context = null;

  function ribbon() {
    var buffer,
        argv = slice.call(arguments),
        s = source.apply(this, argv),
        t = target.apply(this, argv),
        sr = +radius.apply(this, (argv[0] = s, argv)),
        sa0 = startAngle.apply(this, argv) - halfPi,
        sa1 = endAngle.apply(this, argv) - halfPi,
        sx0 = sr * cos(sa0),
        sy0 = sr * sin(sa0),
        tr = +radius.apply(this, (argv[0] = t, argv)),
        ta0 = startAngle.apply(this, argv) - halfPi,
        ta1 = endAngle.apply(this, argv) - halfPi;

    if (!context) context = buffer = d3Path.path();

    context.moveTo(sx0, sy0);
    context.arc(0, 0, sr, sa0, sa1);
    if (sa0 !== ta0 || sa1 !== ta1) { // TODO sr !== tr?
      context.quadraticCurveTo(0, 0, tr * cos(ta0), tr * sin(ta0));
      context.arc(0, 0, tr, ta0, ta1);
    }
    context.quadraticCurveTo(0, 0, sx0, sy0);
    context.closePath();

    if (buffer) return context = null, buffer + "" || null;
  }

  ribbon.radius = function(_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : constant(+_), ribbon) : radius;
  };

  ribbon.startAngle = function(_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant(+_), ribbon) : startAngle;
  };

  ribbon.endAngle = function(_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant(+_), ribbon) : endAngle;
  };

  ribbon.source = function(_) {
    return arguments.length ? (source = _, ribbon) : source;
  };

  ribbon.target = function(_) {
    return arguments.length ? (target = _, ribbon) : target;
  };

  ribbon.context = function(_) {
    return arguments.length ? ((context = _ == null ? null : _), ribbon) : context;
  };

  return ribbon;
}

exports.chord = chord;
exports.ribbon = ribbon;

Object.defineProperty(exports, '__esModule', { value: true });

})));

},{"d3-array":7,"d3-path":24}],11:[function(require,module,exports){
// https://d3js.org/d3-collection/ v1.0.7 Copyright 2018 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
typeof define === 'function' && define.amd ? define(['exports'], factory) :
(factory((global.d3 = global.d3 || {})));
}(this, (function (exports) { 'use strict';

var prefix = "$";

function Map() {}

Map.prototype = map.prototype = {
  constructor: Map,
  has: function(key) {
    return (prefix + key) in this;
  },
  get: function(key) {
    return this[prefix + key];
  },
  set: function(key, value) {
    this[prefix + key] = value;
    return this;
  },
  remove: function(key) {
    var property = prefix + key;
    return property in this && delete this[property];
  },
  clear: function() {
    for (var property in this) if (property[0] === prefix) delete this[property];
  },
  keys: function() {
    var keys = [];
    for (var property in this) if (property[0] === prefix) keys.push(property.slice(1));
    return keys;
  },
  values: function() {
    var values = [];
    for (var property in this) if (property[0] === prefix) values.push(this[property]);
    return values;
  },
  entries: function() {
    var entries = [];
    for (var property in this) if (property[0] === prefix) entries.push({key: property.slice(1), value: this[property]});
    return entries;
  },
  size: function() {
    var size = 0;
    for (var property in this) if (property[0] === prefix) ++size;
    return size;
  },
  empty: function() {
    for (var property in this) if (property[0] === prefix) return false;
    return true;
  },
  each: function(f) {
    for (var property in this) if (property[0] === prefix) f(this[property], property.slice(1), this);
  }
};

function map(object, f) {
  var map = new Map;

  // Copy constructor.
  if (object instanceof Map) object.each(function(value, key) { map.set(key, value); });

  // Index array by numeric index or specified key function.
  else if (Array.isArray(object)) {
    var i = -1,
        n = object.length,
        o;

    if (f == null) while (++i < n) map.set(i, object[i]);
    else while (++i < n) map.set(f(o = object[i], i, object), o);
  }

  // Convert object to map.
  else if (object) for (var key in object) map.set(key, object[key]);

  return map;
}

function nest() {
  var keys = [],
      sortKeys = [],
      sortValues,
      rollup,
      nest;

  function apply(array, depth, createResult, setResult) {
    if (depth >= keys.length) {
      if (sortValues != null) array.sort(sortValues);
      return rollup != null ? rollup(array) : array;
    }

    var i = -1,
        n = array.length,
        key = keys[depth++],
        keyValue,
        value,
        valuesByKey = map(),
        values,
        result = createResult();

    while (++i < n) {
      if (values = valuesByKey.get(keyValue = key(value = array[i]) + "")) {
        values.push(value);
      } else {
        valuesByKey.set(keyValue, [value]);
      }
    }

    valuesByKey.each(function(values, key) {
      setResult(result, key, apply(values, depth, createResult, setResult));
    });

    return result;
  }

  function entries(map$$1, depth) {
    if (++depth > keys.length) return map$$1;
    var array, sortKey = sortKeys[depth - 1];
    if (rollup != null && depth >= keys.length) array = map$$1.entries();
    else array = [], map$$1.each(function(v, k) { array.push({key: k, values: entries(v, depth)}); });
    return sortKey != null ? array.sort(function(a, b) { return sortKey(a.key, b.key); }) : array;
  }

  return nest = {
    object: function(array) { return apply(array, 0, createObject, setObject); },
    map: function(array) { return apply(array, 0, createMap, setMap); },
    entries: function(array) { return entries(apply(array, 0, createMap, setMap), 0); },
    key: function(d) { keys.push(d); return nest; },
    sortKeys: function(order) { sortKeys[keys.length - 1] = order; return nest; },
    sortValues: function(order) { sortValues = order; return nest; },
    rollup: function(f) { rollup = f; return nest; }
  };
}

function createObject() {
  return {};
}

function setObject(object, key, value) {
  object[key] = value;
}

function createMap() {
  return map();
}

function setMap(map$$1, key, value) {
  map$$1.set(key, value);
}

function Set() {}

var proto = map.prototype;

Set.prototype = set.prototype = {
  constructor: Set,
  has: proto.has,
  add: function(value) {
    value += "";
    this[prefix + value] = value;
    return this;
  },
  remove: proto.remove,
  clear: proto.clear,
  values: proto.keys,
  size: proto.size,
  empty: proto.empty,
  each: proto.each
};

function set(object, f) {
  var set = new Set;

  // Copy constructor.
  if (object instanceof Set) object.each(function(value) { set.add(value); });

  // Otherwise, assume it’s an array.
  else if (object) {
    var i = -1, n = object.length;
    if (f == null) while (++i < n) set.add(object[i]);
    else while (++i < n) set.add(f(object[i], i, object));
  }

  return set;
}

function keys(map) {
  var keys = [];
  for (var key in map) keys.push(key);
  return keys;
}

function values(map) {
  var values = [];
  for (var key in map) values.push(map[key]);
  return values;
}

function entries(map) {
  var entries = [];
  for (var key in map) entries.push({key: key, value: map[key]});
  return entries;
}

exports.nest = nest;
exports.set = set;
exports.map = map;
exports.keys = keys;
exports.values = values;
exports.entries = entries;

Object.defineProperty(exports, '__esModule', { value: true });

})));

},{}],12:[function(require,module,exports){
// https://d3js.org/d3-color/ v1.3.0 Copyright 2019 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
typeof define === 'function' && define.amd ? define(['exports'], factory) :
(global = global || self, factory(global.d3 = global.d3 || {}));
}(this, function (exports) { 'use strict';

function define(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}

function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition) prototype[key] = definition[key];
  return prototype;
}

function Color() {}

var darker = 0.7;
var brighter = 1 / darker;

var reI = "\\s*([+-]?\\d+)\\s*",
    reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
    reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
    reHex3 = /^#([0-9a-f]{3})$/,
    reHex6 = /^#([0-9a-f]{6})$/,
    reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"),
    reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"),
    reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"),
    reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"),
    reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"),
    reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");

var named = {
  aliceblue: 0xf0f8ff,
  antiquewhite: 0xfaebd7,
  aqua: 0x00ffff,
  aquamarine: 0x7fffd4,
  azure: 0xf0ffff,
  beige: 0xf5f5dc,
  bisque: 0xffe4c4,
  black: 0x000000,
  blanchedalmond: 0xffebcd,
  blue: 0x0000ff,
  blueviolet: 0x8a2be2,
  brown: 0xa52a2a,
  burlywood: 0xdeb887,
  cadetblue: 0x5f9ea0,
  chartreuse: 0x7fff00,
  chocolate: 0xd2691e,
  coral: 0xff7f50,
  cornflowerblue: 0x6495ed,
  cornsilk: 0xfff8dc,
  crimson: 0xdc143c,
  cyan: 0x00ffff,
  darkblue: 0x00008b,
  darkcyan: 0x008b8b,
  darkgoldenrod: 0xb8860b,
  darkgray: 0xa9a9a9,
  darkgreen: 0x006400,
  darkgrey: 0xa9a9a9,
  darkkhaki: 0xbdb76b,
  darkmagenta: 0x8b008b,
  darkolivegreen: 0x556b2f,
  darkorange: 0xff8c00,
  darkorchid: 0x9932cc,
  darkred: 0x8b0000,
  darksalmon: 0xe9967a,
  darkseagreen: 0x8fbc8f,
  darkslateblue: 0x483d8b,
  darkslategray: 0x2f4f4f,
  darkslategrey: 0x2f4f4f,
  darkturquoise: 0x00ced1,
  darkviolet: 0x9400d3,
  deeppink: 0xff1493,
  deepskyblue: 0x00bfff,
  dimgray: 0x696969,
  dimgrey: 0x696969,
  dodgerblue: 0x1e90ff,
  firebrick: 0xb22222,
  floralwhite: 0xfffaf0,
  forestgreen: 0x228b22,
  fuchsia: 0xff00ff,
  gainsboro: 0xdcdcdc,
  ghostwhite: 0xf8f8ff,
  gold: 0xffd700,
  goldenrod: 0xdaa520,
  gray: 0x808080,
  green: 0x008000,
  greenyellow: 0xadff2f,
  grey: 0x808080,
  honeydew: 0xf0fff0,
  hotpink: 0xff69b4,
  indianred: 0xcd5c5c,
  indigo: 0x4b0082,
  ivory: 0xfffff0,
  khaki: 0xf0e68c,
  lavender: 0xe6e6fa,
  lavenderblush: 0xfff0f5,
  lawngreen: 0x7cfc00,
  lemonchiffon: 0xfffacd,
  lightblue: 0xadd8e6,
  lightcoral: 0xf08080,
  lightcyan: 0xe0ffff,
  lightgoldenrodyellow: 0xfafad2,
  lightgray: 0xd3d3d3,
  lightgreen: 0x90ee90,
  lightgrey: 0xd3d3d3,
  lightpink: 0xffb6c1,
  lightsalmon: 0xffa07a,
  lightseagreen: 0x20b2aa,
  lightskyblue: 0x87cefa,
  lightslategray: 0x778899,
  lightslategrey: 0x778899,
  lightsteelblue: 0xb0c4de,
  lightyellow: 0xffffe0,
  lime: 0x00ff00,
  limegreen: 0x32cd32,
  linen: 0xfaf0e6,
  magenta: 0xff00ff,
  maroon: 0x800000,
  mediumaquamarine: 0x66cdaa,
  mediumblue: 0x0000cd,
  mediumorchid: 0xba55d3,
  mediumpurple: 0x9370db,
  mediumseagreen: 0x3cb371,
  mediumslateblue: 0x7b68ee,
  mediumspringgreen: 0x00fa9a,
  mediumturquoise: 0x48d1cc,
  mediumvioletred: 0xc71585,
  midnightblue: 0x191970,
  mintcream: 0xf5fffa,
  mistyrose: 0xffe4e1,
  moccasin: 0xffe4b5,
  navajowhite: 0xffdead,
  navy: 0x000080,
  oldlace: 0xfdf5e6,
  olive: 0x808000,
  olivedrab: 0x6b8e23,
  orange: 0xffa500,
  orangered: 0xff4500,
  orchid: 0xda70d6,
  palegoldenrod: 0xeee8aa,
  palegreen: 0x98fb98,
  paleturquoise: 0xafeeee,
  palevioletred: 0xdb7093,
  papayawhip: 0xffefd5,
  peachpuff: 0xffdab9,
  peru: 0xcd853f,
  pink: 0xffc0cb,
  plum: 0xdda0dd,
  powderblue: 0xb0e0e6,
  purple: 0x800080,
  rebeccapurple: 0x663399,
  red: 0xff0000,
  rosybrown: 0xbc8f8f,
  royalblue: 0x4169e1,
  saddlebrown: 0x8b4513,
  salmon: 0xfa8072,
  sandybrown: 0xf4a460,
  seagreen: 0x2e8b57,
  seashell: 0xfff5ee,
  sienna: 0xa0522d,
  silver: 0xc0c0c0,
  skyblue: 0x87ceeb,
  slateblue: 0x6a5acd,
  slategray: 0x708090,
  slategrey: 0x708090,
  snow: 0xfffafa,
  springgreen: 0x00ff7f,
  steelblue: 0x4682b4,
  tan: 0xd2b48c,
  teal: 0x008080,
  thistle: 0xd8bfd8,
  tomato: 0xff6347,
  turquoise: 0x40e0d0,
  violet: 0xee82ee,
  wheat: 0xf5deb3,
  white: 0xffffff,
  whitesmoke: 0xf5f5f5,
  yellow: 0xffff00,
  yellowgreen: 0x9acd32
};

define(Color, color, {
  copy: function(channels) {
    return Object.assign(new this.constructor, this, channels);
  },
  displayable: function() {
    return this.rgb().displayable();
  },
  hex: color_formatHex, // Deprecated! Use color.formatHex.
  formatHex: color_formatHex,
  formatHsl: color_formatHsl,
  formatRgb: color_formatRgb,
  toString: color_formatRgb
});

function color_formatHex() {
  return this.rgb().formatHex();
}

function color_formatHsl() {
  return hslConvert(this).formatHsl();
}

function color_formatRgb() {
  return this.rgb().formatRgb();
}

function color(format) {
  var m;
  format = (format + "").trim().toLowerCase();
  return (m = reHex3.exec(format)) ? (m = parseInt(m[1], 16), new Rgb((m >> 8 & 0xf) | (m >> 4 & 0x0f0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1)) // #f00
      : (m = reHex6.exec(format)) ? rgbn(parseInt(m[1], 16)) // #ff0000
      : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
      : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
      : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
      : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
      : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
      : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
      : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins
      : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0)
      : null;
}

function rgbn(n) {
  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
}

function rgba(r, g, b, a) {
  if (a <= 0) r = g = b = NaN;
  return new Rgb(r, g, b, a);
}

function rgbConvert(o) {
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Rgb;
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}

function rgb(r, g, b, opacity) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}

function Rgb(r, g, b, opacity) {
  this.r = +r;
  this.g = +g;
  this.b = +b;
  this.opacity = +opacity;
}

define(Rgb, rgb, extend(Color, {
  brighter: function(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  darker: function(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  rgb: function() {
    return this;
  },
  displayable: function() {
    return (-0.5 <= this.r && this.r < 255.5)
        && (-0.5 <= this.g && this.g < 255.5)
        && (-0.5 <= this.b && this.b < 255.5)
        && (0 <= this.opacity && this.opacity <= 1);
  },
  hex: rgb_formatHex, // Deprecated! Use color.formatHex.
  formatHex: rgb_formatHex,
  formatRgb: rgb_formatRgb,
  toString: rgb_formatRgb
}));

function rgb_formatHex() {
  return "#" + hex(this.r) + hex(this.g) + hex(this.b);
}

function rgb_formatRgb() {
  var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
  return (a === 1 ? "rgb(" : "rgba(")
      + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", "
      + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", "
      + Math.max(0, Math.min(255, Math.round(this.b) || 0))
      + (a === 1 ? ")" : ", " + a + ")");
}

function hex(value) {
  value = Math.max(0, Math.min(255, Math.round(value) || 0));
  return (value < 16 ? "0" : "") + value.toString(16);
}

function hsla(h, s, l, a) {
  if (a <= 0) h = s = l = NaN;
  else if (l <= 0 || l >= 1) h = s = NaN;
  else if (s <= 0) h = NaN;
  return new Hsl(h, s, l, a);
}

function hslConvert(o) {
  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Hsl;
  if (o instanceof Hsl) return o;
  o = o.rgb();
  var r = o.r / 255,
      g = o.g / 255,
      b = o.b / 255,
      min = Math.min(r, g, b),
      max = Math.max(r, g, b),
      h = NaN,
      s = max - min,
      l = (max + min) / 2;
  if (s) {
    if (r === max) h = (g - b) / s + (g < b) * 6;
    else if (g === max) h = (b - r) / s + 2;
    else h = (r - g) / s + 4;
    s /= l < 0.5 ? max + min : 2 - max - min;
    h *= 60;
  } else {
    s = l > 0 && l < 1 ? 0 : h;
  }
  return new Hsl(h, s, l, o.opacity);
}

function hsl(h, s, l, opacity) {
  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
}

function Hsl(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}

define(Hsl, hsl, extend(Color, {
  brighter: function(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  darker: function(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  rgb: function() {
    var h = this.h % 360 + (this.h < 0) * 360,
        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
        l = this.l,
        m2 = l + (l < 0.5 ? l : 1 - l) * s,
        m1 = 2 * l - m2;
    return new Rgb(
      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
      hsl2rgb(h, m1, m2),
      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
      this.opacity
    );
  },
  displayable: function() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s))
        && (0 <= this.l && this.l <= 1)
        && (0 <= this.opacity && this.opacity <= 1);
  },
  formatHsl: function() {
    var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
    return (a === 1 ? "hsl(" : "hsla(")
        + (this.h || 0) + ", "
        + (this.s || 0) * 100 + "%, "
        + (this.l || 0) * 100 + "%"
        + (a === 1 ? ")" : ", " + a + ")");
  }
}));

/* From FvD 13.37, CSS Color Module Level 3 */
function hsl2rgb(h, m1, m2) {
  return (h < 60 ? m1 + (m2 - m1) * h / 60
      : h < 180 ? m2
      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60
      : m1) * 255;
}

var deg2rad = Math.PI / 180;
var rad2deg = 180 / Math.PI;

// https://observablehq.com/@mbostock/lab-and-rgb
var K = 18,
    Xn = 0.96422,
    Yn = 1,
    Zn = 0.82521,
    t0 = 4 / 29,
    t1 = 6 / 29,
    t2 = 3 * t1 * t1,
    t3 = t1 * t1 * t1;

function labConvert(o) {
  if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
  if (o instanceof Hcl) return hcl2lab(o);
  if (!(o instanceof Rgb)) o = rgbConvert(o);
  var r = rgb2lrgb(o.r),
      g = rgb2lrgb(o.g),
      b = rgb2lrgb(o.b),
      y = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn), x, z;
  if (r === g && g === b) x = z = y; else {
    x = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn);
    z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn);
  }
  return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
}

function gray(l, opacity) {
  return new Lab(l, 0, 0, opacity == null ? 1 : opacity);
}

function lab(l, a, b, opacity) {
  return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
}

function Lab(l, a, b, opacity) {
  this.l = +l;
  this.a = +a;
  this.b = +b;
  this.opacity = +opacity;
}

define(Lab, lab, extend(Color, {
  brighter: function(k) {
    return new Lab(this.l + K * (k == null ? 1 : k), this.a, this.b, this.opacity);
  },
  darker: function(k) {
    return new Lab(this.l - K * (k == null ? 1 : k), this.a, this.b, this.opacity);
  },
  rgb: function() {
    var y = (this.l + 16) / 116,
        x = isNaN(this.a) ? y : y + this.a / 500,
        z = isNaN(this.b) ? y : y - this.b / 200;
    x = Xn * lab2xyz(x);
    y = Yn * lab2xyz(y);
    z = Zn * lab2xyz(z);
    return new Rgb(
      lrgb2rgb( 3.1338561 * x - 1.6168667 * y - 0.4906146 * z),
      lrgb2rgb(-0.9787684 * x + 1.9161415 * y + 0.0334540 * z),
      lrgb2rgb( 0.0719453 * x - 0.2289914 * y + 1.4052427 * z),
      this.opacity
    );
  }
}));

function xyz2lab(t) {
  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
}

function lab2xyz(t) {
  return t > t1 ? t * t * t : t2 * (t - t0);
}

function lrgb2rgb(x) {
  return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
}

function rgb2lrgb(x) {
  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
}

function hclConvert(o) {
  if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
  if (!(o instanceof Lab)) o = labConvert(o);
  if (o.a === 0 && o.b === 0) return new Hcl(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);
  var h = Math.atan2(o.b, o.a) * rad2deg;
  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
}

function lch(l, c, h, opacity) {
  return arguments.length === 1 ? hclConvert(l) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
}

function hcl(h, c, l, opacity) {
  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
}

function Hcl(h, c, l, opacity) {
  this.h = +h;
  this.c = +c;
  this.l = +l;
  this.opacity = +opacity;
}

function hcl2lab(o) {
  if (isNaN(o.h)) return new Lab(o.l, 0, 0, o.opacity);
  var h = o.h * deg2rad;
  return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
}

define(Hcl, hcl, extend(Color, {
  brighter: function(k) {
    return new Hcl(this.h, this.c, this.l + K * (k == null ? 1 : k), this.opacity);
  },
  darker: function(k) {
    return new Hcl(this.h, this.c, this.l - K * (k == null ? 1 : k), this.opacity);
  },
  rgb: function() {
    return hcl2lab(this).rgb();
  }
}));

var A = -0.14861,
    B = +1.78277,
    C = -0.29227,
    D = -0.90649,
    E = +1.97294,
    ED = E * D,
    EB = E * B,
    BC_DA = B * C - D * A;

function cubehelixConvert(o) {
  if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Rgb)) o = rgbConvert(o);
  var r = o.r / 255,
      g = o.g / 255,
      b = o.b / 255,
      l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),
      bl = b - l,
      k = (E * (g - l) - C * bl) / D,
      s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1
      h = s ? Math.atan2(k, bl) * rad2deg - 120 : NaN;
  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
}

function cubehelix(h, s, l, opacity) {
  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
}

function Cubehelix(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}

define(Cubehelix, cubehelix, extend(Color, {
  brighter: function(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
  },
  darker: function(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
  },
  rgb: function() {
    var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad,
        l = +this.l,
        a = isNaN(this.s) ? 0 : this.s * l * (1 - l),
        cosh = Math.cos(h),
        sinh = Math.sin(h);
    return new Rgb(
      255 * (l + a * (A * cosh + B * sinh)),
      255 * (l + a * (C * cosh + D * sinh)),
      255 * (l + a * (E * cosh)),
      this.opacity
    );
  }
}));

exports.color = color;
exports.cubehelix = cubehelix;
exports.gray = gray;
exports.hcl = hcl;
exports.hsl = hsl;
exports.lab = lab;
exports.lch = lch;
exports.rgb = rgb;

Object.defineProperty(exports, '__esModule', { value: true });

}));

},{}],13:[function(require,module,exports){
// https://d3js.org/d3-contour/ v1.3.2 Copyright 2018 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-array')) :
typeof define === 'function' && define.amd ? define(['exports', 'd3-array'], factory) :
(factory((global.d3 = global.d3 || {}),global.d3));
}(this, (function (exports,d3Array) { 'use strict';

var array = Array.prototype;

var slice = array.slice;

function ascending(a, b) {
  return a - b;
}

function area(ring) {
  var i = 0, n = ring.length, area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];
  while (++i < n) area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];
  return area;
}

function constant(x) {
  return function() {
    return x;
  };
}

function contains(ring, hole) {
  var i = -1, n = hole.length, c;
  while (++i < n) if (c = ringContains(ring, hole[i])) return c;
  return 0;
}

function ringContains(ring, point) {
  var x = point[0], y = point[1], contains = -1;
  for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {
    var pi = ring[i], xi = pi[0], yi = pi[1], pj = ring[j], xj = pj[0], yj = pj[1];
    if (segmentContains(pi, pj, point)) return 0;
    if (((yi > y) !== (yj > y)) && ((x < (xj - xi) * (y - yi) / (yj - yi) + xi))) contains = -contains;
  }
  return contains;
}

function segmentContains(a, b, c) {
  var i; return collinear(a, b, c) && within(a[i = +(a[0] === b[0])], c[i], b[i]);
}

function collinear(a, b, c) {
  return (b[0] - a[0]) * (c[1] - a[1]) === (c[0] - a[0]) * (b[1] - a[1]);
}

function within(p, q, r) {
  return p <= q && q <= r || r <= q && q <= p;
}

function noop() {}

var cases = [
  [],
  [[[1.0, 1.5], [0.5, 1.0]]],
  [[[1.5, 1.0], [1.0, 1.5]]],
  [[[1.5, 1.0], [0.5, 1.0]]],
  [[[1.0, 0.5], [1.5, 1.0]]],
  [[[1.0, 1.5], [0.5, 1.0]], [[1.0, 0.5], [1.5, 1.0]]],
  [[[1.0, 0.5], [1.0, 1.5]]],
  [[[1.0, 0.5], [0.5, 1.0]]],
  [[[0.5, 1.0], [1.0, 0.5]]],
  [[[1.0, 1.5], [1.0, 0.5]]],
  [[[0.5, 1.0], [1.0, 0.5]], [[1.5, 1.0], [1.0, 1.5]]],
  [[[1.5, 1.0], [1.0, 0.5]]],
  [[[0.5, 1.0], [1.5, 1.0]]],
  [[[1.0, 1.5], [1.5, 1.0]]],
  [[[0.5, 1.0], [1.0, 1.5]]],
  []
];

function contours() {
  var dx = 1,
      dy = 1,
      threshold = d3Array.thresholdSturges,
      smooth = smoothLinear;

  function contours(values) {
    var tz = threshold(values);

    // Convert number of thresholds into uniform thresholds.
    if (!Array.isArray(tz)) {
      var domain = d3Array.extent(values), start = domain[0], stop = domain[1];
      tz = d3Array.tickStep(start, stop, tz);
      tz = d3Array.range(Math.floor(start / tz) * tz, Math.floor(stop / tz) * tz, tz);
    } else {
      tz = tz.slice().sort(ascending);
    }

    return tz.map(function(value) {
      return contour(values, value);
    });
  }

  // Accumulate, smooth contour rings, assign holes to exterior rings.
  // Based on https://github.com/mbostock/shapefile/blob/v0.6.2/shp/polygon.js
  function contour(values, value) {
    var polygons = [],
        holes = [];

    isorings(values, value, function(ring) {
      smooth(ring, values, value);
      if (area(ring) > 0) polygons.push([ring]);
      else holes.push(ring);
    });

    holes.forEach(function(hole) {
      for (var i = 0, n = polygons.length, polygon; i < n; ++i) {
        if (contains((polygon = polygons[i])[0], hole) !== -1) {
          polygon.push(hole);
          return;
        }
      }
    });

    return {
      type: "MultiPolygon",
      value: value,
      coordinates: polygons
    };
  }

  // Marching squares with isolines stitched into rings.
  // Based on https://github.com/topojson/topojson-client/blob/v3.0.0/src/stitch.js
  function isorings(values, value, callback) {
    var fragmentByStart = new Array,
        fragmentByEnd = new Array,
        x, y, t0, t1, t2, t3;

    // Special case for the first row (y = -1, t2 = t3 = 0).
    x = y = -1;
    t1 = values[0] >= value;
    cases[t1 << 1].forEach(stitch);
    while (++x < dx - 1) {
      t0 = t1, t1 = values[x + 1] >= value;
      cases[t0 | t1 << 1].forEach(stitch);
    }
    cases[t1 << 0].forEach(stitch);

    // General case for the intermediate rows.
    while (++y < dy - 1) {
      x = -1;
      t1 = values[y * dx + dx] >= value;
      t2 = values[y * dx] >= value;
      cases[t1 << 1 | t2 << 2].forEach(stitch);
      while (++x < dx - 1) {
        t0 = t1, t1 = values[y * dx + dx + x + 1] >= value;
        t3 = t2, t2 = values[y * dx + x + 1] >= value;
        cases[t0 | t1 << 1 | t2 << 2 | t3 << 3].forEach(stitch);
      }
      cases[t1 | t2 << 3].forEach(stitch);
    }

    // Special case for the last row (y = dy - 1, t0 = t1 = 0).
    x = -1;
    t2 = values[y * dx] >= value;
    cases[t2 << 2].forEach(stitch);
    while (++x < dx - 1) {
      t3 = t2, t2 = values[y * dx + x + 1] >= value;
      cases[t2 << 2 | t3 << 3].forEach(stitch);
    }
    cases[t2 << 3].forEach(stitch);

    function stitch(line) {
      var start = [line[0][0] + x, line[0][1] + y],
          end = [line[1][0] + x, line[1][1] + y],
          startIndex = index(start),
          endIndex = index(end),
          f, g;
      if (f = fragmentByEnd[startIndex]) {
        if (g = fragmentByStart[endIndex]) {
          delete fragmentByEnd[f.end];
          delete fragmentByStart[g.start];
          if (f === g) {
            f.ring.push(end);
            callback(f.ring);
          } else {
            fragmentByStart[f.start] = fragmentByEnd[g.end] = {start: f.start, end: g.end, ring: f.ring.concat(g.ring)};
          }
        } else {
          delete fragmentByEnd[f.end];
          f.ring.push(end);
          fragmentByEnd[f.end = endIndex] = f;
        }
      } else if (f = fragmentByStart[endIndex]) {
        if (g = fragmentByEnd[startIndex]) {
          delete fragmentByStart[f.start];
          delete fragmentByEnd[g.end];
          if (f === g) {
            f.ring.push(end);
            callback(f.ring);
          } else {
            fragmentByStart[g.start] = fragmentByEnd[f.end] = {start: g.start, end: f.end, ring: g.ring.concat(f.ring)};
          }
        } else {
          delete fragmentByStart[f.start];
          f.ring.unshift(start);
          fragmentByStart[f.start = startIndex] = f;
        }
      } else {
        fragmentByStart[startIndex] = fragmentByEnd[endIndex] = {start: startIndex, end: endIndex, ring: [start, end]};
      }
    }
  }

  function index(point) {
    return point[0] * 2 + point[1] * (dx + 1) * 4;
  }

  function smoothLinear(ring, values, value) {
    ring.forEach(function(point) {
      var x = point[0],
          y = point[1],
          xt = x | 0,
          yt = y | 0,
          v0,
          v1 = values[yt * dx + xt];
      if (x > 0 && x < dx && xt === x) {
        v0 = values[yt * dx + xt - 1];
        point[0] = x + (value - v0) / (v1 - v0) - 0.5;
      }
      if (y > 0 && y < dy && yt === y) {
        v0 = values[(yt - 1) * dx + xt];
        point[1] = y + (value - v0) / (v1 - v0) - 0.5;
      }
    });
  }

  contours.contour = contour;

  contours.size = function(_) {
    if (!arguments.length) return [dx, dy];
    var _0 = Math.ceil(_[0]), _1 = Math.ceil(_[1]);
    if (!(_0 > 0) || !(_1 > 0)) throw new Error("invalid size");
    return dx = _0, dy = _1, contours;
  };

  contours.thresholds = function(_) {
    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), contours) : threshold;
  };

  contours.smooth = function(_) {
    return arguments.length ? (smooth = _ ? smoothLinear : noop, contours) : smooth === smoothLinear;
  };

  return contours;
}

// TODO Optimize edge cases.
// TODO Optimize index calculation.
// TODO Optimize arguments.
function blurX(source, target, r) {
  var n = source.width,
      m = source.height,
      w = (r << 1) + 1;
  for (var j = 0; j < m; ++j) {
    for (var i = 0, sr = 0; i < n + r; ++i) {
      if (i < n) {
        sr += source.data[i + j * n];
      }
      if (i >= r) {
        if (i >= w) {
          sr -= source.data[i - w + j * n];
        }
        target.data[i - r + j * n] = sr / Math.min(i + 1, n - 1 + w - i, w);
      }
    }
  }
}

// TODO Optimize edge cases.
// TODO Optimize index calculation.
// TODO Optimize arguments.
function blurY(source, target, r) {
  var n = source.width,
      m = source.height,
      w = (r << 1) + 1;
  for (var i = 0; i < n; ++i) {
    for (var j = 0, sr = 0; j < m + r; ++j) {
      if (j < m) {
        sr += source.data[i + j * n];
      }
      if (j >= r) {
        if (j >= w) {
          sr -= source.data[i + (j - w) * n];
        }
        target.data[i + (j - r) * n] = sr / Math.min(j + 1, m - 1 + w - j, w);
      }
    }
  }
}

function defaultX(d) {
  return d[0];
}

function defaultY(d) {
  return d[1];
}

function defaultWeight() {
  return 1;
}

function density() {
  var x = defaultX,
      y = defaultY,
      weight = defaultWeight,
      dx = 960,
      dy = 500,
      r = 20, // blur radius
      k = 2, // log2(grid cell size)
      o = r * 3, // grid offset, to pad for blur
      n = (dx + o * 2) >> k, // grid width
      m = (dy + o * 2) >> k, // grid height
      threshold = constant(20);

  function density(data) {
    var values0 = new Float32Array(n * m),
        values1 = new Float32Array(n * m);

    data.forEach(function(d, i, data) {
      var xi = (+x(d, i, data) + o) >> k,
          yi = (+y(d, i, data) + o) >> k,
          wi = +weight(d, i, data);
      if (xi >= 0 && xi < n && yi >= 0 && yi < m) {
        values0[xi + yi * n] += wi;
      }
    });

    // TODO Optimize.
    blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);
    blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);
    blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);
    blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);
    blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);
    blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);

    var tz = threshold(values0);

    // Convert number of thresholds into uniform thresholds.
    if (!Array.isArray(tz)) {
      var stop = d3Array.max(values0);
      tz = d3Array.tickStep(0, stop, tz);
      tz = d3Array.range(0, Math.floor(stop / tz) * tz, tz);
      tz.shift();
    }

    return contours()
        .thresholds(tz)
        .size([n, m])
      (values0)
        .map(transform);
  }

  function transform(geometry) {
    geometry.value *= Math.pow(2, -2 * k); // Density in points per square pixel.
    geometry.coordinates.forEach(transformPolygon);
    return geometry;
  }

  function transformPolygon(coordinates) {
    coordinates.forEach(transformRing);
  }

  function transformRing(coordinates) {
    coordinates.forEach(transformPoint);
  }

  // TODO Optimize.
  function transformPoint(coordinates) {
    coordinates[0] = coordinates[0] * Math.pow(2, k) - o;
    coordinates[1] = coordinates[1] * Math.pow(2, k) - o;
  }

  function resize() {
    o = r * 3;
    n = (dx + o * 2) >> k;
    m = (dy + o * 2) >> k;
    return density;
  }

  density.x = function(_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : constant(+_), density) : x;
  };

  density.y = function(_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : constant(+_), density) : y;
  };

  density.weight = function(_) {
    return arguments.length ? (weight = typeof _ === "function" ? _ : constant(+_), density) : weight;
  };

  density.size = function(_) {
    if (!arguments.length) return [dx, dy];
    var _0 = Math.ceil(_[0]), _1 = Math.ceil(_[1]);
    if (!(_0 >= 0) && !(_0 >= 0)) throw new Error("invalid size");
    return dx = _0, dy = _1, resize();
  };

  density.cellSize = function(_) {
    if (!arguments.length) return 1 << k;
    if (!((_ = +_) >= 1)) throw new Error("invalid cell size");
    return k = Math.floor(Math.log(_) / Math.LN2), resize();
  };

  density.thresholds = function(_) {
    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), density) : threshold;
  };

  density.bandwidth = function(_) {
    if (!arguments.length) return Math.sqrt(r * (r + 1));
    if (!((_ = +_) >= 0)) throw new Error("invalid bandwidth");
    return r = Math.round((Math.sqrt(4 * _ * _ + 1) - 1) / 2), resize();
  };

  return density;
}

exports.contours = contours;
exports.contourDensity = density;

Object.defineProperty(exports, '__esModule', { value: true });

})));

},{"d3-array":7}],14:[function(require,module,exports){
// https://d3js.org/d3-dispatch/ v1.0.5 Copyright 2018 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
typeof define === 'function' && define.amd ? define(['exports'], factory) :
(factory((global.d3 = global.d3 || {})));
}(this, (function (exports) { 'use strict';

var noop = {value: function() {}};

function dispatch() {
  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
    if (!(t = arguments[i] + "") || (t in _)) throw new Error("illegal type: " + t);
    _[t] = [];
  }
  return new Dispatch(_);
}

function Dispatch(_) {
  this._ = _;
}

function parseTypenames(typenames, types) {
  return typenames.trim().split(/^|\s+/).map(function(t) {
    var name = "", i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
    return {type: t, name: name};
  });
}

Dispatch.prototype = dispatch.prototype = {
  constructor: Dispatch,
  on: function(typename, callback) {
    var _ = this._,
        T = parseTypenames(typename + "", _),
        t,
        i = -1,
        n = T.length;

    // If no callback was specified, return the callback of the given type and name.
    if (arguments.length < 2) {
      while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;
      return;
    }

    // If a type was specified, set the callback for the given type and name.
    // Otherwise, if a null callback was specified, remove callbacks of the given name.
    if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);
    while (++i < n) {
      if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);
      else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);
    }

    return this;
  },
  copy: function() {
    var copy = {}, _ = this._;
    for (var t in _) copy[t] = _[t].slice();
    return new Dispatch(copy);
  },
  call: function(type, that) {
    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];
    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
    for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
  },
  apply: function(type, that, args) {
    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
  }
};

function get(type, name) {
  for (var i = 0, n = type.length, c; i < n; ++i) {
    if ((c = type[i]).name === name) {
      return c.value;
    }
  }
}

function set(type, name, callback) {
  for (var i = 0, n = type.length; i < n; ++i) {
    if (type[i].name === name) {
      type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));
      break;
    }
  }
  if (callback != null) type.push({name: name, value: callback});
  return type;
}

exports.dispatch = dispatch;

Object.defineProperty(exports, '__esModule', { value: true });

})));

},{}],15:[function(require,module,exports){
// https://d3js.org/d3-drag/ v1.2.4 Copyright 2019 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-dispatch'), require('d3-selection')) :
typeof define === 'function' && define.amd ? define(['exports', 'd3-dispatch', 'd3-selection'], factory) :
(global = global || self, factory(global.d3 = global.d3 || {}, global.d3, global.d3));
}(this, function (exports, d3Dispatch, d3Selection) { 'use strict';

function nopropagation() {
  d3Selection.event.stopImmediatePropagation();
}

function noevent() {
  d3Selection.event.preventDefault();
  d3Selection.event.stopImmediatePropagation();
}

function nodrag(view) {
  var root = view.document.documentElement,
      selection = d3Selection.select(view).on("dragstart.drag", noevent, true);
  if ("onselectstart" in root) {
    selection.on("selectstart.drag", noevent, true);
  } else {
    root.__noselect = root.style.MozUserSelect;
    root.style.MozUserSelect = "none";
  }
}

function yesdrag(view, noclick) {
  var root = view.document.documentElement,
      selection = d3Selection.select(view).on("dragstart.drag", null);
  if (noclick) {
    selection.on("click.drag", noevent, true);
    setTimeout(function() { selection.on("click.drag", null); }, 0);
  }
  if ("onselectstart" in root) {
    selection.on("selectstart.drag", null);
  } else {
    root.style.MozUserSelect = root.__noselect;
    delete root.__noselect;
  }
}

function constant(x) {
  return function() {
    return x;
  };
}

function DragEvent(target, type, subject, id, active, x, y, dx, dy, dispatch) {
  this.target = target;
  this.type = type;
  this.subject = subject;
  this.identifier = id;
  this.active = active;
  this.x = x;
  this.y = y;
  this.dx = dx;
  this.dy = dy;
  this._ = dispatch;
}

DragEvent.prototype.on = function() {
  var value = this._.on.apply(this._, arguments);
  return value === this._ ? this : value;
};

// Ignore right-click, since that should open the context menu.
function defaultFilter() {
  return !d3Selection.event.ctrlKey && !d3Selection.event.button;
}

function defaultContainer() {
  return this.parentNode;
}

function defaultSubject(d) {
  return d == null ? {x: d3Selection.event.x, y: d3Selection.event.y} : d;
}

function defaultTouchable() {
  return navigator.maxTouchPoints || ("ontouchstart" in this);
}

function drag() {
  var filter = defaultFilter,
      container = defaultContainer,
      subject = defaultSubject,
      touchable = defaultTouchable,
      gestures = {},
      listeners = d3Dispatch.dispatch("start", "drag", "end"),
      active = 0,
      mousedownx,
      mousedowny,
      mousemoving,
      touchending,
      clickDistance2 = 0;

  function drag(selection) {
    selection
        .on("mousedown.drag", mousedowned)
      .filter(touchable)
        .on("touchstart.drag", touchstarted)
        .on("touchmove.drag", touchmoved)
        .on("touchend.drag touchcancel.drag", touchended)
        .style("touch-action", "none")
        .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }

  function mousedowned() {
    if (touchending || !filter.apply(this, arguments)) return;
    var gesture = beforestart("mouse", container.apply(this, arguments), d3Selection.mouse, this, arguments);
    if (!gesture) return;
    d3Selection.select(d3Selection.event.view).on("mousemove.drag", mousemoved, true).on("mouseup.drag", mouseupped, true);
    nodrag(d3Selection.event.view);
    nopropagation();
    mousemoving = false;
    mousedownx = d3Selection.event.clientX;
    mousedowny = d3Selection.event.clientY;
    gesture("start");
  }

  function mousemoved() {
    noevent();
    if (!mousemoving) {
      var dx = d3Selection.event.clientX - mousedownx, dy = d3Selection.event.clientY - mousedowny;
      mousemoving = dx * dx + dy * dy > clickDistance2;
    }
    gestures.mouse("drag");
  }

  function mouseupped() {
    d3Selection.select(d3Selection.event.view).on("mousemove.drag mouseup.drag", null);
    yesdrag(d3Selection.event.view, mousemoving);
    noevent();
    gestures.mouse("end");
  }

  function touchstarted() {
    if (!filter.apply(this, arguments)) return;
    var touches = d3Selection.event.changedTouches,
        c = container.apply(this, arguments),
        n = touches.length, i, gesture;

    for (i = 0; i < n; ++i) {
      if (gesture = beforestart(touches[i].identifier, c, d3Selection.touch, this, arguments)) {
        nopropagation();
        gesture("start");
      }
    }
  }

  function touchmoved() {
    var touches = d3Selection.event.changedTouches,
        n = touches.length, i, gesture;

    for (i = 0; i < n; ++i) {
      if (gesture = gestures[touches[i].identifier]) {
        noevent();
        gesture("drag");
      }
    }
  }

  function touchended() {
    var touches = d3Selection.event.changedTouches,
        n = touches.length, i, gesture;

    if (touchending) clearTimeout(touchending);
    touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!
    for (i = 0; i < n; ++i) {
      if (gesture = gestures[touches[i].identifier]) {
        nopropagation();
        gesture("end");
      }
    }
  }

  function beforestart(id, container, point, that, args) {
    var p = point(container, id), s, dx, dy,
        sublisteners = listeners.copy();

    if (!d3Selection.customEvent(new DragEvent(drag, "beforestart", s, id, active, p[0], p[1], 0, 0, sublisteners), function() {
      if ((d3Selection.event.subject = s = subject.apply(that, args)) == null) return false;
      dx = s.x - p[0] || 0;
      dy = s.y - p[1] || 0;
      return true;
    })) return;

    return function gesture(type) {
      var p0 = p, n;
      switch (type) {
        case "start": gestures[id] = gesture, n = active++; break;
        case "end": delete gestures[id], --active; // nobreak
        case "drag": p = point(container, id), n = active; break;
      }
      d3Selection.customEvent(new DragEvent(drag, type, s, id, n, p[0] + dx, p[1] + dy, p[0] - p0[0], p[1] - p0[1], sublisteners), sublisteners.apply, sublisteners, [type, that, args]);
    };
  }

  drag.filter = function(_) {
    return arguments.length ? (filter = typeof _ === "function" ? _ : constant(!!_), drag) : filter;
  };

  drag.container = function(_) {
    return arguments.length ? (container = typeof _ === "function" ? _ : constant(_), drag) : container;
  };

  drag.subject = function(_) {
    return arguments.length ? (subject = typeof _ === "function" ? _ : constant(_), drag) : subject;
  };

  drag.touchable = function(_) {
    return arguments.length ? (touchable = typeof _ === "function" ? _ : constant(!!_), drag) : touchable;
  };

  drag.on = function() {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? drag : value;
  };

  drag.clickDistance = function(_) {
    return arguments.length ? (clickDistance2 = (_ = +_) * _, drag) : Math.sqrt(clickDistance2);
  };

  return drag;
}

exports.drag = drag;
exports.dragDisable = nodrag;
exports.dragEnable = yesdrag;

Object.defineProperty(exports, '__esModule', { value: true });

}));

},{"d3-dispatch":14,"d3-selection":30}],16:[function(require,module,exports){
// https://d3js.org/d3-dsv/ v1.1.1 Copyright 2019 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
typeof define === 'function' && define.amd ? define(['exports'], factory) :
(factory((global.d3 = global.d3 || {})));
}(this, (function (exports) { 'use strict';

var EOL = {},
    EOF = {},
    QUOTE = 34,
    NEWLINE = 10,
    RETURN = 13;

function objectConverter(columns) {
  return new Function("d", "return {" + columns.map(function(name, i) {
    return JSON.stringify(name) + ": d[" + i + "]";
  }).join(",") + "}");
}

function customConverter(columns, f) {
  var object = objectConverter(columns);
  return function(row, i) {
    return f(object(row), i, columns);
  };
}

// Compute unique columns in order of discovery.
function inferColumns(rows) {
  var columnSet = Object.create(null),
      columns = [];

  rows.forEach(function(row) {
    for (var column in row) {
      if (!(column in columnSet)) {
        columns.push(columnSet[column] = column);
      }
    }
  });

  return columns;
}

function pad(value, width) {
  var s = value + "", length = s.length;
  return length < width ? new Array(width - length + 1).join(0) + s : s;
}

function formatYear(year) {
  return year < 0 ? "-" + pad(-year, 6)
    : year > 9999 ? "+" + pad(year, 6)
    : pad(year, 4);
}

function formatDate(date) {
  var hours = date.getUTCHours(),
      minutes = date.getUTCMinutes(),
      seconds = date.getUTCSeconds(),
      milliseconds = date.getUTCMilliseconds();
  return isNaN(date) ? "Invalid Date"
      : formatYear(date.getUTCFullYear(), 4) + "-" + pad(date.getUTCMonth() + 1, 2) + "-" + pad(date.getUTCDate(), 2)
      + (milliseconds ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + ":" + pad(seconds, 2) + "." + pad(milliseconds, 3) + "Z"
      : seconds ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + ":" + pad(seconds, 2) + "Z"
      : minutes || hours ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + "Z"
      : "");
}

function dsv(delimiter) {
  var reFormat = new RegExp("[\"" + delimiter + "\n\r]"),
      DELIMITER = delimiter.charCodeAt(0);

  function parse(text, f) {
    var convert, columns, rows = parseRows(text, function(row, i) {
      if (convert) return convert(row, i - 1);
      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);
    });
    rows.columns = columns || [];
    return rows;
  }

  function parseRows(text, f) {
    var rows = [], // output rows
        N = text.length,
        I = 0, // current character index
        n = 0, // current line number
        t, // current token
        eof = N <= 0, // current token followed by EOF?
        eol = false; // current token followed by EOL?

    // Strip the trailing newline.
    if (text.charCodeAt(N - 1) === NEWLINE) --N;
    if (text.charCodeAt(N - 1) === RETURN) --N;

    function token() {
      if (eof) return EOF;
      if (eol) return eol = false, EOL;

      // Unescape quotes.
      var i, j = I, c;
      if (text.charCodeAt(j) === QUOTE) {
        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);
        if ((i = I) >= N) eof = true;
        else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;
        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }
        return text.slice(j + 1, i - 1).replace(/""/g, "\"");
      }

      // Find next delimiter or newline.
      while (I < N) {
        if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;
        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }
        else if (c !== DELIMITER) continue;
        return text.slice(j, i);
      }

      // Return last token before EOF.
      return eof = true, text.slice(j, N);
    }

    while ((t = token()) !== EOF) {
      var row = [];
      while (t !== EOL && t !== EOF) row.push(t), t = token();
      if (f && (row = f(row, n++)) == null) continue;
      rows.push(row);
    }

    return rows;
  }

  function preformatBody(rows, columns) {
    return rows.map(function(row) {
      return columns.map(function(column) {
        return formatValue(row[column]);
      }).join(delimiter);
    });
  }

  function format(rows, columns) {
    if (columns == null) columns = inferColumns(rows);
    return [columns.map(formatValue).join(delimiter)].concat(preformatBody(rows, columns)).join("\n");
  }

  function formatBody(rows, columns) {
    if (columns == null) columns = inferColumns(rows);
    return preformatBody(rows, columns).join("\n");
  }

  function formatRows(rows) {
    return rows.map(formatRow).join("\n");
  }

  function formatRow(row) {
    return row.map(formatValue).join(delimiter);
  }

  function formatValue(value) {
    return value == null ? ""
        : value instanceof Date ? formatDate(value)
        : reFormat.test(value += "") ? "\"" + value.replace(/"/g, "\"\"") + "\""
        : value;
  }

  return {
    parse: parse,
    parseRows: parseRows,
    format: format,
    formatBody: formatBody,
    formatRows: formatRows
  };
}

var csv = dsv(",");

var csvParse = csv.parse;
var csvParseRows = csv.parseRows;
var csvFormat = csv.format;
var csvFormatBody = csv.formatBody;
var csvFormatRows = csv.formatRows;

var tsv = dsv("\t");

var tsvParse = tsv.parse;
var tsvParseRows = tsv.parseRows;
var tsvFormat = tsv.format;
var tsvFormatBody = tsv.formatBody;
var tsvFormatRows = tsv.formatRows;

function autoType(object) {
  for (var key in object) {
    var value = object[key].trim(), number;
    if (!value) value = null;
    else if (value === "true") value = true;
    else if (value === "false") value = false;
    else if (value === "NaN") value = NaN;
    else if (!isNaN(number = +value)) value = number;
    else if (/^([-+]\d{2})?\d{4}(-\d{2}(-\d{2})?)?(T\d{2}:\d{2}(:\d{2}(\.\d{3})?)?(Z|[-+]\d{2}:\d{2})?)?$/.test(value)) value = new Date(value);
    else continue;
    object[key] = value;
  }
  return object;
}

exports.dsvFormat = dsv;
exports.csvParse = csvParse;
exports.csvParseRows = csvParseRows;
exports.csvFormat = csvFormat;
exports.csvFormatBody = csvFormatBody;
exports.csvFormatRows = csvFormatRows;
exports.tsvParse = tsvParse;
exports.tsvParseRows = tsvParseRows;
exports.tsvFormat = tsvFormat;
exports.tsvFormatBody = tsvFormatBody;
exports.tsvFormatRows = tsvFormatRows;
exports.autoType = autoType;

Object.defineProperty(exports, '__esModule', { value: true });

})));

},{}],17:[function(require,module,exports){
// https://d3js.org/d3-ease/ v1.0.5 Copyright 2018 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
typeof define === 'function' && define.amd ? define(['exports'], factory) :
(factory((global.d3 = global.d3 || {})));
}(this, (function (exports) { 'use strict';

function linear(t) {
  return +t;
}

function quadIn(t) {
  return t * t;
}

function quadOut(t) {
  return t * (2 - t);
}

function quadInOut(t) {
  return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;
}

function cubicIn(t) {
  return t * t * t;
}

function cubicOut(t) {
  return --t * t * t + 1;
}

function cubicInOut(t) {
  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
}

var exponent = 3;

var polyIn = (function custom(e) {
  e = +e;

  function polyIn(t) {
    return Math.pow(t, e);
  }

  polyIn.exponent = custom;

  return polyIn;
})(exponent);

var polyOut = (function custom(e) {
  e = +e;

  function polyOut(t) {
    return 1 - Math.pow(1 - t, e);
  }

  polyOut.exponent = custom;

  return polyOut;
})(exponent);

var polyInOut = (function custom(e) {
  e = +e;

  function polyInOut(t) {
    return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;
  }

  polyInOut.exponent = custom;

  return polyInOut;
})(exponent);

var pi = Math.PI,
    halfPi = pi / 2;

function sinIn(t) {
  return 1 - Math.cos(t * halfPi);
}

function sinOut(t) {
  return Math.sin(t * halfPi);
}

function sinInOut(t) {
  return (1 - Math.cos(pi * t)) / 2;
}

function expIn(t) {
  return Math.pow(2, 10 * t - 10);
}

function expOut(t) {
  return 1 - Math.pow(2, -10 * t);
}

function expInOut(t) {
  return ((t *= 2) <= 1 ? Math.pow(2, 10 * t - 10) : 2 - Math.pow(2, 10 - 10 * t)) / 2;
}

function circleIn(t) {
  return 1 - Math.sqrt(1 - t * t);
}

function circleOut(t) {
  return Math.sqrt(1 - --t * t);
}

function circleInOut(t) {
  return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;
}

var b1 = 4 / 11,
    b2 = 6 / 11,
    b3 = 8 / 11,
    b4 = 3 / 4,
    b5 = 9 / 11,
    b6 = 10 / 11,
    b7 = 15 / 16,
    b8 = 21 / 22,
    b9 = 63 / 64,
    b0 = 1 / b1 / b1;

function bounceIn(t) {
  return 1 - bounceOut(1 - t);
}

function bounceOut(t) {
  return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;
}

function bounceInOut(t) {
  return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;
}

var overshoot = 1.70158;

var backIn = (function custom(s) {
  s = +s;

  function backIn(t) {
    return t * t * ((s + 1) * t - s);
  }

  backIn.overshoot = custom;

  return backIn;
})(overshoot);

var backOut = (function custom(s) {
  s = +s;

  function backOut(t) {
    return --t * t * ((s + 1) * t + s) + 1;
  }

  backOut.overshoot = custom;

  return backOut;
})(overshoot);

var backInOut = (function custom(s) {
  s = +s;

  function backInOut(t) {
    return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;
  }

  backInOut.overshoot = custom;

  return backInOut;
})(overshoot);

var tau = 2 * Math.PI,
    amplitude = 1,
    period = 0.3;

var elasticIn = (function custom(a, p) {
  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

  function elasticIn(t) {
    return a * Math.pow(2, 10 * --t) * Math.sin((s - t) / p);
  }

  elasticIn.amplitude = function(a) { return custom(a, p * tau); };
  elasticIn.period = function(p) { return custom(a, p); };

  return elasticIn;
})(amplitude, period);

var elasticOut = (function custom(a, p) {
  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

  function elasticOut(t) {
    return 1 - a * Math.pow(2, -10 * (t = +t)) * Math.sin((t + s) / p);
  }

  elasticOut.amplitude = function(a) { return custom(a, p * tau); };
  elasticOut.period = function(p) { return custom(a, p); };

  return elasticOut;
})(amplitude, period);

var elasticInOut = (function custom(a, p) {
  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

  function elasticInOut(t) {
    return ((t = t * 2 - 1) < 0
        ? a * Math.pow(2, 10 * t) * Math.sin((s - t) / p)
        : 2 - a * Math.pow(2, -10 * t) * Math.sin((s + t) / p)) / 2;
  }

  elasticInOut.amplitude = function(a) { return custom(a, p * tau); };
  elasticInOut.period = function(p) { return custom(a, p); };

  return elasticInOut;
})(amplitude, period);

exports.easeLinear = linear;
exports.easeQuad = quadInOut;
exports.easeQuadIn = quadIn;
exports.easeQuadOut = quadOut;
exports.easeQuadInOut = quadInOut;
exports.easeCubic = cubicInOut;
exports.easeCubicIn = cubicIn;
exports.easeCubicOut = cubicOut;
exports.easeCubicInOut = cubicInOut;
exports.easePoly = polyInOut;
exports.easePolyIn = polyIn;
exports.easePolyOut = polyOut;
exports.easePolyInOut = polyInOut;
exports.easeSin = sinInOut;
exports.easeSinIn = sinIn;
exports.easeSinOut = sinOut;
exports.easeSinInOut = sinInOut;
exports.easeExp = expInOut;
exports.easeExpIn = expIn;
exports.easeExpOut = expOut;
exports.easeExpInOut = expInOut;
exports.easeCircle = circleInOut;
exports.easeCircleIn = circleIn;
exports.easeCircleOut = circleOut;
exports.easeCircleInOut = circleInOut;
exports.easeBounce = bounceOut;
exports.easeBounceIn = bounceIn;
exports.easeBounceOut = bounceOut;
exports.easeBounceInOut = bounceInOut;
exports.easeBack = backInOut;
exports.easeBackIn = backIn;
exports.easeBackOut = backOut;
exports.easeBackInOut = backInOut;
exports.easeElastic = elasticOut;
exports.easeElasticIn = elasticIn;
exports.easeElasticOut = elasticOut;
exports.easeElasticInOut = elasticInOut;

Object.defineProperty(exports, '__esModule', { value: true });

})));

},{}],18:[function(require,module,exports){
// https://d3js.org/d3-fetch/ v1.1.2 Copyright 2018 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-dsv')) :
typeof define === 'function' && define.amd ? define(['exports', 'd3-dsv'], factory) :
(factory((global.d3 = global.d3 || {}),global.d3));
}(this, (function (exports,d3Dsv) { 'use strict';

function responseBlob(response) {
  if (!response.ok) throw new Error(response.status + " " + response.statusText);
  return response.blob();
}

function blob(input, init) {
  return fetch(input, init).then(responseBlob);
}

function responseArrayBuffer(response) {
  if (!response.ok) throw new Error(response.status + " " + response.statusText);
  return response.arrayBuffer();
}

function buffer(input, init) {
  return fetch(input, init).then(responseArrayBuffer);
}

function responseText(response) {
  if (!response.ok) throw new Error(response.status + " " + response.statusText);
  return response.text();
}

function text(input, init) {
  return fetch(input, init).then(responseText);
}

function dsvParse(parse) {
  return function(input, init, row) {
    if (arguments.length === 2 && typeof init === "function") row = init, init = undefined;
    return text(input, init).then(function(response) {
      return parse(response, row);
    });
  };
}

function dsv(delimiter, input, init, row) {
  if (arguments.length === 3 && typeof init === "function") row = init, init = undefined;
  var format = d3Dsv.dsvFormat(delimiter);
  return text(input, init).then(function(response) {
    return format.parse(response, row);
  });
}

var csv = dsvParse(d3Dsv.csvParse);
var tsv = dsvParse(d3Dsv.tsvParse);

function image(input, init) {
  return new Promise(function(resolve, reject) {
    var image = new Image;
    for (var key in init) image[key] = init[key];
    image.onerror = reject;
    image.onload = function() { resolve(image); };
    image.src = input;
  });
}

function responseJson(response) {
  if (!response.ok) throw new Error(response.status + " " + response.statusText);
  return response.json();
}

function json(input, init) {
  return fetch(input, init).then(responseJson);
}

function parser(type) {
  return function(input, init)  {
    return text(input, init).then(function(text$$1) {
      return (new DOMParser).parseFromString(text$$1, type);
    });
  };
}

var xml = parser("application/xml");

var html = parser("text/html");

var svg = parser("image/svg+xml");

exports.blob = blob;
exports.buffer = buffer;
exports.dsv = dsv;
exports.csv = csv;
exports.tsv = tsv;
exports.image = image;
exports.json = json;
exports.text = text;
exports.xml = xml;
exports.html = html;
exports.svg = svg;

Object.defineProperty(exports, '__esModule', { value: true });

})));

},{"d3-dsv":16}],19:[function(require,module,exports){
// https://d3js.org/d3-force/ v1.2.1 Copyright 2019 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-quadtree'), require('d3-collection'), require('d3-dispatch'), require('d3-timer')) :
typeof define === 'function' && define.amd ? define(['exports', 'd3-quadtree', 'd3-collection', 'd3-dispatch', 'd3-timer'], factory) :
(factory((global.d3 = global.d3 || {}),global.d3,global.d3,global.d3,global.d3));
}(this, (function (exports,d3Quadtree,d3Collection,d3Dispatch,d3Timer) { 'use strict';

function center(x, y) {
  var nodes;

  if (x == null) x = 0;
  if (y == null) y = 0;

  function force() {
    var i,
        n = nodes.length,
        node,
        sx = 0,
        sy = 0;

    for (i = 0; i < n; ++i) {
      node = nodes[i], sx += node.x, sy += node.y;
    }

    for (sx = sx / n - x, sy = sy / n - y, i = 0; i < n; ++i) {
      node = nodes[i], node.x -= sx, node.y -= sy;
    }
  }

  force.initialize = function(_) {
    nodes = _;
  };

  force.x = function(_) {
    return arguments.length ? (x = +_, force) : x;
  };

  force.y = function(_) {
    return arguments.length ? (y = +_, force) : y;
  };

  return force;
}

function constant(x) {
  return function() {
    return x;
  };
}

function jiggle() {
  return (Math.random() - 0.5) * 1e-6;
}

function x(d) {
  return d.x + d.vx;
}

function y(d) {
  return d.y + d.vy;
}

function collide(radius) {
  var nodes,
      radii,
      strength = 1,
      iterations = 1;

  if (typeof radius !== "function") radius = constant(radius == null ? 1 : +radius);

  function force() {
    var i, n = nodes.length,
        tree,
        node,
        xi,
        yi,
        ri,
        ri2;

    for (var k = 0; k < iterations; ++k) {
      tree = d3Quadtree.quadtree(nodes, x, y).visitAfter(prepare);
      for (i = 0; i < n; ++i) {
        node = nodes[i];
        ri = radii[node.index], ri2 = ri * ri;
        xi = node.x + node.vx;
        yi = node.y + node.vy;
        tree.visit(apply);
      }
    }

    function apply(quad, x0, y0, x1, y1) {
      var data = quad.data, rj = quad.r, r = ri + rj;
      if (data) {
        if (data.index > node.index) {
          var x = xi - data.x - data.vx,
              y = yi - data.y - data.vy,
              l = x * x + y * y;
          if (l < r * r) {
            if (x === 0) x = jiggle(), l += x * x;
            if (y === 0) y = jiggle(), l += y * y;
            l = (r - (l = Math.sqrt(l))) / l * strength;
            node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));
            node.vy += (y *= l) * r;
            data.vx -= x * (r = 1 - r);
            data.vy -= y * r;
          }
        }
        return;
      }
      return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;
    }
  }

  function prepare(quad) {
    if (quad.data) return quad.r = radii[quad.data.index];
    for (var i = quad.r = 0; i < 4; ++i) {
      if (quad[i] && quad[i].r > quad.r) {
        quad.r = quad[i].r;
      }
    }
  }

  function initialize() {
    if (!nodes) return;
    var i, n = nodes.length, node;
    radii = new Array(n);
    for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);
  }

  force.initialize = function(_) {
    nodes = _;
    initialize();
  };

  force.iterations = function(_) {
    return arguments.length ? (iterations = +_, force) : iterations;
  };

  force.strength = function(_) {
    return arguments.length ? (strength = +_, force) : strength;
  };

  force.radius = function(_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : constant(+_), initialize(), force) : radius;
  };

  return force;
}

function index(d) {
  return d.index;
}

function find(nodeById, nodeId) {
  var node = nodeById.get(nodeId);
  if (!node) throw new Error("missing: " + nodeId);
  return node;
}

function link(links) {
  var id = index,
      strength = defaultStrength,
      strengths,
      distance = constant(30),
      distances,
      nodes,
      count,
      bias,
      iterations = 1;

  if (links == null) links = [];

  function defaultStrength(link) {
    return 1 / Math.min(count[link.source.index], count[link.target.index]);
  }

  function force(alpha) {
    for (var k = 0, n = links.length; k < iterations; ++k) {
      for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {
        link = links[i], source = link.source, target = link.target;
        x = target.x + target.vx - source.x - source.vx || jiggle();
        y = target.y + target.vy - source.y - source.vy || jiggle();
        l = Math.sqrt(x * x + y * y);
        l = (l - distances[i]) / l * alpha * strengths[i];
        x *= l, y *= l;
        target.vx -= x * (b = bias[i]);
        target.vy -= y * b;
        source.vx += x * (b = 1 - b);
        source.vy += y * b;
      }
    }
  }

  function initialize() {
    if (!nodes) return;

    var i,
        n = nodes.length,
        m = links.length,
        nodeById = d3Collection.map(nodes, id),
        link;

    for (i = 0, count = new Array(n); i < m; ++i) {
      link = links[i], link.index = i;
      if (typeof link.source !== "object") link.source = find(nodeById, link.source);
      if (typeof link.target !== "object") link.target = find(nodeById, link.target);
      count[link.source.index] = (count[link.source.index] || 0) + 1;
      count[link.target.index] = (count[link.target.index] || 0) + 1;
    }

    for (i = 0, bias = new Array(m); i < m; ++i) {
      link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);
    }

    strengths = new Array(m), initializeStrength();
    distances = new Array(m), initializeDistance();
  }

  function initializeStrength() {
    if (!nodes) return;

    for (var i = 0, n = links.length; i < n; ++i) {
      strengths[i] = +strength(links[i], i, links);
    }
  }

  function initializeDistance() {
    if (!nodes) return;

    for (var i = 0, n = links.length; i < n; ++i) {
      distances[i] = +distance(links[i], i, links);
    }
  }

  force.initialize = function(_) {
    nodes = _;
    initialize();
  };

  force.links = function(_) {
    return arguments.length ? (links = _, initialize(), force) : links;
  };

  force.id = function(_) {
    return arguments.length ? (id = _, force) : id;
  };

  force.iterations = function(_) {
    return arguments.length ? (iterations = +_, force) : iterations;
  };

  force.strength = function(_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : constant(+_), initializeStrength(), force) : strength;
  };

  force.distance = function(_) {
    return arguments.length ? (distance = typeof _ === "function" ? _ : constant(+_), initializeDistance(), force) : distance;
  };

  return force;
}

function x$1(d) {
  return d.x;
}

function y$1(d) {
  return d.y;
}

var initialRadius = 10,
    initialAngle = Math.PI * (3 - Math.sqrt(5));

function simulation(nodes) {
  var simulation,
      alpha = 1,
      alphaMin = 0.001,
      alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),
      alphaTarget = 0,
      velocityDecay = 0.6,
      forces = d3Collection.map(),
      stepper = d3Timer.timer(step),
      event = d3Dispatch.dispatch("tick", "end");

  if (nodes == null) nodes = [];

  function step() {
    tick();
    event.call("tick", simulation);
    if (alpha < alphaMin) {
      stepper.stop();
      event.call("end", simulation);
    }
  }

  function tick(iterations) {
    var i, n = nodes.length, node;

    if (iterations === undefined) iterations = 1;

    for (var k = 0; k < iterations; ++k) {
      alpha += (alphaTarget - alpha) * alphaDecay;

      forces.each(function (force) {
        force(alpha);
      });

      for (i = 0; i < n; ++i) {
        node = nodes[i];
        if (node.fx == null) node.x += node.vx *= velocityDecay;
        else node.x = node.fx, node.vx = 0;
        if (node.fy == null) node.y += node.vy *= velocityDecay;
        else node.y = node.fy, node.vy = 0;
      }
    }

    return simulation;
  }

  function initializeNodes() {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
      node = nodes[i], node.index = i;
      if (node.fx != null) node.x = node.fx;
      if (node.fy != null) node.y = node.fy;
      if (isNaN(node.x) || isNaN(node.y)) {
        var radius = initialRadius * Math.sqrt(i), angle = i * initialAngle;
        node.x = radius * Math.cos(angle);
        node.y = radius * Math.sin(angle);
      }
      if (isNaN(node.vx) || isNaN(node.vy)) {
        node.vx = node.vy = 0;
      }
    }
  }

  function initializeForce(force) {
    if (force.initialize) force.initialize(nodes);
    return force;
  }

  initializeNodes();

  return simulation = {
    tick: tick,

    restart: function() {
      return stepper.restart(step), simulation;
    },

    stop: function() {
      return stepper.stop(), simulation;
    },

    nodes: function(_) {
      return arguments.length ? (nodes = _, initializeNodes(), forces.each(initializeForce), simulation) : nodes;
    },

    alpha: function(_) {
      return arguments.length ? (alpha = +_, simulation) : alpha;
    },

    alphaMin: function(_) {
      return arguments.length ? (alphaMin = +_, simulation) : alphaMin;
    },

    alphaDecay: function(_) {
      return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;
    },

    alphaTarget: function(_) {
      return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;
    },

    velocityDecay: function(_) {
      return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;
    },

    force: function(name, _) {
      return arguments.length > 1 ? ((_ == null ? forces.remove(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);
    },

    find: function(x, y, radius) {
      var i = 0,
          n = nodes.length,
          dx,
          dy,
          d2,
          node,
          closest;

      if (radius == null) radius = Infinity;
      else radius *= radius;

      for (i = 0; i < n; ++i) {
        node = nodes[i];
        dx = x - node.x;
        dy = y - node.y;
        d2 = dx * dx + dy * dy;
        if (d2 < radius) closest = node, radius = d2;
      }

      return closest;
    },

    on: function(name, _) {
      return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);
    }
  };
}

function manyBody() {
  var nodes,
      node,
      alpha,
      strength = constant(-30),
      strengths,
      distanceMin2 = 1,
      distanceMax2 = Infinity,
      theta2 = 0.81;

  function force(_) {
    var i, n = nodes.length, tree = d3Quadtree.quadtree(nodes, x$1, y$1).visitAfter(accumulate);
    for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);
  }

  function initialize() {
    if (!nodes) return;
    var i, n = nodes.length, node;
    strengths = new Array(n);
    for (i = 0; i < n; ++i) node = nodes[i], strengths[node.index] = +strength(node, i, nodes);
  }

  function accumulate(quad) {
    var strength = 0, q, c, weight = 0, x, y, i;

    // For internal nodes, accumulate forces from child quadrants.
    if (quad.length) {
      for (x = y = i = 0; i < 4; ++i) {
        if ((q = quad[i]) && (c = Math.abs(q.value))) {
          strength += q.value, weight += c, x += c * q.x, y += c * q.y;
        }
      }
      quad.x = x / weight;
      quad.y = y / weight;
    }

    // For leaf nodes, accumulate forces from coincident quadrants.
    else {
      q = quad;
      q.x = q.data.x;
      q.y = q.data.y;
      do strength += strengths[q.data.index];
      while (q = q.next);
    }

    quad.value = strength;
  }

  function apply(quad, x1, _, x2) {
    if (!quad.value) return true;

    var x = quad.x - node.x,
        y = quad.y - node.y,
        w = x2 - x1,
        l = x * x + y * y;

    // Apply the Barnes-Hut approximation if possible.
    // Limit forces for very close nodes; randomize direction if coincident.
    if (w * w / theta2 < l) {
      if (l < distanceMax2) {
        if (x === 0) x = jiggle(), l += x * x;
        if (y === 0) y = jiggle(), l += y * y;
        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
        node.vx += x * quad.value * alpha / l;
        node.vy += y * quad.value * alpha / l;
      }
      return true;
    }

    // Otherwise, process points directly.
    else if (quad.length || l >= distanceMax2) return;

    // Limit forces for very close nodes; randomize direction if coincident.
    if (quad.data !== node || quad.next) {
      if (x === 0) x = jiggle(), l += x * x;
      if (y === 0) y = jiggle(), l += y * y;
      if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
    }

    do if (quad.data !== node) {
      w = strengths[quad.data.index] * alpha / l;
      node.vx += x * w;
      node.vy += y * w;
    } while (quad = quad.next);
  }

  force.initialize = function(_) {
    nodes = _;
    initialize();
  };

  force.strength = function(_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : constant(+_), initialize(), force) : strength;
  };

  force.distanceMin = function(_) {
    return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);
  };

  force.distanceMax = function(_) {
    return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);
  };

  force.theta = function(_) {
    return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);
  };

  return force;
}

function radial(radius, x, y) {
  var nodes,
      strength = constant(0.1),
      strengths,
      radiuses;

  if (typeof radius !== "function") radius = constant(+radius);
  if (x == null) x = 0;
  if (y == null) y = 0;

  function force(alpha) {
    for (var i = 0, n = nodes.length; i < n; ++i) {
      var node = nodes[i],
          dx = node.x - x || 1e-6,
          dy = node.y - y || 1e-6,
          r = Math.sqrt(dx * dx + dy * dy),
          k = (radiuses[i] - r) * strengths[i] * alpha / r;
      node.vx += dx * k;
      node.vy += dy * k;
    }
  }

  function initialize() {
    if (!nodes) return;
    var i, n = nodes.length;
    strengths = new Array(n);
    radiuses = new Array(n);
    for (i = 0; i < n; ++i) {
      radiuses[i] = +radius(nodes[i], i, nodes);
      strengths[i] = isNaN(radiuses[i]) ? 0 : +strength(nodes[i], i, nodes);
    }
  }

  force.initialize = function(_) {
    nodes = _, initialize();
  };

  force.strength = function(_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : constant(+_), initialize(), force) : strength;
  };

  force.radius = function(_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : constant(+_), initialize(), force) : radius;
  };

  force.x = function(_) {
    return arguments.length ? (x = +_, force) : x;
  };

  force.y = function(_) {
    return arguments.length ? (y = +_, force) : y;
  };

  return force;
}

function x$2(x) {
  var strength = constant(0.1),
      nodes,
      strengths,
      xz;

  if (typeof x !== "function") x = constant(x == null ? 0 : +x);

  function force(alpha) {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
      node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;
    }
  }

  function initialize() {
    if (!nodes) return;
    var i, n = nodes.length;
    strengths = new Array(n);
    xz = new Array(n);
    for (i = 0; i < n; ++i) {
      strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
    }
  }

  force.initialize = function(_) {
    nodes = _;
    initialize();
  };

  force.strength = function(_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : constant(+_), initialize(), force) : strength;
  };

  force.x = function(_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : constant(+_), initialize(), force) : x;
  };

  return force;
}

function y$2(y) {
  var strength = constant(0.1),
      nodes,
      strengths,
      yz;

  if (typeof y !== "function") y = constant(y == null ? 0 : +y);

  function force(alpha) {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
      node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;
    }
  }

  function initialize() {
    if (!nodes) return;
    var i, n = nodes.length;
    strengths = new Array(n);
    yz = new Array(n);
    for (i = 0; i < n; ++i) {
      strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
    }
  }

  force.initialize = function(_) {
    nodes = _;
    initialize();
  };

  force.strength = function(_) {
    return arguments.length ? (strength = typeof _ === "function" ? _ : constant(+_), initialize(), force) : strength;
  };

  force.y = function(_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : constant(+_), initialize(), force) : y;
  };

  return force;
}

exports.forceCenter = center;
exports.forceCollide = collide;
exports.forceLink = link;
exports.forceManyBody = manyBody;
exports.forceRadial = radial;
exports.forceSimulation = simulation;
exports.forceX = x$2;
exports.forceY = y$2;

Object.defineProperty(exports, '__esModule', { value: true });

})));

},{"d3-collection":11,"d3-dispatch":14,"d3-quadtree":26,"d3-timer":34}],20:[function(require,module,exports){
// https://d3js.org/d3-format/ v1.3.2 Copyright 2018 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
typeof define === 'function' && define.amd ? define(['exports'], factory) :
(factory((global.d3 = global.d3 || {})));
}(this, (function (exports) { 'use strict';

// Computes the decimal coefficient and exponent of the specified number x with
// significant digits p, where x is positive and p is in [1, 21] or undefined.
// For example, formatDecimal(1.23) returns ["123", 0].
function formatDecimal(x, p) {
  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
  var i, coefficient = x.slice(0, i);

  // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
  // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x.slice(i + 1)
  ];
}

function exponent(x) {
  return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;
}

function formatGroup(grouping, thousands) {
  return function(value, width) {
    var i = value.length,
        t = [],
        j = 0,
        g = grouping[0],
        length = 0;

    while (i > 0 && g > 0) {
      if (length + g + 1 > width) g = Math.max(1, width - length);
      t.push(value.substring(i -= g, i + g));
      if ((length += g + 1) > width) break;
      g = grouping[j = (j + 1) % grouping.length];
    }

    return t.reverse().join(thousands);
  };
}

function formatNumerals(numerals) {
  return function(value) {
    return value.replace(/[0-9]/g, function(i) {
      return numerals[+i];
    });
  };
}

// [[fill]align][sign][symbol][0][width][,][.precision][~][type]
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;

function formatSpecifier(specifier) {
  return new FormatSpecifier(specifier);
}

formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

function FormatSpecifier(specifier) {
  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
  var match;
  this.fill = match[1] || " ";
  this.align = match[2] || ">";
  this.sign = match[3] || "-";
  this.symbol = match[4] || "";
  this.zero = !!match[5];
  this.width = match[6] && +match[6];
  this.comma = !!match[7];
  this.precision = match[8] && +match[8].slice(1);
  this.trim = !!match[9];
  this.type = match[10] || "";
}

FormatSpecifier.prototype.toString = function() {
  return this.fill
      + this.align
      + this.sign
      + this.symbol
      + (this.zero ? "0" : "")
      + (this.width == null ? "" : Math.max(1, this.width | 0))
      + (this.comma ? "," : "")
      + (this.precision == null ? "" : "." + Math.max(0, this.precision | 0))
      + (this.trim ? "~" : "")
      + this.type;
};

// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
function formatTrim(s) {
  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
    switch (s[i]) {
      case ".": i0 = i1 = i; break;
      case "0": if (i0 === 0) i0 = i; i1 = i; break;
      default: if (i0 > 0) { if (!+s[i]) break out; i0 = 0; } break;
    }
  }
  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
}

var prefixExponent;

function formatPrefixAuto(x, p) {
  var d = formatDecimal(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1],
      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
      n = coefficient.length;
  return i === n ? coefficient
      : i > n ? coefficient + new Array(i - n + 1).join("0")
      : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i)
      : "0." + new Array(1 - i).join("0") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!
}

function formatRounded(x, p) {
  var d = formatDecimal(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient
      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1)
      : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}

var formatTypes = {
  "%": function(x, p) { return (x * 100).toFixed(p); },
  "b": function(x) { return Math.round(x).toString(2); },
  "c": function(x) { return x + ""; },
  "d": function(x) { return Math.round(x).toString(10); },
  "e": function(x, p) { return x.toExponential(p); },
  "f": function(x, p) { return x.toFixed(p); },
  "g": function(x, p) { return x.toPrecision(p); },
  "o": function(x) { return Math.round(x).toString(8); },
  "p": function(x, p) { return formatRounded(x * 100, p); },
  "r": formatRounded,
  "s": formatPrefixAuto,
  "X": function(x) { return Math.round(x).toString(16).toUpperCase(); },
  "x": function(x) { return Math.round(x).toString(16); }
};

function identity(x) {
  return x;
}

var prefixes = ["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];

function formatLocale(locale) {
  var group = locale.grouping && locale.thousands ? formatGroup(locale.grouping, locale.thousands) : identity,
      currency = locale.currency,
      decimal = locale.decimal,
      numerals = locale.numerals ? formatNumerals(locale.numerals) : identity,
      percent = locale.percent || "%";

  function newFormat(specifier) {
    specifier = formatSpecifier(specifier);

    var fill = specifier.fill,
        align = specifier.align,
        sign = specifier.sign,
        symbol = specifier.symbol,
        zero = specifier.zero,
        width = specifier.width,
        comma = specifier.comma,
        precision = specifier.precision,
        trim = specifier.trim,
        type = specifier.type;

    // The "n" type is an alias for ",g".
    if (type === "n") comma = true, type = "g";

    // The "" type, and any invalid type, is an alias for ".12~g".
    else if (!formatTypes[type]) precision == null && (precision = 12), trim = true, type = "g";

    // If zero fill is specified, padding goes after sign and before digits.
    if (zero || (fill === "0" && align === "=")) zero = true, fill = "0", align = "=";

    // Compute the prefix and suffix.
    // For SI-prefix, the suffix is lazily computed.
    var prefix = symbol === "$" ? currency[0] : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
        suffix = symbol === "$" ? currency[1] : /[%p]/.test(type) ? percent : "";

    // What format function should we use?
    // Is this an integer type?
    // Can this type generate exponential notation?
    var formatType = formatTypes[type],
        maybeSuffix = /[defgprs%]/.test(type);

    // Set the default precision if not specified,
    // or clamp the specified precision to the supported range.
    // For significant precision, it must be in [1, 21].
    // For fixed precision, it must be in [0, 20].
    precision = precision == null ? 6
        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))
        : Math.max(0, Math.min(20, precision));

    function format(value) {
      var valuePrefix = prefix,
          valueSuffix = suffix,
          i, n, c;

      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;

        // Perform the initial formatting.
        var valueNegative = value < 0;
        value = formatType(Math.abs(value), precision);

        // Trim insignificant zeros.
        if (trim) value = formatTrim(value);

        // If a negative value rounds to zero during formatting, treat as positive.
        if (valueNegative && +value === 0) valueNegative = false;

        // Compute the prefix and suffix.
        valuePrefix = (valueNegative ? (sign === "(" ? sign : "-") : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
        valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");

        // Break the formatted value into the integer “value” part that can be
        // grouped, and fractional or exponential “suffix” part that is not.
        if (maybeSuffix) {
          i = -1, n = value.length;
          while (++i < n) {
            if (c = value.charCodeAt(i), 48 > c || c > 57) {
              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
              value = value.slice(0, i);
              break;
            }
          }
        }
      }

      // If the fill character is not "0", grouping is applied before padding.
      if (comma && !zero) value = group(value, Infinity);

      // Compute the padding.
      var length = valuePrefix.length + value.length + valueSuffix.length,
          padding = length < width ? new Array(width - length + 1).join(fill) : "";

      // If the fill character is "0", grouping is applied after padding.
      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";

      // Reconstruct the final output based on the desired alignment.
      switch (align) {
        case "<": value = valuePrefix + value + valueSuffix + padding; break;
        case "=": value = valuePrefix + padding + value + valueSuffix; break;
        case "^": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;
        default: value = padding + valuePrefix + value + valueSuffix; break;
      }

      return numerals(value);
    }

    format.toString = function() {
      return specifier + "";
    };

    return format;
  }

  function formatPrefix(specifier, value) {
    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),
        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,
        k = Math.pow(10, -e),
        prefix = prefixes[8 + e / 3];
    return function(value) {
      return f(k * value) + prefix;
    };
  }

  return {
    format: newFormat,
    formatPrefix: formatPrefix
  };
}

var locale;

defaultLocale({
  decimal: ".",
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});

function defaultLocale(definition) {
  locale = formatLocale(definition);
  exports.format = locale.format;
  exports.formatPrefix = locale.formatPrefix;
  return locale;
}

function precisionFixed(step) {
  return Math.max(0, -exponent(Math.abs(step)));
}

function precisionPrefix(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));
}

function precisionRound(step, max) {
  step = Math.abs(step), max = Math.abs(max) - step;
  return Math.max(0, exponent(max) - exponent(step)) + 1;
}

exports.formatDefaultLocale = defaultLocale;
exports.formatLocale = formatLocale;
exports.formatSpecifier = formatSpecifier;
exports.precisionFixed = precisionFixed;
exports.precisionPrefix = precisionPrefix;
exports.precisionRound = precisionRound;

Object.defineProperty(exports, '__esModule', { value: true });

})));

},{}],21:[function(require,module,exports){
// https://d3js.org/d3-geo/ v1.11.6 Copyright 2019 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-array')) :
typeof define === 'function' && define.amd ? define(['exports', 'd3-array'], factory) :
(factory((global.d3 = global.d3 || {}),global.d3));
}(this, (function (exports,d3Array) { 'use strict';

// Adds floating point numbers with twice the normal precision.
// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and
// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)
// 305–363 (1997).
// Code adapted from GeographicLib by Charles F. F. Karney,
// http://geographiclib.sourceforge.net/

function adder() {
  return new Adder;
}

function Adder() {
  this.reset();
}

Adder.prototype = {
  constructor: Adder,
  reset: function() {
    this.s = // rounded value
    this.t = 0; // exact error
  },
  add: function(y) {
    add(temp, y, this.t);
    add(this, temp.s, this.s);
    if (this.s) this.t += temp.t;
    else this.s = temp.t;
  },
  valueOf: function() {
    return this.s;
  }
};

var temp = new Adder;

function add(adder, a, b) {
  var x = adder.s = a + b,
      bv = x - a,
      av = x - bv;
  adder.t = (a - av) + (b - bv);
}

var epsilon = 1e-6;
var epsilon2 = 1e-12;
var pi = Math.PI;
var halfPi = pi / 2;
var quarterPi = pi / 4;
var tau = pi * 2;

var degrees = 180 / pi;
var radians = pi / 180;

var abs = Math.abs;
var atan = Math.atan;
var atan2 = Math.atan2;
var cos = Math.cos;
var ceil = Math.ceil;
var exp = Math.exp;
var log = Math.log;
var pow = Math.pow;
var sin = Math.sin;
var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };
var sqrt = Math.sqrt;
var tan = Math.tan;

function acos(x) {
  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
}

function asin(x) {
  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);
}

function haversin(x) {
  return (x = sin(x / 2)) * x;
}

function noop() {}

function streamGeometry(geometry, stream) {
  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
    streamGeometryType[geometry.type](geometry, stream);
  }
}

var streamObjectType = {
  Feature: function(object, stream) {
    streamGeometry(object.geometry, stream);
  },
  FeatureCollection: function(object, stream) {
    var features = object.features, i = -1, n = features.length;
    while (++i < n) streamGeometry(features[i].geometry, stream);
  }
};

var streamGeometryType = {
  Sphere: function(object, stream) {
    stream.sphere();
  },
  Point: function(object, stream) {
    object = object.coordinates;
    stream.point(object[0], object[1], object[2]);
  },
  MultiPoint: function(object, stream) {
    var coordinates = object.coordinates, i = -1, n = coordinates.length;
    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);
  },
  LineString: function(object, stream) {
    streamLine(object.coordinates, stream, 0);
  },
  MultiLineString: function(object, stream) {
    var coordinates = object.coordinates, i = -1, n = coordinates.length;
    while (++i < n) streamLine(coordinates[i], stream, 0);
  },
  Polygon: function(object, stream) {
    streamPolygon(object.coordinates, stream);
  },
  MultiPolygon: function(object, stream) {
    var coordinates = object.coordinates, i = -1, n = coordinates.length;
    while (++i < n) streamPolygon(coordinates[i], stream);
  },
  GeometryCollection: function(object, stream) {
    var geometries = object.geometries, i = -1, n = geometries.length;
    while (++i < n) streamGeometry(geometries[i], stream);
  }
};

function streamLine(coordinates, stream, closed) {
  var i = -1, n = coordinates.length - closed, coordinate;
  stream.lineStart();
  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
  stream.lineEnd();
}

function streamPolygon(coordinates, stream) {
  var i = -1, n = coordinates.length;
  stream.polygonStart();
  while (++i < n) streamLine(coordinates[i], stream, 1);
  stream.polygonEnd();
}

function geoStream(object, stream) {
  if (object && streamObjectType.hasOwnProperty(object.type)) {
    streamObjectType[object.type](object, stream);
  } else {
    streamGeometry(object, stream);
  }
}

var areaRingSum = adder();

var areaSum = adder(),
    lambda00,
    phi00,
    lambda0,
    cosPhi0,
    sinPhi0;

var areaStream = {
  point: noop,
  lineStart: noop,
  lineEnd: noop,
  polygonStart: function() {
    areaRingSum.reset();
    areaStream.lineStart = areaRingStart;
    areaStream.lineEnd = areaRingEnd;
  },
  polygonEnd: function() {
    var areaRing = +areaRingSum;
    areaSum.add(areaRing < 0 ? tau + areaRing : areaRing);
    this.lineStart = this.lineEnd = this.point = noop;
  },
  sphere: function() {
    areaSum.add(tau);
  }
};

function areaRingStart() {
  areaStream.point = areaPointFirst;
}

function areaRingEnd() {
  areaPoint(lambda00, phi00);
}

function areaPointFirst(lambda, phi) {
  areaStream.point = areaPoint;
  lambda00 = lambda, phi00 = phi;
  lambda *= radians, phi *= radians;
  lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);
}

function areaPoint(lambda, phi) {
  lambda *= radians, phi *= radians;
  phi = phi / 2 + quarterPi; // half the angular distance from south pole

  // Spherical excess E for a spherical triangle with vertices: south pole,
  // previous point, current point.  Uses a formula derived from Cagnoli’s
  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).
  var dLambda = lambda - lambda0,
      sdLambda = dLambda >= 0 ? 1 : -1,
      adLambda = sdLambda * dLambda,
      cosPhi = cos(phi),
      sinPhi = sin(phi),
      k = sinPhi0 * sinPhi,
      u = cosPhi0 * cosPhi + k * cos(adLambda),
      v = k * sdLambda * sin(adLambda);
  areaRingSum.add(atan2(v, u));

  // Advance the previous points.
  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;
}

function area(object) {
  areaSum.reset();
  geoStream(object, areaStream);
  return areaSum * 2;
}

function spherical(cartesian) {
  return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];
}

function cartesian(spherical) {
  var lambda = spherical[0], phi = spherical[1], cosPhi = cos(phi);
  return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];
}

function cartesianDot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}

function cartesianCross(a, b) {
  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
}

// TODO return a
function cartesianAddInPlace(a, b) {
  a[0] += b[0], a[1] += b[1], a[2] += b[2];
}

function cartesianScale(vector, k) {
  return [vector[0] * k, vector[1] * k, vector[2] * k];
}

// TODO return d
function cartesianNormalizeInPlace(d) {
  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
  d[0] /= l, d[1] /= l, d[2] /= l;
}

var lambda0$1, phi0, lambda1, phi1, // bounds
    lambda2, // previous lambda-coordinate
    lambda00$1, phi00$1, // first point
    p0, // previous 3D point
    deltaSum = adder(),
    ranges,
    range;

var boundsStream = {
  point: boundsPoint,
  lineStart: boundsLineStart,
  lineEnd: boundsLineEnd,
  polygonStart: function() {
    boundsStream.point = boundsRingPoint;
    boundsStream.lineStart = boundsRingStart;
    boundsStream.lineEnd = boundsRingEnd;
    deltaSum.reset();
    areaStream.polygonStart();
  },
  polygonEnd: function() {
    areaStream.polygonEnd();
    boundsStream.point = boundsPoint;
    boundsStream.lineStart = boundsLineStart;
    boundsStream.lineEnd = boundsLineEnd;
    if (areaRingSum < 0) lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);
    else if (deltaSum > epsilon) phi1 = 90;
    else if (deltaSum < -epsilon) phi0 = -90;
    range[0] = lambda0$1, range[1] = lambda1;
  },
  sphere: function() {
    lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);
  }
};

function boundsPoint(lambda, phi) {
  ranges.push(range = [lambda0$1 = lambda, lambda1 = lambda]);
  if (phi < phi0) phi0 = phi;
  if (phi > phi1) phi1 = phi;
}

function linePoint(lambda, phi) {
  var p = cartesian([lambda * radians, phi * radians]);
  if (p0) {
    var normal = cartesianCross(p0, p),
        equatorial = [normal[1], -normal[0], 0],
        inflection = cartesianCross(equatorial, normal);
    cartesianNormalizeInPlace(inflection);
    inflection = spherical(inflection);
    var delta = lambda - lambda2,
        sign$$1 = delta > 0 ? 1 : -1,
        lambdai = inflection[0] * degrees * sign$$1,
        phii,
        antimeridian = abs(delta) > 180;
    if (antimeridian ^ (sign$$1 * lambda2 < lambdai && lambdai < sign$$1 * lambda)) {
      phii = inflection[1] * degrees;
      if (phii > phi1) phi1 = phii;
    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign$$1 * lambda2 < lambdai && lambdai < sign$$1 * lambda)) {
      phii = -inflection[1] * degrees;
      if (phii < phi0) phi0 = phii;
    } else {
      if (phi < phi0) phi0 = phi;
      if (phi > phi1) phi1 = phi;
    }
    if (antimeridian) {
      if (lambda < lambda2) {
        if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;
      } else {
        if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;
      }
    } else {
      if (lambda1 >= lambda0$1) {
        if (lambda < lambda0$1) lambda0$1 = lambda;
        if (lambda > lambda1) lambda1 = lambda;
      } else {
        if (lambda > lambda2) {
          if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;
        } else {
          if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;
        }
      }
    }
  } else {
    ranges.push(range = [lambda0$1 = lambda, lambda1 = lambda]);
  }
  if (phi < phi0) phi0 = phi;
  if (phi > phi1) phi1 = phi;
  p0 = p, lambda2 = lambda;
}

function boundsLineStart() {
  boundsStream.point = linePoint;
}

function boundsLineEnd() {
  range[0] = lambda0$1, range[1] = lambda1;
  boundsStream.point = boundsPoint;
  p0 = null;
}

function boundsRingPoint(lambda, phi) {
  if (p0) {
    var delta = lambda - lambda2;
    deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);
  } else {
    lambda00$1 = lambda, phi00$1 = phi;
  }
  areaStream.point(lambda, phi);
  linePoint(lambda, phi);
}

function boundsRingStart() {
  areaStream.lineStart();
}

function boundsRingEnd() {
  boundsRingPoint(lambda00$1, phi00$1);
  areaStream.lineEnd();
  if (abs(deltaSum) > epsilon) lambda0$1 = -(lambda1 = 180);
  range[0] = lambda0$1, range[1] = lambda1;
  p0 = null;
}

// Finds the left-right distance between two longitudes.
// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want
// the distance between ±180° to be 360°.
function angle(lambda0, lambda1) {
  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;
}

function rangeCompare(a, b) {
  return a[0] - b[0];
}

function rangeContains(range, x) {
  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
}

function bounds(feature) {
  var i, n, a, b, merged, deltaMax, delta;

  phi1 = lambda1 = -(lambda0$1 = phi0 = Infinity);
  ranges = [];
  geoStream(feature, boundsStream);

  // First, sort ranges by their minimum longitudes.
  if (n = ranges.length) {
    ranges.sort(rangeCompare);

    // Then, merge any ranges that overlap.
    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {
      b = ranges[i];
      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {
        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
      } else {
        merged.push(a = b);
      }
    }

    // Finally, find the largest gap between the merged ranges.
    // The final bounding box will be the inverse of this gap.
    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {
      b = merged[i];
      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0$1 = b[0], lambda1 = a[1];
    }
  }

  ranges = range = null;

  return lambda0$1 === Infinity || phi0 === Infinity
      ? [[NaN, NaN], [NaN, NaN]]
      : [[lambda0$1, phi0], [lambda1, phi1]];
}

var W0, W1,
    X0, Y0, Z0,
    X1, Y1, Z1,
    X2, Y2, Z2,
    lambda00$2, phi00$2, // first point
    x0, y0, z0; // previous point

var centroidStream = {
  sphere: noop,
  point: centroidPoint,
  lineStart: centroidLineStart,
  lineEnd: centroidLineEnd,
  polygonStart: function() {
    centroidStream.lineStart = centroidRingStart;
    centroidStream.lineEnd = centroidRingEnd;
  },
  polygonEnd: function() {
    centroidStream.lineStart = centroidLineStart;
    centroidStream.lineEnd = centroidLineEnd;
  }
};

// Arithmetic mean of Cartesian vectors.
function centroidPoint(lambda, phi) {
  lambda *= radians, phi *= radians;
  var cosPhi = cos(phi);
  centroidPointCartesian(cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi));
}

function centroidPointCartesian(x, y, z) {
  ++W0;
  X0 += (x - X0) / W0;
  Y0 += (y - Y0) / W0;
  Z0 += (z - Z0) / W0;
}

function centroidLineStart() {
  centroidStream.point = centroidLinePointFirst;
}

function centroidLinePointFirst(lambda, phi) {
  lambda *= radians, phi *= radians;
  var cosPhi = cos(phi);
  x0 = cosPhi * cos(lambda);
  y0 = cosPhi * sin(lambda);
  z0 = sin(phi);
  centroidStream.point = centroidLinePoint;
  centroidPointCartesian(x0, y0, z0);
}

function centroidLinePoint(lambda, phi) {
  lambda *= radians, phi *= radians;
  var cosPhi = cos(phi),
      x = cosPhi * cos(lambda),
      y = cosPhi * sin(lambda),
      z = sin(phi),
      w = atan2(sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
  W1 += w;
  X1 += w * (x0 + (x0 = x));
  Y1 += w * (y0 + (y0 = y));
  Z1 += w * (z0 + (z0 = z));
  centroidPointCartesian(x0, y0, z0);
}

function centroidLineEnd() {
  centroidStream.point = centroidPoint;
}

// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,
// J. Applied Mechanics 42, 239 (1975).
function centroidRingStart() {
  centroidStream.point = centroidRingPointFirst;
}

function centroidRingEnd() {
  centroidRingPoint(lambda00$2, phi00$2);
  centroidStream.point = centroidPoint;
}

function centroidRingPointFirst(lambda, phi) {
  lambda00$2 = lambda, phi00$2 = phi;
  lambda *= radians, phi *= radians;
  centroidStream.point = centroidRingPoint;
  var cosPhi = cos(phi);
  x0 = cosPhi * cos(lambda);
  y0 = cosPhi * sin(lambda);
  z0 = sin(phi);
  centroidPointCartesian(x0, y0, z0);
}

function centroidRingPoint(lambda, phi) {
  lambda *= radians, phi *= radians;
  var cosPhi = cos(phi),
      x = cosPhi * cos(lambda),
      y = cosPhi * sin(lambda),
      z = sin(phi),
      cx = y0 * z - z0 * y,
      cy = z0 * x - x0 * z,
      cz = x0 * y - y0 * x,
      m = sqrt(cx * cx + cy * cy + cz * cz),
      w = asin(m), // line weight = angle
      v = m && -w / m; // area weight multiplier
  X2 += v * cx;
  Y2 += v * cy;
  Z2 += v * cz;
  W1 += w;
  X1 += w * (x0 + (x0 = x));
  Y1 += w * (y0 + (y0 = y));
  Z1 += w * (z0 + (z0 = z));
  centroidPointCartesian(x0, y0, z0);
}

function centroid(object) {
  W0 = W1 =
  X0 = Y0 = Z0 =
  X1 = Y1 = Z1 =
  X2 = Y2 = Z2 = 0;
  geoStream(object, centroidStream);

  var x = X2,
      y = Y2,
      z = Z2,
      m = x * x + y * y + z * z;

  // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.
  if (m < epsilon2) {
    x = X1, y = Y1, z = Z1;
    // If the feature has zero length, fall back to arithmetic mean of point vectors.
    if (W1 < epsilon) x = X0, y = Y0, z = Z0;
    m = x * x + y * y + z * z;
    // If the feature still has an undefined ccentroid, then return.
    if (m < epsilon2) return [NaN, NaN];
  }

  return [atan2(y, x) * degrees, asin(z / sqrt(m)) * degrees];
}

function constant(x) {
  return function() {
    return x;
  };
}

function compose(a, b) {

  function compose(x, y) {
    return x = a(x, y), b(x[0], x[1]);
  }

  if (a.invert && b.invert) compose.invert = function(x, y) {
    return x = b.invert(x, y), x && a.invert(x[0], x[1]);
  };

  return compose;
}

function rotationIdentity(lambda, phi) {
  return [abs(lambda) > pi ? lambda + Math.round(-lambda / tau) * tau : lambda, phi];
}

rotationIdentity.invert = rotationIdentity;

function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
  return (deltaLambda %= tau) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))
    : rotationLambda(deltaLambda))
    : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)
    : rotationIdentity);
}

function forwardRotationLambda(deltaLambda) {
  return function(lambda, phi) {
    return lambda += deltaLambda, [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];
  };
}

function rotationLambda(deltaLambda) {
  var rotation = forwardRotationLambda(deltaLambda);
  rotation.invert = forwardRotationLambda(-deltaLambda);
  return rotation;
}

function rotationPhiGamma(deltaPhi, deltaGamma) {
  var cosDeltaPhi = cos(deltaPhi),
      sinDeltaPhi = sin(deltaPhi),
      cosDeltaGamma = cos(deltaGamma),
      sinDeltaGamma = sin(deltaGamma);

  function rotation(lambda, phi) {
    var cosPhi = cos(phi),
        x = cos(lambda) * cosPhi,
        y = sin(lambda) * cosPhi,
        z = sin(phi),
        k = z * cosDeltaPhi + x * sinDeltaPhi;
    return [
      atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),
      asin(k * cosDeltaGamma + y * sinDeltaGamma)
    ];
  }

  rotation.invert = function(lambda, phi) {
    var cosPhi = cos(phi),
        x = cos(lambda) * cosPhi,
        y = sin(lambda) * cosPhi,
        z = sin(phi),
        k = z * cosDeltaGamma - y * sinDeltaGamma;
    return [
      atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),
      asin(k * cosDeltaPhi - x * sinDeltaPhi)
    ];
  };

  return rotation;
}

function rotation(rotate) {
  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);

  function forward(coordinates) {
    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);
    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;
  }

  forward.invert = function(coordinates) {
    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);
    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;
  };

  return forward;
}

// Generates a circle centered at [0°, 0°], with a given radius and precision.
function circleStream(stream, radius, delta, direction, t0, t1) {
  if (!delta) return;
  var cosRadius = cos(radius),
      sinRadius = sin(radius),
      step = direction * delta;
  if (t0 == null) {
    t0 = radius + direction * tau;
    t1 = radius - step / 2;
  } else {
    t0 = circleRadius(cosRadius, t0);
    t1 = circleRadius(cosRadius, t1);
    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau;
  }
  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {
    point = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);
    stream.point(point[0], point[1]);
  }
}

// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].
function circleRadius(cosRadius, point) {
  point = cartesian(point), point[0] -= cosRadius;
  cartesianNormalizeInPlace(point);
  var radius = acos(-point[1]);
  return ((-point[2] < 0 ? -radius : radius) + tau - epsilon) % tau;
}

function circle() {
  var center = constant([0, 0]),
      radius = constant(90),
      precision = constant(6),
      ring,
      rotate,
      stream = {point: point};

  function point(x, y) {
    ring.push(x = rotate(x, y));
    x[0] *= degrees, x[1] *= degrees;
  }

  function circle() {
    var c = center.apply(this, arguments),
        r = radius.apply(this, arguments) * radians,
        p = precision.apply(this, arguments) * radians;
    ring = [];
    rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;
    circleStream(stream, r, p, 1);
    c = {type: "Polygon", coordinates: [ring]};
    ring = rotate = null;
    return c;
  }

  circle.center = function(_) {
    return arguments.length ? (center = typeof _ === "function" ? _ : constant([+_[0], +_[1]]), circle) : center;
  };

  circle.radius = function(_) {
    return arguments.length ? (radius = typeof _ === "function" ? _ : constant(+_), circle) : radius;
  };

  circle.precision = function(_) {
    return arguments.length ? (precision = typeof _ === "function" ? _ : constant(+_), circle) : precision;
  };

  return circle;
}

function clipBuffer() {
  var lines = [],
      line;
  return {
    point: function(x, y) {
      line.push([x, y]);
    },
    lineStart: function() {
      lines.push(line = []);
    },
    lineEnd: noop,
    rejoin: function() {
      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
    },
    result: function() {
      var result = lines;
      lines = [];
      line = null;
      return result;
    }
  };
}

function pointEqual(a, b) {
  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;
}

function Intersection(point, points, other, entry) {
  this.x = point;
  this.z = points;
  this.o = other; // another intersection
  this.e = entry; // is an entry?
  this.v = false; // visited
  this.n = this.p = null; // next & previous
}

// A generalized polygon clipping algorithm: given a polygon that has been cut
// into its visible line segments, and rejoins the segments by interpolating
// along the clip edge.
function clipRejoin(segments, compareIntersection, startInside, interpolate, stream) {
  var subject = [],
      clip = [],
      i,
      n;

  segments.forEach(function(segment) {
    if ((n = segment.length - 1) <= 0) return;
    var n, p0 = segment[0], p1 = segment[n], x;

    // If the first and last points of a segment are coincident, then treat as a
    // closed ring. TODO if all rings are closed, then the winding order of the
    // exterior ring should be checked.
    if (pointEqual(p0, p1)) {
      stream.lineStart();
      for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);
      stream.lineEnd();
      return;
    }

    subject.push(x = new Intersection(p0, segment, null, true));
    clip.push(x.o = new Intersection(p0, null, x, false));
    subject.push(x = new Intersection(p1, segment, null, false));
    clip.push(x.o = new Intersection(p1, null, x, true));
  });

  if (!subject.length) return;

  clip.sort(compareIntersection);
  link(subject);
  link(clip);

  for (i = 0, n = clip.length; i < n; ++i) {
    clip[i].e = startInside = !startInside;
  }

  var start = subject[0],
      points,
      point;

  while (1) {
    // Find first unvisited intersection.
    var current = start,
        isSubject = true;
    while (current.v) if ((current = current.n) === start) return;
    points = current.z;
    stream.lineStart();
    do {
      current.v = current.o.v = true;
      if (current.e) {
        if (isSubject) {
          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);
        } else {
          interpolate(current.x, current.n.x, 1, stream);
        }
        current = current.n;
      } else {
        if (isSubject) {
          points = current.p.z;
          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);
        } else {
          interpolate(current.x, current.p.x, -1, stream);
        }
        current = current.p;
      }
      current = current.o;
      points = current.z;
      isSubject = !isSubject;
    } while (!current.v);
    stream.lineEnd();
  }
}

function link(array) {
  if (!(n = array.length)) return;
  var n,
      i = 0,
      a = array[0],
      b;
  while (++i < n) {
    a.n = b = array[i];
    b.p = a;
    a = b;
  }
  a.n = b = array[0];
  b.p = a;
}

var sum = adder();

function longitude(point) {
  if (abs(point[0]) <= pi)
    return point[0];
  else
    return sign(point[0]) * ((abs(point[0]) + pi) % tau - pi);
}

function polygonContains(polygon, point) {
  var lambda = longitude(point),
      phi = point[1],
      sinPhi = sin(phi),
      normal = [sin(lambda), -cos(lambda), 0],
      angle = 0,
      winding = 0;

  sum.reset();

  if (sinPhi === 1) phi = halfPi + epsilon;
  else if (sinPhi === -1) phi = -halfPi - epsilon;

  for (var i = 0, n = polygon.length; i < n; ++i) {
    if (!(m = (ring = polygon[i]).length)) continue;
    var ring,
        m,
        point0 = ring[m - 1],
        lambda0 = longitude(point0),
        phi0 = point0[1] / 2 + quarterPi,
        sinPhi0 = sin(phi0),
        cosPhi0 = cos(phi0);

    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {
      var point1 = ring[j],
          lambda1 = longitude(point1),
          phi1 = point1[1] / 2 + quarterPi,
          sinPhi1 = sin(phi1),
          cosPhi1 = cos(phi1),
          delta = lambda1 - lambda0,
          sign$$1 = delta >= 0 ? 1 : -1,
          absDelta = sign$$1 * delta,
          antimeridian = absDelta > pi,
          k = sinPhi0 * sinPhi1;

      sum.add(atan2(k * sign$$1 * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));
      angle += antimeridian ? delta + sign$$1 * tau : delta;

      // Are the longitudes either side of the point’s meridian (lambda),
      // and are the latitudes smaller than the parallel (phi)?
      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
        var arc = cartesianCross(cartesian(point0), cartesian(point1));
        cartesianNormalizeInPlace(arc);
        var intersection = cartesianCross(normal, arc);
        cartesianNormalizeInPlace(intersection);
        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);
        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
          winding += antimeridian ^ delta >= 0 ? 1 : -1;
        }
      }
    }
  }

  // First, determine whether the South pole is inside or outside:
  //
  // It is inside if:
  // * the polygon winds around it in a clockwise direction.
  // * the polygon does not (cumulatively) wind around it, but has a negative
  //   (counter-clockwise) area.
  //
  // Second, count the (signed) number of times a segment crosses a lambda
  // from the point to the South pole.  If it is zero, then the point is the
  // same side as the South pole.

  return (angle < -epsilon || angle < epsilon && sum < -epsilon) ^ (winding & 1);
}

function clip(pointVisible, clipLine, interpolate, start) {
  return function(sink) {
    var line = clipLine(sink),
        ringBuffer = clipBuffer(),
        ringSink = clipLine(ringBuffer),
        polygonStarted = false,
        polygon,
        segments,
        ring;

    var clip = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function() {
        clip.point = pointRing;
        clip.lineStart = ringStart;
        clip.lineEnd = ringEnd;
        segments = [];
        polygon = [];
      },
      polygonEnd: function() {
        clip.point = point;
        clip.lineStart = lineStart;
        clip.lineEnd = lineEnd;
        segments = d3Array.merge(segments);
        var startInside = polygonContains(polygon, start);
        if (segments.length) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          clipRejoin(segments, compareIntersection, startInside, interpolate, sink);
        } else if (startInside) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          sink.lineStart();
          interpolate(null, null, 1, sink);
          sink.lineEnd();
        }
        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;
        segments = polygon = null;
      },
      sphere: function() {
        sink.polygonStart();
        sink.lineStart();
        interpolate(null, null, 1, sink);
        sink.lineEnd();
        sink.polygonEnd();
      }
    };

    function point(lambda, phi) {
      if (pointVisible(lambda, phi)) sink.point(lambda, phi);
    }

    function pointLine(lambda, phi) {
      line.point(lambda, phi);
    }

    function lineStart() {
      clip.point = pointLine;
      line.lineStart();
    }

    function lineEnd() {
      clip.point = point;
      line.lineEnd();
    }

    function pointRing(lambda, phi) {
      ring.push([lambda, phi]);
      ringSink.point(lambda, phi);
    }

    function ringStart() {
      ringSink.lineStart();
      ring = [];
    }

    function ringEnd() {
      pointRing(ring[0][0], ring[0][1]);
      ringSink.lineEnd();

      var clean = ringSink.clean(),
          ringSegments = ringBuffer.result(),
          i, n = ringSegments.length, m,
          segment,
          point;

      ring.pop();
      polygon.push(ring);
      ring = null;

      if (!n) return;

      // No intersections.
      if (clean & 1) {
        segment = ringSegments[0];
        if ((m = segment.length - 1) > 0) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          sink.lineStart();
          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);
          sink.lineEnd();
        }
        return;
      }

      // Rejoin connected segments.
      // TODO reuse ringBuffer.rejoin()?
      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));

      segments.push(ringSegments.filter(validSegment));
    }

    return clip;
  };
}

function validSegment(segment) {
  return segment.length > 1;
}

// Intersections are sorted along the clip edge. For both antimeridian cutting
// and circle clipping, the same comparison is used.
function compareIntersection(a, b) {
  return ((a = a.x)[0] < 0 ? a[1] - halfPi - epsilon : halfPi - a[1])
       - ((b = b.x)[0] < 0 ? b[1] - halfPi - epsilon : halfPi - b[1]);
}

var clipAntimeridian = clip(
  function() { return true; },
  clipAntimeridianLine,
  clipAntimeridianInterpolate,
  [-pi, -halfPi]
);

// Takes a line and cuts into visible segments. Return values: 0 - there were
// intersections or the line was empty; 1 - no intersections; 2 - there were
// intersections, and the first and last segments should be rejoined.
function clipAntimeridianLine(stream) {
  var lambda0 = NaN,
      phi0 = NaN,
      sign0 = NaN,
      clean; // no intersections

  return {
    lineStart: function() {
      stream.lineStart();
      clean = 1;
    },
    point: function(lambda1, phi1) {
      var sign1 = lambda1 > 0 ? pi : -pi,
          delta = abs(lambda1 - lambda0);
      if (abs(delta - pi) < epsilon) { // line crosses a pole
        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);
        stream.point(sign0, phi0);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi0);
        stream.point(lambda1, phi0);
        clean = 0;
      } else if (sign0 !== sign1 && delta >= pi) { // line crosses antimeridian
        if (abs(lambda0 - sign0) < epsilon) lambda0 -= sign0 * epsilon; // handle degeneracies
        if (abs(lambda1 - sign1) < epsilon) lambda1 -= sign1 * epsilon;
        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
        stream.point(sign0, phi0);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi0);
        clean = 0;
      }
      stream.point(lambda0 = lambda1, phi0 = phi1);
      sign0 = sign1;
    },
    lineEnd: function() {
      stream.lineEnd();
      lambda0 = phi0 = NaN;
    },
    clean: function() {
      return 2 - clean; // if intersections, rejoin first and last segments
    }
  };
}

function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
  var cosPhi0,
      cosPhi1,
      sinLambda0Lambda1 = sin(lambda0 - lambda1);
  return abs(sinLambda0Lambda1) > epsilon
      ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1)
          - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0))
          / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))
      : (phi0 + phi1) / 2;
}

function clipAntimeridianInterpolate(from, to, direction, stream) {
  var phi;
  if (from == null) {
    phi = direction * halfPi;
    stream.point(-pi, phi);
    stream.point(0, phi);
    stream.point(pi, phi);
    stream.point(pi, 0);
    stream.point(pi, -phi);
    stream.point(0, -phi);
    stream.point(-pi, -phi);
    stream.point(-pi, 0);
    stream.point(-pi, phi);
  } else if (abs(from[0] - to[0]) > epsilon) {
    var lambda = from[0] < to[0] ? pi : -pi;
    phi = direction * lambda / 2;
    stream.point(-lambda, phi);
    stream.point(0, phi);
    stream.point(lambda, phi);
  } else {
    stream.point(to[0], to[1]);
  }
}

function clipCircle(radius) {
  var cr = cos(radius),
      delta = 6 * radians,
      smallRadius = cr > 0,
      notHemisphere = abs(cr) > epsilon; // TODO optimise for this common case

  function interpolate(from, to, direction, stream) {
    circleStream(stream, radius, delta, direction, from, to);
  }

  function visible(lambda, phi) {
    return cos(lambda) * cos(phi) > cr;
  }

  // Takes a line and cuts into visible segments. Return values used for polygon
  // clipping: 0 - there were intersections or the line was empty; 1 - no
  // intersections 2 - there were intersections, and the first and last segments
  // should be rejoined.
  function clipLine(stream) {
    var point0, // previous point
        c0, // code for previous point
        v0, // visibility of previous point
        v00, // visibility of first point
        clean; // no intersections
    return {
      lineStart: function() {
        v00 = v0 = false;
        clean = 1;
      },
      point: function(lambda, phi) {
        var point1 = [lambda, phi],
            point2,
            v = visible(lambda, phi),
            c = smallRadius
              ? v ? 0 : code(lambda, phi)
              : v ? code(lambda + (lambda < 0 ? pi : -pi), phi) : 0;
        if (!point0 && (v00 = v0 = v)) stream.lineStart();
        // Handle degeneracies.
        // TODO ignore if not clipping polygons.
        if (v !== v0) {
          point2 = intersect(point0, point1);
          if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2)) {
            point1[0] += epsilon;
            point1[1] += epsilon;
            v = visible(point1[0], point1[1]);
          }
        }
        if (v !== v0) {
          clean = 0;
          if (v) {
            // outside going in
            stream.lineStart();
            point2 = intersect(point1, point0);
            stream.point(point2[0], point2[1]);
          } else {
            // inside going out
            point2 = intersect(point0, point1);
            stream.point(point2[0], point2[1]);
            stream.lineEnd();
          }
          point0 = point2;
        } else if (notHemisphere && point0 && smallRadius ^ v) {
          var t;
          // If the codes for two points are different, or are both zero,
          // and there this segment intersects with the small circle.
          if (!(c & c0) && (t = intersect(point1, point0, true))) {
            clean = 0;
            if (smallRadius) {
              stream.lineStart();
              stream.point(t[0][0], t[0][1]);
              stream.point(t[1][0], t[1][1]);
              stream.lineEnd();
            } else {
              stream.point(t[1][0], t[1][1]);
              stream.lineEnd();
              stream.lineStart();
              stream.point(t[0][0], t[0][1]);
            }
          }
        }
        if (v && (!point0 || !pointEqual(point0, point1))) {
          stream.point(point1[0], point1[1]);
        }
        point0 = point1, v0 = v, c0 = c;
      },
      lineEnd: function() {
        if (v0) stream.lineEnd();
        point0 = null;
      },
      // Rejoin first and last segments if there were intersections and the first
      // and last points were visible.
      clean: function() {
        return clean | ((v00 && v0) << 1);
      }
    };
  }

  // Intersects the great circle between a and b with the clip circle.
  function intersect(a, b, two) {
    var pa = cartesian(a),
        pb = cartesian(b);

    // We have two planes, n1.p = d1 and n2.p = d2.
    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).
    var n1 = [1, 0, 0], // normal
        n2 = cartesianCross(pa, pb),
        n2n2 = cartesianDot(n2, n2),
        n1n2 = n2[0], // cartesianDot(n1, n2),
        determinant = n2n2 - n1n2 * n1n2;

    // Two polar points.
    if (!determinant) return !two && a;

    var c1 =  cr * n2n2 / determinant,
        c2 = -cr * n1n2 / determinant,
        n1xn2 = cartesianCross(n1, n2),
        A = cartesianScale(n1, c1),
        B = cartesianScale(n2, c2);
    cartesianAddInPlace(A, B);

    // Solve |p(t)|^2 = 1.
    var u = n1xn2,
        w = cartesianDot(A, u),
        uu = cartesianDot(u, u),
        t2 = w * w - uu * (cartesianDot(A, A) - 1);

    if (t2 < 0) return;

    var t = sqrt(t2),
        q = cartesianScale(u, (-w - t) / uu);
    cartesianAddInPlace(q, A);
    q = spherical(q);

    if (!two) return q;

    // Two intersection points.
    var lambda0 = a[0],
        lambda1 = b[0],
        phi0 = a[1],
        phi1 = b[1],
        z;

    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;

    var delta = lambda1 - lambda0,
        polar = abs(delta - pi) < epsilon,
        meridian = polar || delta < epsilon;

    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;

    // Check that the first point is between a and b.
    if (meridian
        ? polar
          ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon ? phi0 : phi1)
          : phi0 <= q[1] && q[1] <= phi1
        : delta > pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {
      var q1 = cartesianScale(u, (-w + t) / uu);
      cartesianAddInPlace(q1, A);
      return [q, spherical(q1)];
    }
  }

  // Generates a 4-bit vector representing the location of a point relative to
  // the small circle's bounding box.
  function code(lambda, phi) {
    var r = smallRadius ? radius : pi - radius,
        code = 0;
    if (lambda < -r) code |= 1; // left
    else if (lambda > r) code |= 2; // right
    if (phi < -r) code |= 4; // below
    else if (phi > r) code |= 8; // above
    return code;
  }

  return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi, radius - pi]);
}

function clipLine(a, b, x0, y0, x1, y1) {
  var ax = a[0],
      ay = a[1],
      bx = b[0],
      by = b[1],
      t0 = 0,
      t1 = 1,
      dx = bx - ax,
      dy = by - ay,
      r;

  r = x0 - ax;
  if (!dx && r > 0) return;
  r /= dx;
  if (dx < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dx > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = x1 - ax;
  if (!dx && r < 0) return;
  r /= dx;
  if (dx < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dx > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  r = y0 - ay;
  if (!dy && r > 0) return;
  r /= dy;
  if (dy < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dy > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = y1 - ay;
  if (!dy && r < 0) return;
  r /= dy;
  if (dy < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dy > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
  return true;
}

var clipMax = 1e9, clipMin = -clipMax;

// TODO Use d3-polygon’s polygonContains here for the ring check?
// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?

function clipRectangle(x0, y0, x1, y1) {

  function visible(x, y) {
    return x0 <= x && x <= x1 && y0 <= y && y <= y1;
  }

  function interpolate(from, to, direction, stream) {
    var a = 0, a1 = 0;
    if (from == null
        || (a = corner(from, direction)) !== (a1 = corner(to, direction))
        || comparePoint(from, to) < 0 ^ direction > 0) {
      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
      while ((a = (a + direction + 4) % 4) !== a1);
    } else {
      stream.point(to[0], to[1]);
    }
  }

  function corner(p, direction) {
    return abs(p[0] - x0) < epsilon ? direction > 0 ? 0 : 3
        : abs(p[0] - x1) < epsilon ? direction > 0 ? 2 : 1
        : abs(p[1] - y0) < epsilon ? direction > 0 ? 1 : 0
        : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon
  }

  function compareIntersection(a, b) {
    return comparePoint(a.x, b.x);
  }

  function comparePoint(a, b) {
    var ca = corner(a, 1),
        cb = corner(b, 1);
    return ca !== cb ? ca - cb
        : ca === 0 ? b[1] - a[1]
        : ca === 1 ? a[0] - b[0]
        : ca === 2 ? a[1] - b[1]
        : b[0] - a[0];
  }

  return function(stream) {
    var activeStream = stream,
        bufferStream = clipBuffer(),
        segments,
        polygon,
        ring,
        x__, y__, v__, // first point
        x_, y_, v_, // previous point
        first,
        clean;

    var clipStream = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: polygonStart,
      polygonEnd: polygonEnd
    };

    function point(x, y) {
      if (visible(x, y)) activeStream.point(x, y);
    }

    function polygonInside() {
      var winding = 0;

      for (var i = 0, n = polygon.length; i < n; ++i) {
        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {
          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];
          if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }
          else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }
        }
      }

      return winding;
    }

    // Buffer geometry within a polygon and then clip it en masse.
    function polygonStart() {
      activeStream = bufferStream, segments = [], polygon = [], clean = true;
    }

    function polygonEnd() {
      var startInside = polygonInside(),
          cleanInside = clean && startInside,
          visible = (segments = d3Array.merge(segments)).length;
      if (cleanInside || visible) {
        stream.polygonStart();
        if (cleanInside) {
          stream.lineStart();
          interpolate(null, null, 1, stream);
          stream.lineEnd();
        }
        if (visible) {
          clipRejoin(segments, compareIntersection, startInside, interpolate, stream);
        }
        stream.polygonEnd();
      }
      activeStream = stream, segments = polygon = ring = null;
    }

    function lineStart() {
      clipStream.point = linePoint;
      if (polygon) polygon.push(ring = []);
      first = true;
      v_ = false;
      x_ = y_ = NaN;
    }

    // TODO rather than special-case polygons, simply handle them separately.
    // Ideally, coincident intersection points should be jittered to avoid
    // clipping issues.
    function lineEnd() {
      if (segments) {
        linePoint(x__, y__);
        if (v__ && v_) bufferStream.rejoin();
        segments.push(bufferStream.result());
      }
      clipStream.point = point;
      if (v_) activeStream.lineEnd();
    }

    function linePoint(x, y) {
      var v = visible(x, y);
      if (polygon) ring.push([x, y]);
      if (first) {
        x__ = x, y__ = y, v__ = v;
        first = false;
        if (v) {
          activeStream.lineStart();
          activeStream.point(x, y);
        }
      } else {
        if (v && v_) activeStream.point(x, y);
        else {
          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],
              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];
          if (clipLine(a, b, x0, y0, x1, y1)) {
            if (!v_) {
              activeStream.lineStart();
              activeStream.point(a[0], a[1]);
            }
            activeStream.point(b[0], b[1]);
            if (!v) activeStream.lineEnd();
            clean = false;
          } else if (v) {
            activeStream.lineStart();
            activeStream.point(x, y);
            clean = false;
          }
        }
      }
      x_ = x, y_ = y, v_ = v;
    }

    return clipStream;
  };
}

function extent() {
  var x0 = 0,
      y0 = 0,
      x1 = 960,
      y1 = 500,
      cache,
      cacheStream,
      clip;

  return clip = {
    stream: function(stream) {
      return cache && cacheStream === stream ? cache : cache = clipRectangle(x0, y0, x1, y1)(cacheStream = stream);
    },
    extent: function(_) {
      return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];
    }
  };
}

var lengthSum = adder(),
    lambda0$2,
    sinPhi0$1,
    cosPhi0$1;

var lengthStream = {
  sphere: noop,
  point: noop,
  lineStart: lengthLineStart,
  lineEnd: noop,
  polygonStart: noop,
  polygonEnd: noop
};

function lengthLineStart() {
  lengthStream.point = lengthPointFirst;
  lengthStream.lineEnd = lengthLineEnd;
}

function lengthLineEnd() {
  lengthStream.point = lengthStream.lineEnd = noop;
}

function lengthPointFirst(lambda, phi) {
  lambda *= radians, phi *= radians;
  lambda0$2 = lambda, sinPhi0$1 = sin(phi), cosPhi0$1 = cos(phi);
  lengthStream.point = lengthPoint;
}

function lengthPoint(lambda, phi) {
  lambda *= radians, phi *= radians;
  var sinPhi = sin(phi),
      cosPhi = cos(phi),
      delta = abs(lambda - lambda0$2),
      cosDelta = cos(delta),
      sinDelta = sin(delta),
      x = cosPhi * sinDelta,
      y = cosPhi0$1 * sinPhi - sinPhi0$1 * cosPhi * cosDelta,
      z = sinPhi0$1 * sinPhi + cosPhi0$1 * cosPhi * cosDelta;
  lengthSum.add(atan2(sqrt(x * x + y * y), z));
  lambda0$2 = lambda, sinPhi0$1 = sinPhi, cosPhi0$1 = cosPhi;
}

function length(object) {
  lengthSum.reset();
  geoStream(object, lengthStream);
  return +lengthSum;
}

var coordinates = [null, null],
    object = {type: "LineString", coordinates: coordinates};

function distance(a, b) {
  coordinates[0] = a;
  coordinates[1] = b;
  return length(object);
}

var containsObjectType = {
  Feature: function(object, point) {
    return containsGeometry(object.geometry, point);
  },
  FeatureCollection: function(object, point) {
    var features = object.features, i = -1, n = features.length;
    while (++i < n) if (containsGeometry(features[i].geometry, point)) return true;
    return false;
  }
};

var containsGeometryType = {
  Sphere: function() {
    return true;
  },
  Point: function(object, point) {
    return containsPoint(object.coordinates, point);
  },
  MultiPoint: function(object, point) {
    var coordinates = object.coordinates, i = -1, n = coordinates.length;
    while (++i < n) if (containsPoint(coordinates[i], point)) return true;
    return false;
  },
  LineString: function(object, point) {
    return containsLine(object.coordinates, point);
  },
  MultiLineString: function(object, point) {
    var coordinates = object.coordinates, i = -1, n = coordinates.length;
    while (++i < n) if (containsLine(coordinates[i], point)) return true;
    return false;
  },
  Polygon: function(object, point) {
    return containsPolygon(object.coordinates, point);
  },
  MultiPolygon: function(object, point) {
    var coordinates = object.coordinates, i = -1, n = coordinates.length;
    while (++i < n) if (containsPolygon(coordinates[i], point)) return true;
    return false;
  },
  GeometryCollection: function(object, point) {
    var geometries = object.geometries, i = -1, n = geometries.length;
    while (++i < n) if (containsGeometry(geometries[i], point)) return true;
    return false;
  }
};

function containsGeometry(geometry, point) {
  return geometry && containsGeometryType.hasOwnProperty(geometry.type)
      ? containsGeometryType[geometry.type](geometry, point)
      : false;
}

function containsPoint(coordinates, point) {
  return distance(coordinates, point) === 0;
}

function containsLine(coordinates, point) {
  var ao, bo, ab;
  for (var i = 0, n = coordinates.length; i < n; i++) {
    bo = distance(coordinates[i], point);
    if (bo === 0) return true;
    if (i > 0) {
      ab = distance(coordinates[i], coordinates[i - 1]);
      if (
        ab > 0 &&
        ao <= ab &&
        bo <= ab &&
        (ao + bo - ab) * (1 - Math.pow((ao - bo) / ab, 2)) < epsilon2 * ab
      )
        return true;
    }
    ao = bo;
  }
  return false;
}

function containsPolygon(coordinates, point) {
  return !!polygonContains(coordinates.map(ringRadians), pointRadians(point));
}

function ringRadians(ring) {
  return ring = ring.map(pointRadians), ring.pop(), ring;
}

function pointRadians(point) {
  return [point[0] * radians, point[1] * radians];
}

function contains(object, point) {
  return (object && containsObjectType.hasOwnProperty(object.type)
      ? containsObjectType[object.type]
      : containsGeometry)(object, point);
}

function graticuleX(y0, y1, dy) {
  var y = d3Array.range(y0, y1 - epsilon, dy).concat(y1);
  return function(x) { return y.map(function(y) { return [x, y]; }); };
}

function graticuleY(x0, x1, dx) {
  var x = d3Array.range(x0, x1 - epsilon, dx).concat(x1);
  return function(y) { return x.map(function(x) { return [x, y]; }); };
}

function graticule() {
  var x1, x0, X1, X0,
      y1, y0, Y1, Y0,
      dx = 10, dy = dx, DX = 90, DY = 360,
      x, y, X, Y,
      precision = 2.5;

  function graticule() {
    return {type: "MultiLineString", coordinates: lines()};
  }

  function lines() {
    return d3Array.range(ceil(X0 / DX) * DX, X1, DX).map(X)
        .concat(d3Array.range(ceil(Y0 / DY) * DY, Y1, DY).map(Y))
        .concat(d3Array.range(ceil(x0 / dx) * dx, x1, dx).filter(function(x) { return abs(x % DX) > epsilon; }).map(x))
        .concat(d3Array.range(ceil(y0 / dy) * dy, y1, dy).filter(function(y) { return abs(y % DY) > epsilon; }).map(y));
  }

  graticule.lines = function() {
    return lines().map(function(coordinates) { return {type: "LineString", coordinates: coordinates}; });
  };

  graticule.outline = function() {
    return {
      type: "Polygon",
      coordinates: [
        X(X0).concat(
        Y(Y1).slice(1),
        X(X1).reverse().slice(1),
        Y(Y0).reverse().slice(1))
      ]
    };
  };

  graticule.extent = function(_) {
    if (!arguments.length) return graticule.extentMinor();
    return graticule.extentMajor(_).extentMinor(_);
  };

  graticule.extentMajor = function(_) {
    if (!arguments.length) return [[X0, Y0], [X1, Y1]];
    X0 = +_[0][0], X1 = +_[1][0];
    Y0 = +_[0][1], Y1 = +_[1][1];
    if (X0 > X1) _ = X0, X0 = X1, X1 = _;
    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
    return graticule.precision(precision);
  };

  graticule.extentMinor = function(_) {
    if (!arguments.length) return [[x0, y0], [x1, y1]];
    x0 = +_[0][0], x1 = +_[1][0];
    y0 = +_[0][1], y1 = +_[1][1];
    if (x0 > x1) _ = x0, x0 = x1, x1 = _;
    if (y0 > y1) _ = y0, y0 = y1, y1 = _;
    return graticule.precision(precision);
  };

  graticule.step = function(_) {
    if (!arguments.length) return graticule.stepMinor();
    return graticule.stepMajor(_).stepMinor(_);
  };

  graticule.stepMajor = function(_) {
    if (!arguments.length) return [DX, DY];
    DX = +_[0], DY = +_[1];
    return graticule;
  };

  graticule.stepMinor = function(_) {
    if (!arguments.length) return [dx, dy];
    dx = +_[0], dy = +_[1];
    return graticule;
  };

  graticule.precision = function(_) {
    if (!arguments.length) return precision;
    precision = +_;
    x = graticuleX(y0, y1, 90);
    y = graticuleY(x0, x1, precision);
    X = graticuleX(Y0, Y1, 90);
    Y = graticuleY(X0, X1, precision);
    return graticule;
  };

  return graticule
      .extentMajor([[-180, -90 + epsilon], [180, 90 - epsilon]])
      .extentMinor([[-180, -80 - epsilon], [180, 80 + epsilon]]);
}

function graticule10() {
  return graticule()();
}

function interpolate(a, b) {
  var x0 = a[0] * radians,
      y0 = a[1] * radians,
      x1 = b[0] * radians,
      y1 = b[1] * radians,
      cy0 = cos(y0),
      sy0 = sin(y0),
      cy1 = cos(y1),
      sy1 = sin(y1),
      kx0 = cy0 * cos(x0),
      ky0 = cy0 * sin(x0),
      kx1 = cy1 * cos(x1),
      ky1 = cy1 * sin(x1),
      d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),
      k = sin(d);

  var interpolate = d ? function(t) {
    var B = sin(t *= d) / k,
        A = sin(d - t) / k,
        x = A * kx0 + B * kx1,
        y = A * ky0 + B * ky1,
        z = A * sy0 + B * sy1;
    return [
      atan2(y, x) * degrees,
      atan2(z, sqrt(x * x + y * y)) * degrees
    ];
  } : function() {
    return [x0 * degrees, y0 * degrees];
  };

  interpolate.distance = d;

  return interpolate;
}

function identity(x) {
  return x;
}

var areaSum$1 = adder(),
    areaRingSum$1 = adder(),
    x00,
    y00,
    x0$1,
    y0$1;

var areaStream$1 = {
  point: noop,
  lineStart: noop,
  lineEnd: noop,
  polygonStart: function() {
    areaStream$1.lineStart = areaRingStart$1;
    areaStream$1.lineEnd = areaRingEnd$1;
  },
  polygonEnd: function() {
    areaStream$1.lineStart = areaStream$1.lineEnd = areaStream$1.point = noop;
    areaSum$1.add(abs(areaRingSum$1));
    areaRingSum$1.reset();
  },
  result: function() {
    var area = areaSum$1 / 2;
    areaSum$1.reset();
    return area;
  }
};

function areaRingStart$1() {
  areaStream$1.point = areaPointFirst$1;
}

function areaPointFirst$1(x, y) {
  areaStream$1.point = areaPoint$1;
  x00 = x0$1 = x, y00 = y0$1 = y;
}

function areaPoint$1(x, y) {
  areaRingSum$1.add(y0$1 * x - x0$1 * y);
  x0$1 = x, y0$1 = y;
}

function areaRingEnd$1() {
  areaPoint$1(x00, y00);
}

var x0$2 = Infinity,
    y0$2 = x0$2,
    x1 = -x0$2,
    y1 = x1;

var boundsStream$1 = {
  point: boundsPoint$1,
  lineStart: noop,
  lineEnd: noop,
  polygonStart: noop,
  polygonEnd: noop,
  result: function() {
    var bounds = [[x0$2, y0$2], [x1, y1]];
    x1 = y1 = -(y0$2 = x0$2 = Infinity);
    return bounds;
  }
};

function boundsPoint$1(x, y) {
  if (x < x0$2) x0$2 = x;
  if (x > x1) x1 = x;
  if (y < y0$2) y0$2 = y;
  if (y > y1) y1 = y;
}

// TODO Enforce positive area for exterior, negative area for interior?

var X0$1 = 0,
    Y0$1 = 0,
    Z0$1 = 0,
    X1$1 = 0,
    Y1$1 = 0,
    Z1$1 = 0,
    X2$1 = 0,
    Y2$1 = 0,
    Z2$1 = 0,
    x00$1,
    y00$1,
    x0$3,
    y0$3;

var centroidStream$1 = {
  point: centroidPoint$1,
  lineStart: centroidLineStart$1,
  lineEnd: centroidLineEnd$1,
  polygonStart: function() {
    centroidStream$1.lineStart = centroidRingStart$1;
    centroidStream$1.lineEnd = centroidRingEnd$1;
  },
  polygonEnd: function() {
    centroidStream$1.point = centroidPoint$1;
    centroidStream$1.lineStart = centroidLineStart$1;
    centroidStream$1.lineEnd = centroidLineEnd$1;
  },
  result: function() {
    var centroid = Z2$1 ? [X2$1 / Z2$1, Y2$1 / Z2$1]
        : Z1$1 ? [X1$1 / Z1$1, Y1$1 / Z1$1]
        : Z0$1 ? [X0$1 / Z0$1, Y0$1 / Z0$1]
        : [NaN, NaN];
    X0$1 = Y0$1 = Z0$1 =
    X1$1 = Y1$1 = Z1$1 =
    X2$1 = Y2$1 = Z2$1 = 0;
    return centroid;
  }
};

function centroidPoint$1(x, y) {
  X0$1 += x;
  Y0$1 += y;
  ++Z0$1;
}

function centroidLineStart$1() {
  centroidStream$1.point = centroidPointFirstLine;
}

function centroidPointFirstLine(x, y) {
  centroidStream$1.point = centroidPointLine;
  centroidPoint$1(x0$3 = x, y0$3 = y);
}

function centroidPointLine(x, y) {
  var dx = x - x0$3, dy = y - y0$3, z = sqrt(dx * dx + dy * dy);
  X1$1 += z * (x0$3 + x) / 2;
  Y1$1 += z * (y0$3 + y) / 2;
  Z1$1 += z;
  centroidPoint$1(x0$3 = x, y0$3 = y);
}

function centroidLineEnd$1() {
  centroidStream$1.point = centroidPoint$1;
}

function centroidRingStart$1() {
  centroidStream$1.point = centroidPointFirstRing;
}

function centroidRingEnd$1() {
  centroidPointRing(x00$1, y00$1);
}

function centroidPointFirstRing(x, y) {
  centroidStream$1.point = centroidPointRing;
  centroidPoint$1(x00$1 = x0$3 = x, y00$1 = y0$3 = y);
}

function centroidPointRing(x, y) {
  var dx = x - x0$3,
      dy = y - y0$3,
      z = sqrt(dx * dx + dy * dy);

  X1$1 += z * (x0$3 + x) / 2;
  Y1$1 += z * (y0$3 + y) / 2;
  Z1$1 += z;

  z = y0$3 * x - x0$3 * y;
  X2$1 += z * (x0$3 + x);
  Y2$1 += z * (y0$3 + y);
  Z2$1 += z * 3;
  centroidPoint$1(x0$3 = x, y0$3 = y);
}

function PathContext(context) {
  this._context = context;
}

PathContext.prototype = {
  _radius: 4.5,
  pointRadius: function(_) {
    return this._radius = _, this;
  },
  polygonStart: function() {
    this._line = 0;
  },
  polygonEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line === 0) this._context.closePath();
    this._point = NaN;
  },
  point: function(x, y) {
    switch (this._point) {
      case 0: {
        this._context.moveTo(x, y);
        this._point = 1;
        break;
      }
      case 1: {
        this._context.lineTo(x, y);
        break;
      }
      default: {
        this._context.moveTo(x + this._radius, y);
        this._context.arc(x, y, this._radius, 0, tau);
        break;
      }
    }
  },
  result: noop
};

var lengthSum$1 = adder(),
    lengthRing,
    x00$2,
    y00$2,
    x0$4,
    y0$4;

var lengthStream$1 = {
  point: noop,
  lineStart: function() {
    lengthStream$1.point = lengthPointFirst$1;
  },
  lineEnd: function() {
    if (lengthRing) lengthPoint$1(x00$2, y00$2);
    lengthStream$1.point = noop;
  },
  polygonStart: function() {
    lengthRing = true;
  },
  polygonEnd: function() {
    lengthRing = null;
  },
  result: function() {
    var length = +lengthSum$1;
    lengthSum$1.reset();
    return length;
  }
};

function lengthPointFirst$1(x, y) {
  lengthStream$1.point = lengthPoint$1;
  x00$2 = x0$4 = x, y00$2 = y0$4 = y;
}

function lengthPoint$1(x, y) {
  x0$4 -= x, y0$4 -= y;
  lengthSum$1.add(sqrt(x0$4 * x0$4 + y0$4 * y0$4));
  x0$4 = x, y0$4 = y;
}

function PathString() {
  this._string = [];
}

PathString.prototype = {
  _radius: 4.5,
  _circle: circle$1(4.5),
  pointRadius: function(_) {
    if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;
    return this;
  },
  polygonStart: function() {
    this._line = 0;
  },
  polygonEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line === 0) this._string.push("Z");
    this._point = NaN;
  },
  point: function(x, y) {
    switch (this._point) {
      case 0: {
        this._string.push("M", x, ",", y);
        this._point = 1;
        break;
      }
      case 1: {
        this._string.push("L", x, ",", y);
        break;
      }
      default: {
        if (this._circle == null) this._circle = circle$1(this._radius);
        this._string.push("M", x, ",", y, this._circle);
        break;
      }
    }
  },
  result: function() {
    if (this._string.length) {
      var result = this._string.join("");
      this._string = [];
      return result;
    } else {
      return null;
    }
  }
};

function circle$1(radius) {
  return "m0," + radius
      + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius
      + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius
      + "z";
}

function index(projection, context) {
  var pointRadius = 4.5,
      projectionStream,
      contextStream;

  function path(object) {
    if (object) {
      if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
      geoStream(object, projectionStream(contextStream));
    }
    return contextStream.result();
  }

  path.area = function(object) {
    geoStream(object, projectionStream(areaStream$1));
    return areaStream$1.result();
  };

  path.measure = function(object) {
    geoStream(object, projectionStream(lengthStream$1));
    return lengthStream$1.result();
  };

  path.bounds = function(object) {
    geoStream(object, projectionStream(boundsStream$1));
    return boundsStream$1.result();
  };

  path.centroid = function(object) {
    geoStream(object, projectionStream(centroidStream$1));
    return centroidStream$1.result();
  };

  path.projection = function(_) {
    return arguments.length ? (projectionStream = _ == null ? (projection = null, identity) : (projection = _).stream, path) : projection;
  };

  path.context = function(_) {
    if (!arguments.length) return context;
    contextStream = _ == null ? (context = null, new PathString) : new PathContext(context = _);
    if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
    return path;
  };

  path.pointRadius = function(_) {
    if (!arguments.length) return pointRadius;
    pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
    return path;
  };

  return path.projection(projection).context(context);
}

function transform(methods) {
  return {
    stream: transformer(methods)
  };
}

function transformer(methods) {
  return function(stream) {
    var s = new TransformStream;
    for (var key in methods) s[key] = methods[key];
    s.stream = stream;
    return s;
  };
}

function TransformStream() {}

TransformStream.prototype = {
  constructor: TransformStream,
  point: function(x, y) { this.stream.point(x, y); },
  sphere: function() { this.stream.sphere(); },
  lineStart: function() { this.stream.lineStart(); },
  lineEnd: function() { this.stream.lineEnd(); },
  polygonStart: function() { this.stream.polygonStart(); },
  polygonEnd: function() { this.stream.polygonEnd(); }
};

function fit(projection, fitBounds, object) {
  var clip = projection.clipExtent && projection.clipExtent();
  projection.scale(150).translate([0, 0]);
  if (clip != null) projection.clipExtent(null);
  geoStream(object, projection.stream(boundsStream$1));
  fitBounds(boundsStream$1.result());
  if (clip != null) projection.clipExtent(clip);
  return projection;
}

function fitExtent(projection, extent, object) {
  return fit(projection, function(b) {
    var w = extent[1][0] - extent[0][0],
        h = extent[1][1] - extent[0][1],
        k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),
        x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,
        y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;
    projection.scale(150 * k).translate([x, y]);
  }, object);
}

function fitSize(projection, size, object) {
  return fitExtent(projection, [[0, 0], size], object);
}

function fitWidth(projection, width, object) {
  return fit(projection, function(b) {
    var w = +width,
        k = w / (b[1][0] - b[0][0]),
        x = (w - k * (b[1][0] + b[0][0])) / 2,
        y = -k * b[0][1];
    projection.scale(150 * k).translate([x, y]);
  }, object);
}

function fitHeight(projection, height, object) {
  return fit(projection, function(b) {
    var h = +height,
        k = h / (b[1][1] - b[0][1]),
        x = -k * b[0][0],
        y = (h - k * (b[1][1] + b[0][1])) / 2;
    projection.scale(150 * k).translate([x, y]);
  }, object);
}

var maxDepth = 16, // maximum depth of subdivision
    cosMinDistance = cos(30 * radians); // cos(minimum angular distance)

function resample(project, delta2) {
  return +delta2 ? resample$1(project, delta2) : resampleNone(project);
}

function resampleNone(project) {
  return transformer({
    point: function(x, y) {
      x = project(x, y);
      this.stream.point(x[0], x[1]);
    }
  });
}

function resample$1(project, delta2) {

  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {
    var dx = x1 - x0,
        dy = y1 - y0,
        d2 = dx * dx + dy * dy;
    if (d2 > 4 * delta2 && depth--) {
      var a = a0 + a1,
          b = b0 + b1,
          c = c0 + c1,
          m = sqrt(a * a + b * b + c * c),
          phi2 = asin(c /= m),
          lambda2 = abs(abs(c) - 1) < epsilon || abs(lambda0 - lambda1) < epsilon ? (lambda0 + lambda1) / 2 : atan2(b, a),
          p = project(lambda2, phi2),
          x2 = p[0],
          y2 = p[1],
          dx2 = x2 - x0,
          dy2 = y2 - y0,
          dz = dy * dx2 - dx * dy2;
      if (dz * dz / d2 > delta2 // perpendicular projected distance
          || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end
          || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance
        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);
        stream.point(x2, y2);
        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);
      }
    }
  }
  return function(stream) {
    var lambda00, x00, y00, a00, b00, c00, // first point
        lambda0, x0, y0, a0, b0, c0; // previous point

    var resampleStream = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },
      polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }
    };

    function point(x, y) {
      x = project(x, y);
      stream.point(x[0], x[1]);
    }

    function lineStart() {
      x0 = NaN;
      resampleStream.point = linePoint;
      stream.lineStart();
    }

    function linePoint(lambda, phi) {
      var c = cartesian([lambda, phi]), p = project(lambda, phi);
      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
      stream.point(x0, y0);
    }

    function lineEnd() {
      resampleStream.point = point;
      stream.lineEnd();
    }

    function ringStart() {
      lineStart();
      resampleStream.point = ringPoint;
      resampleStream.lineEnd = ringEnd;
    }

    function ringPoint(lambda, phi) {
      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
      resampleStream.point = linePoint;
    }

    function ringEnd() {
      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);
      resampleStream.lineEnd = lineEnd;
      lineEnd();
    }

    return resampleStream;
  };
}

var transformRadians = transformer({
  point: function(x, y) {
    this.stream.point(x * radians, y * radians);
  }
});

function transformRotate(rotate) {
  return transformer({
    point: function(x, y) {
      var r = rotate(x, y);
      return this.stream.point(r[0], r[1]);
    }
  });
}

function scaleTranslate(k, dx, dy) {
  function transform$$1(x, y) {
    return [dx + k * x, dy - k * y];
  }
  transform$$1.invert = function(x, y) {
    return [(x - dx) / k, (dy - y) / k];
  };
  return transform$$1;
}

function scaleTranslateRotate(k, dx, dy, alpha) {
  var cosAlpha = cos(alpha),
      sinAlpha = sin(alpha),
      a = cosAlpha * k,
      b = sinAlpha * k,
      ai = cosAlpha / k,
      bi = sinAlpha / k,
      ci = (sinAlpha * dy - cosAlpha * dx) / k,
      fi = (sinAlpha * dx + cosAlpha * dy) / k;
  function transform$$1(x, y) {
    return [a * x - b * y + dx, dy - b * x - a * y];
  }
  transform$$1.invert = function(x, y) {
    return [ai * x - bi * y + ci, fi - bi * x - ai * y];
  };
  return transform$$1;
}

function projection(project) {
  return projectionMutator(function() { return project; })();
}

function projectionMutator(projectAt) {
  var project,
      k = 150, // scale
      x = 480, y = 250, // translate
      lambda = 0, phi = 0, // center
      deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, // pre-rotate
      alpha = 0, // post-rotate
      theta = null, preclip = clipAntimeridian, // pre-clip angle
      x0 = null, y0, x1, y1, postclip = identity, // post-clip extent
      delta2 = 0.5, // precision
      projectResample,
      projectTransform,
      projectRotateTransform,
      cache,
      cacheStream;

  function projection(point) {
    return projectRotateTransform(point[0] * radians, point[1] * radians);
  }

  function invert(point) {
    point = projectRotateTransform.invert(point[0], point[1]);
    return point && [point[0] * degrees, point[1] * degrees];
  }

  projection.stream = function(stream) {
    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));
  };

  projection.preclip = function(_) {
    return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;
  };

  projection.postclip = function(_) {
    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
  };

  projection.clipAngle = function(_) {
    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;
  };

  projection.clipExtent = function(_) {
    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
  };

  projection.scale = function(_) {
    return arguments.length ? (k = +_, recenter()) : k;
  };

  projection.translate = function(_) {
    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];
  };

  projection.center = function(_) {
    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];
  };

  projection.rotate = function(_) {
    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];
  };

  projection.angle = function(_) {
    return arguments.length ? (alpha = _ % 360 * radians, recenter()) : alpha * degrees;
  };

  projection.precision = function(_) {
    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);
  };

  projection.fitExtent = function(extent, object) {
    return fitExtent(projection, extent, object);
  };

  projection.fitSize = function(size, object) {
    return fitSize(projection, size, object);
  };

  projection.fitWidth = function(width, object) {
    return fitWidth(projection, width, object);
  };

  projection.fitHeight = function(height, object) {
    return fitHeight(projection, height, object);
  };

  function recenter() {
    var center = scaleTranslateRotate(k, 0, 0, alpha).apply(null, project(lambda, phi)),
        transform$$1 = (alpha ? scaleTranslateRotate : scaleTranslate)(k, x - center[0], y - center[1], alpha);
    rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma);
    projectTransform = compose(project, transform$$1);
    projectRotateTransform = compose(rotate, projectTransform);
    projectResample = resample(projectTransform, delta2);
    return reset();
  }

  function reset() {
    cache = cacheStream = null;
    return projection;
  }

  return function() {
    project = projectAt.apply(this, arguments);
    projection.invert = project.invert && invert;
    return recenter();
  };
}

function conicProjection(projectAt) {
  var phi0 = 0,
      phi1 = pi / 3,
      m = projectionMutator(projectAt),
      p = m(phi0, phi1);

  p.parallels = function(_) {
    return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees, phi1 * degrees];
  };

  return p;
}

function cylindricalEqualAreaRaw(phi0) {
  var cosPhi0 = cos(phi0);

  function forward(lambda, phi) {
    return [lambda * cosPhi0, sin(phi) / cosPhi0];
  }

  forward.invert = function(x, y) {
    return [x / cosPhi0, asin(y * cosPhi0)];
  };

  return forward;
}

function conicEqualAreaRaw(y0, y1) {
  var sy0 = sin(y0), n = (sy0 + sin(y1)) / 2;

  // Are the parallels symmetrical around the Equator?
  if (abs(n) < epsilon) return cylindricalEqualAreaRaw(y0);

  var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt(c) / n;

  function project(x, y) {
    var r = sqrt(c - 2 * n * sin(y)) / n;
    return [r * sin(x *= n), r0 - r * cos(x)];
  }

  project.invert = function(x, y) {
    var r0y = r0 - y;
    return [atan2(x, abs(r0y)) / n * sign(r0y), asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];
  };

  return project;
}

function conicEqualArea() {
  return conicProjection(conicEqualAreaRaw)
      .scale(155.424)
      .center([0, 33.6442]);
}

function albers() {
  return conicEqualArea()
      .parallels([29.5, 45.5])
      .scale(1070)
      .translate([480, 250])
      .rotate([96, 0])
      .center([-0.6, 38.7]);
}

// The projections must have mutually exclusive clip regions on the sphere,
// as this will avoid emitting interleaving lines and polygons.
function multiplex(streams) {
  var n = streams.length;
  return {
    point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },
    sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },
    lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },
    lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },
    polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },
    polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }
  };
}

// A composite projection for the United States, configured by default for
// 960×500. The projection also works quite well at 960×600 if you change the
// scale to 1285 and adjust the translate accordingly. The set of standard
// parallels for each region comes from USGS, which is published here:
// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers
function albersUsa() {
  var cache,
      cacheStream,
      lower48 = albers(), lower48Point,
      alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338
      hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007
      point, pointStream = {point: function(x, y) { point = [x, y]; }};

  function albersUsa(coordinates) {
    var x = coordinates[0], y = coordinates[1];
    return point = null,
        (lower48Point.point(x, y), point)
        || (alaskaPoint.point(x, y), point)
        || (hawaiiPoint.point(x, y), point);
  }

  albersUsa.invert = function(coordinates) {
    var k = lower48.scale(),
        t = lower48.translate(),
        x = (coordinates[0] - t[0]) / k,
        y = (coordinates[1] - t[1]) / k;
    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska
        : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii
        : lower48).invert(coordinates);
  };

  albersUsa.stream = function(stream) {
    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);
  };

  albersUsa.precision = function(_) {
    if (!arguments.length) return lower48.precision();
    lower48.precision(_), alaska.precision(_), hawaii.precision(_);
    return reset();
  };

  albersUsa.scale = function(_) {
    if (!arguments.length) return lower48.scale();
    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);
    return albersUsa.translate(lower48.translate());
  };

  albersUsa.translate = function(_) {
    if (!arguments.length) return lower48.translate();
    var k = lower48.scale(), x = +_[0], y = +_[1];

    lower48Point = lower48
        .translate(_)
        .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])
        .stream(pointStream);

    alaskaPoint = alaska
        .translate([x - 0.307 * k, y + 0.201 * k])
        .clipExtent([[x - 0.425 * k + epsilon, y + 0.120 * k + epsilon], [x - 0.214 * k - epsilon, y + 0.234 * k - epsilon]])
        .stream(pointStream);

    hawaiiPoint = hawaii
        .translate([x - 0.205 * k, y + 0.212 * k])
        .clipExtent([[x - 0.214 * k + epsilon, y + 0.166 * k + epsilon], [x - 0.115 * k - epsilon, y + 0.234 * k - epsilon]])
        .stream(pointStream);

    return reset();
  };

  albersUsa.fitExtent = function(extent, object) {
    return fitExtent(albersUsa, extent, object);
  };

  albersUsa.fitSize = function(size, object) {
    return fitSize(albersUsa, size, object);
  };

  albersUsa.fitWidth = function(width, object) {
    return fitWidth(albersUsa, width, object);
  };

  albersUsa.fitHeight = function(height, object) {
    return fitHeight(albersUsa, height, object);
  };

  function reset() {
    cache = cacheStream = null;
    return albersUsa;
  }

  return albersUsa.scale(1070);
}

function azimuthalRaw(scale) {
  return function(x, y) {
    var cx = cos(x),
        cy = cos(y),
        k = scale(cx * cy);
    return [
      k * cy * sin(x),
      k * sin(y)
    ];
  }
}

function azimuthalInvert(angle) {
  return function(x, y) {
    var z = sqrt(x * x + y * y),
        c = angle(z),
        sc = sin(c),
        cc = cos(c);
    return [
      atan2(x * sc, z * cc),
      asin(z && y * sc / z)
    ];
  }
}

var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {
  return sqrt(2 / (1 + cxcy));
});

azimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {
  return 2 * asin(z / 2);
});

function azimuthalEqualArea() {
  return projection(azimuthalEqualAreaRaw)
      .scale(124.75)
      .clipAngle(180 - 1e-3);
}

var azimuthalEquidistantRaw = azimuthalRaw(function(c) {
  return (c = acos(c)) && c / sin(c);
});

azimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {
  return z;
});

function azimuthalEquidistant() {
  return projection(azimuthalEquidistantRaw)
      .scale(79.4188)
      .clipAngle(180 - 1e-3);
}

function mercatorRaw(lambda, phi) {
  return [lambda, log(tan((halfPi + phi) / 2))];
}

mercatorRaw.invert = function(x, y) {
  return [x, 2 * atan(exp(y)) - halfPi];
};

function mercator() {
  return mercatorProjection(mercatorRaw)
      .scale(961 / tau);
}

function mercatorProjection(project) {
  var m = projection(project),
      center = m.center,
      scale = m.scale,
      translate = m.translate,
      clipExtent = m.clipExtent,
      x0 = null, y0, x1, y1; // clip extent

  m.scale = function(_) {
    return arguments.length ? (scale(_), reclip()) : scale();
  };

  m.translate = function(_) {
    return arguments.length ? (translate(_), reclip()) : translate();
  };

  m.center = function(_) {
    return arguments.length ? (center(_), reclip()) : center();
  };

  m.clipExtent = function(_) {
    return arguments.length ? ((_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1])), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];
  };

  function reclip() {
    var k = pi * scale(),
        t = m(rotation(m.rotate()).invert([0, 0]));
    return clipExtent(x0 == null
        ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw
        ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]]
        : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);
  }

  return reclip();
}

function tany(y) {
  return tan((halfPi + y) / 2);
}

function conicConformalRaw(y0, y1) {
  var cy0 = cos(y0),
      n = y0 === y1 ? sin(y0) : log(cy0 / cos(y1)) / log(tany(y1) / tany(y0)),
      f = cy0 * pow(tany(y0), n) / n;

  if (!n) return mercatorRaw;

  function project(x, y) {
    if (f > 0) { if (y < -halfPi + epsilon) y = -halfPi + epsilon; }
    else { if (y > halfPi - epsilon) y = halfPi - epsilon; }
    var r = f / pow(tany(y), n);
    return [r * sin(n * x), f - r * cos(n * x)];
  }

  project.invert = function(x, y) {
    var fy = f - y, r = sign(n) * sqrt(x * x + fy * fy);
    return [atan2(x, abs(fy)) / n * sign(fy), 2 * atan(pow(f / r, 1 / n)) - halfPi];
  };

  return project;
}

function conicConformal() {
  return conicProjection(conicConformalRaw)
      .scale(109.5)
      .parallels([30, 30]);
}

function equirectangularRaw(lambda, phi) {
  return [lambda, phi];
}

equirectangularRaw.invert = equirectangularRaw;

function equirectangular() {
  return projection(equirectangularRaw)
      .scale(152.63);
}

function conicEquidistantRaw(y0, y1) {
  var cy0 = cos(y0),
      n = y0 === y1 ? sin(y0) : (cy0 - cos(y1)) / (y1 - y0),
      g = cy0 / n + y0;

  if (abs(n) < epsilon) return equirectangularRaw;

  function project(x, y) {
    var gy = g - y, nx = n * x;
    return [gy * sin(nx), g - gy * cos(nx)];
  }

  project.invert = function(x, y) {
    var gy = g - y;
    return [atan2(x, abs(gy)) / n * sign(gy), g - sign(n) * sqrt(x * x + gy * gy)];
  };

  return project;
}

function conicEquidistant() {
  return conicProjection(conicEquidistantRaw)
      .scale(131.154)
      .center([0, 13.9389]);
}

var A1 = 1.340264,
    A2 = -0.081106,
    A3 = 0.000893,
    A4 = 0.003796,
    M = sqrt(3) / 2,
    iterations = 12;

function equalEarthRaw(lambda, phi) {
  var l = asin(M * sin(phi)), l2 = l * l, l6 = l2 * l2 * l2;
  return [
    lambda * cos(l) / (M * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2))),
    l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2))
  ];
}

equalEarthRaw.invert = function(x, y) {
  var l = y, l2 = l * l, l6 = l2 * l2 * l2;
  for (var i = 0, delta, fy, fpy; i < iterations; ++i) {
    fy = l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2)) - y;
    fpy = A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2);
    l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2;
    if (abs(delta) < epsilon2) break;
  }
  return [
    M * x * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2)) / cos(l),
    asin(sin(l) / M)
  ];
};

function equalEarth() {
  return projection(equalEarthRaw)
      .scale(177.158);
}

function gnomonicRaw(x, y) {
  var cy = cos(y), k = cos(x) * cy;
  return [cy * sin(x) / k, sin(y) / k];
}

gnomonicRaw.invert = azimuthalInvert(atan);

function gnomonic() {
  return projection(gnomonicRaw)
      .scale(144.049)
      .clipAngle(60);
}

function scaleTranslate$1(kx, ky, tx, ty) {
  return kx === 1 && ky === 1 && tx === 0 && ty === 0 ? identity : transformer({
    point: function(x, y) {
      this.stream.point(x * kx + tx, y * ky + ty);
    }
  });
}

function identity$1() {
  var k = 1, tx = 0, ty = 0, sx = 1, sy = 1, transform$$1 = identity, // scale, translate and reflect
      x0 = null, y0, x1, y1, // clip extent
      postclip = identity,
      cache,
      cacheStream,
      projection;

  function reset() {
    cache = cacheStream = null;
    return projection;
  }

  return projection = {
    stream: function(stream) {
      return cache && cacheStream === stream ? cache : cache = transform$$1(postclip(cacheStream = stream));
    },
    postclip: function(_) {
      return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
    },
    clipExtent: function(_) {
      return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
    },
    scale: function(_) {
      return arguments.length ? (transform$$1 = scaleTranslate$1((k = +_) * sx, k * sy, tx, ty), reset()) : k;
    },
    translate: function(_) {
      return arguments.length ? (transform$$1 = scaleTranslate$1(k * sx, k * sy, tx = +_[0], ty = +_[1]), reset()) : [tx, ty];
    },
    reflectX: function(_) {
      return arguments.length ? (transform$$1 = scaleTranslate$1(k * (sx = _ ? -1 : 1), k * sy, tx, ty), reset()) : sx < 0;
    },
    reflectY: function(_) {
      return arguments.length ? (transform$$1 = scaleTranslate$1(k * sx, k * (sy = _ ? -1 : 1), tx, ty), reset()) : sy < 0;
    },
    fitExtent: function(extent, object) {
      return fitExtent(projection, extent, object);
    },
    fitSize: function(size, object) {
      return fitSize(projection, size, object);
    },
    fitWidth: function(width, object) {
      return fitWidth(projection, width, object);
    },
    fitHeight: function(height, object) {
      return fitHeight(projection, height, object);
    }
  };
}

function naturalEarth1Raw(lambda, phi) {
  var phi2 = phi * phi, phi4 = phi2 * phi2;
  return [
    lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))),
    phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))
  ];
}

naturalEarth1Raw.invert = function(x, y) {
  var phi = y, i = 25, delta;
  do {
    var phi2 = phi * phi, phi4 = phi2 * phi2;
    phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) /
        (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));
  } while (abs(delta) > epsilon && --i > 0);
  return [
    x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))),
    phi
  ];
};

function naturalEarth1() {
  return projection(naturalEarth1Raw)
      .scale(175.295);
}

function orthographicRaw(x, y) {
  return [cos(y) * sin(x), sin(y)];
}

orthographicRaw.invert = azimuthalInvert(asin);

function orthographic() {
  return projection(orthographicRaw)
      .scale(249.5)
      .clipAngle(90 + epsilon);
}

function stereographicRaw(x, y) {
  var cy = cos(y), k = 1 + cos(x) * cy;
  return [cy * sin(x) / k, sin(y) / k];
}

stereographicRaw.invert = azimuthalInvert(function(z) {
  return 2 * atan(z);
});

function stereographic() {
  return projection(stereographicRaw)
      .scale(250)
      .clipAngle(142);
}

function transverseMercatorRaw(lambda, phi) {
  return [log(tan((halfPi + phi) / 2)), -lambda];
}

transverseMercatorRaw.invert = function(x, y) {
  return [-y, 2 * atan(exp(x)) - halfPi];
};

function transverseMercator() {
  var m = mercatorProjection(transverseMercatorRaw),
      center = m.center,
      rotate = m.rotate;

  m.center = function(_) {
    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);
  };

  m.rotate = function(_) {
    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);
  };

  return rotate([0, 0, 90])
      .scale(159.155);
}

exports.geoArea = area;
exports.geoBounds = bounds;
exports.geoCentroid = centroid;
exports.geoCircle = circle;
exports.geoClipAntimeridian = clipAntimeridian;
exports.geoClipCircle = clipCircle;
exports.geoClipExtent = extent;
exports.geoClipRectangle = clipRectangle;
exports.geoContains = contains;
exports.geoDistance = distance;
exports.geoGraticule = graticule;
exports.geoGraticule10 = graticule10;
exports.geoInterpolate = interpolate;
exports.geoLength = length;
exports.geoPath = index;
exports.geoAlbers = albers;
exports.geoAlbersUsa = albersUsa;
exports.geoAzimuthalEqualArea = azimuthalEqualArea;
exports.geoAzimuthalEqualAreaRaw = azimuthalEqualAreaRaw;
exports.geoAzimuthalEquidistant = azimuthalEquidistant;
exports.geoAzimuthalEquidistantRaw = azimuthalEquidistantRaw;
exports.geoConicConformal = conicConformal;
exports.geoConicConformalRaw = conicConformalRaw;
exports.geoConicEqualArea = conicEqualArea;
exports.geoConicEqualAreaRaw = conicEqualAreaRaw;
exports.geoConicEquidistant = conicEquidistant;
exports.geoConicEquidistantRaw = conicEquidistantRaw;
exports.geoEqualEarth = equalEarth;
exports.geoEqualEarthRaw = equalEarthRaw;
exports.geoEquirectangular = equirectangular;
exports.geoEquirectangularRaw = equirectangularRaw;
exports.geoGnomonic = gnomonic;
exports.geoGnomonicRaw = gnomonicRaw;
exports.geoIdentity = identity$1;
exports.geoProjection = projection;
exports.geoProjectionMutator = projectionMutator;
exports.geoMercator = mercator;
exports.geoMercatorRaw = mercatorRaw;
exports.geoNaturalEarth1 = naturalEarth1;
exports.geoNaturalEarth1Raw = naturalEarth1Raw;
exports.geoOrthographic = orthographic;
exports.geoOrthographicRaw = orthographicRaw;
exports.geoStereographic = stereographic;
exports.geoStereographicRaw = stereographicRaw;
exports.geoTransverseMercator = transverseMercator;
exports.geoTransverseMercatorRaw = transverseMercatorRaw;
exports.geoRotation = rotation;
exports.geoStream = geoStream;
exports.geoTransform = transform;

Object.defineProperty(exports, '__esModule', { value: true });

})));

},{"d3-array":7}],22:[function(require,module,exports){
// https://d3js.org/d3-hierarchy/ v1.1.8 Copyright 2018 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
typeof define === 'function' && define.amd ? define(['exports'], factory) :
(factory((global.d3 = global.d3 || {})));
}(this, (function (exports) { 'use strict';

function defaultSeparation(a, b) {
  return a.parent === b.parent ? 1 : 2;
}

function meanX(children) {
  return children.reduce(meanXReduce, 0) / children.length;
}

function meanXReduce(x, c) {
  return x + c.x;
}

function maxY(children) {
  return 1 + children.reduce(maxYReduce, 0);
}

function maxYReduce(y, c) {
  return Math.max(y, c.y);
}

function leafLeft(node) {
  var children;
  while (children = node.children) node = children[0];
  return node;
}

function leafRight(node) {
  var children;
  while (children = node.children) node = children[children.length - 1];
  return node;
}

function cluster() {
  var separation = defaultSeparation,
      dx = 1,
      dy = 1,
      nodeSize = false;

  function cluster(root) {
    var previousNode,
        x = 0;

    // First walk, computing the initial x & y values.
    root.eachAfter(function(node) {
      var children = node.children;
      if (children) {
        node.x = meanX(children);
        node.y = maxY(children);
      } else {
        node.x = previousNode ? x += separation(node, previousNode) : 0;
        node.y = 0;
        previousNode = node;
      }
    });

    var left = leafLeft(root),
        right = leafRight(root),
        x0 = left.x - separation(left, right) / 2,
        x1 = right.x + separation(right, left) / 2;

    // Second walk, normalizing x & y to the desired size.
    return root.eachAfter(nodeSize ? function(node) {
      node.x = (node.x - root.x) * dx;
      node.y = (root.y - node.y) * dy;
    } : function(node) {
      node.x = (node.x - x0) / (x1 - x0) * dx;
      node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;
    });
  }

  cluster.separation = function(x) {
    return arguments.length ? (separation = x, cluster) : separation;
  };

  cluster.size = function(x) {
    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? null : [dx, dy]);
  };

  cluster.nodeSize = function(x) {
    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? [dx, dy] : null);
  };

  return cluster;
}

function count(node) {
  var sum = 0,
      children = node.children,
      i = children && children.length;
  if (!i) sum = 1;
  else while (--i >= 0) sum += children[i].value;
  node.value = sum;
}

function node_count() {
  return this.eachAfter(count);
}

function node_each(callback) {
  var node = this, current, next = [node], children, i, n;
  do {
    current = next.reverse(), next = [];
    while (node = current.pop()) {
      callback(node), children = node.children;
      if (children) for (i = 0, n = children.length; i < n; ++i) {
        next.push(children[i]);
      }
    }
  } while (next.length);
  return this;
}

function node_eachBefore(callback) {
  var node = this, nodes = [node], children, i;
  while (node = nodes.pop()) {
    callback(node), children = node.children;
    if (children) for (i = children.length - 1; i >= 0; --i) {
      nodes.push(children[i]);
    }
  }
  return this;
}

function node_eachAfter(callback) {
  var node = this, nodes = [node], next = [], children, i, n;
  while (node = nodes.pop()) {
    next.push(node), children = node.children;
    if (children) for (i = 0, n = children.length; i < n; ++i) {
      nodes.push(children[i]);
    }
  }
  while (node = next.pop()) {
    callback(node);
  }
  return this;
}

function node_sum(value) {
  return this.eachAfter(function(node) {
    var sum = +value(node.data) || 0,
        children = node.children,
        i = children && children.length;
    while (--i >= 0) sum += children[i].value;
    node.value = sum;
  });
}

function node_sort(compare) {
  return this.eachBefore(function(node) {
    if (node.children) {
      node.children.sort(compare);
    }
  });
}

function node_path(end) {
  var start = this,
      ancestor = leastCommonAncestor(start, end),
      nodes = [start];
  while (start !== ancestor) {
    start = start.parent;
    nodes.push(start);
  }
  var k = nodes.length;
  while (end !== ancestor) {
    nodes.splice(k, 0, end);
    end = end.parent;
  }
  return nodes;
}

function leastCommonAncestor(a, b) {
  if (a === b) return a;
  var aNodes = a.ancestors(),
      bNodes = b.ancestors(),
      c = null;
  a = aNodes.pop();
  b = bNodes.pop();
  while (a === b) {
    c = a;
    a = aNodes.pop();
    b = bNodes.pop();
  }
  return c;
}

function node_ancestors() {
  var node = this, nodes = [node];
  while (node = node.parent) {
    nodes.push(node);
  }
  return nodes;
}

function node_descendants() {
  var nodes = [];
  this.each(function(node) {
    nodes.push(node);
  });
  return nodes;
}

function node_leaves() {
  var leaves = [];
  this.eachBefore(function(node) {
    if (!node.children) {
      leaves.push(node);
    }
  });
  return leaves;
}

function node_links() {
  var root = this, links = [];
  root.each(function(node) {
    if (node !== root) { // Don’t include the root’s parent, if any.
      links.push({source: node.parent, target: node});
    }
  });
  return links;
}

function hierarchy(data, children) {
  var root = new Node(data),
      valued = +data.value && (root.value = data.value),
      node,
      nodes = [root],
      child,
      childs,
      i,
      n;

  if (children == null) children = defaultChildren;

  while (node = nodes.pop()) {
    if (valued) node.value = +node.data.value;
    if ((childs = children(node.data)) && (n = childs.length)) {
      node.children = new Array(n);
      for (i = n - 1; i >= 0; --i) {
        nodes.push(child = node.children[i] = new Node(childs[i]));
        child.parent = node;
        child.depth = node.depth + 1;
      }
    }
  }

  return root.eachBefore(computeHeight);
}

function node_copy() {
  return hierarchy(this).eachBefore(copyData);
}

function defaultChildren(d) {
  return d.children;
}

function copyData(node) {
  node.data = node.data.data;
}

function computeHeight(node) {
  var height = 0;
  do node.height = height;
  while ((node = node.parent) && (node.height < ++height));
}

function Node(data) {
  this.data = data;
  this.depth =
  this.height = 0;
  this.parent = null;
}

Node.prototype = hierarchy.prototype = {
  constructor: Node,
  count: node_count,
  each: node_each,
  eachAfter: node_eachAfter,
  eachBefore: node_eachBefore,
  sum: node_sum,
  sort: node_sort,
  path: node_path,
  ancestors: node_ancestors,
  descendants: node_descendants,
  leaves: node_leaves,
  links: node_links,
  copy: node_copy
};

var slice = Array.prototype.slice;

function shuffle(array) {
  var m = array.length,
      t,
      i;

  while (m) {
    i = Math.random() * m-- | 0;
    t = array[m];
    array[m] = array[i];
    array[i] = t;
  }

  return array;
}

function enclose(circles) {
  var i = 0, n = (circles = shuffle(slice.call(circles))).length, B = [], p, e;

  while (i < n) {
    p = circles[i];
    if (e && enclosesWeak(e, p)) ++i;
    else e = encloseBasis(B = extendBasis(B, p)), i = 0;
  }

  return e;
}

function extendBasis(B, p) {
  var i, j;

  if (enclosesWeakAll(p, B)) return [p];

  // If we get here then B must have at least one element.
  for (i = 0; i < B.length; ++i) {
    if (enclosesNot(p, B[i])
        && enclosesWeakAll(encloseBasis2(B[i], p), B)) {
      return [B[i], p];
    }
  }

  // If we get here then B must have at least two elements.
  for (i = 0; i < B.length - 1; ++i) {
    for (j = i + 1; j < B.length; ++j) {
      if (enclosesNot(encloseBasis2(B[i], B[j]), p)
          && enclosesNot(encloseBasis2(B[i], p), B[j])
          && enclosesNot(encloseBasis2(B[j], p), B[i])
          && enclosesWeakAll(encloseBasis3(B[i], B[j], p), B)) {
        return [B[i], B[j], p];
      }
    }
  }

  // If we get here then something is very wrong.
  throw new Error;
}

function enclosesNot(a, b) {
  var dr = a.r - b.r, dx = b.x - a.x, dy = b.y - a.y;
  return dr < 0 || dr * dr < dx * dx + dy * dy;
}

function enclosesWeak(a, b) {
  var dr = a.r - b.r + 1e-6, dx = b.x - a.x, dy = b.y - a.y;
  return dr > 0 && dr * dr > dx * dx + dy * dy;
}

function enclosesWeakAll(a, B) {
  for (var i = 0; i < B.length; ++i) {
    if (!enclosesWeak(a, B[i])) {
      return false;
    }
  }
  return true;
}

function encloseBasis(B) {
  switch (B.length) {
    case 1: return encloseBasis1(B[0]);
    case 2: return encloseBasis2(B[0], B[1]);
    case 3: return encloseBasis3(B[0], B[1], B[2]);
  }
}

function encloseBasis1(a) {
  return {
    x: a.x,
    y: a.y,
    r: a.r
  };
}

function encloseBasis2(a, b) {
  var x1 = a.x, y1 = a.y, r1 = a.r,
      x2 = b.x, y2 = b.y, r2 = b.r,
      x21 = x2 - x1, y21 = y2 - y1, r21 = r2 - r1,
      l = Math.sqrt(x21 * x21 + y21 * y21);
  return {
    x: (x1 + x2 + x21 / l * r21) / 2,
    y: (y1 + y2 + y21 / l * r21) / 2,
    r: (l + r1 + r2) / 2
  };
}

function encloseBasis3(a, b, c) {
  var x1 = a.x, y1 = a.y, r1 = a.r,
      x2 = b.x, y2 = b.y, r2 = b.r,
      x3 = c.x, y3 = c.y, r3 = c.r,
      a2 = x1 - x2,
      a3 = x1 - x3,
      b2 = y1 - y2,
      b3 = y1 - y3,
      c2 = r2 - r1,
      c3 = r3 - r1,
      d1 = x1 * x1 + y1 * y1 - r1 * r1,
      d2 = d1 - x2 * x2 - y2 * y2 + r2 * r2,
      d3 = d1 - x3 * x3 - y3 * y3 + r3 * r3,
      ab = a3 * b2 - a2 * b3,
      xa = (b2 * d3 - b3 * d2) / (ab * 2) - x1,
      xb = (b3 * c2 - b2 * c3) / ab,
      ya = (a3 * d2 - a2 * d3) / (ab * 2) - y1,
      yb = (a2 * c3 - a3 * c2) / ab,
      A = xb * xb + yb * yb - 1,
      B = 2 * (r1 + xa * xb + ya * yb),
      C = xa * xa + ya * ya - r1 * r1,
      r = -(A ? (B + Math.sqrt(B * B - 4 * A * C)) / (2 * A) : C / B);
  return {
    x: x1 + xa + xb * r,
    y: y1 + ya + yb * r,
    r: r
  };
}

function place(b, a, c) {
  var dx = b.x - a.x, x, a2,
      dy = b.y - a.y, y, b2,
      d2 = dx * dx + dy * dy;
  if (d2) {
    a2 = a.r + c.r, a2 *= a2;
    b2 = b.r + c.r, b2 *= b2;
    if (a2 > b2) {
      x = (d2 + b2 - a2) / (2 * d2);
      y = Math.sqrt(Math.max(0, b2 / d2 - x * x));
      c.x = b.x - x * dx - y * dy;
      c.y = b.y - x * dy + y * dx;
    } else {
      x = (d2 + a2 - b2) / (2 * d2);
      y = Math.sqrt(Math.max(0, a2 / d2 - x * x));
      c.x = a.x + x * dx - y * dy;
      c.y = a.y + x * dy + y * dx;
    }
  } else {
    c.x = a.x + c.r;
    c.y = a.y;
  }
}

function intersects(a, b) {
  var dr = a.r + b.r - 1e-6, dx = b.x - a.x, dy = b.y - a.y;
  return dr > 0 && dr * dr > dx * dx + dy * dy;
}

function score(node) {
  var a = node._,
      b = node.next._,
      ab = a.r + b.r,
      dx = (a.x * b.r + b.x * a.r) / ab,
      dy = (a.y * b.r + b.y * a.r) / ab;
  return dx * dx + dy * dy;
}

function Node$1(circle) {
  this._ = circle;
  this.next = null;
  this.previous = null;
}

function packEnclose(circles) {
  if (!(n = circles.length)) return 0;

  var a, b, c, n, aa, ca, i, j, k, sj, sk;

  // Place the first circle.
  a = circles[0], a.x = 0, a.y = 0;
  if (!(n > 1)) return a.r;

  // Place the second circle.
  b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;
  if (!(n > 2)) return a.r + b.r;

  // Place the third circle.
  place(b, a, c = circles[2]);

  // Initialize the front-chain using the first three circles a, b and c.
  a = new Node$1(a), b = new Node$1(b), c = new Node$1(c);
  a.next = c.previous = b;
  b.next = a.previous = c;
  c.next = b.previous = a;

  // Attempt to place each remaining circle…
  pack: for (i = 3; i < n; ++i) {
    place(a._, b._, c = circles[i]), c = new Node$1(c);

    // Find the closest intersecting circle on the front-chain, if any.
    // “Closeness” is determined by linear distance along the front-chain.
    // “Ahead” or “behind” is likewise determined by linear distance.
    j = b.next, k = a.previous, sj = b._.r, sk = a._.r;
    do {
      if (sj <= sk) {
        if (intersects(j._, c._)) {
          b = j, a.next = b, b.previous = a, --i;
          continue pack;
        }
        sj += j._.r, j = j.next;
      } else {
        if (intersects(k._, c._)) {
          a = k, a.next = b, b.previous = a, --i;
          continue pack;
        }
        sk += k._.r, k = k.previous;
      }
    } while (j !== k.next);

    // Success! Insert the new circle c between a and b.
    c.previous = a, c.next = b, a.next = b.previous = b = c;

    // Compute the new closest circle pair to the centroid.
    aa = score(a);
    while ((c = c.next) !== b) {
      if ((ca = score(c)) < aa) {
        a = c, aa = ca;
      }
    }
    b = a.next;
  }

  // Compute the enclosing circle of the front chain.
  a = [b._], c = b; while ((c = c.next) !== b) a.push(c._); c = enclose(a);

  // Translate the circles to put the enclosing circle around the origin.
  for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;

  return c.r;
}

function siblings(circles) {
  packEnclose(circles);
  return circles;
}

function optional(f) {
  return f == null ? null : required(f);
}

function required(f) {
  if (typeof f !== "function") throw new Error;
  return f;
}

function constantZero() {
  return 0;
}

function constant(x) {
  return function() {
    return x;
  };
}

function defaultRadius(d) {
  return Math.sqrt(d.value);
}

function index() {
  var radius = null,
      dx = 1,
      dy = 1,
      padding = constantZero;

  function pack(root) {
    root.x = dx / 2, root.y = dy / 2;
    if (radius) {
      root.eachBefore(radiusLeaf(radius))
          .eachAfter(packChildren(padding, 0.5))
          .eachBefore(translateChild(1));
    } else {
      root.eachBefore(radiusLeaf(defaultRadius))
          .eachAfter(packChildren(constantZero, 1))
          .eachAfter(packChildren(padding, root.r / Math.min(dx, dy)))
          .eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));
    }
    return root;
  }

  pack.radius = function(x) {
    return arguments.length ? (radius = optional(x), pack) : radius;
  };

  pack.size = function(x) {
    return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];
  };

  pack.padding = function(x) {
    return arguments.length ? (padding = typeof x === "function" ? x : constant(+x), pack) : padding;
  };

  return pack;
}

function radiusLeaf(radius) {
  return function(node) {
    if (!node.children) {
      node.r = Math.max(0, +radius(node) || 0);
    }
  };
}

function packChildren(padding, k) {
  return function(node) {
    if (children = node.children) {
      var children,
          i,
          n = children.length,
          r = padding(node) * k || 0,
          e;

      if (r) for (i = 0; i < n; ++i) children[i].r += r;
      e = packEnclose(children);
      if (r) for (i = 0; i < n; ++i) children[i].r -= r;
      node.r = e + r;
    }
  };
}

function translateChild(k) {
  return function(node) {
    var parent = node.parent;
    node.r *= k;
    if (parent) {
      node.x = parent.x + k * node.x;
      node.y = parent.y + k * node.y;
    }
  };
}

function roundNode(node) {
  node.x0 = Math.round(node.x0);
  node.y0 = Math.round(node.y0);
  node.x1 = Math.round(node.x1);
  node.y1 = Math.round(node.y1);
}

function treemapDice(parent, x0, y0, x1, y1) {
  var nodes = parent.children,
      node,
      i = -1,
      n = nodes.length,
      k = parent.value && (x1 - x0) / parent.value;

  while (++i < n) {
    node = nodes[i], node.y0 = y0, node.y1 = y1;
    node.x0 = x0, node.x1 = x0 += node.value * k;
  }
}

function partition() {
  var dx = 1,
      dy = 1,
      padding = 0,
      round = false;

  function partition(root) {
    var n = root.height + 1;
    root.x0 =
    root.y0 = padding;
    root.x1 = dx;
    root.y1 = dy / n;
    root.eachBefore(positionNode(dy, n));
    if (round) root.eachBefore(roundNode);
    return root;
  }

  function positionNode(dy, n) {
    return function(node) {
      if (node.children) {
        treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);
      }
      var x0 = node.x0,
          y0 = node.y0,
          x1 = node.x1 - padding,
          y1 = node.y1 - padding;
      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
      node.x0 = x0;
      node.y0 = y0;
      node.x1 = x1;
      node.y1 = y1;
    };
  }

  partition.round = function(x) {
    return arguments.length ? (round = !!x, partition) : round;
  };

  partition.size = function(x) {
    return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];
  };

  partition.padding = function(x) {
    return arguments.length ? (padding = +x, partition) : padding;
  };

  return partition;
}

var keyPrefix = "$", // Protect against keys like “__proto__”.
    preroot = {depth: -1},
    ambiguous = {};

function defaultId(d) {
  return d.id;
}

function defaultParentId(d) {
  return d.parentId;
}

function stratify() {
  var id = defaultId,
      parentId = defaultParentId;

  function stratify(data) {
    var d,
        i,
        n = data.length,
        root,
        parent,
        node,
        nodes = new Array(n),
        nodeId,
        nodeKey,
        nodeByKey = {};

    for (i = 0; i < n; ++i) {
      d = data[i], node = nodes[i] = new Node(d);
      if ((nodeId = id(d, i, data)) != null && (nodeId += "")) {
        nodeKey = keyPrefix + (node.id = nodeId);
        nodeByKey[nodeKey] = nodeKey in nodeByKey ? ambiguous : node;
      }
    }

    for (i = 0; i < n; ++i) {
      node = nodes[i], nodeId = parentId(data[i], i, data);
      if (nodeId == null || !(nodeId += "")) {
        if (root) throw new Error("multiple roots");
        root = node;
      } else {
        parent = nodeByKey[keyPrefix + nodeId];
        if (!parent) throw new Error("missing: " + nodeId);
        if (parent === ambiguous) throw new Error("ambiguous: " + nodeId);
        if (parent.children) parent.children.push(node);
        else parent.children = [node];
        node.parent = parent;
      }
    }

    if (!root) throw new Error("no root");
    root.parent = preroot;
    root.eachBefore(function(node) { node.depth = node.parent.depth + 1; --n; }).eachBefore(computeHeight);
    root.parent = null;
    if (n > 0) throw new Error("cycle");

    return root;
  }

  stratify.id = function(x) {
    return arguments.length ? (id = required(x), stratify) : id;
  };

  stratify.parentId = function(x) {
    return arguments.length ? (parentId = required(x), stratify) : parentId;
  };

  return stratify;
}

function defaultSeparation$1(a, b) {
  return a.parent === b.parent ? 1 : 2;
}

// function radialSeparation(a, b) {
//   return (a.parent === b.parent ? 1 : 2) / a.depth;
// }

// This function is used to traverse the left contour of a subtree (or
// subforest). It returns the successor of v on this contour. This successor is
// either given by the leftmost child of v or by the thread of v. The function
// returns null if and only if v is on the highest level of its subtree.
function nextLeft(v) {
  var children = v.children;
  return children ? children[0] : v.t;
}

// This function works analogously to nextLeft.
function nextRight(v) {
  var children = v.children;
  return children ? children[children.length - 1] : v.t;
}

// Shifts the current subtree rooted at w+. This is done by increasing
// prelim(w+) and mod(w+) by shift.
function moveSubtree(wm, wp, shift) {
  var change = shift / (wp.i - wm.i);
  wp.c -= change;
  wp.s += shift;
  wm.c += change;
  wp.z += shift;
  wp.m += shift;
}

// All other shifts, applied to the smaller subtrees between w- and w+, are
// performed by this function. To prepare the shifts, we have to adjust
// change(w+), shift(w+), and change(w-).
function executeShifts(v) {
  var shift = 0,
      change = 0,
      children = v.children,
      i = children.length,
      w;
  while (--i >= 0) {
    w = children[i];
    w.z += shift;
    w.m += shift;
    shift += w.s + (change += w.c);
  }
}

// If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,
// returns the specified (default) ancestor.
function nextAncestor(vim, v, ancestor) {
  return vim.a.parent === v.parent ? vim.a : ancestor;
}

function TreeNode(node, i) {
  this._ = node;
  this.parent = null;
  this.children = null;
  this.A = null; // default ancestor
  this.a = this; // ancestor
  this.z = 0; // prelim
  this.m = 0; // mod
  this.c = 0; // change
  this.s = 0; // shift
  this.t = null; // thread
  this.i = i; // number
}

TreeNode.prototype = Object.create(Node.prototype);

function treeRoot(root) {
  var tree = new TreeNode(root, 0),
      node,
      nodes = [tree],
      child,
      children,
      i,
      n;

  while (node = nodes.pop()) {
    if (children = node._.children) {
      node.children = new Array(n = children.length);
      for (i = n - 1; i >= 0; --i) {
        nodes.push(child = node.children[i] = new TreeNode(children[i], i));
        child.parent = node;
      }
    }
  }

  (tree.parent = new TreeNode(null, 0)).children = [tree];
  return tree;
}

// Node-link tree diagram using the Reingold-Tilford "tidy" algorithm
function tree() {
  var separation = defaultSeparation$1,
      dx = 1,
      dy = 1,
      nodeSize = null;

  function tree(root) {
    var t = treeRoot(root);

    // Compute the layout using Buchheim et al.’s algorithm.
    t.eachAfter(firstWalk), t.parent.m = -t.z;
    t.eachBefore(secondWalk);

    // If a fixed node size is specified, scale x and y.
    if (nodeSize) root.eachBefore(sizeNode);

    // If a fixed tree size is specified, scale x and y based on the extent.
    // Compute the left-most, right-most, and depth-most nodes for extents.
    else {
      var left = root,
          right = root,
          bottom = root;
      root.eachBefore(function(node) {
        if (node.x < left.x) left = node;
        if (node.x > right.x) right = node;
        if (node.depth > bottom.depth) bottom = node;
      });
      var s = left === right ? 1 : separation(left, right) / 2,
          tx = s - left.x,
          kx = dx / (right.x + s + tx),
          ky = dy / (bottom.depth || 1);
      root.eachBefore(function(node) {
        node.x = (node.x + tx) * kx;
        node.y = node.depth * ky;
      });
    }

    return root;
  }

  // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is
  // applied recursively to the children of v, as well as the function
  // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the
  // node v is placed to the midpoint of its outermost children.
  function firstWalk(v) {
    var children = v.children,
        siblings = v.parent.children,
        w = v.i ? siblings[v.i - 1] : null;
    if (children) {
      executeShifts(v);
      var midpoint = (children[0].z + children[children.length - 1].z) / 2;
      if (w) {
        v.z = w.z + separation(v._, w._);
        v.m = v.z - midpoint;
      } else {
        v.z = midpoint;
      }
    } else if (w) {
      v.z = w.z + separation(v._, w._);
    }
    v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
  }

  // Computes all real x-coordinates by summing up the modifiers recursively.
  function secondWalk(v) {
    v._.x = v.z + v.parent.m;
    v.m += v.parent.m;
  }

  // The core of the algorithm. Here, a new subtree is combined with the
  // previous subtrees. Threads are used to traverse the inside and outside
  // contours of the left and right subtree up to the highest common level. The
  // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the
  // superscript o means outside and i means inside, the subscript - means left
  // subtree and + means right subtree. For summing up the modifiers along the
  // contour, we use respective variables si+, si-, so-, and so+. Whenever two
  // nodes of the inside contours conflict, we compute the left one of the
  // greatest uncommon ancestors using the function ANCESTOR and call MOVE
  // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.
  // Finally, we add a new thread (if necessary).
  function apportion(v, w, ancestor) {
    if (w) {
      var vip = v,
          vop = v,
          vim = w,
          vom = vip.parent.children[0],
          sip = vip.m,
          sop = vop.m,
          sim = vim.m,
          som = vom.m,
          shift;
      while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {
        vom = nextLeft(vom);
        vop = nextRight(vop);
        vop.a = v;
        shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
        if (shift > 0) {
          moveSubtree(nextAncestor(vim, v, ancestor), v, shift);
          sip += shift;
          sop += shift;
        }
        sim += vim.m;
        sip += vip.m;
        som += vom.m;
        sop += vop.m;
      }
      if (vim && !nextRight(vop)) {
        vop.t = vim;
        vop.m += sim - sop;
      }
      if (vip && !nextLeft(vom)) {
        vom.t = vip;
        vom.m += sip - som;
        ancestor = v;
      }
    }
    return ancestor;
  }

  function sizeNode(node) {
    node.x *= dx;
    node.y = node.depth * dy;
  }

  tree.separation = function(x) {
    return arguments.length ? (separation = x, tree) : separation;
  };

  tree.size = function(x) {
    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : (nodeSize ? null : [dx, dy]);
  };

  tree.nodeSize = function(x) {
    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : (nodeSize ? [dx, dy] : null);
  };

  return tree;
}

function treemapSlice(parent, x0, y0, x1, y1) {
  var nodes = parent.children,
      node,
      i = -1,
      n = nodes.length,
      k = parent.value && (y1 - y0) / parent.value;

  while (++i < n) {
    node = nodes[i], node.x0 = x0, node.x1 = x1;
    node.y0 = y0, node.y1 = y0 += node.value * k;
  }
}

var phi = (1 + Math.sqrt(5)) / 2;

function squarifyRatio(ratio, parent, x0, y0, x1, y1) {
  var rows = [],
      nodes = parent.children,
      row,
      nodeValue,
      i0 = 0,
      i1 = 0,
      n = nodes.length,
      dx, dy,
      value = parent.value,
      sumValue,
      minValue,
      maxValue,
      newRatio,
      minRatio,
      alpha,
      beta;

  while (i0 < n) {
    dx = x1 - x0, dy = y1 - y0;

    // Find the next non-empty node.
    do sumValue = nodes[i1++].value; while (!sumValue && i1 < n);
    minValue = maxValue = sumValue;
    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);
    beta = sumValue * sumValue * alpha;
    minRatio = Math.max(maxValue / beta, beta / minValue);

    // Keep adding nodes while the aspect ratio maintains or improves.
    for (; i1 < n; ++i1) {
      sumValue += nodeValue = nodes[i1].value;
      if (nodeValue < minValue) minValue = nodeValue;
      if (nodeValue > maxValue) maxValue = nodeValue;
      beta = sumValue * sumValue * alpha;
      newRatio = Math.max(maxValue / beta, beta / minValue);
      if (newRatio > minRatio) { sumValue -= nodeValue; break; }
      minRatio = newRatio;
    }

    // Position and record the row orientation.
    rows.push(row = {value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1)});
    if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);
    else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);
    value -= sumValue, i0 = i1;
  }

  return rows;
}

var squarify = (function custom(ratio) {

  function squarify(parent, x0, y0, x1, y1) {
    squarifyRatio(ratio, parent, x0, y0, x1, y1);
  }

  squarify.ratio = function(x) {
    return custom((x = +x) > 1 ? x : 1);
  };

  return squarify;
})(phi);

function index$1() {
  var tile = squarify,
      round = false,
      dx = 1,
      dy = 1,
      paddingStack = [0],
      paddingInner = constantZero,
      paddingTop = constantZero,
      paddingRight = constantZero,
      paddingBottom = constantZero,
      paddingLeft = constantZero;

  function treemap(root) {
    root.x0 =
    root.y0 = 0;
    root.x1 = dx;
    root.y1 = dy;
    root.eachBefore(positionNode);
    paddingStack = [0];
    if (round) root.eachBefore(roundNode);
    return root;
  }

  function positionNode(node) {
    var p = paddingStack[node.depth],
        x0 = node.x0 + p,
        y0 = node.y0 + p,
        x1 = node.x1 - p,
        y1 = node.y1 - p;
    if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
    if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
    node.x0 = x0;
    node.y0 = y0;
    node.x1 = x1;
    node.y1 = y1;
    if (node.children) {
      p = paddingStack[node.depth + 1] = paddingInner(node) / 2;
      x0 += paddingLeft(node) - p;
      y0 += paddingTop(node) - p;
      x1 -= paddingRight(node) - p;
      y1 -= paddingBottom(node) - p;
      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
      tile(node, x0, y0, x1, y1);
    }
  }

  treemap.round = function(x) {
    return arguments.length ? (round = !!x, treemap) : round;
  };

  treemap.size = function(x) {
    return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];
  };

  treemap.tile = function(x) {
    return arguments.length ? (tile = required(x), treemap) : tile;
  };

  treemap.padding = function(x) {
    return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();
  };

  treemap.paddingInner = function(x) {
    return arguments.length ? (paddingInner = typeof x === "function" ? x : constant(+x), treemap) : paddingInner;
  };

  treemap.paddingOuter = function(x) {
    return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();
  };

  treemap.paddingTop = function(x) {
    return arguments.length ? (paddingTop = typeof x === "function" ? x : constant(+x), treemap) : paddingTop;
  };

  treemap.paddingRight = function(x) {
    return arguments.length ? (paddingRight = typeof x === "function" ? x : constant(+x), treemap) : paddingRight;
  };

  treemap.paddingBottom = function(x) {
    return arguments.length ? (paddingBottom = typeof x === "function" ? x : constant(+x), treemap) : paddingBottom;
  };

  treemap.paddingLeft = function(x) {
    return arguments.length ? (paddingLeft = typeof x === "function" ? x : constant(+x), treemap) : paddingLeft;
  };

  return treemap;
}

function binary(parent, x0, y0, x1, y1) {
  var nodes = parent.children,
      i, n = nodes.length,
      sum, sums = new Array(n + 1);

  for (sums[0] = sum = i = 0; i < n; ++i) {
    sums[i + 1] = sum += nodes[i].value;
  }

  partition(0, n, parent.value, x0, y0, x1, y1);

  function partition(i, j, value, x0, y0, x1, y1) {
    if (i >= j - 1) {
      var node = nodes[i];
      node.x0 = x0, node.y0 = y0;
      node.x1 = x1, node.y1 = y1;
      return;
    }

    var valueOffset = sums[i],
        valueTarget = (value / 2) + valueOffset,
        k = i + 1,
        hi = j - 1;

    while (k < hi) {
      var mid = k + hi >>> 1;
      if (sums[mid] < valueTarget) k = mid + 1;
      else hi = mid;
    }

    if ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k) --k;

    var valueLeft = sums[k] - valueOffset,
        valueRight = value - valueLeft;

    if ((x1 - x0) > (y1 - y0)) {
      var xk = (x0 * valueRight + x1 * valueLeft) / value;
      partition(i, k, valueLeft, x0, y0, xk, y1);
      partition(k, j, valueRight, xk, y0, x1, y1);
    } else {
      var yk = (y0 * valueRight + y1 * valueLeft) / value;
      partition(i, k, valueLeft, x0, y0, x1, yk);
      partition(k, j, valueRight, x0, yk, x1, y1);
    }
  }
}

function sliceDice(parent, x0, y0, x1, y1) {
  (parent.depth & 1 ? treemapSlice : treemapDice)(parent, x0, y0, x1, y1);
}

var resquarify = (function custom(ratio) {

  function resquarify(parent, x0, y0, x1, y1) {
    if ((rows = parent._squarify) && (rows.ratio === ratio)) {
      var rows,
          row,
          nodes,
          i,
          j = -1,
          n,
          m = rows.length,
          value = parent.value;

      while (++j < m) {
        row = rows[j], nodes = row.children;
        for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;
        if (row.dice) treemapDice(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);
        else treemapSlice(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);
        value -= row.value;
      }
    } else {
      parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);
      rows.ratio = ratio;
    }
  }

  resquarify.ratio = function(x) {
    return custom((x = +x) > 1 ? x : 1);
  };

  return resquarify;
})(phi);

exports.cluster = cluster;
exports.hierarchy = hierarchy;
exports.pack = index;
exports.packSiblings = siblings;
exports.packEnclose = enclose;
exports.partition = partition;
exports.stratify = stratify;
exports.tree = tree;
exports.treemap = index$1;
exports.treemapBinary = binary;
exports.treemapDice = treemapDice;
exports.treemapSlice = treemapSlice;
exports.treemapSliceDice = sliceDice;
exports.treemapSquarify = squarify;
exports.treemapResquarify = resquarify;

Object.defineProperty(exports, '__esModule', { value: true });

})));

},{}],23:[function(require,module,exports){
// https://d3js.org/d3-interpolate/ v1.3.2 Copyright 2018 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-color')) :
typeof define === 'function' && define.amd ? define(['exports', 'd3-color'], factory) :
(factory((global.d3 = global.d3 || {}),global.d3));
}(this, (function (exports,d3Color) { 'use strict';

function basis(t1, v0, v1, v2, v3) {
  var t2 = t1 * t1, t3 = t2 * t1;
  return ((1 - 3 * t1 + 3 * t2 - t3) * v0
      + (4 - 6 * t2 + 3 * t3) * v1
      + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2
      + t3 * v3) / 6;
}

function basis$1(values) {
  var n = values.length - 1;
  return function(t) {
    var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),
        v1 = values[i],
        v2 = values[i + 1],
        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,
        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
    return basis((t - i / n) * n, v0, v1, v2, v3);
  };
}

function basisClosed(values) {
  var n = values.length;
  return function(t) {
    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),
        v0 = values[(i + n - 1) % n],
        v1 = values[i % n],
        v2 = values[(i + 1) % n],
        v3 = values[(i + 2) % n];
    return basis((t - i / n) * n, v0, v1, v2, v3);
  };
}

function constant(x) {
  return function() {
    return x;
  };
}

function linear(a, d) {
  return function(t) {
    return a + t * d;
  };
}

function exponential(a, b, y) {
  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
    return Math.pow(a + t * b, y);
  };
}

function hue(a, b) {
  var d = b - a;
  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant(isNaN(a) ? b : a);
}

function gamma(y) {
  return (y = +y) === 1 ? nogamma : function(a, b) {
    return b - a ? exponential(a, b, y) : constant(isNaN(a) ? b : a);
  };
}

function nogamma(a, b) {
  var d = b - a;
  return d ? linear(a, d) : constant(isNaN(a) ? b : a);
}

var rgb = (function rgbGamma(y) {
  var color = gamma(y);

  function rgb(start, end) {
    var r = color((start = d3Color.rgb(start)).r, (end = d3Color.rgb(end)).r),
        g = color(start.g, end.g),
        b = color(start.b, end.b),
        opacity = nogamma(start.opacity, end.opacity);
    return function(t) {
      start.r = r(t);
      start.g = g(t);
      start.b = b(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }

  rgb.gamma = rgbGamma;

  return rgb;
})(1);

function rgbSpline(spline) {
  return function(colors) {
    var n = colors.length,
        r = new Array(n),
        g = new Array(n),
        b = new Array(n),
        i, color;
    for (i = 0; i < n; ++i) {
      color = d3Color.rgb(colors[i]);
      r[i] = color.r || 0;
      g[i] = color.g || 0;
      b[i] = color.b || 0;
    }
    r = spline(r);
    g = spline(g);
    b = spline(b);
    color.opacity = 1;
    return function(t) {
      color.r = r(t);
      color.g = g(t);
      color.b = b(t);
      return color + "";
    };
  };
}

var rgbBasis = rgbSpline(basis$1);
var rgbBasisClosed = rgbSpline(basisClosed);

function array(a, b) {
  var nb = b ? b.length : 0,
      na = a ? Math.min(nb, a.length) : 0,
      x = new Array(na),
      c = new Array(nb),
      i;

  for (i = 0; i < na; ++i) x[i] = value(a[i], b[i]);
  for (; i < nb; ++i) c[i] = b[i];

  return function(t) {
    for (i = 0; i < na; ++i) c[i] = x[i](t);
    return c;
  };
}

function date(a, b) {
  var d = new Date;
  return a = +a, b -= a, function(t) {
    return d.setTime(a + b * t), d;
  };
}

function number(a, b) {
  return a = +a, b -= a, function(t) {
    return a + b * t;
  };
}

function object(a, b) {
  var i = {},
      c = {},
      k;

  if (a === null || typeof a !== "object") a = {};
  if (b === null || typeof b !== "object") b = {};

  for (k in b) {
    if (k in a) {
      i[k] = value(a[k], b[k]);
    } else {
      c[k] = b[k];
    }
  }

  return function(t) {
    for (k in i) c[k] = i[k](t);
    return c;
  };
}

var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
    reB = new RegExp(reA.source, "g");

function zero(b) {
  return function() {
    return b;
  };
}

function one(b) {
  return function(t) {
    return b(t) + "";
  };
}

function string(a, b) {
  var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b
      am, // current match in a
      bm, // current match in b
      bs, // string preceding current number in b, if any
      i = -1, // index in s
      s = [], // string constants and placeholders
      q = []; // number interpolators

  // Coerce inputs to strings.
  a = a + "", b = b + "";

  // Interpolate pairs of numbers in a & b.
  while ((am = reA.exec(a))
      && (bm = reB.exec(b))) {
    if ((bs = bm.index) > bi) { // a string precedes the next number in b
      bs = b.slice(bi, bs);
      if (s[i]) s[i] += bs; // coalesce with previous string
      else s[++i] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match
      if (s[i]) s[i] += bm; // coalesce with previous string
      else s[++i] = bm;
    } else { // interpolate non-matching numbers
      s[++i] = null;
      q.push({i: i, x: number(am, bm)});
    }
    bi = reB.lastIndex;
  }

  // Add remains of b.
  if (bi < b.length) {
    bs = b.slice(bi);
    if (s[i]) s[i] += bs; // coalesce with previous string
    else s[++i] = bs;
  }

  // Special optimization for only a single match.
  // Otherwise, interpolate each of the numbers and rejoin the string.
  return s.length < 2 ? (q[0]
      ? one(q[0].x)
      : zero(b))
      : (b = q.length, function(t) {
          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
          return s.join("");
        });
}

function value(a, b) {
  var t = typeof b, c;
  return b == null || t === "boolean" ? constant(b)
      : (t === "number" ? number
      : t === "string" ? ((c = d3Color.color(b)) ? (b = c, rgb) : string)
      : b instanceof d3Color.color ? rgb
      : b instanceof Date ? date
      : Array.isArray(b) ? array
      : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object
      : number)(a, b);
}

function discrete(range) {
  var n = range.length;
  return function(t) {
    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
  };
}

function hue$1(a, b) {
  var i = hue(+a, +b);
  return function(t) {
    var x = i(t);
    return x - 360 * Math.floor(x / 360);
  };
}

function round(a, b) {
  return a = +a, b -= a, function(t) {
    return Math.round(a + b * t);
  };
}

var degrees = 180 / Math.PI;

var identity = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};

function decompose(a, b, c, d, e, f) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e,
    translateY: f,
    rotate: Math.atan2(b, a) * degrees,
    skewX: Math.atan(skewX) * degrees,
    scaleX: scaleX,
    scaleY: scaleY
  };
}

var cssNode,
    cssRoot,
    cssView,
    svgNode;

function parseCss(value) {
  if (value === "none") return identity;
  if (!cssNode) cssNode = document.createElement("DIV"), cssRoot = document.documentElement, cssView = document.defaultView;
  cssNode.style.transform = value;
  value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue("transform");
  cssRoot.removeChild(cssNode);
  value = value.slice(7, -1).split(",");
  return decompose(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);
}

function parseSvg(value) {
  if (value == null) return identity;
  if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value);
  if (!(value = svgNode.transform.baseVal.consolidate())) return identity;
  value = value.matrix;
  return decompose(value.a, value.b, value.c, value.d, value.e, value.f);
}

function interpolateTransform(parse, pxComma, pxParen, degParen) {

  function pop(s) {
    return s.length ? s.pop() + " " : "";
  }

  function translate(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push("translate(", null, pxComma, null, pxParen);
      q.push({i: i - 4, x: number(xa, xb)}, {i: i - 2, x: number(ya, yb)});
    } else if (xb || yb) {
      s.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }

  function rotate(a, b, s, q) {
    if (a !== b) {
      if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path
      q.push({i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: number(a, b)});
    } else if (b) {
      s.push(pop(s) + "rotate(" + b + degParen);
    }
  }

  function skewX(a, b, s, q) {
    if (a !== b) {
      q.push({i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: number(a, b)});
    } else if (b) {
      s.push(pop(s) + "skewX(" + b + degParen);
    }
  }

  function scale(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push(pop(s) + "scale(", null, ",", null, ")");
      q.push({i: i - 4, x: number(xa, xb)}, {i: i - 2, x: number(ya, yb)});
    } else if (xb !== 1 || yb !== 1) {
      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
    }
  }

  return function(a, b) {
    var s = [], // string constants and placeholders
        q = []; // number interpolators
    a = parse(a), b = parse(b);
    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
    rotate(a.rotate, b.rotate, s, q);
    skewX(a.skewX, b.skewX, s, q);
    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
    a = b = null; // gc
    return function(t) {
      var i = -1, n = q.length, o;
      while (++i < n) s[(o = q[i]).i] = o.x(t);
      return s.join("");
    };
  };
}

var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

var rho = Math.SQRT2,
    rho2 = 2,
    rho4 = 4,
    epsilon2 = 1e-12;

function cosh(x) {
  return ((x = Math.exp(x)) + 1 / x) / 2;
}

function sinh(x) {
  return ((x = Math.exp(x)) - 1 / x) / 2;
}

function tanh(x) {
  return ((x = Math.exp(2 * x)) - 1) / (x + 1);
}

// p0 = [ux0, uy0, w0]
// p1 = [ux1, uy1, w1]
function zoom(p0, p1) {
  var ux0 = p0[0], uy0 = p0[1], w0 = p0[2],
      ux1 = p1[0], uy1 = p1[1], w1 = p1[2],
      dx = ux1 - ux0,
      dy = uy1 - uy0,
      d2 = dx * dx + dy * dy,
      i,
      S;

  // Special case for u0 ≅ u1.
  if (d2 < epsilon2) {
    S = Math.log(w1 / w0) / rho;
    i = function(t) {
      return [
        ux0 + t * dx,
        uy0 + t * dy,
        w0 * Math.exp(rho * t * S)
      ];
    };
  }

  // General case.
  else {
    var d1 = Math.sqrt(d2),
        b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),
        b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),
        r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
        r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
    S = (r1 - r0) / rho;
    i = function(t) {
      var s = t * S,
          coshr0 = cosh(r0),
          u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
      return [
        ux0 + u * dx,
        uy0 + u * dy,
        w0 * coshr0 / cosh(rho * s + r0)
      ];
    };
  }

  i.duration = S * 1000;

  return i;
}

function hsl(hue$$1) {
  return function(start, end) {
    var h = hue$$1((start = d3Color.hsl(start)).h, (end = d3Color.hsl(end)).h),
        s = nogamma(start.s, end.s),
        l = nogamma(start.l, end.l),
        opacity = nogamma(start.opacity, end.opacity);
    return function(t) {
      start.h = h(t);
      start.s = s(t);
      start.l = l(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }
}

var hsl$1 = hsl(hue);
var hslLong = hsl(nogamma);

function lab(start, end) {
  var l = nogamma((start = d3Color.lab(start)).l, (end = d3Color.lab(end)).l),
      a = nogamma(start.a, end.a),
      b = nogamma(start.b, end.b),
      opacity = nogamma(start.opacity, end.opacity);
  return function(t) {
    start.l = l(t);
    start.a = a(t);
    start.b = b(t);
    start.opacity = opacity(t);
    return start + "";
  };
}

function hcl(hue$$1) {
  return function(start, end) {
    var h = hue$$1((start = d3Color.hcl(start)).h, (end = d3Color.hcl(end)).h),
        c = nogamma(start.c, end.c),
        l = nogamma(start.l, end.l),
        opacity = nogamma(start.opacity, end.opacity);
    return function(t) {
      start.h = h(t);
      start.c = c(t);
      start.l = l(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }
}

var hcl$1 = hcl(hue);
var hclLong = hcl(nogamma);

function cubehelix(hue$$1) {
  return (function cubehelixGamma(y) {
    y = +y;

    function cubehelix(start, end) {
      var h = hue$$1((start = d3Color.cubehelix(start)).h, (end = d3Color.cubehelix(end)).h),
          s = nogamma(start.s, end.s),
          l = nogamma(start.l, end.l),
          opacity = nogamma(start.opacity, end.opacity);
      return function(t) {
        start.h = h(t);
        start.s = s(t);
        start.l = l(Math.pow(t, y));
        start.opacity = opacity(t);
        return start + "";
      };
    }

    cubehelix.gamma = cubehelixGamma;

    return cubehelix;
  })(1);
}

var cubehelix$1 = cubehelix(hue);
var cubehelixLong = cubehelix(nogamma);

function piecewise(interpolate, values) {
  var i = 0, n = values.length - 1, v = values[0], I = new Array(n < 0 ? 0 : n);
  while (i < n) I[i] = interpolate(v, v = values[++i]);
  return function(t) {
    var i = Math.max(0, Math.min(n - 1, Math.floor(t *= n)));
    return I[i](t - i);
  };
}

function quantize(interpolator, n) {
  var samples = new Array(n);
  for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));
  return samples;
}

exports.interpolate = value;
exports.interpolateArray = array;
exports.interpolateBasis = basis$1;
exports.interpolateBasisClosed = basisClosed;
exports.interpolateDate = date;
exports.interpolateDiscrete = discrete;
exports.interpolateHue = hue$1;
exports.interpolateNumber = number;
exports.interpolateObject = object;
exports.interpolateRound = round;
exports.interpolateString = string;
exports.interpolateTransformCss = interpolateTransformCss;
exports.interpolateTransformSvg = interpolateTransformSvg;
exports.interpolateZoom = zoom;
exports.interpolateRgb = rgb;
exports.interpolateRgbBasis = rgbBasis;
exports.interpolateRgbBasisClosed = rgbBasisClosed;
exports.interpolateHsl = hsl$1;
exports.interpolateHslLong = hslLong;
exports.interpolateLab = lab;
exports.interpolateHcl = hcl$1;
exports.interpolateHclLong = hclLong;
exports.interpolateCubehelix = cubehelix$1;
exports.interpolateCubehelixLong = cubehelixLong;
exports.piecewise = piecewise;
exports.quantize = quantize;

Object.defineProperty(exports, '__esModule', { value: true });

})));

},{"d3-color":12}],24:[function(require,module,exports){
// https://d3js.org/d3-path/ v1.0.8 Copyright 2019 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
typeof define === 'function' && define.amd ? define(['exports'], factory) :
(global = global || self, factory(global.d3 = global.d3 || {}));
}(this, function (exports) { 'use strict';

var pi = Math.PI,
    tau = 2 * pi,
    epsilon = 1e-6,
    tauEpsilon = tau - epsilon;

function Path() {
  this._x0 = this._y0 = // start of current subpath
  this._x1 = this._y1 = null; // end of current subpath
  this._ = "";
}

function path() {
  return new Path;
}

Path.prototype = path.prototype = {
  constructor: Path,
  moveTo: function(x, y) {
    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
  },
  closePath: function() {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._ += "Z";
    }
  },
  lineTo: function(x, y) {
    this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  quadraticCurveTo: function(x1, y1, x, y) {
    this._ += "Q" + (+x1) + "," + (+y1) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  bezierCurveTo: function(x1, y1, x2, y2, x, y) {
    this._ += "C" + (+x1) + "," + (+y1) + "," + (+x2) + "," + (+y2) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  arcTo: function(x1, y1, x2, y2, r) {
    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
    var x0 = this._x1,
        y0 = this._y1,
        x21 = x2 - x1,
        y21 = y2 - y1,
        x01 = x0 - x1,
        y01 = y0 - y1,
        l01_2 = x01 * x01 + y01 * y01;

    // Is the radius negative? Error.
    if (r < 0) throw new Error("negative radius: " + r);

    // Is this path empty? Move to (x1,y1).
    if (this._x1 === null) {
      this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
    }

    // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
    else if (!(l01_2 > epsilon));

    // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
    // Equivalently, is (x1,y1) coincident with (x2,y2)?
    // Or, is the radius zero? Line to (x1,y1).
    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {
      this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
    }

    // Otherwise, draw an arc!
    else {
      var x20 = x2 - x0,
          y20 = y2 - y0,
          l21_2 = x21 * x21 + y21 * y21,
          l20_2 = x20 * x20 + y20 * y20,
          l21 = Math.sqrt(l21_2),
          l01 = Math.sqrt(l01_2),
          l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
          t01 = l / l01,
          t21 = l / l21;

      // If the start tangent is not coincident with (x0,y0), line to.
      if (Math.abs(t01 - 1) > epsilon) {
        this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
      }

      this._ += "A" + r + "," + r + ",0,0," + (+(y01 * x20 > x01 * y20)) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
    }
  },
  arc: function(x, y, r, a0, a1, ccw) {
    x = +x, y = +y, r = +r, ccw = !!ccw;
    var dx = r * Math.cos(a0),
        dy = r * Math.sin(a0),
        x0 = x + dx,
        y0 = y + dy,
        cw = 1 ^ ccw,
        da = ccw ? a0 - a1 : a1 - a0;

    // Is the radius negative? Error.
    if (r < 0) throw new Error("negative radius: " + r);

    // Is this path empty? Move to (x0,y0).
    if (this._x1 === null) {
      this._ += "M" + x0 + "," + y0;
    }

    // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
      this._ += "L" + x0 + "," + y0;
    }

    // Is this arc empty? We’re done.
    if (!r) return;

    // Does the angle go the wrong way? Flip the direction.
    if (da < 0) da = da % tau + tau;

    // Is this a complete circle? Draw two arcs to complete the circle.
    if (da > tauEpsilon) {
      this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
    }

    // Is this arc non-empty? Draw an arc!
    else if (da > epsilon) {
      this._ += "A" + r + "," + r + ",0," + (+(da >= pi)) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
    }
  },
  rect: function(x, y, w, h) {
    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + (+w) + "v" + (+h) + "h" + (-w) + "Z";
  },
  toString: function() {
    return this._;
  }
};

exports.path = path;

Object.defineProperty(exports, '__esModule', { value: true });

}));

},{}],25:[function(require,module,exports){
// https://d3js.org/d3-polygon/ v1.0.5 Copyright 2018 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
typeof define === 'function' && define.amd ? define(['exports'], factory) :
(factory((global.d3 = global.d3 || {})));
}(this, (function (exports) { 'use strict';

function area(polygon) {
  var i = -1,
      n = polygon.length,
      a,
      b = polygon[n - 1],
      area = 0;

  while (++i < n) {
    a = b;
    b = polygon[i];
    area += a[1] * b[0] - a[0] * b[1];
  }

  return area / 2;
}

function centroid(polygon) {
  var i = -1,
      n = polygon.length,
      x = 0,
      y = 0,
      a,
      b = polygon[n - 1],
      c,
      k = 0;

  while (++i < n) {
    a = b;
    b = polygon[i];
    k += c = a[0] * b[1] - b[0] * a[1];
    x += (a[0] + b[0]) * c;
    y += (a[1] + b[1]) * c;
  }

  return k *= 3, [x / k, y / k];
}

// Returns the 2D cross product of AB and AC vectors, i.e., the z-component of
// the 3D cross product in a quadrant I Cartesian coordinate system (+x is
// right, +y is up). Returns a positive value if ABC is counter-clockwise,
// negative if clockwise, and zero if the points are collinear.
function cross(a, b, c) {
  return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
}

function lexicographicOrder(a, b) {
  return a[0] - b[0] || a[1] - b[1];
}

// Computes the upper convex hull per the monotone chain algorithm.
// Assumes points.length >= 3, is sorted by x, unique in y.
// Returns an array of indices into points in left-to-right order.
function computeUpperHullIndexes(points) {
  var n = points.length,
      indexes = [0, 1],
      size = 2;

  for (var i = 2; i < n; ++i) {
    while (size > 1 && cross(points[indexes[size - 2]], points[indexes[size - 1]], points[i]) <= 0) --size;
    indexes[size++] = i;
  }

  return indexes.slice(0, size); // remove popped points
}

function hull(points) {
  if ((n = points.length) < 3) return null;

  var i,
      n,
      sortedPoints = new Array(n),
      flippedPoints = new Array(n);

  for (i = 0; i < n; ++i) sortedPoints[i] = [+points[i][0], +points[i][1], i];
  sortedPoints.sort(lexicographicOrder);
  for (i = 0; i < n; ++i) flippedPoints[i] = [sortedPoints[i][0], -sortedPoints[i][1]];

  var upperIndexes = computeUpperHullIndexes(sortedPoints),
      lowerIndexes = computeUpperHullIndexes(flippedPoints);

  // Construct the hull polygon, removing possible duplicate endpoints.
  var skipLeft = lowerIndexes[0] === upperIndexes[0],
      skipRight = lowerIndexes[lowerIndexes.length - 1] === upperIndexes[upperIndexes.length - 1],
      hull = [];

  // Add upper hull in right-to-l order.
  // Then add lower hull in left-to-right order.
  for (i = upperIndexes.length - 1; i >= 0; --i) hull.push(points[sortedPoints[upperIndexes[i]][2]]);
  for (i = +skipLeft; i < lowerIndexes.length - skipRight; ++i) hull.push(points[sortedPoints[lowerIndexes[i]][2]]);

  return hull;
}

function contains(polygon, point) {
  var n = polygon.length,
      p = polygon[n - 1],
      x = point[0], y = point[1],
      x0 = p[0], y0 = p[1],
      x1, y1,
      inside = false;

  for (var i = 0; i < n; ++i) {
    p = polygon[i], x1 = p[0], y1 = p[1];
    if (((y1 > y) !== (y0 > y)) && (x < (x0 - x1) * (y - y1) / (y0 - y1) + x1)) inside = !inside;
    x0 = x1, y0 = y1;
  }

  return inside;
}

function length(polygon) {
  var i = -1,
      n = polygon.length,
      b = polygon[n - 1],
      xa,
      ya,
      xb = b[0],
      yb = b[1],
      perimeter = 0;

  while (++i < n) {
    xa = xb;
    ya = yb;
    b = polygon[i];
    xb = b[0];
    yb = b[1];
    xa -= xb;
    ya -= yb;
    perimeter += Math.sqrt(xa * xa + ya * ya);
  }

  return perimeter;
}

exports.polygonArea = area;
exports.polygonCentroid = centroid;
exports.polygonHull = hull;
exports.polygonContains = contains;
exports.polygonLength = length;

Object.defineProperty(exports, '__esModule', { value: true });

})));

},{}],26:[function(require,module,exports){
// https://d3js.org/d3-quadtree/ v1.0.6 Copyright 2019 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
typeof define === 'function' && define.amd ? define(['exports'], factory) :
(factory((global.d3 = global.d3 || {})));
}(this, (function (exports) { 'use strict';

function tree_add(d) {
  var x = +this._x.call(null, d),
      y = +this._y.call(null, d);
  return add(this.cover(x, y), x, y, d);
}

function add(tree, x, y, d) {
  if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points

  var parent,
      node = tree._root,
      leaf = {data: d},
      x0 = tree._x0,
      y0 = tree._y0,
      x1 = tree._x1,
      y1 = tree._y1,
      xm,
      ym,
      xp,
      yp,
      right,
      bottom,
      i,
      j;

  // If the tree is empty, initialize the root as a leaf.
  if (!node) return tree._root = leaf, tree;

  // Find the existing leaf for the new point, or add it.
  while (node.length) {
    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
    if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;
  }

  // Is the new point is exactly coincident with the existing point?
  xp = +tree._x.call(null, node.data);
  yp = +tree._y.call(null, node.data);
  if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;

  // Otherwise, split the leaf node until the old and new point are separated.
  do {
    parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);
    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
  } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | (xp >= xm)));
  return parent[j] = node, parent[i] = leaf, tree;
}

function addAll(data) {
  var d, i, n = data.length,
      x,
      y,
      xz = new Array(n),
      yz = new Array(n),
      x0 = Infinity,
      y0 = Infinity,
      x1 = -Infinity,
      y1 = -Infinity;

  // Compute the points and their extent.
  for (i = 0; i < n; ++i) {
    if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;
    xz[i] = x;
    yz[i] = y;
    if (x < x0) x0 = x;
    if (x > x1) x1 = x;
    if (y < y0) y0 = y;
    if (y > y1) y1 = y;
  }

  // If there were no (valid) points, abort.
  if (x0 > x1 || y0 > y1) return this;

  // Expand the tree to cover the new points.
  this.cover(x0, y0).cover(x1, y1);

  // Add the new points.
  for (i = 0; i < n; ++i) {
    add(this, xz[i], yz[i], data[i]);
  }

  return this;
}

function tree_cover(x, y) {
  if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points

  var x0 = this._x0,
      y0 = this._y0,
      x1 = this._x1,
      y1 = this._y1;

  // If the quadtree has no extent, initialize them.
  // Integer extent are necessary so that if we later double the extent,
  // the existing quadrant boundaries don’t change due to floating point error!
  if (isNaN(x0)) {
    x1 = (x0 = Math.floor(x)) + 1;
    y1 = (y0 = Math.floor(y)) + 1;
  }

  // Otherwise, double repeatedly to cover.
  else {
    var z = x1 - x0,
        node = this._root,
        parent,
        i;

    while (x0 > x || x >= x1 || y0 > y || y >= y1) {
      i = (y < y0) << 1 | (x < x0);
      parent = new Array(4), parent[i] = node, node = parent, z *= 2;
      switch (i) {
        case 0: x1 = x0 + z, y1 = y0 + z; break;
        case 1: x0 = x1 - z, y1 = y0 + z; break;
        case 2: x1 = x0 + z, y0 = y1 - z; break;
        case 3: x0 = x1 - z, y0 = y1 - z; break;
      }
    }

    if (this._root && this._root.length) this._root = node;
  }

  this._x0 = x0;
  this._y0 = y0;
  this._x1 = x1;
  this._y1 = y1;
  return this;
}

function tree_data() {
  var data = [];
  this.visit(function(node) {
    if (!node.length) do data.push(node.data); while (node = node.next)
  });
  return data;
}

function tree_extent(_) {
  return arguments.length
      ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1])
      : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];
}

function Quad(node, x0, y0, x1, y1) {
  this.node = node;
  this.x0 = x0;
  this.y0 = y0;
  this.x1 = x1;
  this.y1 = y1;
}

function tree_find(x, y, radius) {
  var data,
      x0 = this._x0,
      y0 = this._y0,
      x1,
      y1,
      x2,
      y2,
      x3 = this._x1,
      y3 = this._y1,
      quads = [],
      node = this._root,
      q,
      i;

  if (node) quads.push(new Quad(node, x0, y0, x3, y3));
  if (radius == null) radius = Infinity;
  else {
    x0 = x - radius, y0 = y - radius;
    x3 = x + radius, y3 = y + radius;
    radius *= radius;
  }

  while (q = quads.pop()) {

    // Stop searching if this quadrant can’t contain a closer node.
    if (!(node = q.node)
        || (x1 = q.x0) > x3
        || (y1 = q.y0) > y3
        || (x2 = q.x1) < x0
        || (y2 = q.y1) < y0) continue;

    // Bisect the current quadrant.
    if (node.length) {
      var xm = (x1 + x2) / 2,
          ym = (y1 + y2) / 2;

      quads.push(
        new Quad(node[3], xm, ym, x2, y2),
        new Quad(node[2], x1, ym, xm, y2),
        new Quad(node[1], xm, y1, x2, ym),
        new Quad(node[0], x1, y1, xm, ym)
      );

      // Visit the closest quadrant first.
      if (i = (y >= ym) << 1 | (x >= xm)) {
        q = quads[quads.length - 1];
        quads[quads.length - 1] = quads[quads.length - 1 - i];
        quads[quads.length - 1 - i] = q;
      }
    }

    // Visit this point. (Visiting coincident points isn’t necessary!)
    else {
      var dx = x - +this._x.call(null, node.data),
          dy = y - +this._y.call(null, node.data),
          d2 = dx * dx + dy * dy;
      if (d2 < radius) {
        var d = Math.sqrt(radius = d2);
        x0 = x - d, y0 = y - d;
        x3 = x + d, y3 = y + d;
        data = node.data;
      }
    }
  }

  return data;
}

function tree_remove(d) {
  if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points

  var parent,
      node = this._root,
      retainer,
      previous,
      next,
      x0 = this._x0,
      y0 = this._y0,
      x1 = this._x1,
      y1 = this._y1,
      x,
      y,
      xm,
      ym,
      right,
      bottom,
      i,
      j;

  // If the tree is empty, initialize the root as a leaf.
  if (!node) return this;

  // Find the leaf node for the point.
  // While descending, also retain the deepest parent with a non-removed sibling.
  if (node.length) while (true) {
    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
    if (!(parent = node, node = node[i = bottom << 1 | right])) return this;
    if (!node.length) break;
    if (parent[(i + 1) & 3] || parent[(i + 2) & 3] || parent[(i + 3) & 3]) retainer = parent, j = i;
  }

  // Find the point to remove.
  while (node.data !== d) if (!(previous = node, node = node.next)) return this;
  if (next = node.next) delete node.next;

  // If there are multiple coincident points, remove just the point.
  if (previous) return (next ? previous.next = next : delete previous.next), this;

  // If this is the root point, remove it.
  if (!parent) return this._root = next, this;

  // Remove this leaf.
  next ? parent[i] = next : delete parent[i];

  // If the parent now contains exactly one leaf, collapse superfluous parents.
  if ((node = parent[0] || parent[1] || parent[2] || parent[3])
      && node === (parent[3] || parent[2] || parent[1] || parent[0])
      && !node.length) {
    if (retainer) retainer[j] = node;
    else this._root = node;
  }

  return this;
}

function removeAll(data) {
  for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);
  return this;
}

function tree_root() {
  return this._root;
}

function tree_size() {
  var size = 0;
  this.visit(function(node) {
    if (!node.length) do ++size; while (node = node.next)
  });
  return size;
}

function tree_visit(callback) {
  var quads = [], q, node = this._root, child, x0, y0, x1, y1;
  if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));
  while (q = quads.pop()) {
    if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {
      var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
      if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
      if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
      if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
      if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
    }
  }
  return this;
}

function tree_visitAfter(callback) {
  var quads = [], next = [], q;
  if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));
  while (q = quads.pop()) {
    var node = q.node;
    if (node.length) {
      var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
      if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
      if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
      if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
      if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
    }
    next.push(q);
  }
  while (q = next.pop()) {
    callback(q.node, q.x0, q.y0, q.x1, q.y1);
  }
  return this;
}

function defaultX(d) {
  return d[0];
}

function tree_x(_) {
  return arguments.length ? (this._x = _, this) : this._x;
}

function defaultY(d) {
  return d[1];
}

function tree_y(_) {
  return arguments.length ? (this._y = _, this) : this._y;
}

function quadtree(nodes, x, y) {
  var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);
  return nodes == null ? tree : tree.addAll(nodes);
}

function Quadtree(x, y, x0, y0, x1, y1) {
  this._x = x;
  this._y = y;
  this._x0 = x0;
  this._y0 = y0;
  this._x1 = x1;
  this._y1 = y1;
  this._root = undefined;
}

function leaf_copy(leaf) {
  var copy = {data: leaf.data}, next = copy;
  while (leaf = leaf.next) next = next.next = {data: leaf.data};
  return copy;
}

var treeProto = quadtree.prototype = Quadtree.prototype;

treeProto.copy = function() {
  var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),
      node = this._root,
      nodes,
      child;

  if (!node) return copy;

  if (!node.length) return copy._root = leaf_copy(node), copy;

  nodes = [{source: node, target: copy._root = new Array(4)}];
  while (node = nodes.pop()) {
    for (var i = 0; i < 4; ++i) {
      if (child = node.source[i]) {
        if (child.length) nodes.push({source: child, target: node.target[i] = new Array(4)});
        else node.target[i] = leaf_copy(child);
      }
    }
  }

  return copy;
};

treeProto.add = tree_add;
treeProto.addAll = addAll;
treeProto.cover = tree_cover;
treeProto.data = tree_data;
treeProto.extent = tree_extent;
treeProto.find = tree_find;
treeProto.remove = tree_remove;
treeProto.removeAll = removeAll;
treeProto.root = tree_root;
treeProto.size = tree_size;
treeProto.visit = tree_visit;
treeProto.visitAfter = tree_visitAfter;
treeProto.x = tree_x;
treeProto.y = tree_y;

exports.quadtree = quadtree;

Object.defineProperty(exports, '__esModule', { value: true });

})));

},{}],27:[function(require,module,exports){
// https://d3js.org/d3-random/ v1.1.2 Copyright 2018 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
typeof define === 'function' && define.amd ? define(['exports'], factory) :
(factory((global.d3 = global.d3 || {})));
}(this, (function (exports) { 'use strict';

function defaultSource() {
  return Math.random();
}

var uniform = (function sourceRandomUniform(source) {
  function randomUniform(min, max) {
    min = min == null ? 0 : +min;
    max = max == null ? 1 : +max;
    if (arguments.length === 1) max = min, min = 0;
    else max -= min;
    return function() {
      return source() * max + min;
    };
  }

  randomUniform.source = sourceRandomUniform;

  return randomUniform;
})(defaultSource);

var normal = (function sourceRandomNormal(source) {
  function randomNormal(mu, sigma) {
    var x, r;
    mu = mu == null ? 0 : +mu;
    sigma = sigma == null ? 1 : +sigma;
    return function() {
      var y;

      // If available, use the second previously-generated uniform random.
      if (x != null) y = x, x = null;

      // Otherwise, generate a new x and y.
      else do {
        x = source() * 2 - 1;
        y = source() * 2 - 1;
        r = x * x + y * y;
      } while (!r || r > 1);

      return mu + sigma * y * Math.sqrt(-2 * Math.log(r) / r);
    };
  }

  randomNormal.source = sourceRandomNormal;

  return randomNormal;
})(defaultSource);

var logNormal = (function sourceRandomLogNormal(source) {
  function randomLogNormal() {
    var randomNormal = normal.source(source).apply(this, arguments);
    return function() {
      return Math.exp(randomNormal());
    };
  }

  randomLogNormal.source = sourceRandomLogNormal;

  return randomLogNormal;
})(defaultSource);

var irwinHall = (function sourceRandomIrwinHall(source) {
  function randomIrwinHall(n) {
    return function() {
      for (var sum = 0, i = 0; i < n; ++i) sum += source();
      return sum;
    };
  }

  randomIrwinHall.source = sourceRandomIrwinHall;

  return randomIrwinHall;
})(defaultSource);

var bates = (function sourceRandomBates(source) {
  function randomBates(n) {
    var randomIrwinHall = irwinHall.source(source)(n);
    return function() {
      return randomIrwinHall() / n;
    };
  }

  randomBates.source = sourceRandomBates;

  return randomBates;
})(defaultSource);

var exponential = (function sourceRandomExponential(source) {
  function randomExponential(lambda) {
    return function() {
      return -Math.log(1 - source()) / lambda;
    };
  }

  randomExponential.source = sourceRandomExponential;

  return randomExponential;
})(defaultSource);

exports.randomUniform = uniform;
exports.randomNormal = normal;
exports.randomLogNormal = logNormal;
exports.randomBates = bates;
exports.randomIrwinHall = irwinHall;
exports.randomExponential = exponential;

Object.defineProperty(exports, '__esModule', { value: true });

})));

},{}],28:[function(require,module,exports){
// https://d3js.org/d3-scale-chromatic/ v1.4.0 Copyright 2019 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-interpolate'), require('d3-color')) :
typeof define === 'function' && define.amd ? define(['exports', 'd3-interpolate', 'd3-color'], factory) :
(global = global || self, factory(global.d3 = global.d3 || {}, global.d3, global.d3));
}(this, function (exports, d3Interpolate, d3Color) { 'use strict';

function colors(specifier) {
  var n = specifier.length / 6 | 0, colors = new Array(n), i = 0;
  while (i < n) colors[i] = "#" + specifier.slice(i * 6, ++i * 6);
  return colors;
}

var category10 = colors("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");

var Accent = colors("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666");

var Dark2 = colors("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666");

var Paired = colors("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928");

var Pastel1 = colors("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2");

var Pastel2 = colors("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc");

var Set1 = colors("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999");

var Set2 = colors("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3");

var Set3 = colors("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");

var Tableau10 = colors("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab");

function ramp(scheme) {
  return d3Interpolate.interpolateRgbBasis(scheme[scheme.length - 1]);
}

var scheme = new Array(3).concat(
  "d8b365f5f5f55ab4ac",
  "a6611adfc27d80cdc1018571",
  "a6611adfc27df5f5f580cdc1018571",
  "8c510ad8b365f6e8c3c7eae55ab4ac01665e",
  "8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e",
  "8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e",
  "8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e",
  "5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30",
  "5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30"
).map(colors);

var BrBG = ramp(scheme);

var scheme$1 = new Array(3).concat(
  "af8dc3f7f7f77fbf7b",
  "7b3294c2a5cfa6dba0008837",
  "7b3294c2a5cff7f7f7a6dba0008837",
  "762a83af8dc3e7d4e8d9f0d37fbf7b1b7837",
  "762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837",
  "762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837",
  "762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837",
  "40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b",
  "40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b"
).map(colors);

var PRGn = ramp(scheme$1);

var scheme$2 = new Array(3).concat(
  "e9a3c9f7f7f7a1d76a",
  "d01c8bf1b6dab8e1864dac26",
  "d01c8bf1b6daf7f7f7b8e1864dac26",
  "c51b7de9a3c9fde0efe6f5d0a1d76a4d9221",
  "c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221",
  "c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221",
  "c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221",
  "8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419",
  "8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419"
).map(colors);

var PiYG = ramp(scheme$2);

var scheme$3 = new Array(3).concat(
  "998ec3f7f7f7f1a340",
  "5e3c99b2abd2fdb863e66101",
  "5e3c99b2abd2f7f7f7fdb863e66101",
  "542788998ec3d8daebfee0b6f1a340b35806",
  "542788998ec3d8daebf7f7f7fee0b6f1a340b35806",
  "5427888073acb2abd2d8daebfee0b6fdb863e08214b35806",
  "5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806",
  "2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08",
  "2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08"
).map(colors);

var PuOr = ramp(scheme$3);

var scheme$4 = new Array(3).concat(
  "ef8a62f7f7f767a9cf",
  "ca0020f4a58292c5de0571b0",
  "ca0020f4a582f7f7f792c5de0571b0",
  "b2182bef8a62fddbc7d1e5f067a9cf2166ac",
  "b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac",
  "b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac",
  "b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac",
  "67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061",
  "67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061"
).map(colors);

var RdBu = ramp(scheme$4);

var scheme$5 = new Array(3).concat(
  "ef8a62ffffff999999",
  "ca0020f4a582bababa404040",
  "ca0020f4a582ffffffbababa404040",
  "b2182bef8a62fddbc7e0e0e09999994d4d4d",
  "b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d",
  "b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d",
  "b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d",
  "67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a",
  "67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a"
).map(colors);

var RdGy = ramp(scheme$5);

var scheme$6 = new Array(3).concat(
  "fc8d59ffffbf91bfdb",
  "d7191cfdae61abd9e92c7bb6",
  "d7191cfdae61ffffbfabd9e92c7bb6",
  "d73027fc8d59fee090e0f3f891bfdb4575b4",
  "d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4",
  "d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4",
  "d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4",
  "a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695",
  "a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695"
).map(colors);

var RdYlBu = ramp(scheme$6);

var scheme$7 = new Array(3).concat(
  "fc8d59ffffbf91cf60",
  "d7191cfdae61a6d96a1a9641",
  "d7191cfdae61ffffbfa6d96a1a9641",
  "d73027fc8d59fee08bd9ef8b91cf601a9850",
  "d73027fc8d59fee08bffffbfd9ef8b91cf601a9850",
  "d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850",
  "d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850",
  "a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837",
  "a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837"
).map(colors);

var RdYlGn = ramp(scheme$7);

var scheme$8 = new Array(3).concat(
  "fc8d59ffffbf99d594",
  "d7191cfdae61abdda42b83ba",
  "d7191cfdae61ffffbfabdda42b83ba",
  "d53e4ffc8d59fee08be6f59899d5943288bd",
  "d53e4ffc8d59fee08bffffbfe6f59899d5943288bd",
  "d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd",
  "d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd",
  "9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2",
  "9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2"
).map(colors);

var Spectral = ramp(scheme$8);

var scheme$9 = new Array(3).concat(
  "e5f5f999d8c92ca25f",
  "edf8fbb2e2e266c2a4238b45",
  "edf8fbb2e2e266c2a42ca25f006d2c",
  "edf8fbccece699d8c966c2a42ca25f006d2c",
  "edf8fbccece699d8c966c2a441ae76238b45005824",
  "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824",
  "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b"
).map(colors);

var BuGn = ramp(scheme$9);

var scheme$a = new Array(3).concat(
  "e0ecf49ebcda8856a7",
  "edf8fbb3cde38c96c688419d",
  "edf8fbb3cde38c96c68856a7810f7c",
  "edf8fbbfd3e69ebcda8c96c68856a7810f7c",
  "edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b",
  "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b",
  "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b"
).map(colors);

var BuPu = ramp(scheme$a);

var scheme$b = new Array(3).concat(
  "e0f3dba8ddb543a2ca",
  "f0f9e8bae4bc7bccc42b8cbe",
  "f0f9e8bae4bc7bccc443a2ca0868ac",
  "f0f9e8ccebc5a8ddb57bccc443a2ca0868ac",
  "f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e",
  "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e",
  "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081"
).map(colors);

var GnBu = ramp(scheme$b);

var scheme$c = new Array(3).concat(
  "fee8c8fdbb84e34a33",
  "fef0d9fdcc8afc8d59d7301f",
  "fef0d9fdcc8afc8d59e34a33b30000",
  "fef0d9fdd49efdbb84fc8d59e34a33b30000",
  "fef0d9fdd49efdbb84fc8d59ef6548d7301f990000",
  "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000",
  "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000"
).map(colors);

var OrRd = ramp(scheme$c);

var scheme$d = new Array(3).concat(
  "ece2f0a6bddb1c9099",
  "f6eff7bdc9e167a9cf02818a",
  "f6eff7bdc9e167a9cf1c9099016c59",
  "f6eff7d0d1e6a6bddb67a9cf1c9099016c59",
  "f6eff7d0d1e6a6bddb67a9cf3690c002818a016450",
  "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450",
  "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636"
).map(colors);

var PuBuGn = ramp(scheme$d);

var scheme$e = new Array(3).concat(
  "ece7f2a6bddb2b8cbe",
  "f1eef6bdc9e174a9cf0570b0",
  "f1eef6bdc9e174a9cf2b8cbe045a8d",
  "f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d",
  "f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b",
  "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b",
  "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858"
).map(colors);

var PuBu = ramp(scheme$e);

var scheme$f = new Array(3).concat(
  "e7e1efc994c7dd1c77",
  "f1eef6d7b5d8df65b0ce1256",
  "f1eef6d7b5d8df65b0dd1c77980043",
  "f1eef6d4b9dac994c7df65b0dd1c77980043",
  "f1eef6d4b9dac994c7df65b0e7298ace125691003f",
  "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f",
  "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f"
).map(colors);

var PuRd = ramp(scheme$f);

var scheme$g = new Array(3).concat(
  "fde0ddfa9fb5c51b8a",
  "feebe2fbb4b9f768a1ae017e",
  "feebe2fbb4b9f768a1c51b8a7a0177",
  "feebe2fcc5c0fa9fb5f768a1c51b8a7a0177",
  "feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177",
  "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177",
  "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a"
).map(colors);

var RdPu = ramp(scheme$g);

var scheme$h = new Array(3).concat(
  "edf8b17fcdbb2c7fb8",
  "ffffcca1dab441b6c4225ea8",
  "ffffcca1dab441b6c42c7fb8253494",
  "ffffccc7e9b47fcdbb41b6c42c7fb8253494",
  "ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84",
  "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84",
  "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58"
).map(colors);

var YlGnBu = ramp(scheme$h);

var scheme$i = new Array(3).concat(
  "f7fcb9addd8e31a354",
  "ffffccc2e69978c679238443",
  "ffffccc2e69978c67931a354006837",
  "ffffccd9f0a3addd8e78c67931a354006837",
  "ffffccd9f0a3addd8e78c67941ab5d238443005a32",
  "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32",
  "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529"
).map(colors);

var YlGn = ramp(scheme$i);

var scheme$j = new Array(3).concat(
  "fff7bcfec44fd95f0e",
  "ffffd4fed98efe9929cc4c02",
  "ffffd4fed98efe9929d95f0e993404",
  "ffffd4fee391fec44ffe9929d95f0e993404",
  "ffffd4fee391fec44ffe9929ec7014cc4c028c2d04",
  "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04",
  "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506"
).map(colors);

var YlOrBr = ramp(scheme$j);

var scheme$k = new Array(3).concat(
  "ffeda0feb24cf03b20",
  "ffffb2fecc5cfd8d3ce31a1c",
  "ffffb2fecc5cfd8d3cf03b20bd0026",
  "ffffb2fed976feb24cfd8d3cf03b20bd0026",
  "ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026",
  "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026",
  "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026"
).map(colors);

var YlOrRd = ramp(scheme$k);

var scheme$l = new Array(3).concat(
  "deebf79ecae13182bd",
  "eff3ffbdd7e76baed62171b5",
  "eff3ffbdd7e76baed63182bd08519c",
  "eff3ffc6dbef9ecae16baed63182bd08519c",
  "eff3ffc6dbef9ecae16baed64292c62171b5084594",
  "f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594",
  "f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b"
).map(colors);

var Blues = ramp(scheme$l);

var scheme$m = new Array(3).concat(
  "e5f5e0a1d99b31a354",
  "edf8e9bae4b374c476238b45",
  "edf8e9bae4b374c47631a354006d2c",
  "edf8e9c7e9c0a1d99b74c47631a354006d2c",
  "edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32",
  "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32",
  "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b"
).map(colors);

var Greens = ramp(scheme$m);

var scheme$n = new Array(3).concat(
  "f0f0f0bdbdbd636363",
  "f7f7f7cccccc969696525252",
  "f7f7f7cccccc969696636363252525",
  "f7f7f7d9d9d9bdbdbd969696636363252525",
  "f7f7f7d9d9d9bdbdbd969696737373525252252525",
  "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525",
  "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000"
).map(colors);

var Greys = ramp(scheme$n);

var scheme$o = new Array(3).concat(
  "efedf5bcbddc756bb1",
  "f2f0f7cbc9e29e9ac86a51a3",
  "f2f0f7cbc9e29e9ac8756bb154278f",
  "f2f0f7dadaebbcbddc9e9ac8756bb154278f",
  "f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486",
  "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486",
  "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d"
).map(colors);

var Purples = ramp(scheme$o);

var scheme$p = new Array(3).concat(
  "fee0d2fc9272de2d26",
  "fee5d9fcae91fb6a4acb181d",
  "fee5d9fcae91fb6a4ade2d26a50f15",
  "fee5d9fcbba1fc9272fb6a4ade2d26a50f15",
  "fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d",
  "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d",
  "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d"
).map(colors);

var Reds = ramp(scheme$p);

var scheme$q = new Array(3).concat(
  "fee6cefdae6be6550d",
  "feeddefdbe85fd8d3cd94701",
  "feeddefdbe85fd8d3ce6550da63603",
  "feeddefdd0a2fdae6bfd8d3ce6550da63603",
  "feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04",
  "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04",
  "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704"
).map(colors);

var Oranges = ramp(scheme$q);

var cubehelix = d3Interpolate.interpolateCubehelixLong(d3Color.cubehelix(300, 0.5, 0.0), d3Color.cubehelix(-240, 0.5, 1.0));

var warm = d3Interpolate.interpolateCubehelixLong(d3Color.cubehelix(-100, 0.75, 0.35), d3Color.cubehelix(80, 1.50, 0.8));

var cool = d3Interpolate.interpolateCubehelixLong(d3Color.cubehelix(260, 0.75, 0.35), d3Color.cubehelix(80, 1.50, 0.8));

var c = d3Color.cubehelix();

function rainbow(t) {
  if (t < 0 || t > 1) t -= Math.floor(t);
  var ts = Math.abs(t - 0.5);
  c.h = 360 * t - 100;
  c.s = 1.5 - 1.5 * ts;
  c.l = 0.8 - 0.9 * ts;
  return c + "";
}

var c$1 = d3Color.rgb(),
    pi_1_3 = Math.PI / 3,
    pi_2_3 = Math.PI * 2 / 3;

function sinebow(t) {
  var x;
  t = (0.5 - t) * Math.PI;
  c$1.r = 255 * (x = Math.sin(t)) * x;
  c$1.g = 255 * (x = Math.sin(t + pi_1_3)) * x;
  c$1.b = 255 * (x = Math.sin(t + pi_2_3)) * x;
  return c$1 + "";
}

function ramp$1(range) {
  var n = range.length;
  return function(t) {
    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
  };
}

var viridis = ramp$1(colors("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));

var magma = ramp$1(colors("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));

var inferno = ramp$1(colors("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));

var plasma = ramp$1(colors("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));

exports.interpolateBlues = Blues;
exports.interpolateBrBG = BrBG;
exports.interpolateBuGn = BuGn;
exports.interpolateBuPu = BuPu;
exports.interpolateCool = cool;
exports.interpolateCubehelixDefault = cubehelix;
exports.interpolateGnBu = GnBu;
exports.interpolateGreens = Greens;
exports.interpolateGreys = Greys;
exports.interpolateInferno = inferno;
exports.interpolateMagma = magma;
exports.interpolateOrRd = OrRd;
exports.interpolateOranges = Oranges;
exports.interpolatePRGn = PRGn;
exports.interpolatePiYG = PiYG;
exports.interpolatePlasma = plasma;
exports.interpolatePuBu = PuBu;
exports.interpolatePuBuGn = PuBuGn;
exports.interpolatePuOr = PuOr;
exports.interpolatePuRd = PuRd;
exports.interpolatePurples = Purples;
exports.interpolateRainbow = rainbow;
exports.interpolateRdBu = RdBu;
exports.interpolateRdGy = RdGy;
exports.interpolateRdPu = RdPu;
exports.interpolateRdYlBu = RdYlBu;
exports.interpolateRdYlGn = RdYlGn;
exports.interpolateReds = Reds;
exports.interpolateSinebow = sinebow;
exports.interpolateSpectral = Spectral;
exports.interpolateViridis = viridis;
exports.interpolateWarm = warm;
exports.interpolateYlGn = YlGn;
exports.interpolateYlGnBu = YlGnBu;
exports.interpolateYlOrBr = YlOrBr;
exports.interpolateYlOrRd = YlOrRd;
exports.schemeAccent = Accent;
exports.schemeBlues = scheme$l;
exports.schemeBrBG = scheme;
exports.schemeBuGn = scheme$9;
exports.schemeBuPu = scheme$a;
exports.schemeCategory10 = category10;
exports.schemeDark2 = Dark2;
exports.schemeGnBu = scheme$b;
exports.schemeGreens = scheme$m;
exports.schemeGreys = scheme$n;
exports.schemeOrRd = scheme$c;
exports.schemeOranges = scheme$q;
exports.schemePRGn = scheme$1;
exports.schemePaired = Paired;
exports.schemePastel1 = Pastel1;
exports.schemePastel2 = Pastel2;
exports.schemePiYG = scheme$2;
exports.schemePuBu = scheme$e;
exports.schemePuBuGn = scheme$d;
exports.schemePuOr = scheme$3;
exports.schemePuRd = scheme$f;
exports.schemePurples = scheme$o;
exports.schemeRdBu = scheme$4;
exports.schemeRdGy = scheme$5;
exports.schemeRdPu = scheme$g;
exports.schemeRdYlBu = scheme$6;
exports.schemeRdYlGn = scheme$7;
exports.schemeReds = scheme$p;
exports.schemeSet1 = Set1;
exports.schemeSet2 = Set2;
exports.schemeSet3 = Set3;
exports.schemeSpectral = scheme$8;
exports.schemeTableau10 = Tableau10;
exports.schemeYlGn = scheme$i;
exports.schemeYlGnBu = scheme$h;
exports.schemeYlOrBr = scheme$j;
exports.schemeYlOrRd = scheme$k;

Object.defineProperty(exports, '__esModule', { value: true });

}));

},{"d3-color":12,"d3-interpolate":23}],29:[function(require,module,exports){
// https://d3js.org/d3-scale/ v2.2.2 Copyright 2019 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-collection'), require('d3-array'), require('d3-interpolate'), require('d3-format'), require('d3-time'), require('d3-time-format')) :
typeof define === 'function' && define.amd ? define(['exports', 'd3-collection', 'd3-array', 'd3-interpolate', 'd3-format', 'd3-time', 'd3-time-format'], factory) :
(factory((global.d3 = global.d3 || {}),global.d3,global.d3,global.d3,global.d3,global.d3,global.d3));
}(this, (function (exports,d3Collection,d3Array,d3Interpolate,d3Format,d3Time,d3TimeFormat) { 'use strict';

function initRange(domain, range) {
  switch (arguments.length) {
    case 0: break;
    case 1: this.range(domain); break;
    default: this.range(range).domain(domain); break;
  }
  return this;
}

function initInterpolator(domain, interpolator) {
  switch (arguments.length) {
    case 0: break;
    case 1: this.interpolator(domain); break;
    default: this.interpolator(interpolator).domain(domain); break;
  }
  return this;
}

var array = Array.prototype;

var map = array.map;
var slice = array.slice;

var implicit = {name: "implicit"};

function ordinal() {
  var index = d3Collection.map(),
      domain = [],
      range = [],
      unknown = implicit;

  function scale(d) {
    var key = d + "", i = index.get(key);
    if (!i) {
      if (unknown !== implicit) return unknown;
      index.set(key, i = domain.push(d));
    }
    return range[(i - 1) % range.length];
  }

  scale.domain = function(_) {
    if (!arguments.length) return domain.slice();
    domain = [], index = d3Collection.map();
    var i = -1, n = _.length, d, key;
    while (++i < n) if (!index.has(key = (d = _[i]) + "")) index.set(key, domain.push(d));
    return scale;
  };

  scale.range = function(_) {
    return arguments.length ? (range = slice.call(_), scale) : range.slice();
  };

  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function() {
    return ordinal(domain, range).unknown(unknown);
  };

  initRange.apply(scale, arguments);

  return scale;
}

function band() {
  var scale = ordinal().unknown(undefined),
      domain = scale.domain,
      ordinalRange = scale.range,
      range = [0, 1],
      step,
      bandwidth,
      round = false,
      paddingInner = 0,
      paddingOuter = 0,
      align = 0.5;

  delete scale.unknown;

  function rescale() {
    var n = domain().length,
        reverse = range[1] < range[0],
        start = range[reverse - 0],
        stop = range[1 - reverse];
    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
    if (round) step = Math.floor(step);
    start += (stop - start - step * (n - paddingInner)) * align;
    bandwidth = step * (1 - paddingInner);
    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);
    var values = d3Array.range(n).map(function(i) { return start + step * i; });
    return ordinalRange(reverse ? values.reverse() : values);
  }

  scale.domain = function(_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };

  scale.range = function(_) {
    return arguments.length ? (range = [+_[0], +_[1]], rescale()) : range.slice();
  };

  scale.rangeRound = function(_) {
    return range = [+_[0], +_[1]], round = true, rescale();
  };

  scale.bandwidth = function() {
    return bandwidth;
  };

  scale.step = function() {
    return step;
  };

  scale.round = function(_) {
    return arguments.length ? (round = !!_, rescale()) : round;
  };

  scale.padding = function(_) {
    return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;
  };

  scale.paddingInner = function(_) {
    return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;
  };

  scale.paddingOuter = function(_) {
    return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;
  };

  scale.align = function(_) {
    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
  };

  scale.copy = function() {
    return band(domain(), range)
        .round(round)
        .paddingInner(paddingInner)
        .paddingOuter(paddingOuter)
        .align(align);
  };

  return initRange.apply(rescale(), arguments);
}

function pointish(scale) {
  var copy = scale.copy;

  scale.padding = scale.paddingOuter;
  delete scale.paddingInner;
  delete scale.paddingOuter;

  scale.copy = function() {
    return pointish(copy());
  };

  return scale;
}

function point() {
  return pointish(band.apply(null, arguments).paddingInner(1));
}

function constant(x) {
  return function() {
    return x;
  };
}

function number(x) {
  return +x;
}

var unit = [0, 1];

function identity(x) {
  return x;
}

function normalize(a, b) {
  return (b -= (a = +a))
      ? function(x) { return (x - a) / b; }
      : constant(isNaN(b) ? NaN : 0.5);
}

function clamper(domain) {
  var a = domain[0], b = domain[domain.length - 1], t;
  if (a > b) t = a, a = b, b = t;
  return function(x) { return Math.max(a, Math.min(b, x)); };
}

// normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].
function bimap(domain, range, interpolate) {
  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];
  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);
  else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
  return function(x) { return r0(d0(x)); };
}

function polymap(domain, range, interpolate) {
  var j = Math.min(domain.length, range.length) - 1,
      d = new Array(j),
      r = new Array(j),
      i = -1;

  // Reverse descending domains.
  if (domain[j] < domain[0]) {
    domain = domain.slice().reverse();
    range = range.slice().reverse();
  }

  while (++i < j) {
    d[i] = normalize(domain[i], domain[i + 1]);
    r[i] = interpolate(range[i], range[i + 1]);
  }

  return function(x) {
    var i = d3Array.bisect(domain, x, 1, j) - 1;
    return r[i](d[i](x));
  };
}

function copy(source, target) {
  return target
      .domain(source.domain())
      .range(source.range())
      .interpolate(source.interpolate())
      .clamp(source.clamp())
      .unknown(source.unknown());
}

function transformer() {
  var domain = unit,
      range = unit,
      interpolate = d3Interpolate.interpolate,
      transform,
      untransform,
      unknown,
      clamp = identity,
      piecewise,
      output,
      input;

  function rescale() {
    piecewise = Math.min(domain.length, range.length) > 2 ? polymap : bimap;
    output = input = null;
    return scale;
  }

  function scale(x) {
    return isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));
  }

  scale.invert = function(y) {
    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), d3Interpolate.interpolateNumber)))(y)));
  };

  scale.domain = function(_) {
    return arguments.length ? (domain = map.call(_, number), clamp === identity || (clamp = clamper(domain)), rescale()) : domain.slice();
  };

  scale.range = function(_) {
    return arguments.length ? (range = slice.call(_), rescale()) : range.slice();
  };

  scale.rangeRound = function(_) {
    return range = slice.call(_), interpolate = d3Interpolate.interpolateRound, rescale();
  };

  scale.clamp = function(_) {
    return arguments.length ? (clamp = _ ? clamper(domain) : identity, scale) : clamp !== identity;
  };

  scale.interpolate = function(_) {
    return arguments.length ? (interpolate = _, rescale()) : interpolate;
  };

  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  return function(t, u) {
    transform = t, untransform = u;
    return rescale();
  };
}

function continuous(transform, untransform) {
  return transformer()(transform, untransform);
}

function tickFormat(start, stop, count, specifier) {
  var step = d3Array.tickStep(start, stop, count),
      precision;
  specifier = d3Format.formatSpecifier(specifier == null ? ",f" : specifier);
  switch (specifier.type) {
    case "s": {
      var value = Math.max(Math.abs(start), Math.abs(stop));
      if (specifier.precision == null && !isNaN(precision = d3Format.precisionPrefix(step, value))) specifier.precision = precision;
      return d3Format.formatPrefix(specifier, value);
    }
    case "":
    case "e":
    case "g":
    case "p":
    case "r": {
      if (specifier.precision == null && !isNaN(precision = d3Format.precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
      break;
    }
    case "f":
    case "%": {
      if (specifier.precision == null && !isNaN(precision = d3Format.precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
      break;
    }
  }
  return d3Format.format(specifier);
}

function linearish(scale) {
  var domain = scale.domain;

  scale.ticks = function(count) {
    var d = domain();
    return d3Array.ticks(d[0], d[d.length - 1], count == null ? 10 : count);
  };

  scale.tickFormat = function(count, specifier) {
    var d = domain();
    return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
  };

  scale.nice = function(count) {
    if (count == null) count = 10;

    var d = domain(),
        i0 = 0,
        i1 = d.length - 1,
        start = d[i0],
        stop = d[i1],
        step;

    if (stop < start) {
      step = start, start = stop, stop = step;
      step = i0, i0 = i1, i1 = step;
    }

    step = d3Array.tickIncrement(start, stop, count);

    if (step > 0) {
      start = Math.floor(start / step) * step;
      stop = Math.ceil(stop / step) * step;
      step = d3Array.tickIncrement(start, stop, count);
    } else if (step < 0) {
      start = Math.ceil(start * step) / step;
      stop = Math.floor(stop * step) / step;
      step = d3Array.tickIncrement(start, stop, count);
    }

    if (step > 0) {
      d[i0] = Math.floor(start / step) * step;
      d[i1] = Math.ceil(stop / step) * step;
      domain(d);
    } else if (step < 0) {
      d[i0] = Math.ceil(start * step) / step;
      d[i1] = Math.floor(stop * step) / step;
      domain(d);
    }

    return scale;
  };

  return scale;
}

function linear() {
  var scale = continuous(identity, identity);

  scale.copy = function() {
    return copy(scale, linear());
  };

  initRange.apply(scale, arguments);

  return linearish(scale);
}

function identity$1(domain) {
  var unknown;

  function scale(x) {
    return isNaN(x = +x) ? unknown : x;
  }

  scale.invert = scale;

  scale.domain = scale.range = function(_) {
    return arguments.length ? (domain = map.call(_, number), scale) : domain.slice();
  };

  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function() {
    return identity$1(domain).unknown(unknown);
  };

  domain = arguments.length ? map.call(domain, number) : [0, 1];

  return linearish(scale);
}

function nice(domain, interval) {
  domain = domain.slice();

  var i0 = 0,
      i1 = domain.length - 1,
      x0 = domain[i0],
      x1 = domain[i1],
      t;

  if (x1 < x0) {
    t = i0, i0 = i1, i1 = t;
    t = x0, x0 = x1, x1 = t;
  }

  domain[i0] = interval.floor(x0);
  domain[i1] = interval.ceil(x1);
  return domain;
}

function transformLog(x) {
  return Math.log(x);
}

function transformExp(x) {
  return Math.exp(x);
}

function transformLogn(x) {
  return -Math.log(-x);
}

function transformExpn(x) {
  return -Math.exp(-x);
}

function pow10(x) {
  return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
}

function powp(base) {
  return base === 10 ? pow10
      : base === Math.E ? Math.exp
      : function(x) { return Math.pow(base, x); };
}

function logp(base) {
  return base === Math.E ? Math.log
      : base === 10 && Math.log10
      || base === 2 && Math.log2
      || (base = Math.log(base), function(x) { return Math.log(x) / base; });
}

function reflect(f) {
  return function(x) {
    return -f(-x);
  };
}

function loggish(transform) {
  var scale = transform(transformLog, transformExp),
      domain = scale.domain,
      base = 10,
      logs,
      pows;

  function rescale() {
    logs = logp(base), pows = powp(base);
    if (domain()[0] < 0) {
      logs = reflect(logs), pows = reflect(pows);
      transform(transformLogn, transformExpn);
    } else {
      transform(transformLog, transformExp);
    }
    return scale;
  }

  scale.base = function(_) {
    return arguments.length ? (base = +_, rescale()) : base;
  };

  scale.domain = function(_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };

  scale.ticks = function(count) {
    var d = domain(),
        u = d[0],
        v = d[d.length - 1],
        r;

    if (r = v < u) i = u, u = v, v = i;

    var i = logs(u),
        j = logs(v),
        p,
        k,
        t,
        n = count == null ? 10 : +count,
        z = [];

    if (!(base % 1) && j - i < n) {
      i = Math.round(i) - 1, j = Math.round(j) + 1;
      if (u > 0) for (; i < j; ++i) {
        for (k = 1, p = pows(i); k < base; ++k) {
          t = p * k;
          if (t < u) continue;
          if (t > v) break;
          z.push(t);
        }
      } else for (; i < j; ++i) {
        for (k = base - 1, p = pows(i); k >= 1; --k) {
          t = p * k;
          if (t < u) continue;
          if (t > v) break;
          z.push(t);
        }
      }
    } else {
      z = d3Array.ticks(i, j, Math.min(j - i, n)).map(pows);
    }

    return r ? z.reverse() : z;
  };

  scale.tickFormat = function(count, specifier) {
    if (specifier == null) specifier = base === 10 ? ".0e" : ",";
    if (typeof specifier !== "function") specifier = d3Format.format(specifier);
    if (count === Infinity) return specifier;
    if (count == null) count = 10;
    var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?
    return function(d) {
      var i = d / pows(Math.round(logs(d)));
      if (i * base < base - 0.5) i *= base;
      return i <= k ? specifier(d) : "";
    };
  };

  scale.nice = function() {
    return domain(nice(domain(), {
      floor: function(x) { return pows(Math.floor(logs(x))); },
      ceil: function(x) { return pows(Math.ceil(logs(x))); }
    }));
  };

  return scale;
}

function log() {
  var scale = loggish(transformer()).domain([1, 10]);

  scale.copy = function() {
    return copy(scale, log()).base(scale.base());
  };

  initRange.apply(scale, arguments);

  return scale;
}

function transformSymlog(c) {
  return function(x) {
    return Math.sign(x) * Math.log1p(Math.abs(x / c));
  };
}

function transformSymexp(c) {
  return function(x) {
    return Math.sign(x) * Math.expm1(Math.abs(x)) * c;
  };
}

function symlogish(transform) {
  var c = 1, scale = transform(transformSymlog(c), transformSymexp(c));

  scale.constant = function(_) {
    return arguments.length ? transform(transformSymlog(c = +_), transformSymexp(c)) : c;
  };

  return linearish(scale);
}

function symlog() {
  var scale = symlogish(transformer());

  scale.copy = function() {
    return copy(scale, symlog()).constant(scale.constant());
  };

  return initRange.apply(scale, arguments);
}

function transformPow(exponent) {
  return function(x) {
    return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
  };
}

function transformSqrt(x) {
  return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x);
}

function transformSquare(x) {
  return x < 0 ? -x * x : x * x;
}

function powish(transform) {
  var scale = transform(identity, identity),
      exponent = 1;

  function rescale() {
    return exponent === 1 ? transform(identity, identity)
        : exponent === 0.5 ? transform(transformSqrt, transformSquare)
        : transform(transformPow(exponent), transformPow(1 / exponent));
  }

  scale.exponent = function(_) {
    return arguments.length ? (exponent = +_, rescale()) : exponent;
  };

  return linearish(scale);
}

function pow() {
  var scale = powish(transformer());

  scale.copy = function() {
    return copy(scale, pow()).exponent(scale.exponent());
  };

  initRange.apply(scale, arguments);

  return scale;
}

function sqrt() {
  return pow.apply(null, arguments).exponent(0.5);
}

function quantile() {
  var domain = [],
      range = [],
      thresholds = [],
      unknown;

  function rescale() {
    var i = 0, n = Math.max(1, range.length);
    thresholds = new Array(n - 1);
    while (++i < n) thresholds[i - 1] = d3Array.quantile(domain, i / n);
    return scale;
  }

  function scale(x) {
    return isNaN(x = +x) ? unknown : range[d3Array.bisect(thresholds, x)];
  }

  scale.invertExtent = function(y) {
    var i = range.indexOf(y);
    return i < 0 ? [NaN, NaN] : [
      i > 0 ? thresholds[i - 1] : domain[0],
      i < thresholds.length ? thresholds[i] : domain[domain.length - 1]
    ];
  };

  scale.domain = function(_) {
    if (!arguments.length) return domain.slice();
    domain = [];
    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);
    domain.sort(d3Array.ascending);
    return rescale();
  };

  scale.range = function(_) {
    return arguments.length ? (range = slice.call(_), rescale()) : range.slice();
  };

  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.quantiles = function() {
    return thresholds.slice();
  };

  scale.copy = function() {
    return quantile()
        .domain(domain)
        .range(range)
        .unknown(unknown);
  };

  return initRange.apply(scale, arguments);
}

function quantize() {
  var x0 = 0,
      x1 = 1,
      n = 1,
      domain = [0.5],
      range = [0, 1],
      unknown;

  function scale(x) {
    return x <= x ? range[d3Array.bisect(domain, x, 0, n)] : unknown;
  }

  function rescale() {
    var i = -1;
    domain = new Array(n);
    while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);
    return scale;
  }

  scale.domain = function(_) {
    return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [x0, x1];
  };

  scale.range = function(_) {
    return arguments.length ? (n = (range = slice.call(_)).length - 1, rescale()) : range.slice();
  };

  scale.invertExtent = function(y) {
    var i = range.indexOf(y);
    return i < 0 ? [NaN, NaN]
        : i < 1 ? [x0, domain[0]]
        : i >= n ? [domain[n - 1], x1]
        : [domain[i - 1], domain[i]];
  };

  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : scale;
  };

  scale.thresholds = function() {
    return domain.slice();
  };

  scale.copy = function() {
    return quantize()
        .domain([x0, x1])
        .range(range)
        .unknown(unknown);
  };

  return initRange.apply(linearish(scale), arguments);
}

function threshold() {
  var domain = [0.5],
      range = [0, 1],
      unknown,
      n = 1;

  function scale(x) {
    return x <= x ? range[d3Array.bisect(domain, x, 0, n)] : unknown;
  }

  scale.domain = function(_) {
    return arguments.length ? (domain = slice.call(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();
  };

  scale.range = function(_) {
    return arguments.length ? (range = slice.call(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();
  };

  scale.invertExtent = function(y) {
    var i = range.indexOf(y);
    return [domain[i - 1], domain[i]];
  };

  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function() {
    return threshold()
        .domain(domain)
        .range(range)
        .unknown(unknown);
  };

  return initRange.apply(scale, arguments);
}

var durationSecond = 1000,
    durationMinute = durationSecond * 60,
    durationHour = durationMinute * 60,
    durationDay = durationHour * 24,
    durationWeek = durationDay * 7,
    durationMonth = durationDay * 30,
    durationYear = durationDay * 365;

function date(t) {
  return new Date(t);
}

function number$1(t) {
  return t instanceof Date ? +t : +new Date(+t);
}

function calendar(year, month, week, day, hour, minute, second, millisecond, format) {
  var scale = continuous(identity, identity),
      invert = scale.invert,
      domain = scale.domain;

  var formatMillisecond = format(".%L"),
      formatSecond = format(":%S"),
      formatMinute = format("%I:%M"),
      formatHour = format("%I %p"),
      formatDay = format("%a %d"),
      formatWeek = format("%b %d"),
      formatMonth = format("%B"),
      formatYear = format("%Y");

  var tickIntervals = [
    [second,  1,      durationSecond],
    [second,  5,  5 * durationSecond],
    [second, 15, 15 * durationSecond],
    [second, 30, 30 * durationSecond],
    [minute,  1,      durationMinute],
    [minute,  5,  5 * durationMinute],
    [minute, 15, 15 * durationMinute],
    [minute, 30, 30 * durationMinute],
    [  hour,  1,      durationHour  ],
    [  hour,  3,  3 * durationHour  ],
    [  hour,  6,  6 * durationHour  ],
    [  hour, 12, 12 * durationHour  ],
    [   day,  1,      durationDay   ],
    [   day,  2,  2 * durationDay   ],
    [  week,  1,      durationWeek  ],
    [ month,  1,      durationMonth ],
    [ month,  3,  3 * durationMonth ],
    [  year,  1,      durationYear  ]
  ];

  function tickFormat(date) {
    return (second(date) < date ? formatMillisecond
        : minute(date) < date ? formatSecond
        : hour(date) < date ? formatMinute
        : day(date) < date ? formatHour
        : month(date) < date ? (week(date) < date ? formatDay : formatWeek)
        : year(date) < date ? formatMonth
        : formatYear)(date);
  }

  function tickInterval(interval, start, stop, step) {
    if (interval == null) interval = 10;

    // If a desired tick count is specified, pick a reasonable tick interval
    // based on the extent of the domain and a rough estimate of tick size.
    // Otherwise, assume interval is already a time interval and use it.
    if (typeof interval === "number") {
      var target = Math.abs(stop - start) / interval,
          i = d3Array.bisector(function(i) { return i[2]; }).right(tickIntervals, target);
      if (i === tickIntervals.length) {
        step = d3Array.tickStep(start / durationYear, stop / durationYear, interval);
        interval = year;
      } else if (i) {
        i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
        step = i[1];
        interval = i[0];
      } else {
        step = Math.max(d3Array.tickStep(start, stop, interval), 1);
        interval = millisecond;
      }
    }

    return step == null ? interval : interval.every(step);
  }

  scale.invert = function(y) {
    return new Date(invert(y));
  };

  scale.domain = function(_) {
    return arguments.length ? domain(map.call(_, number$1)) : domain().map(date);
  };

  scale.ticks = function(interval, step) {
    var d = domain(),
        t0 = d[0],
        t1 = d[d.length - 1],
        r = t1 < t0,
        t;
    if (r) t = t0, t0 = t1, t1 = t;
    t = tickInterval(interval, t0, t1, step);
    t = t ? t.range(t0, t1 + 1) : []; // inclusive stop
    return r ? t.reverse() : t;
  };

  scale.tickFormat = function(count, specifier) {
    return specifier == null ? tickFormat : format(specifier);
  };

  scale.nice = function(interval, step) {
    var d = domain();
    return (interval = tickInterval(interval, d[0], d[d.length - 1], step))
        ? domain(nice(d, interval))
        : scale;
  };

  scale.copy = function() {
    return copy(scale, calendar(year, month, week, day, hour, minute, second, millisecond, format));
  };

  return scale;
}

function time() {
  return initRange.apply(calendar(d3Time.timeYear, d3Time.timeMonth, d3Time.timeWeek, d3Time.timeDay, d3Time.timeHour, d3Time.timeMinute, d3Time.timeSecond, d3Time.timeMillisecond, d3TimeFormat.timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]), arguments);
}

function utcTime() {
  return initRange.apply(calendar(d3Time.utcYear, d3Time.utcMonth, d3Time.utcWeek, d3Time.utcDay, d3Time.utcHour, d3Time.utcMinute, d3Time.utcSecond, d3Time.utcMillisecond, d3TimeFormat.utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]), arguments);
}

function transformer$1() {
  var x0 = 0,
      x1 = 1,
      t0,
      t1,
      k10,
      transform,
      interpolator = identity,
      clamp = false,
      unknown;

  function scale(x) {
    return isNaN(x = +x) ? unknown : interpolator(k10 === 0 ? 0.5 : (x = (transform(x) - t0) * k10, clamp ? Math.max(0, Math.min(1, x)) : x));
  }

  scale.domain = function(_) {
    return arguments.length ? (t0 = transform(x0 = +_[0]), t1 = transform(x1 = +_[1]), k10 = t0 === t1 ? 0 : 1 / (t1 - t0), scale) : [x0, x1];
  };

  scale.clamp = function(_) {
    return arguments.length ? (clamp = !!_, scale) : clamp;
  };

  scale.interpolator = function(_) {
    return arguments.length ? (interpolator = _, scale) : interpolator;
  };

  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  return function(t) {
    transform = t, t0 = t(x0), t1 = t(x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0);
    return scale;
  };
}

function copy$1(source, target) {
  return target
      .domain(source.domain())
      .interpolator(source.interpolator())
      .clamp(source.clamp())
      .unknown(source.unknown());
}

function sequential() {
  var scale = linearish(transformer$1()(identity));

  scale.copy = function() {
    return copy$1(scale, sequential());
  };

  return initInterpolator.apply(scale, arguments);
}

function sequentialLog() {
  var scale = loggish(transformer$1()).domain([1, 10]);

  scale.copy = function() {
    return copy$1(scale, sequentialLog()).base(scale.base());
  };

  return initInterpolator.apply(scale, arguments);
}

function sequentialSymlog() {
  var scale = symlogish(transformer$1());

  scale.copy = function() {
    return copy$1(scale, sequentialSymlog()).constant(scale.constant());
  };

  return initInterpolator.apply(scale, arguments);
}

function sequentialPow() {
  var scale = powish(transformer$1());

  scale.copy = function() {
    return copy$1(scale, sequentialPow()).exponent(scale.exponent());
  };

  return initInterpolator.apply(scale, arguments);
}

function sequentialSqrt() {
  return sequentialPow.apply(null, arguments).exponent(0.5);
}

function sequentialQuantile() {
  var domain = [],
      interpolator = identity;

  function scale(x) {
    if (!isNaN(x = +x)) return interpolator((d3Array.bisect(domain, x) - 1) / (domain.length - 1));
  }

  scale.domain = function(_) {
    if (!arguments.length) return domain.slice();
    domain = [];
    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);
    domain.sort(d3Array.ascending);
    return scale;
  };

  scale.interpolator = function(_) {
    return arguments.length ? (interpolator = _, scale) : interpolator;
  };

  scale.copy = function() {
    return sequentialQuantile(interpolator).domain(domain);
  };

  return initInterpolator.apply(scale, arguments);
}

function transformer$2() {
  var x0 = 0,
      x1 = 0.5,
      x2 = 1,
      t0,
      t1,
      t2,
      k10,
      k21,
      interpolator = identity,
      transform,
      clamp = false,
      unknown;

  function scale(x) {
    return isNaN(x = +x) ? unknown : (x = 0.5 + ((x = +transform(x)) - t1) * (x < t1 ? k10 : k21), interpolator(clamp ? Math.max(0, Math.min(1, x)) : x));
  }

  scale.domain = function(_) {
    return arguments.length ? (t0 = transform(x0 = +_[0]), t1 = transform(x1 = +_[1]), t2 = transform(x2 = +_[2]), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), scale) : [x0, x1, x2];
  };

  scale.clamp = function(_) {
    return arguments.length ? (clamp = !!_, scale) : clamp;
  };

  scale.interpolator = function(_) {
    return arguments.length ? (interpolator = _, scale) : interpolator;
  };

  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  return function(t) {
    transform = t, t0 = t(x0), t1 = t(x1), t2 = t(x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1);
    return scale;
  };
}

function diverging() {
  var scale = linearish(transformer$2()(identity));

  scale.copy = function() {
    return copy$1(scale, diverging());
  };

  return initInterpolator.apply(scale, arguments);
}

function divergingLog() {
  var scale = loggish(transformer$2()).domain([0.1, 1, 10]);

  scale.copy = function() {
    return copy$1(scale, divergingLog()).base(scale.base());
  };

  return initInterpolator.apply(scale, arguments);
}

function divergingSymlog() {
  var scale = symlogish(transformer$2());

  scale.copy = function() {
    return copy$1(scale, divergingSymlog()).constant(scale.constant());
  };

  return initInterpolator.apply(scale, arguments);
}

function divergingPow() {
  var scale = powish(transformer$2());

  scale.copy = function() {
    return copy$1(scale, divergingPow()).exponent(scale.exponent());
  };

  return initInterpolator.apply(scale, arguments);
}

function divergingSqrt() {
  return divergingPow.apply(null, arguments).exponent(0.5);
}

exports.scaleBand = band;
exports.scalePoint = point;
exports.scaleIdentity = identity$1;
exports.scaleLinear = linear;
exports.scaleLog = log;
exports.scaleSymlog = symlog;
exports.scaleOrdinal = ordinal;
exports.scaleImplicit = implicit;
exports.scalePow = pow;
exports.scaleSqrt = sqrt;
exports.scaleQuantile = quantile;
exports.scaleQuantize = quantize;
exports.scaleThreshold = threshold;
exports.scaleTime = time;
exports.scaleUtc = utcTime;
exports.scaleSequential = sequential;
exports.scaleSequentialLog = sequentialLog;
exports.scaleSequentialPow = sequentialPow;
exports.scaleSequentialSqrt = sequentialSqrt;
exports.scaleSequentialSymlog = sequentialSymlog;
exports.scaleSequentialQuantile = sequentialQuantile;
exports.scaleDiverging = diverging;
exports.scaleDivergingLog = divergingLog;
exports.scaleDivergingPow = divergingPow;
exports.scaleDivergingSqrt = divergingSqrt;
exports.scaleDivergingSymlog = divergingSymlog;
exports.tickFormat = tickFormat;

Object.defineProperty(exports, '__esModule', { value: true });

})));

},{"d3-array":7,"d3-collection":11,"d3-format":20,"d3-interpolate":23,"d3-time":33,"d3-time-format":32}],30:[function(require,module,exports){
// https://d3js.org/d3-selection/ v1.4.0 Copyright 2019 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
typeof define === 'function' && define.amd ? define(['exports'], factory) :
(factory((global.d3 = global.d3 || {})));
}(this, (function (exports) { 'use strict';

var xhtml = "http://www.w3.org/1999/xhtml";

var namespaces = {
  svg: "http://www.w3.org/2000/svg",
  xhtml: xhtml,
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace",
  xmlns: "http://www.w3.org/2000/xmlns/"
};

function namespace(name) {
  var prefix = name += "", i = prefix.indexOf(":");
  if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
  return namespaces.hasOwnProperty(prefix) ? {space: namespaces[prefix], local: name} : name;
}

function creatorInherit(name) {
  return function() {
    var document = this.ownerDocument,
        uri = this.namespaceURI;
    return uri === xhtml && document.documentElement.namespaceURI === xhtml
        ? document.createElement(name)
        : document.createElementNS(uri, name);
  };
}

function creatorFixed(fullname) {
  return function() {
    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
  };
}

function creator(name) {
  var fullname = namespace(name);
  return (fullname.local
      ? creatorFixed
      : creatorInherit)(fullname);
}

function none() {}

function selector(selector) {
  return selector == null ? none : function() {
    return this.querySelector(selector);
  };
}

function selection_select(select) {
  if (typeof select !== "function") select = selector(select);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
      }
    }
  }

  return new Selection(subgroups, this._parents);
}

function empty() {
  return [];
}

function selectorAll(selector) {
  return selector == null ? empty : function() {
    return this.querySelectorAll(selector);
  };
}

function selection_selectAll(select) {
  if (typeof select !== "function") select = selectorAll(select);

  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        subgroups.push(select.call(node, node.__data__, i, group));
        parents.push(node);
      }
    }
  }

  return new Selection(subgroups, parents);
}

function matcher(selector) {
  return function() {
    return this.matches(selector);
  };
}

function selection_filter(match) {
  if (typeof match !== "function") match = matcher(match);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }

  return new Selection(subgroups, this._parents);
}

function sparse(update) {
  return new Array(update.length);
}

function selection_enter() {
  return new Selection(this._enter || this._groups.map(sparse), this._parents);
}

function EnterNode(parent, datum) {
  this.ownerDocument = parent.ownerDocument;
  this.namespaceURI = parent.namespaceURI;
  this._next = null;
  this._parent = parent;
  this.__data__ = datum;
}

EnterNode.prototype = {
  constructor: EnterNode,
  appendChild: function(child) { return this._parent.insertBefore(child, this._next); },
  insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },
  querySelector: function(selector) { return this._parent.querySelector(selector); },
  querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }
};

function constant(x) {
  return function() {
    return x;
  };
}

var keyPrefix = "$"; // Protect against keys like “__proto__”.

function bindIndex(parent, group, enter, update, exit, data) {
  var i = 0,
      node,
      groupLength = group.length,
      dataLength = data.length;

  // Put any non-null nodes that fit into update.
  // Put any null nodes into enter.
  // Put any remaining data into enter.
  for (; i < dataLength; ++i) {
    if (node = group[i]) {
      node.__data__ = data[i];
      update[i] = node;
    } else {
      enter[i] = new EnterNode(parent, data[i]);
    }
  }

  // Put any non-null nodes that don’t fit into exit.
  for (; i < groupLength; ++i) {
    if (node = group[i]) {
      exit[i] = node;
    }
  }
}

function bindKey(parent, group, enter, update, exit, data, key) {
  var i,
      node,
      nodeByKeyValue = {},
      groupLength = group.length,
      dataLength = data.length,
      keyValues = new Array(groupLength),
      keyValue;

  // Compute the key for each node.
  // If multiple nodes have the same key, the duplicates are added to exit.
  for (i = 0; i < groupLength; ++i) {
    if (node = group[i]) {
      keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);
      if (keyValue in nodeByKeyValue) {
        exit[i] = node;
      } else {
        nodeByKeyValue[keyValue] = node;
      }
    }
  }

  // Compute the key for each datum.
  // If there a node associated with this key, join and add it to update.
  // If there is not (or the key is a duplicate), add it to enter.
  for (i = 0; i < dataLength; ++i) {
    keyValue = keyPrefix + key.call(parent, data[i], i, data);
    if (node = nodeByKeyValue[keyValue]) {
      update[i] = node;
      node.__data__ = data[i];
      nodeByKeyValue[keyValue] = null;
    } else {
      enter[i] = new EnterNode(parent, data[i]);
    }
  }

  // Add any remaining nodes that were not bound to data to exit.
  for (i = 0; i < groupLength; ++i) {
    if ((node = group[i]) && (nodeByKeyValue[keyValues[i]] === node)) {
      exit[i] = node;
    }
  }
}

function selection_data(value, key) {
  if (!value) {
    data = new Array(this.size()), j = -1;
    this.each(function(d) { data[++j] = d; });
    return data;
  }

  var bind = key ? bindKey : bindIndex,
      parents = this._parents,
      groups = this._groups;

  if (typeof value !== "function") value = constant(value);

  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
    var parent = parents[j],
        group = groups[j],
        groupLength = group.length,
        data = value.call(parent, parent && parent.__data__, j, parents),
        dataLength = data.length,
        enterGroup = enter[j] = new Array(dataLength),
        updateGroup = update[j] = new Array(dataLength),
        exitGroup = exit[j] = new Array(groupLength);

    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);

    // Now connect the enter nodes to their following update node, such that
    // appendChild can insert the materialized enter node before this node,
    // rather than at the end of the parent node.
    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
      if (previous = enterGroup[i0]) {
        if (i0 >= i1) i1 = i0 + 1;
        while (!(next = updateGroup[i1]) && ++i1 < dataLength);
        previous._next = next || null;
      }
    }
  }

  update = new Selection(update, parents);
  update._enter = enter;
  update._exit = exit;
  return update;
}

function selection_exit() {
  return new Selection(this._exit || this._groups.map(sparse), this._parents);
}

function selection_join(onenter, onupdate, onexit) {
  var enter = this.enter(), update = this, exit = this.exit();
  enter = typeof onenter === "function" ? onenter(enter) : enter.append(onenter + "");
  if (onupdate != null) update = onupdate(update);
  if (onexit == null) exit.remove(); else onexit(exit);
  return enter && update ? enter.merge(update).order() : update;
}

function selection_merge(selection$$1) {

  for (var groups0 = this._groups, groups1 = selection$$1._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }

  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }

  return new Selection(merges, this._parents);
}

function selection_order() {

  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
      if (node = group[i]) {
        if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);
        next = node;
      }
    }
  }

  return this;
}

function selection_sort(compare) {
  if (!compare) compare = ascending;

  function compareNode(a, b) {
    return a && b ? compare(a.__data__, b.__data__) : !a - !b;
  }

  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        sortgroup[i] = node;
      }
    }
    sortgroup.sort(compareNode);
  }

  return new Selection(sortgroups, this._parents).order();
}

function ascending(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}

function selection_call() {
  var callback = arguments[0];
  arguments[0] = this;
  callback.apply(null, arguments);
  return this;
}

function selection_nodes() {
  var nodes = new Array(this.size()), i = -1;
  this.each(function() { nodes[++i] = this; });
  return nodes;
}

function selection_node() {

  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
      var node = group[i];
      if (node) return node;
    }
  }

  return null;
}

function selection_size() {
  var size = 0;
  this.each(function() { ++size; });
  return size;
}

function selection_empty() {
  return !this.node();
}

function selection_each(callback) {

  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i]) callback.call(node, node.__data__, i, group);
    }
  }

  return this;
}

function attrRemove(name) {
  return function() {
    this.removeAttribute(name);
  };
}

function attrRemoveNS(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}

function attrConstant(name, value) {
  return function() {
    this.setAttribute(name, value);
  };
}

function attrConstantNS(fullname, value) {
  return function() {
    this.setAttributeNS(fullname.space, fullname.local, value);
  };
}

function attrFunction(name, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttribute(name);
    else this.setAttribute(name, v);
  };
}

function attrFunctionNS(fullname, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);
    else this.setAttributeNS(fullname.space, fullname.local, v);
  };
}

function selection_attr(name, value) {
  var fullname = namespace(name);

  if (arguments.length < 2) {
    var node = this.node();
    return fullname.local
        ? node.getAttributeNS(fullname.space, fullname.local)
        : node.getAttribute(fullname);
  }

  return this.each((value == null
      ? (fullname.local ? attrRemoveNS : attrRemove) : (typeof value === "function"
      ? (fullname.local ? attrFunctionNS : attrFunction)
      : (fullname.local ? attrConstantNS : attrConstant)))(fullname, value));
}

function defaultView(node) {
  return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node
      || (node.document && node) // node is a Window
      || node.defaultView; // node is a Document
}

function styleRemove(name) {
  return function() {
    this.style.removeProperty(name);
  };
}

function styleConstant(name, value, priority) {
  return function() {
    this.style.setProperty(name, value, priority);
  };
}

function styleFunction(name, value, priority) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) this.style.removeProperty(name);
    else this.style.setProperty(name, v, priority);
  };
}

function selection_style(name, value, priority) {
  return arguments.length > 1
      ? this.each((value == null
            ? styleRemove : typeof value === "function"
            ? styleFunction
            : styleConstant)(name, value, priority == null ? "" : priority))
      : styleValue(this.node(), name);
}

function styleValue(node, name) {
  return node.style.getPropertyValue(name)
      || defaultView(node).getComputedStyle(node, null).getPropertyValue(name);
}

function propertyRemove(name) {
  return function() {
    delete this[name];
  };
}

function propertyConstant(name, value) {
  return function() {
    this[name] = value;
  };
}

function propertyFunction(name, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null) delete this[name];
    else this[name] = v;
  };
}

function selection_property(name, value) {
  return arguments.length > 1
      ? this.each((value == null
          ? propertyRemove : typeof value === "function"
          ? propertyFunction
          : propertyConstant)(name, value))
      : this.node()[name];
}

function classArray(string) {
  return string.trim().split(/^|\s+/);
}

function classList(node) {
  return node.classList || new ClassList(node);
}

function ClassList(node) {
  this._node = node;
  this._names = classArray(node.getAttribute("class") || "");
}

ClassList.prototype = {
  add: function(name) {
    var i = this._names.indexOf(name);
    if (i < 0) {
      this._names.push(name);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  remove: function(name) {
    var i = this._names.indexOf(name);
    if (i >= 0) {
      this._names.splice(i, 1);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  contains: function(name) {
    return this._names.indexOf(name) >= 0;
  }
};

function classedAdd(node, names) {
  var list = classList(node), i = -1, n = names.length;
  while (++i < n) list.add(names[i]);
}

function classedRemove(node, names) {
  var list = classList(node), i = -1, n = names.length;
  while (++i < n) list.remove(names[i]);
}

function classedTrue(names) {
  return function() {
    classedAdd(this, names);
  };
}

function classedFalse(names) {
  return function() {
    classedRemove(this, names);
  };
}

function classedFunction(names, value) {
  return function() {
    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
  };
}

function selection_classed(name, value) {
  var names = classArray(name + "");

  if (arguments.length < 2) {
    var list = classList(this.node()), i = -1, n = names.length;
    while (++i < n) if (!list.contains(names[i])) return false;
    return true;
  }

  return this.each((typeof value === "function"
      ? classedFunction : value
      ? classedTrue
      : classedFalse)(names, value));
}

function textRemove() {
  this.textContent = "";
}

function textConstant(value) {
  return function() {
    this.textContent = value;
  };
}

function textFunction(value) {
  return function() {
    var v = value.apply(this, arguments);
    this.textContent = v == null ? "" : v;
  };
}

function selection_text(value) {
  return arguments.length
      ? this.each(value == null
          ? textRemove : (typeof value === "function"
          ? textFunction
          : textConstant)(value))
      : this.node().textContent;
}

function htmlRemove() {
  this.innerHTML = "";
}

function htmlConstant(value) {
  return function() {
    this.innerHTML = value;
  };
}

function htmlFunction(value) {
  return function() {
    var v = value.apply(this, arguments);
    this.innerHTML = v == null ? "" : v;
  };
}

function selection_html(value) {
  return arguments.length
      ? this.each(value == null
          ? htmlRemove : (typeof value === "function"
          ? htmlFunction
          : htmlConstant)(value))
      : this.node().innerHTML;
}

function raise() {
  if (this.nextSibling) this.parentNode.appendChild(this);
}

function selection_raise() {
  return this.each(raise);
}

function lower() {
  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
}

function selection_lower() {
  return this.each(lower);
}

function selection_append(name) {
  var create = typeof name === "function" ? name : creator(name);
  return this.select(function() {
    return this.appendChild(create.apply(this, arguments));
  });
}

function constantNull() {
  return null;
}

function selection_insert(name, before) {
  var create = typeof name === "function" ? name : creator(name),
      select = before == null ? constantNull : typeof before === "function" ? before : selector(before);
  return this.select(function() {
    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
  });
}

function remove() {
  var parent = this.parentNode;
  if (parent) parent.removeChild(this);
}

function selection_remove() {
  return this.each(remove);
}

function selection_cloneShallow() {
  return this.parentNode.insertBefore(this.cloneNode(false), this.nextSibling);
}

function selection_cloneDeep() {
  return this.parentNode.insertBefore(this.cloneNode(true), this.nextSibling);
}

function selection_clone(deep) {
  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
}

function selection_datum(value) {
  return arguments.length
      ? this.property("__data__", value)
      : this.node().__data__;
}

var filterEvents = {};

exports.event = null;

if (typeof document !== "undefined") {
  var element = document.documentElement;
  if (!("onmouseenter" in element)) {
    filterEvents = {mouseenter: "mouseover", mouseleave: "mouseout"};
  }
}

function filterContextListener(listener, index, group) {
  listener = contextListener(listener, index, group);
  return function(event) {
    var related = event.relatedTarget;
    if (!related || (related !== this && !(related.compareDocumentPosition(this) & 8))) {
      listener.call(this, event);
    }
  };
}

function contextListener(listener, index, group) {
  return function(event1) {
    var event0 = exports.event; // Events can be reentrant (e.g., focus).
    exports.event = event1;
    try {
      listener.call(this, this.__data__, index, group);
    } finally {
      exports.event = event0;
    }
  };
}

function parseTypenames(typenames) {
  return typenames.trim().split(/^|\s+/).map(function(t) {
    var name = "", i = t.indexOf(".");
    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
    return {type: t, name: name};
  });
}

function onRemove(typename) {
  return function() {
    var on = this.__on;
    if (!on) return;
    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.capture);
      } else {
        on[++i] = o;
      }
    }
    if (++i) on.length = i;
    else delete this.__on;
  };
}

function onAdd(typename, value, capture) {
  var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;
  return function(d, i, group) {
    var on = this.__on, o, listener = wrap(value, i, group);
    if (on) for (var j = 0, m = on.length; j < m; ++j) {
      if ((o = on[j]).type === typename.type && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.capture);
        this.addEventListener(o.type, o.listener = listener, o.capture = capture);
        o.value = value;
        return;
      }
    }
    this.addEventListener(typename.type, listener, capture);
    o = {type: typename.type, name: typename.name, value: value, listener: listener, capture: capture};
    if (!on) this.__on = [o];
    else on.push(o);
  };
}

function selection_on(typename, value, capture) {
  var typenames = parseTypenames(typename + ""), i, n = typenames.length, t;

  if (arguments.length < 2) {
    var on = this.node().__on;
    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
      for (i = 0, o = on[j]; i < n; ++i) {
        if ((t = typenames[i]).type === o.type && t.name === o.name) {
          return o.value;
        }
      }
    }
    return;
  }

  on = value ? onAdd : onRemove;
  if (capture == null) capture = false;
  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, capture));
  return this;
}

function customEvent(event1, listener, that, args) {
  var event0 = exports.event;
  event1.sourceEvent = exports.event;
  exports.event = event1;
  try {
    return listener.apply(that, args);
  } finally {
    exports.event = event0;
  }
}

function dispatchEvent(node, type, params) {
  var window = defaultView(node),
      event = window.CustomEvent;

  if (typeof event === "function") {
    event = new event(type, params);
  } else {
    event = window.document.createEvent("Event");
    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;
    else event.initEvent(type, false, false);
  }

  node.dispatchEvent(event);
}

function dispatchConstant(type, params) {
  return function() {
    return dispatchEvent(this, type, params);
  };
}

function dispatchFunction(type, params) {
  return function() {
    return dispatchEvent(this, type, params.apply(this, arguments));
  };
}

function selection_dispatch(type, params) {
  return this.each((typeof params === "function"
      ? dispatchFunction
      : dispatchConstant)(type, params));
}

var root = [null];

function Selection(groups, parents) {
  this._groups = groups;
  this._parents = parents;
}

function selection() {
  return new Selection([[document.documentElement]], root);
}

Selection.prototype = selection.prototype = {
  constructor: Selection,
  select: selection_select,
  selectAll: selection_selectAll,
  filter: selection_filter,
  data: selection_data,
  enter: selection_enter,
  exit: selection_exit,
  join: selection_join,
  merge: selection_merge,
  order: selection_order,
  sort: selection_sort,
  call: selection_call,
  nodes: selection_nodes,
  node: selection_node,
  size: selection_size,
  empty: selection_empty,
  each: selection_each,
  attr: selection_attr,
  style: selection_style,
  property: selection_property,
  classed: selection_classed,
  text: selection_text,
  html: selection_html,
  raise: selection_raise,
  lower: selection_lower,
  append: selection_append,
  insert: selection_insert,
  remove: selection_remove,
  clone: selection_clone,
  datum: selection_datum,
  on: selection_on,
  dispatch: selection_dispatch
};

function select(selector) {
  return typeof selector === "string"
      ? new Selection([[document.querySelector(selector)]], [document.documentElement])
      : new Selection([[selector]], root);
}

function create(name) {
  return select(creator(name).call(document.documentElement));
}

var nextId = 0;

function local() {
  return new Local;
}

function Local() {
  this._ = "@" + (++nextId).toString(36);
}

Local.prototype = local.prototype = {
  constructor: Local,
  get: function(node) {
    var id = this._;
    while (!(id in node)) if (!(node = node.parentNode)) return;
    return node[id];
  },
  set: function(node, value) {
    return node[this._] = value;
  },
  remove: function(node) {
    return this._ in node && delete node[this._];
  },
  toString: function() {
    return this._;
  }
};

function sourceEvent() {
  var current = exports.event, source;
  while (source = current.sourceEvent) current = source;
  return current;
}

function point(node, event) {
  var svg = node.ownerSVGElement || node;

  if (svg.createSVGPoint) {
    var point = svg.createSVGPoint();
    point.x = event.clientX, point.y = event.clientY;
    point = point.matrixTransform(node.getScreenCTM().inverse());
    return [point.x, point.y];
  }

  var rect = node.getBoundingClientRect();
  return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
}

function mouse(node) {
  var event = sourceEvent();
  if (event.changedTouches) event = event.changedTouches[0];
  return point(node, event);
}

function selectAll(selector) {
  return typeof selector === "string"
      ? new Selection([document.querySelectorAll(selector)], [document.documentElement])
      : new Selection([selector == null ? [] : selector], root);
}

function touch(node, touches, identifier) {
  if (arguments.length < 3) identifier = touches, touches = sourceEvent().changedTouches;

  for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {
    if ((touch = touches[i]).identifier === identifier) {
      return point(node, touch);
    }
  }

  return null;
}

function touches(node, touches) {
  if (touches == null) touches = sourceEvent().touches;

  for (var i = 0, n = touches ? touches.length : 0, points = new Array(n); i < n; ++i) {
    points[i] = point(node, touches[i]);
  }

  return points;
}

exports.create = create;
exports.creator = creator;
exports.local = local;
exports.matcher = matcher;
exports.mouse = mouse;
exports.namespace = namespace;
exports.namespaces = namespaces;
exports.clientPoint = point;
exports.select = select;
exports.selectAll = selectAll;
exports.selection = selection;
exports.selector = selector;
exports.selectorAll = selectorAll;
exports.style = styleValue;
exports.touch = touch;
exports.touches = touches;
exports.window = defaultView;
exports.customEvent = customEvent;

Object.defineProperty(exports, '__esModule', { value: true });

})));

},{}],31:[function(require,module,exports){
// https://d3js.org/d3-shape/ v1.3.5 Copyright 2019 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-path')) :
typeof define === 'function' && define.amd ? define(['exports', 'd3-path'], factory) :
(factory((global.d3 = global.d3 || {}),global.d3));
}(this, (function (exports,d3Path) { 'use strict';

function constant(x) {
  return function constant() {
    return x;
  };
}

var abs = Math.abs;
var atan2 = Math.atan2;
var cos = Math.cos;
var max = Math.max;
var min = Math.min;
var sin = Math.sin;
var sqrt = Math.sqrt;

var epsilon = 1e-12;
var pi = Math.PI;
var halfPi = pi / 2;
var tau = 2 * pi;

function acos(x) {
  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
}

function asin(x) {
  return x >= 1 ? halfPi : x <= -1 ? -halfPi : Math.asin(x);
}

function arcInnerRadius(d) {
  return d.innerRadius;
}

function arcOuterRadius(d) {
  return d.outerRadius;
}

function arcStartAngle(d) {
  return d.startAngle;
}

function arcEndAngle(d) {
  return d.endAngle;
}

function arcPadAngle(d) {
  return d && d.padAngle; // Note: optional!
}

function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
  var x10 = x1 - x0, y10 = y1 - y0,
      x32 = x3 - x2, y32 = y3 - y2,
      t = y32 * x10 - x32 * y10;
  if (t * t < epsilon) return;
  t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;
  return [x0 + t * x10, y0 + t * y10];
}

// Compute perpendicular offset line of length rc.
// http://mathworld.wolfram.com/Circle-LineIntersection.html
function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
  var x01 = x0 - x1,
      y01 = y0 - y1,
      lo = (cw ? rc : -rc) / sqrt(x01 * x01 + y01 * y01),
      ox = lo * y01,
      oy = -lo * x01,
      x11 = x0 + ox,
      y11 = y0 + oy,
      x10 = x1 + ox,
      y10 = y1 + oy,
      x00 = (x11 + x10) / 2,
      y00 = (y11 + y10) / 2,
      dx = x10 - x11,
      dy = y10 - y11,
      d2 = dx * dx + dy * dy,
      r = r1 - rc,
      D = x11 * y10 - x10 * y11,
      d = (dy < 0 ? -1 : 1) * sqrt(max(0, r * r * d2 - D * D)),
      cx0 = (D * dy - dx * d) / d2,
      cy0 = (-D * dx - dy * d) / d2,
      cx1 = (D * dy + dx * d) / d2,
      cy1 = (-D * dx + dy * d) / d2,
      dx0 = cx0 - x00,
      dy0 = cy0 - y00,
      dx1 = cx1 - x00,
      dy1 = cy1 - y00;

  // Pick the closer of the two intersection points.
  // TODO Is there a faster way to determine which intersection to use?
  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;

  return {
    cx: cx0,
    cy: cy0,
    x01: -ox,
    y01: -oy,
    x11: cx0 * (r1 / r - 1),
    y11: cy0 * (r1 / r - 1)
  };
}

function arc() {
  var innerRadius = arcInnerRadius,
      outerRadius = arcOuterRadius,
      cornerRadius = constant(0),
      padRadius = null,
      startAngle = arcStartAngle,
      endAngle = arcEndAngle,
      padAngle = arcPadAngle,
      context = null;

  function arc() {
    var buffer,
        r,
        r0 = +innerRadius.apply(this, arguments),
        r1 = +outerRadius.apply(this, arguments),
        a0 = startAngle.apply(this, arguments) - halfPi,
        a1 = endAngle.apply(this, arguments) - halfPi,
        da = abs(a1 - a0),
        cw = a1 > a0;

    if (!context) context = buffer = d3Path.path();

    // Ensure that the outer radius is always larger than the inner radius.
    if (r1 < r0) r = r1, r1 = r0, r0 = r;

    // Is it a point?
    if (!(r1 > epsilon)) context.moveTo(0, 0);

    // Or is it a circle or annulus?
    else if (da > tau - epsilon) {
      context.moveTo(r1 * cos(a0), r1 * sin(a0));
      context.arc(0, 0, r1, a0, a1, !cw);
      if (r0 > epsilon) {
        context.moveTo(r0 * cos(a1), r0 * sin(a1));
        context.arc(0, 0, r0, a1, a0, cw);
      }
    }

    // Or is it a circular or annular sector?
    else {
      var a01 = a0,
          a11 = a1,
          a00 = a0,
          a10 = a1,
          da0 = da,
          da1 = da,
          ap = padAngle.apply(this, arguments) / 2,
          rp = (ap > epsilon) && (padRadius ? +padRadius.apply(this, arguments) : sqrt(r0 * r0 + r1 * r1)),
          rc = min(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),
          rc0 = rc,
          rc1 = rc,
          t0,
          t1;

      // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.
      if (rp > epsilon) {
        var p0 = asin(rp / r0 * sin(ap)),
            p1 = asin(rp / r1 * sin(ap));
        if ((da0 -= p0 * 2) > epsilon) p0 *= (cw ? 1 : -1), a00 += p0, a10 -= p0;
        else da0 = 0, a00 = a10 = (a0 + a1) / 2;
        if ((da1 -= p1 * 2) > epsilon) p1 *= (cw ? 1 : -1), a01 += p1, a11 -= p1;
        else da1 = 0, a01 = a11 = (a0 + a1) / 2;
      }

      var x01 = r1 * cos(a01),
          y01 = r1 * sin(a01),
          x10 = r0 * cos(a10),
          y10 = r0 * sin(a10);

      // Apply rounded corners?
      if (rc > epsilon) {
        var x11 = r1 * cos(a11),
            y11 = r1 * sin(a11),
            x00 = r0 * cos(a00),
            y00 = r0 * sin(a00),
            oc;

        // Restrict the corner radius according to the sector angle.
        if (da < pi && (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10))) {
          var ax = x01 - oc[0],
              ay = y01 - oc[1],
              bx = x11 - oc[0],
              by = y11 - oc[1],
              kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by))) / 2),
              lc = sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
          rc0 = min(rc, (r0 - lc) / (kc - 1));
          rc1 = min(rc, (r1 - lc) / (kc + 1));
        }
      }

      // Is the sector collapsed to a line?
      if (!(da1 > epsilon)) context.moveTo(x01, y01);

      // Does the sector’s outer ring have rounded corners?
      else if (rc1 > epsilon) {
        t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
        t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);

        context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);

        // Have the corners merged?
        if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);

        // Otherwise, draw the two corners and the ring.
        else {
          context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
          context.arc(0, 0, r1, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
          context.arc(t1.cx, t1.cy, rc1, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
        }
      }

      // Or is the outer ring just a circular arc?
      else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);

      // Is there no inner ring, and it’s a circular sector?
      // Or perhaps it’s an annular sector collapsed due to padding?
      if (!(r0 > epsilon) || !(da0 > epsilon)) context.lineTo(x10, y10);

      // Does the sector’s inner ring (or point) have rounded corners?
      else if (rc0 > epsilon) {
        t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
        t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);

        context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);

        // Have the corners merged?
        if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);

        // Otherwise, draw the two corners and the ring.
        else {
          context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
          context.arc(0, 0, r0, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);
          context.arc(t1.cx, t1.cy, rc0, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
        }
      }

      // Or is the inner ring just a circular arc?
      else context.arc(0, 0, r0, a10, a00, cw);
    }

    context.closePath();

    if (buffer) return context = null, buffer + "" || null;
  }

  arc.centroid = function() {
    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,
        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi / 2;
    return [cos(a) * r, sin(a) * r];
  };

  arc.innerRadius = function(_) {
    return arguments.length ? (innerRadius = typeof _ === "function" ? _ : constant(+_), arc) : innerRadius;
  };

  arc.outerRadius = function(_) {
    return arguments.length ? (outerRadius = typeof _ === "function" ? _ : constant(+_), arc) : outerRadius;
  };

  arc.cornerRadius = function(_) {
    return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : constant(+_), arc) : cornerRadius;
  };

  arc.padRadius = function(_) {
    return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : constant(+_), arc) : padRadius;
  };

  arc.startAngle = function(_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant(+_), arc) : startAngle;
  };

  arc.endAngle = function(_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant(+_), arc) : endAngle;
  };

  arc.padAngle = function(_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant(+_), arc) : padAngle;
  };

  arc.context = function(_) {
    return arguments.length ? ((context = _ == null ? null : _), arc) : context;
  };

  return arc;
}

function Linear(context) {
  this._context = context;
}

Linear.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
      case 1: this._point = 2; // proceed
      default: this._context.lineTo(x, y); break;
    }
  }
};

function curveLinear(context) {
  return new Linear(context);
}

function x(p) {
  return p[0];
}

function y(p) {
  return p[1];
}

function line() {
  var x$$1 = x,
      y$$1 = y,
      defined = constant(true),
      context = null,
      curve = curveLinear,
      output = null;

  function line(data) {
    var i,
        n = data.length,
        d,
        defined0 = false,
        buffer;

    if (context == null) output = curve(buffer = d3Path.path());

    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) output.lineStart();
        else output.lineEnd();
      }
      if (defined0) output.point(+x$$1(d, i, data), +y$$1(d, i, data));
    }

    if (buffer) return output = null, buffer + "" || null;
  }

  line.x = function(_) {
    return arguments.length ? (x$$1 = typeof _ === "function" ? _ : constant(+_), line) : x$$1;
  };

  line.y = function(_) {
    return arguments.length ? (y$$1 = typeof _ === "function" ? _ : constant(+_), line) : y$$1;
  };

  line.defined = function(_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : constant(!!_), line) : defined;
  };

  line.curve = function(_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
  };

  line.context = function(_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
  };

  return line;
}

function area() {
  var x0 = x,
      x1 = null,
      y0 = constant(0),
      y1 = y,
      defined = constant(true),
      context = null,
      curve = curveLinear,
      output = null;

  function area(data) {
    var i,
        j,
        k,
        n = data.length,
        d,
        defined0 = false,
        buffer,
        x0z = new Array(n),
        y0z = new Array(n);

    if (context == null) output = curve(buffer = d3Path.path());

    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) {
          j = i;
          output.areaStart();
          output.lineStart();
        } else {
          output.lineEnd();
          output.lineStart();
          for (k = i - 1; k >= j; --k) {
            output.point(x0z[k], y0z[k]);
          }
          output.lineEnd();
          output.areaEnd();
        }
      }
      if (defined0) {
        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
      }
    }

    if (buffer) return output = null, buffer + "" || null;
  }

  function arealine() {
    return line().defined(defined).curve(curve).context(context);
  }

  area.x = function(_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant(+_), x1 = null, area) : x0;
  };

  area.x0 = function(_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant(+_), area) : x0;
  };

  area.x1 = function(_) {
    return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant(+_), area) : x1;
  };

  area.y = function(_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant(+_), y1 = null, area) : y0;
  };

  area.y0 = function(_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant(+_), area) : y0;
  };

  area.y1 = function(_) {
    return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant(+_), area) : y1;
  };

  area.lineX0 =
  area.lineY0 = function() {
    return arealine().x(x0).y(y0);
  };

  area.lineY1 = function() {
    return arealine().x(x0).y(y1);
  };

  area.lineX1 = function() {
    return arealine().x(x1).y(y0);
  };

  area.defined = function(_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : constant(!!_), area) : defined;
  };

  area.curve = function(_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
  };

  area.context = function(_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
  };

  return area;
}

function descending(a, b) {
  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
}

function identity(d) {
  return d;
}

function pie() {
  var value = identity,
      sortValues = descending,
      sort = null,
      startAngle = constant(0),
      endAngle = constant(tau),
      padAngle = constant(0);

  function pie(data) {
    var i,
        n = data.length,
        j,
        k,
        sum = 0,
        index = new Array(n),
        arcs = new Array(n),
        a0 = +startAngle.apply(this, arguments),
        da = Math.min(tau, Math.max(-tau, endAngle.apply(this, arguments) - a0)),
        a1,
        p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),
        pa = p * (da < 0 ? -1 : 1),
        v;

    for (i = 0; i < n; ++i) {
      if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {
        sum += v;
      }
    }

    // Optionally sort the arcs by previously-computed values or by data.
    if (sortValues != null) index.sort(function(i, j) { return sortValues(arcs[i], arcs[j]); });
    else if (sort != null) index.sort(function(i, j) { return sort(data[i], data[j]); });

    // Compute the arcs! They are stored in the original data's order.
    for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {
      j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {
        data: data[j],
        index: i,
        value: v,
        startAngle: a0,
        endAngle: a1,
        padAngle: p
      };
    }

    return arcs;
  }

  pie.value = function(_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : constant(+_), pie) : value;
  };

  pie.sortValues = function(_) {
    return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;
  };

  pie.sort = function(_) {
    return arguments.length ? (sort = _, sortValues = null, pie) : sort;
  };

  pie.startAngle = function(_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant(+_), pie) : startAngle;
  };

  pie.endAngle = function(_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant(+_), pie) : endAngle;
  };

  pie.padAngle = function(_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant(+_), pie) : padAngle;
  };

  return pie;
}

var curveRadialLinear = curveRadial(curveLinear);

function Radial(curve) {
  this._curve = curve;
}

Radial.prototype = {
  areaStart: function() {
    this._curve.areaStart();
  },
  areaEnd: function() {
    this._curve.areaEnd();
  },
  lineStart: function() {
    this._curve.lineStart();
  },
  lineEnd: function() {
    this._curve.lineEnd();
  },
  point: function(a, r) {
    this._curve.point(r * Math.sin(a), r * -Math.cos(a));
  }
};

function curveRadial(curve) {

  function radial(context) {
    return new Radial(curve(context));
  }

  radial._curve = curve;

  return radial;
}

function lineRadial(l) {
  var c = l.curve;

  l.angle = l.x, delete l.x;
  l.radius = l.y, delete l.y;

  l.curve = function(_) {
    return arguments.length ? c(curveRadial(_)) : c()._curve;
  };

  return l;
}

function lineRadial$1() {
  return lineRadial(line().curve(curveRadialLinear));
}

function areaRadial() {
  var a = area().curve(curveRadialLinear),
      c = a.curve,
      x0 = a.lineX0,
      x1 = a.lineX1,
      y0 = a.lineY0,
      y1 = a.lineY1;

  a.angle = a.x, delete a.x;
  a.startAngle = a.x0, delete a.x0;
  a.endAngle = a.x1, delete a.x1;
  a.radius = a.y, delete a.y;
  a.innerRadius = a.y0, delete a.y0;
  a.outerRadius = a.y1, delete a.y1;
  a.lineStartAngle = function() { return lineRadial(x0()); }, delete a.lineX0;
  a.lineEndAngle = function() { return lineRadial(x1()); }, delete a.lineX1;
  a.lineInnerRadius = function() { return lineRadial(y0()); }, delete a.lineY0;
  a.lineOuterRadius = function() { return lineRadial(y1()); }, delete a.lineY1;

  a.curve = function(_) {
    return arguments.length ? c(curveRadial(_)) : c()._curve;
  };

  return a;
}

function pointRadial(x, y) {
  return [(y = +y) * Math.cos(x -= Math.PI / 2), y * Math.sin(x)];
}

var slice = Array.prototype.slice;

function linkSource(d) {
  return d.source;
}

function linkTarget(d) {
  return d.target;
}

function link(curve) {
  var source = linkSource,
      target = linkTarget,
      x$$1 = x,
      y$$1 = y,
      context = null;

  function link() {
    var buffer, argv = slice.call(arguments), s = source.apply(this, argv), t = target.apply(this, argv);
    if (!context) context = buffer = d3Path.path();
    curve(context, +x$$1.apply(this, (argv[0] = s, argv)), +y$$1.apply(this, argv), +x$$1.apply(this, (argv[0] = t, argv)), +y$$1.apply(this, argv));
    if (buffer) return context = null, buffer + "" || null;
  }

  link.source = function(_) {
    return arguments.length ? (source = _, link) : source;
  };

  link.target = function(_) {
    return arguments.length ? (target = _, link) : target;
  };

  link.x = function(_) {
    return arguments.length ? (x$$1 = typeof _ === "function" ? _ : constant(+_), link) : x$$1;
  };

  link.y = function(_) {
    return arguments.length ? (y$$1 = typeof _ === "function" ? _ : constant(+_), link) : y$$1;
  };

  link.context = function(_) {
    return arguments.length ? ((context = _ == null ? null : _), link) : context;
  };

  return link;
}

function curveHorizontal(context, x0, y0, x1, y1) {
  context.moveTo(x0, y0);
  context.bezierCurveTo(x0 = (x0 + x1) / 2, y0, x0, y1, x1, y1);
}

function curveVertical(context, x0, y0, x1, y1) {
  context.moveTo(x0, y0);
  context.bezierCurveTo(x0, y0 = (y0 + y1) / 2, x1, y0, x1, y1);
}

function curveRadial$1(context, x0, y0, x1, y1) {
  var p0 = pointRadial(x0, y0),
      p1 = pointRadial(x0, y0 = (y0 + y1) / 2),
      p2 = pointRadial(x1, y0),
      p3 = pointRadial(x1, y1);
  context.moveTo(p0[0], p0[1]);
  context.bezierCurveTo(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]);
}

function linkHorizontal() {
  return link(curveHorizontal);
}

function linkVertical() {
  return link(curveVertical);
}

function linkRadial() {
  var l = link(curveRadial$1);
  l.angle = l.x, delete l.x;
  l.radius = l.y, delete l.y;
  return l;
}

var circle = {
  draw: function(context, size) {
    var r = Math.sqrt(size / pi);
    context.moveTo(r, 0);
    context.arc(0, 0, r, 0, tau);
  }
};

var cross = {
  draw: function(context, size) {
    var r = Math.sqrt(size / 5) / 2;
    context.moveTo(-3 * r, -r);
    context.lineTo(-r, -r);
    context.lineTo(-r, -3 * r);
    context.lineTo(r, -3 * r);
    context.lineTo(r, -r);
    context.lineTo(3 * r, -r);
    context.lineTo(3 * r, r);
    context.lineTo(r, r);
    context.lineTo(r, 3 * r);
    context.lineTo(-r, 3 * r);
    context.lineTo(-r, r);
    context.lineTo(-3 * r, r);
    context.closePath();
  }
};

var tan30 = Math.sqrt(1 / 3),
    tan30_2 = tan30 * 2;

var diamond = {
  draw: function(context, size) {
    var y = Math.sqrt(size / tan30_2),
        x = y * tan30;
    context.moveTo(0, -y);
    context.lineTo(x, 0);
    context.lineTo(0, y);
    context.lineTo(-x, 0);
    context.closePath();
  }
};

var ka = 0.89081309152928522810,
    kr = Math.sin(pi / 10) / Math.sin(7 * pi / 10),
    kx = Math.sin(tau / 10) * kr,
    ky = -Math.cos(tau / 10) * kr;

var star = {
  draw: function(context, size) {
    var r = Math.sqrt(size * ka),
        x = kx * r,
        y = ky * r;
    context.moveTo(0, -r);
    context.lineTo(x, y);
    for (var i = 1; i < 5; ++i) {
      var a = tau * i / 5,
          c = Math.cos(a),
          s = Math.sin(a);
      context.lineTo(s * r, -c * r);
      context.lineTo(c * x - s * y, s * x + c * y);
    }
    context.closePath();
  }
};

var square = {
  draw: function(context, size) {
    var w = Math.sqrt(size),
        x = -w / 2;
    context.rect(x, x, w, w);
  }
};

var sqrt3 = Math.sqrt(3);

var triangle = {
  draw: function(context, size) {
    var y = -Math.sqrt(size / (sqrt3 * 3));
    context.moveTo(0, y * 2);
    context.lineTo(-sqrt3 * y, -y);
    context.lineTo(sqrt3 * y, -y);
    context.closePath();
  }
};

var c = -0.5,
    s = Math.sqrt(3) / 2,
    k = 1 / Math.sqrt(12),
    a = (k / 2 + 1) * 3;

var wye = {
  draw: function(context, size) {
    var r = Math.sqrt(size / a),
        x0 = r / 2,
        y0 = r * k,
        x1 = x0,
        y1 = r * k + r,
        x2 = -x1,
        y2 = y1;
    context.moveTo(x0, y0);
    context.lineTo(x1, y1);
    context.lineTo(x2, y2);
    context.lineTo(c * x0 - s * y0, s * x0 + c * y0);
    context.lineTo(c * x1 - s * y1, s * x1 + c * y1);
    context.lineTo(c * x2 - s * y2, s * x2 + c * y2);
    context.lineTo(c * x0 + s * y0, c * y0 - s * x0);
    context.lineTo(c * x1 + s * y1, c * y1 - s * x1);
    context.lineTo(c * x2 + s * y2, c * y2 - s * x2);
    context.closePath();
  }
};

var symbols = [
  circle,
  cross,
  diamond,
  square,
  star,
  triangle,
  wye
];

function symbol() {
  var type = constant(circle),
      size = constant(64),
      context = null;

  function symbol() {
    var buffer;
    if (!context) context = buffer = d3Path.path();
    type.apply(this, arguments).draw(context, +size.apply(this, arguments));
    if (buffer) return context = null, buffer + "" || null;
  }

  symbol.type = function(_) {
    return arguments.length ? (type = typeof _ === "function" ? _ : constant(_), symbol) : type;
  };

  symbol.size = function(_) {
    return arguments.length ? (size = typeof _ === "function" ? _ : constant(+_), symbol) : size;
  };

  symbol.context = function(_) {
    return arguments.length ? (context = _ == null ? null : _, symbol) : context;
  };

  return symbol;
}

function noop() {}

function point(that, x, y) {
  that._context.bezierCurveTo(
    (2 * that._x0 + that._x1) / 3,
    (2 * that._y0 + that._y1) / 3,
    (that._x0 + 2 * that._x1) / 3,
    (that._y0 + 2 * that._y1) / 3,
    (that._x0 + 4 * that._x1 + x) / 6,
    (that._y0 + 4 * that._y1 + y) / 6
  );
}

function Basis(context) {
  this._context = context;
}

Basis.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 =
    this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 3: point(this, this._x1, this._y1); // proceed
      case 2: this._context.lineTo(this._x1, this._y1); break;
    }
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
      case 1: this._point = 2; break;
      case 2: this._point = 3; this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // proceed
      default: point(this, x, y); break;
    }
    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

function basis(context) {
  return new Basis(context);
}

function BasisClosed(context) {
  this._context = context;
}

BasisClosed.prototype = {
  areaStart: noop,
  areaEnd: noop,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 =
    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x2, this._y2);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
        this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x2, this._y2);
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        break;
      }
    }
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; this._x2 = x, this._y2 = y; break;
      case 1: this._point = 2; this._x3 = x, this._y3 = y; break;
      case 2: this._point = 3; this._x4 = x, this._y4 = y; this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6); break;
      default: point(this, x, y); break;
    }
    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

function basisClosed(context) {
  return new BasisClosed(context);
}

function BasisOpen(context) {
  this._context = context;
}

BasisOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 =
    this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; break;
      case 1: this._point = 2; break;
      case 2: this._point = 3; var x0 = (this._x0 + 4 * this._x1 + x) / 6, y0 = (this._y0 + 4 * this._y1 + y) / 6; this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0); break;
      case 3: this._point = 4; // proceed
      default: point(this, x, y); break;
    }
    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

function basisOpen(context) {
  return new BasisOpen(context);
}

function Bundle(context, beta) {
  this._basis = new Basis(context);
  this._beta = beta;
}

Bundle.prototype = {
  lineStart: function() {
    this._x = [];
    this._y = [];
    this._basis.lineStart();
  },
  lineEnd: function() {
    var x = this._x,
        y = this._y,
        j = x.length - 1;

    if (j > 0) {
      var x0 = x[0],
          y0 = y[0],
          dx = x[j] - x0,
          dy = y[j] - y0,
          i = -1,
          t;

      while (++i <= j) {
        t = i / j;
        this._basis.point(
          this._beta * x[i] + (1 - this._beta) * (x0 + t * dx),
          this._beta * y[i] + (1 - this._beta) * (y0 + t * dy)
        );
      }
    }

    this._x = this._y = null;
    this._basis.lineEnd();
  },
  point: function(x, y) {
    this._x.push(+x);
    this._y.push(+y);
  }
};

var bundle = (function custom(beta) {

  function bundle(context) {
    return beta === 1 ? new Basis(context) : new Bundle(context, beta);
  }

  bundle.beta = function(beta) {
    return custom(+beta);
  };

  return bundle;
})(0.85);

function point$1(that, x, y) {
  that._context.bezierCurveTo(
    that._x1 + that._k * (that._x2 - that._x0),
    that._y1 + that._k * (that._y2 - that._y0),
    that._x2 + that._k * (that._x1 - x),
    that._y2 + that._k * (that._y1 - y),
    that._x2,
    that._y2
  );
}

function Cardinal(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}

Cardinal.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 =
    this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2: this._context.lineTo(this._x2, this._y2); break;
      case 3: point$1(this, this._x1, this._y1); break;
    }
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
      case 1: this._point = 2; this._x1 = x, this._y1 = y; break;
      case 2: this._point = 3; // proceed
      default: point$1(this, x, y); break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var cardinal = (function custom(tension) {

  function cardinal(context) {
    return new Cardinal(context, tension);
  }

  cardinal.tension = function(tension) {
    return custom(+tension);
  };

  return cardinal;
})(0);

function CardinalClosed(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}

CardinalClosed.prototype = {
  areaStart: noop,
  areaEnd: noop,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =
    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.lineTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        this.point(this._x5, this._y5);
        break;
      }
    }
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; this._x3 = x, this._y3 = y; break;
      case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;
      case 2: this._point = 3; this._x5 = x, this._y5 = y; break;
      default: point$1(this, x, y); break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var cardinalClosed = (function custom(tension) {

  function cardinal$$1(context) {
    return new CardinalClosed(context, tension);
  }

  cardinal$$1.tension = function(tension) {
    return custom(+tension);
  };

  return cardinal$$1;
})(0);

function CardinalOpen(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}

CardinalOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 =
    this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; break;
      case 1: this._point = 2; break;
      case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;
      case 3: this._point = 4; // proceed
      default: point$1(this, x, y); break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var cardinalOpen = (function custom(tension) {

  function cardinal$$1(context) {
    return new CardinalOpen(context, tension);
  }

  cardinal$$1.tension = function(tension) {
    return custom(+tension);
  };

  return cardinal$$1;
})(0);

function point$2(that, x, y) {
  var x1 = that._x1,
      y1 = that._y1,
      x2 = that._x2,
      y2 = that._y2;

  if (that._l01_a > epsilon) {
    var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,
        n = 3 * that._l01_a * (that._l01_a + that._l12_a);
    x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
    y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
  }

  if (that._l23_a > epsilon) {
    var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,
        m = 3 * that._l23_a * (that._l23_a + that._l12_a);
    x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;
    y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;
  }

  that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);
}

function CatmullRom(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRom.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 =
    this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a =
    this._l01_2a = this._l12_2a = this._l23_2a =
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2: this._context.lineTo(this._x2, this._y2); break;
      case 3: this.point(this._x2, this._y2); break;
    }
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
      case 1: this._point = 2; break;
      case 2: this._point = 3; // proceed
      default: point$2(this, x, y); break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var catmullRom = (function custom(alpha) {

  function catmullRom(context) {
    return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
  }

  catmullRom.alpha = function(alpha) {
    return custom(+alpha);
  };

  return catmullRom;
})(0.5);

function CatmullRomClosed(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRomClosed.prototype = {
  areaStart: noop,
  areaEnd: noop,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =
    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._l01_a = this._l12_a = this._l23_a =
    this._l01_2a = this._l12_2a = this._l23_2a =
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.lineTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        this.point(this._x5, this._y5);
        break;
      }
    }
  },
  point: function(x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0: this._point = 1; this._x3 = x, this._y3 = y; break;
      case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;
      case 2: this._point = 3; this._x5 = x, this._y5 = y; break;
      default: point$2(this, x, y); break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var catmullRomClosed = (function custom(alpha) {

  function catmullRom$$1(context) {
    return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
  }

  catmullRom$$1.alpha = function(alpha) {
    return custom(+alpha);
  };

  return catmullRom$$1;
})(0.5);

function CatmullRomOpen(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRomOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 =
    this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a =
    this._l01_2a = this._l12_2a = this._l23_2a =
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0: this._point = 1; break;
      case 1: this._point = 2; break;
      case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;
      case 3: this._point = 4; // proceed
      default: point$2(this, x, y); break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var catmullRomOpen = (function custom(alpha) {

  function catmullRom$$1(context) {
    return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
  }

  catmullRom$$1.alpha = function(alpha) {
    return custom(+alpha);
  };

  return catmullRom$$1;
})(0.5);

function LinearClosed(context) {
  this._context = context;
}

LinearClosed.prototype = {
  areaStart: noop,
  areaEnd: noop,
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._point) this._context.closePath();
  },
  point: function(x, y) {
    x = +x, y = +y;
    if (this._point) this._context.lineTo(x, y);
    else this._point = 1, this._context.moveTo(x, y);
  }
};

function linearClosed(context) {
  return new LinearClosed(context);
}

function sign(x) {
  return x < 0 ? -1 : 1;
}

// Calculate the slopes of the tangents (Hermite-type interpolation) based on
// the following paper: Steffen, M. 1990. A Simple Method for Monotonic
// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
// NOV(II), P. 443, 1990.
function slope3(that, x2, y2) {
  var h0 = that._x1 - that._x0,
      h1 = x2 - that._x1,
      s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),
      s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),
      p = (s0 * h1 + s1 * h0) / (h0 + h1);
  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
}

// Calculate a one-sided slope.
function slope2(that, t) {
  var h = that._x1 - that._x0;
  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
}

// According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
// "you can express cubic Hermite interpolation in terms of cubic Bézier curves
// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".
function point$3(that, t0, t1) {
  var x0 = that._x0,
      y0 = that._y0,
      x1 = that._x1,
      y1 = that._y1,
      dx = (x1 - x0) / 3;
  that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
}

function MonotoneX(context) {
  this._context = context;
}

MonotoneX.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 =
    this._y0 = this._y1 =
    this._t0 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2: this._context.lineTo(this._x1, this._y1); break;
      case 3: point$3(this, this._t0, slope2(this, this._t0)); break;
    }
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    var t1 = NaN;

    x = +x, y = +y;
    if (x === this._x1 && y === this._y1) return; // Ignore coincident points.
    switch (this._point) {
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
      case 1: this._point = 2; break;
      case 2: this._point = 3; point$3(this, slope2(this, t1 = slope3(this, x, y)), t1); break;
      default: point$3(this, this._t0, t1 = slope3(this, x, y)); break;
    }

    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
    this._t0 = t1;
  }
};

function MonotoneY(context) {
  this._context = new ReflectContext(context);
}

(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x, y) {
  MonotoneX.prototype.point.call(this, y, x);
};

function ReflectContext(context) {
  this._context = context;
}

ReflectContext.prototype = {
  moveTo: function(x, y) { this._context.moveTo(y, x); },
  closePath: function() { this._context.closePath(); },
  lineTo: function(x, y) { this._context.lineTo(y, x); },
  bezierCurveTo: function(x1, y1, x2, y2, x, y) { this._context.bezierCurveTo(y1, x1, y2, x2, y, x); }
};

function monotoneX(context) {
  return new MonotoneX(context);
}

function monotoneY(context) {
  return new MonotoneY(context);
}

function Natural(context) {
  this._context = context;
}

Natural.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x = [];
    this._y = [];
  },
  lineEnd: function() {
    var x = this._x,
        y = this._y,
        n = x.length;

    if (n) {
      this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);
      if (n === 2) {
        this._context.lineTo(x[1], y[1]);
      } else {
        var px = controlPoints(x),
            py = controlPoints(y);
        for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);
        }
      }
    }

    if (this._line || (this._line !== 0 && n === 1)) this._context.closePath();
    this._line = 1 - this._line;
    this._x = this._y = null;
  },
  point: function(x, y) {
    this._x.push(+x);
    this._y.push(+y);
  }
};

// See https://www.particleincell.com/2012/bezier-splines/ for derivation.
function controlPoints(x) {
  var i,
      n = x.length - 1,
      m,
      a = new Array(n),
      b = new Array(n),
      r = new Array(n);
  a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];
  for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];
  a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];
  for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];
  a[n - 1] = r[n - 1] / b[n - 1];
  for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];
  b[n - 1] = (x[n] + a[n - 1]) / 2;
  for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];
  return [a, b];
}

function natural(context) {
  return new Natural(context);
}

function Step(context, t) {
  this._context = context;
  this._t = t;
}

Step.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x = this._y = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
      case 1: this._point = 2; // proceed
      default: {
        if (this._t <= 0) {
          this._context.lineTo(this._x, y);
          this._context.lineTo(x, y);
        } else {
          var x1 = this._x * (1 - this._t) + x * this._t;
          this._context.lineTo(x1, this._y);
          this._context.lineTo(x1, y);
        }
        break;
      }
    }
    this._x = x, this._y = y;
  }
};

function step(context) {
  return new Step(context, 0.5);
}

function stepBefore(context) {
  return new Step(context, 0);
}

function stepAfter(context) {
  return new Step(context, 1);
}

function none(series, order) {
  if (!((n = series.length) > 1)) return;
  for (var i = 1, j, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {
    s0 = s1, s1 = series[order[i]];
    for (j = 0; j < m; ++j) {
      s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
    }
  }
}

function none$1(series) {
  var n = series.length, o = new Array(n);
  while (--n >= 0) o[n] = n;
  return o;
}

function stackValue(d, key) {
  return d[key];
}

function stack() {
  var keys = constant([]),
      order = none$1,
      offset = none,
      value = stackValue;

  function stack(data) {
    var kz = keys.apply(this, arguments),
        i,
        m = data.length,
        n = kz.length,
        sz = new Array(n),
        oz;

    for (i = 0; i < n; ++i) {
      for (var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j) {
        si[j] = sij = [0, +value(data[j], ki, j, data)];
        sij.data = data[j];
      }
      si.key = ki;
    }

    for (i = 0, oz = order(sz); i < n; ++i) {
      sz[oz[i]].index = i;
    }

    offset(sz, oz);
    return sz;
  }

  stack.keys = function(_) {
    return arguments.length ? (keys = typeof _ === "function" ? _ : constant(slice.call(_)), stack) : keys;
  };

  stack.value = function(_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : constant(+_), stack) : value;
  };

  stack.order = function(_) {
    return arguments.length ? (order = _ == null ? none$1 : typeof _ === "function" ? _ : constant(slice.call(_)), stack) : order;
  };

  stack.offset = function(_) {
    return arguments.length ? (offset = _ == null ? none : _, stack) : offset;
  };

  return stack;
}

function expand(series, order) {
  if (!((n = series.length) > 0)) return;
  for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {
    for (y = i = 0; i < n; ++i) y += series[i][j][1] || 0;
    if (y) for (i = 0; i < n; ++i) series[i][j][1] /= y;
  }
  none(series, order);
}

function diverging(series, order) {
  if (!((n = series.length) > 0)) return;
  for (var i, j = 0, d, dy, yp, yn, n, m = series[order[0]].length; j < m; ++j) {
    for (yp = yn = 0, i = 0; i < n; ++i) {
      if ((dy = (d = series[order[i]][j])[1] - d[0]) >= 0) {
        d[0] = yp, d[1] = yp += dy;
      } else if (dy < 0) {
        d[1] = yn, d[0] = yn += dy;
      } else {
        d[0] = yp;
      }
    }
  }
}

function silhouette(series, order) {
  if (!((n = series.length) > 0)) return;
  for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {
    for (var i = 0, y = 0; i < n; ++i) y += series[i][j][1] || 0;
    s0[j][1] += s0[j][0] = -y / 2;
  }
  none(series, order);
}

function wiggle(series, order) {
  if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;
  for (var y = 0, j = 1, s0, m, n; j < m; ++j) {
    for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {
      var si = series[order[i]],
          sij0 = si[j][1] || 0,
          sij1 = si[j - 1][1] || 0,
          s3 = (sij0 - sij1) / 2;
      for (var k = 0; k < i; ++k) {
        var sk = series[order[k]],
            skj0 = sk[j][1] || 0,
            skj1 = sk[j - 1][1] || 0;
        s3 += skj0 - skj1;
      }
      s1 += sij0, s2 += s3 * sij0;
    }
    s0[j - 1][1] += s0[j - 1][0] = y;
    if (s1) y -= s2 / s1;
  }
  s0[j - 1][1] += s0[j - 1][0] = y;
  none(series, order);
}

function appearance(series) {
  var peaks = series.map(peak);
  return none$1(series).sort(function(a, b) { return peaks[a] - peaks[b]; });
}

function peak(series) {
  var i = -1, j = 0, n = series.length, vi, vj = -Infinity;
  while (++i < n) if ((vi = +series[i][1]) > vj) vj = vi, j = i;
  return j;
}

function ascending(series) {
  var sums = series.map(sum);
  return none$1(series).sort(function(a, b) { return sums[a] - sums[b]; });
}

function sum(series) {
  var s = 0, i = -1, n = series.length, v;
  while (++i < n) if (v = +series[i][1]) s += v;
  return s;
}

function descending$1(series) {
  return ascending(series).reverse();
}

function insideOut(series) {
  var n = series.length,
      i,
      j,
      sums = series.map(sum),
      order = appearance(series),
      top = 0,
      bottom = 0,
      tops = [],
      bottoms = [];

  for (i = 0; i < n; ++i) {
    j = order[i];
    if (top < bottom) {
      top += sums[j];
      tops.push(j);
    } else {
      bottom += sums[j];
      bottoms.push(j);
    }
  }

  return bottoms.reverse().concat(tops);
}

function reverse(series) {
  return none$1(series).reverse();
}

exports.arc = arc;
exports.area = area;
exports.line = line;
exports.pie = pie;
exports.areaRadial = areaRadial;
exports.radialArea = areaRadial;
exports.lineRadial = lineRadial$1;
exports.radialLine = lineRadial$1;
exports.pointRadial = pointRadial;
exports.linkHorizontal = linkHorizontal;
exports.linkVertical = linkVertical;
exports.linkRadial = linkRadial;
exports.symbol = symbol;
exports.symbols = symbols;
exports.symbolCircle = circle;
exports.symbolCross = cross;
exports.symbolDiamond = diamond;
exports.symbolSquare = square;
exports.symbolStar = star;
exports.symbolTriangle = triangle;
exports.symbolWye = wye;
exports.curveBasisClosed = basisClosed;
exports.curveBasisOpen = basisOpen;
exports.curveBasis = basis;
exports.curveBundle = bundle;
exports.curveCardinalClosed = cardinalClosed;
exports.curveCardinalOpen = cardinalOpen;
exports.curveCardinal = cardinal;
exports.curveCatmullRomClosed = catmullRomClosed;
exports.curveCatmullRomOpen = catmullRomOpen;
exports.curveCatmullRom = catmullRom;
exports.curveLinearClosed = linearClosed;
exports.curveLinear = curveLinear;
exports.curveMonotoneX = monotoneX;
exports.curveMonotoneY = monotoneY;
exports.curveNatural = natural;
exports.curveStep = step;
exports.curveStepAfter = stepAfter;
exports.curveStepBefore = stepBefore;
exports.stack = stack;
exports.stackOffsetExpand = expand;
exports.stackOffsetDiverging = diverging;
exports.stackOffsetNone = none;
exports.stackOffsetSilhouette = silhouette;
exports.stackOffsetWiggle = wiggle;
exports.stackOrderAppearance = appearance;
exports.stackOrderAscending = ascending;
exports.stackOrderDescending = descending$1;
exports.stackOrderInsideOut = insideOut;
exports.stackOrderNone = none$1;
exports.stackOrderReverse = reverse;

Object.defineProperty(exports, '__esModule', { value: true });

})));

},{"d3-path":24}],32:[function(require,module,exports){
// https://d3js.org/d3-time-format/ v2.1.3 Copyright 2018 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-time')) :
typeof define === 'function' && define.amd ? define(['exports', 'd3-time'], factory) :
(factory((global.d3 = global.d3 || {}),global.d3));
}(this, (function (exports,d3Time) { 'use strict';

function localDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
    date.setFullYear(d.y);
    return date;
  }
  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
}

function utcDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
    date.setUTCFullYear(d.y);
    return date;
  }
  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
}

function newYear(y) {
  return {y: y, m: 0, d: 1, H: 0, M: 0, S: 0, L: 0};
}

function formatLocale(locale) {
  var locale_dateTime = locale.dateTime,
      locale_date = locale.date,
      locale_time = locale.time,
      locale_periods = locale.periods,
      locale_weekdays = locale.days,
      locale_shortWeekdays = locale.shortDays,
      locale_months = locale.months,
      locale_shortMonths = locale.shortMonths;

  var periodRe = formatRe(locale_periods),
      periodLookup = formatLookup(locale_periods),
      weekdayRe = formatRe(locale_weekdays),
      weekdayLookup = formatLookup(locale_weekdays),
      shortWeekdayRe = formatRe(locale_shortWeekdays),
      shortWeekdayLookup = formatLookup(locale_shortWeekdays),
      monthRe = formatRe(locale_months),
      monthLookup = formatLookup(locale_months),
      shortMonthRe = formatRe(locale_shortMonths),
      shortMonthLookup = formatLookup(locale_shortMonths);

  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth,
    "e": formatDayOfMonth,
    "f": formatMicroseconds,
    "H": formatHour24,
    "I": formatHour12,
    "j": formatDayOfYear,
    "L": formatMilliseconds,
    "m": formatMonthNumber,
    "M": formatMinutes,
    "p": formatPeriod,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatSeconds,
    "u": formatWeekdayNumberMonday,
    "U": formatWeekNumberSunday,
    "V": formatWeekNumberISO,
    "w": formatWeekdayNumberSunday,
    "W": formatWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatYear,
    "Y": formatFullYear,
    "Z": formatZone,
    "%": formatLiteralPercent
  };

  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth,
    "e": formatUTCDayOfMonth,
    "f": formatUTCMicroseconds,
    "H": formatUTCHour24,
    "I": formatUTCHour12,
    "j": formatUTCDayOfYear,
    "L": formatUTCMilliseconds,
    "m": formatUTCMonthNumber,
    "M": formatUTCMinutes,
    "p": formatUTCPeriod,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatUTCSeconds,
    "u": formatUTCWeekdayNumberMonday,
    "U": formatUTCWeekNumberSunday,
    "V": formatUTCWeekNumberISO,
    "w": formatUTCWeekdayNumberSunday,
    "W": formatUTCWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatUTCYear,
    "Y": formatUTCFullYear,
    "Z": formatUTCZone,
    "%": formatLiteralPercent
  };

  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth,
    "e": parseDayOfMonth,
    "f": parseMicroseconds,
    "H": parseHour24,
    "I": parseHour24,
    "j": parseDayOfYear,
    "L": parseMilliseconds,
    "m": parseMonthNumber,
    "M": parseMinutes,
    "p": parsePeriod,
    "Q": parseUnixTimestamp,
    "s": parseUnixTimestampSeconds,
    "S": parseSeconds,
    "u": parseWeekdayNumberMonday,
    "U": parseWeekNumberSunday,
    "V": parseWeekNumberISO,
    "w": parseWeekdayNumberSunday,
    "W": parseWeekNumberMonday,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear,
    "Y": parseFullYear,
    "Z": parseZone,
    "%": parseLiteralPercent
  };

  // These recursive directive definitions must be deferred.
  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);

  function newFormat(specifier, formats) {
    return function(date) {
      var string = [],
          i = -1,
          j = 0,
          n = specifier.length,
          c,
          pad,
          format;

      if (!(date instanceof Date)) date = new Date(+date);

      while (++i < n) {
        if (specifier.charCodeAt(i) === 37) {
          string.push(specifier.slice(j, i));
          if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);
          else pad = c === "e" ? " " : "0";
          if (format = formats[c]) c = format(date, pad);
          string.push(c);
          j = i + 1;
        }
      }

      string.push(specifier.slice(j, i));
      return string.join("");
    };
  }

  function newParse(specifier, newDate) {
    return function(string) {
      var d = newYear(1900),
          i = parseSpecifier(d, specifier, string += "", 0),
          week, day;
      if (i != string.length) return null;

      // If a UNIX timestamp is specified, return it.
      if ("Q" in d) return new Date(d.Q);

      // The am-pm flag is 0 for AM, and 1 for PM.
      if ("p" in d) d.H = d.H % 12 + d.p * 12;

      // Convert day-of-week and week-of-year to day-of-year.
      if ("V" in d) {
        if (d.V < 1 || d.V > 53) return null;
        if (!("w" in d)) d.w = 1;
        if ("Z" in d) {
          week = utcDate(newYear(d.y)), day = week.getUTCDay();
          week = day > 4 || day === 0 ? d3Time.utcMonday.ceil(week) : d3Time.utcMonday(week);
          week = d3Time.utcDay.offset(week, (d.V - 1) * 7);
          d.y = week.getUTCFullYear();
          d.m = week.getUTCMonth();
          d.d = week.getUTCDate() + (d.w + 6) % 7;
        } else {
          week = newDate(newYear(d.y)), day = week.getDay();
          week = day > 4 || day === 0 ? d3Time.timeMonday.ceil(week) : d3Time.timeMonday(week);
          week = d3Time.timeDay.offset(week, (d.V - 1) * 7);
          d.y = week.getFullYear();
          d.m = week.getMonth();
          d.d = week.getDate() + (d.w + 6) % 7;
        }
      } else if ("W" in d || "U" in d) {
        if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
        day = "Z" in d ? utcDate(newYear(d.y)).getUTCDay() : newDate(newYear(d.y)).getDay();
        d.m = 0;
        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;
      }

      // If a time zone is specified, all fields are interpreted as UTC and then
      // offset according to the specified time zone.
      if ("Z" in d) {
        d.H += d.Z / 100 | 0;
        d.M += d.Z % 100;
        return utcDate(d);
      }

      // Otherwise, all fields are in local time.
      return newDate(d);
    };
  }

  function parseSpecifier(d, specifier, string, j) {
    var i = 0,
        n = specifier.length,
        m = string.length,
        c,
        parse;

    while (i < n) {
      if (j >= m) return -1;
      c = specifier.charCodeAt(i++);
      if (c === 37) {
        c = specifier.charAt(i++);
        parse = parses[c in pads ? specifier.charAt(i++) : c];
        if (!parse || ((j = parse(d, string, j)) < 0)) return -1;
      } else if (c != string.charCodeAt(j++)) {
        return -1;
      }
    }

    return j;
  }

  function parsePeriod(d, string, i) {
    var n = periodRe.exec(string.slice(i));
    return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseShortWeekday(d, string, i) {
    var n = shortWeekdayRe.exec(string.slice(i));
    return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseWeekday(d, string, i) {
    var n = weekdayRe.exec(string.slice(i));
    return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseShortMonth(d, string, i) {
    var n = shortMonthRe.exec(string.slice(i));
    return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseMonth(d, string, i) {
    var n = monthRe.exec(string.slice(i));
    return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }

  function parseLocaleDateTime(d, string, i) {
    return parseSpecifier(d, locale_dateTime, string, i);
  }

  function parseLocaleDate(d, string, i) {
    return parseSpecifier(d, locale_date, string, i);
  }

  function parseLocaleTime(d, string, i) {
    return parseSpecifier(d, locale_time, string, i);
  }

  function formatShortWeekday(d) {
    return locale_shortWeekdays[d.getDay()];
  }

  function formatWeekday(d) {
    return locale_weekdays[d.getDay()];
  }

  function formatShortMonth(d) {
    return locale_shortMonths[d.getMonth()];
  }

  function formatMonth(d) {
    return locale_months[d.getMonth()];
  }

  function formatPeriod(d) {
    return locale_periods[+(d.getHours() >= 12)];
  }

  function formatUTCShortWeekday(d) {
    return locale_shortWeekdays[d.getUTCDay()];
  }

  function formatUTCWeekday(d) {
    return locale_weekdays[d.getUTCDay()];
  }

  function formatUTCShortMonth(d) {
    return locale_shortMonths[d.getUTCMonth()];
  }

  function formatUTCMonth(d) {
    return locale_months[d.getUTCMonth()];
  }

  function formatUTCPeriod(d) {
    return locale_periods[+(d.getUTCHours() >= 12)];
  }

  return {
    format: function(specifier) {
      var f = newFormat(specifier += "", formats);
      f.toString = function() { return specifier; };
      return f;
    },
    parse: function(specifier) {
      var p = newParse(specifier += "", localDate);
      p.toString = function() { return specifier; };
      return p;
    },
    utcFormat: function(specifier) {
      var f = newFormat(specifier += "", utcFormats);
      f.toString = function() { return specifier; };
      return f;
    },
    utcParse: function(specifier) {
      var p = newParse(specifier, utcDate);
      p.toString = function() { return specifier; };
      return p;
    }
  };
}

var pads = {"-": "", "_": " ", "0": "0"},
    numberRe = /^\s*\d+/, // note: ignores next directive
    percentRe = /^%/,
    requoteRe = /[\\^$*+?|[\]().{}]/g;

function pad(value, fill, width) {
  var sign = value < 0 ? "-" : "",
      string = (sign ? -value : value) + "",
      length = string.length;
  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
}

function requote(s) {
  return s.replace(requoteRe, "\\$&");
}

function formatRe(names) {
  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
}

function formatLookup(names) {
  var map = {}, i = -1, n = names.length;
  while (++i < n) map[names[i].toLowerCase()] = i;
  return map;
}

function parseWeekdayNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.w = +n[0], i + n[0].length) : -1;
}

function parseWeekdayNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.u = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.U = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberISO(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.V = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.W = +n[0], i + n[0].length) : -1;
}

function parseFullYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 4));
  return n ? (d.y = +n[0], i + n[0].length) : -1;
}

function parseYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
}

function parseZone(d, string, i) {
  var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
}

function parseMonthNumber(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
}

function parseDayOfMonth(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.d = +n[0], i + n[0].length) : -1;
}

function parseDayOfYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
}

function parseHour24(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.H = +n[0], i + n[0].length) : -1;
}

function parseMinutes(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.M = +n[0], i + n[0].length) : -1;
}

function parseSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.S = +n[0], i + n[0].length) : -1;
}

function parseMilliseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.L = +n[0], i + n[0].length) : -1;
}

function parseMicroseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 6));
  return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;
}

function parseLiteralPercent(d, string, i) {
  var n = percentRe.exec(string.slice(i, i + 1));
  return n ? i + n[0].length : -1;
}

function parseUnixTimestamp(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.Q = +n[0], i + n[0].length) : -1;
}

function parseUnixTimestampSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.Q = (+n[0]) * 1000, i + n[0].length) : -1;
}

function formatDayOfMonth(d, p) {
  return pad(d.getDate(), p, 2);
}

function formatHour24(d, p) {
  return pad(d.getHours(), p, 2);
}

function formatHour12(d, p) {
  return pad(d.getHours() % 12 || 12, p, 2);
}

function formatDayOfYear(d, p) {
  return pad(1 + d3Time.timeDay.count(d3Time.timeYear(d), d), p, 3);
}

function formatMilliseconds(d, p) {
  return pad(d.getMilliseconds(), p, 3);
}

function formatMicroseconds(d, p) {
  return formatMilliseconds(d, p) + "000";
}

function formatMonthNumber(d, p) {
  return pad(d.getMonth() + 1, p, 2);
}

function formatMinutes(d, p) {
  return pad(d.getMinutes(), p, 2);
}

function formatSeconds(d, p) {
  return pad(d.getSeconds(), p, 2);
}

function formatWeekdayNumberMonday(d) {
  var day = d.getDay();
  return day === 0 ? 7 : day;
}

function formatWeekNumberSunday(d, p) {
  return pad(d3Time.timeSunday.count(d3Time.timeYear(d), d), p, 2);
}

function formatWeekNumberISO(d, p) {
  var day = d.getDay();
  d = (day >= 4 || day === 0) ? d3Time.timeThursday(d) : d3Time.timeThursday.ceil(d);
  return pad(d3Time.timeThursday.count(d3Time.timeYear(d), d) + (d3Time.timeYear(d).getDay() === 4), p, 2);
}

function formatWeekdayNumberSunday(d) {
  return d.getDay();
}

function formatWeekNumberMonday(d, p) {
  return pad(d3Time.timeMonday.count(d3Time.timeYear(d), d), p, 2);
}

function formatYear(d, p) {
  return pad(d.getFullYear() % 100, p, 2);
}

function formatFullYear(d, p) {
  return pad(d.getFullYear() % 10000, p, 4);
}

function formatZone(d) {
  var z = d.getTimezoneOffset();
  return (z > 0 ? "-" : (z *= -1, "+"))
      + pad(z / 60 | 0, "0", 2)
      + pad(z % 60, "0", 2);
}

function formatUTCDayOfMonth(d, p) {
  return pad(d.getUTCDate(), p, 2);
}

function formatUTCHour24(d, p) {
  return pad(d.getUTCHours(), p, 2);
}

function formatUTCHour12(d, p) {
  return pad(d.getUTCHours() % 12 || 12, p, 2);
}

function formatUTCDayOfYear(d, p) {
  return pad(1 + d3Time.utcDay.count(d3Time.utcYear(d), d), p, 3);
}

function formatUTCMilliseconds(d, p) {
  return pad(d.getUTCMilliseconds(), p, 3);
}

function formatUTCMicroseconds(d, p) {
  return formatUTCMilliseconds(d, p) + "000";
}

function formatUTCMonthNumber(d, p) {
  return pad(d.getUTCMonth() + 1, p, 2);
}

function formatUTCMinutes(d, p) {
  return pad(d.getUTCMinutes(), p, 2);
}

function formatUTCSeconds(d, p) {
  return pad(d.getUTCSeconds(), p, 2);
}

function formatUTCWeekdayNumberMonday(d) {
  var dow = d.getUTCDay();
  return dow === 0 ? 7 : dow;
}

function formatUTCWeekNumberSunday(d, p) {
  return pad(d3Time.utcSunday.count(d3Time.utcYear(d), d), p, 2);
}

function formatUTCWeekNumberISO(d, p) {
  var day = d.getUTCDay();
  d = (day >= 4 || day === 0) ? d3Time.utcThursday(d) : d3Time.utcThursday.ceil(d);
  return pad(d3Time.utcThursday.count(d3Time.utcYear(d), d) + (d3Time.utcYear(d).getUTCDay() === 4), p, 2);
}

function formatUTCWeekdayNumberSunday(d) {
  return d.getUTCDay();
}

function formatUTCWeekNumberMonday(d, p) {
  return pad(d3Time.utcMonday.count(d3Time.utcYear(d), d), p, 2);
}

function formatUTCYear(d, p) {
  return pad(d.getUTCFullYear() % 100, p, 2);
}

function formatUTCFullYear(d, p) {
  return pad(d.getUTCFullYear() % 10000, p, 4);
}

function formatUTCZone() {
  return "+0000";
}

function formatLiteralPercent() {
  return "%";
}

function formatUnixTimestamp(d) {
  return +d;
}

function formatUnixTimestampSeconds(d) {
  return Math.floor(+d / 1000);
}

var locale;

defaultLocale({
  dateTime: "%x, %X",
  date: "%-m/%-d/%Y",
  time: "%-I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});

function defaultLocale(definition) {
  locale = formatLocale(definition);
  exports.timeFormat = locale.format;
  exports.timeParse = locale.parse;
  exports.utcFormat = locale.utcFormat;
  exports.utcParse = locale.utcParse;
  return locale;
}

var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";

function formatIsoNative(date) {
  return date.toISOString();
}

var formatIso = Date.prototype.toISOString
    ? formatIsoNative
    : exports.utcFormat(isoSpecifier);

function parseIsoNative(string) {
  var date = new Date(string);
  return isNaN(date) ? null : date;
}

var parseIso = +new Date("2000-01-01T00:00:00.000Z")
    ? parseIsoNative
    : exports.utcParse(isoSpecifier);

exports.timeFormatDefaultLocale = defaultLocale;
exports.timeFormatLocale = formatLocale;
exports.isoFormat = formatIso;
exports.isoParse = parseIso;

Object.defineProperty(exports, '__esModule', { value: true });

})));

},{"d3-time":33}],33:[function(require,module,exports){
// https://d3js.org/d3-time/ v1.0.11 Copyright 2019 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
typeof define === 'function' && define.amd ? define(['exports'], factory) :
(factory((global.d3 = global.d3 || {})));
}(this, (function (exports) { 'use strict';

var t0 = new Date,
    t1 = new Date;

function newInterval(floori, offseti, count, field) {

  function interval(date) {
    return floori(date = new Date(+date)), date;
  }

  interval.floor = interval;

  interval.ceil = function(date) {
    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
  };

  interval.round = function(date) {
    var d0 = interval(date),
        d1 = interval.ceil(date);
    return date - d0 < d1 - date ? d0 : d1;
  };

  interval.offset = function(date, step) {
    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
  };

  interval.range = function(start, stop, step) {
    var range = [], previous;
    start = interval.ceil(start);
    step = step == null ? 1 : Math.floor(step);
    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date
    do range.push(previous = new Date(+start)), offseti(start, step), floori(start);
    while (previous < start && start < stop);
    return range;
  };

  interval.filter = function(test) {
    return newInterval(function(date) {
      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
    }, function(date, step) {
      if (date >= date) {
        if (step < 0) while (++step <= 0) {
          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty
        } else while (--step >= 0) {
          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty
        }
      }
    });
  };

  if (count) {
    interval.count = function(start, end) {
      t0.setTime(+start), t1.setTime(+end);
      floori(t0), floori(t1);
      return Math.floor(count(t0, t1));
    };

    interval.every = function(step) {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null
          : !(step > 1) ? interval
          : interval.filter(field
              ? function(d) { return field(d) % step === 0; }
              : function(d) { return interval.count(0, d) % step === 0; });
    };
  }

  return interval;
}

var millisecond = newInterval(function() {
  // noop
}, function(date, step) {
  date.setTime(+date + step);
}, function(start, end) {
  return end - start;
});

// An optimized implementation for this simple case.
millisecond.every = function(k) {
  k = Math.floor(k);
  if (!isFinite(k) || !(k > 0)) return null;
  if (!(k > 1)) return millisecond;
  return newInterval(function(date) {
    date.setTime(Math.floor(date / k) * k);
  }, function(date, step) {
    date.setTime(+date + step * k);
  }, function(start, end) {
    return (end - start) / k;
  });
};
var milliseconds = millisecond.range;

var durationSecond = 1e3;
var durationMinute = 6e4;
var durationHour = 36e5;
var durationDay = 864e5;
var durationWeek = 6048e5;

var second = newInterval(function(date) {
  date.setTime(date - date.getMilliseconds());
}, function(date, step) {
  date.setTime(+date + step * durationSecond);
}, function(start, end) {
  return (end - start) / durationSecond;
}, function(date) {
  return date.getUTCSeconds();
});
var seconds = second.range;

var minute = newInterval(function(date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond);
}, function(date, step) {
  date.setTime(+date + step * durationMinute);
}, function(start, end) {
  return (end - start) / durationMinute;
}, function(date) {
  return date.getMinutes();
});
var minutes = minute.range;

var hour = newInterval(function(date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute);
}, function(date, step) {
  date.setTime(+date + step * durationHour);
}, function(start, end) {
  return (end - start) / durationHour;
}, function(date) {
  return date.getHours();
});
var hours = hour.range;

var day = newInterval(function(date) {
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setDate(date.getDate() + step);
}, function(start, end) {
  return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;
}, function(date) {
  return date.getDate() - 1;
});
var days = day.range;

function weekday(i) {
  return newInterval(function(date) {
    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
    date.setHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setDate(date.getDate() + step * 7);
  }, function(start, end) {
    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
  });
}

var sunday = weekday(0);
var monday = weekday(1);
var tuesday = weekday(2);
var wednesday = weekday(3);
var thursday = weekday(4);
var friday = weekday(5);
var saturday = weekday(6);

var sundays = sunday.range;
var mondays = monday.range;
var tuesdays = tuesday.range;
var wednesdays = wednesday.range;
var thursdays = thursday.range;
var fridays = friday.range;
var saturdays = saturday.range;

var month = newInterval(function(date) {
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setMonth(date.getMonth() + step);
}, function(start, end) {
  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
}, function(date) {
  return date.getMonth();
});
var months = month.range;

var year = newInterval(function(date) {
  date.setMonth(0, 1);
  date.setHours(0, 0, 0, 0);
}, function(date, step) {
  date.setFullYear(date.getFullYear() + step);
}, function(start, end) {
  return end.getFullYear() - start.getFullYear();
}, function(date) {
  return date.getFullYear();
});

// An optimized implementation for this simple case.
year.every = function(k) {
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
    date.setFullYear(Math.floor(date.getFullYear() / k) * k);
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setFullYear(date.getFullYear() + step * k);
  });
};
var years = year.range;

var utcMinute = newInterval(function(date) {
  date.setUTCSeconds(0, 0);
}, function(date, step) {
  date.setTime(+date + step * durationMinute);
}, function(start, end) {
  return (end - start) / durationMinute;
}, function(date) {
  return date.getUTCMinutes();
});
var utcMinutes = utcMinute.range;

var utcHour = newInterval(function(date) {
  date.setUTCMinutes(0, 0, 0);
}, function(date, step) {
  date.setTime(+date + step * durationHour);
}, function(start, end) {
  return (end - start) / durationHour;
}, function(date) {
  return date.getUTCHours();
});
var utcHours = utcHour.range;

var utcDay = newInterval(function(date) {
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCDate(date.getUTCDate() + step);
}, function(start, end) {
  return (end - start) / durationDay;
}, function(date) {
  return date.getUTCDate() - 1;
});
var utcDays = utcDay.range;

function utcWeekday(i) {
  return newInterval(function(date) {
    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
    date.setUTCHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setUTCDate(date.getUTCDate() + step * 7);
  }, function(start, end) {
    return (end - start) / durationWeek;
  });
}

var utcSunday = utcWeekday(0);
var utcMonday = utcWeekday(1);
var utcTuesday = utcWeekday(2);
var utcWednesday = utcWeekday(3);
var utcThursday = utcWeekday(4);
var utcFriday = utcWeekday(5);
var utcSaturday = utcWeekday(6);

var utcSundays = utcSunday.range;
var utcMondays = utcMonday.range;
var utcTuesdays = utcTuesday.range;
var utcWednesdays = utcWednesday.range;
var utcThursdays = utcThursday.range;
var utcFridays = utcFriday.range;
var utcSaturdays = utcSaturday.range;

var utcMonth = newInterval(function(date) {
  date.setUTCDate(1);
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCMonth(date.getUTCMonth() + step);
}, function(start, end) {
  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
}, function(date) {
  return date.getUTCMonth();
});
var utcMonths = utcMonth.range;

var utcYear = newInterval(function(date) {
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
}, function(date, step) {
  date.setUTCFullYear(date.getUTCFullYear() + step);
}, function(start, end) {
  return end.getUTCFullYear() - start.getUTCFullYear();
}, function(date) {
  return date.getUTCFullYear();
});

// An optimized implementation for this simple case.
utcYear.every = function(k) {
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setUTCFullYear(date.getUTCFullYear() + step * k);
  });
};
var utcYears = utcYear.range;

exports.timeInterval = newInterval;
exports.timeMillisecond = millisecond;
exports.timeMilliseconds = milliseconds;
exports.utcMillisecond = millisecond;
exports.utcMilliseconds = milliseconds;
exports.timeSecond = second;
exports.timeSeconds = seconds;
exports.utcSecond = second;
exports.utcSeconds = seconds;
exports.timeMinute = minute;
exports.timeMinutes = minutes;
exports.timeHour = hour;
exports.timeHours = hours;
exports.timeDay = day;
exports.timeDays = days;
exports.timeWeek = sunday;
exports.timeWeeks = sundays;
exports.timeSunday = sunday;
exports.timeSundays = sundays;
exports.timeMonday = monday;
exports.timeMondays = mondays;
exports.timeTuesday = tuesday;
exports.timeTuesdays = tuesdays;
exports.timeWednesday = wednesday;
exports.timeWednesdays = wednesdays;
exports.timeThursday = thursday;
exports.timeThursdays = thursdays;
exports.timeFriday = friday;
exports.timeFridays = fridays;
exports.timeSaturday = saturday;
exports.timeSaturdays = saturdays;
exports.timeMonth = month;
exports.timeMonths = months;
exports.timeYear = year;
exports.timeYears = years;
exports.utcMinute = utcMinute;
exports.utcMinutes = utcMinutes;
exports.utcHour = utcHour;
exports.utcHours = utcHours;
exports.utcDay = utcDay;
exports.utcDays = utcDays;
exports.utcWeek = utcSunday;
exports.utcWeeks = utcSundays;
exports.utcSunday = utcSunday;
exports.utcSundays = utcSundays;
exports.utcMonday = utcMonday;
exports.utcMondays = utcMondays;
exports.utcTuesday = utcTuesday;
exports.utcTuesdays = utcTuesdays;
exports.utcWednesday = utcWednesday;
exports.utcWednesdays = utcWednesdays;
exports.utcThursday = utcThursday;
exports.utcThursdays = utcThursdays;
exports.utcFriday = utcFriday;
exports.utcFridays = utcFridays;
exports.utcSaturday = utcSaturday;
exports.utcSaturdays = utcSaturdays;
exports.utcMonth = utcMonth;
exports.utcMonths = utcMonths;
exports.utcYear = utcYear;
exports.utcYears = utcYears;

Object.defineProperty(exports, '__esModule', { value: true });

})));

},{}],34:[function(require,module,exports){
// https://d3js.org/d3-timer/ v1.0.9 Copyright 2018 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
typeof define === 'function' && define.amd ? define(['exports'], factory) :
(factory((global.d3 = global.d3 || {})));
}(this, (function (exports) { 'use strict';

var frame = 0, // is an animation frame pending?
    timeout = 0, // is a timeout pending?
    interval = 0, // are any timers active?
    pokeDelay = 1000, // how frequently we check for clock skew
    taskHead,
    taskTail,
    clockLast = 0,
    clockNow = 0,
    clockSkew = 0,
    clock = typeof performance === "object" && performance.now ? performance : Date,
    setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) { setTimeout(f, 17); };

function now() {
  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
}

function clearNow() {
  clockNow = 0;
}

function Timer() {
  this._call =
  this._time =
  this._next = null;
}

Timer.prototype = timer.prototype = {
  constructor: Timer,
  restart: function(callback, delay, time) {
    if (typeof callback !== "function") throw new TypeError("callback is not a function");
    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
    if (!this._next && taskTail !== this) {
      if (taskTail) taskTail._next = this;
      else taskHead = this;
      taskTail = this;
    }
    this._call = callback;
    this._time = time;
    sleep();
  },
  stop: function() {
    if (this._call) {
      this._call = null;
      this._time = Infinity;
      sleep();
    }
  }
};

function timer(callback, delay, time) {
  var t = new Timer;
  t.restart(callback, delay, time);
  return t;
}

function timerFlush() {
  now(); // Get the current time, if not already set.
  ++frame; // Pretend we’ve set an alarm, if we haven’t already.
  var t = taskHead, e;
  while (t) {
    if ((e = clockNow - t._time) >= 0) t._call.call(null, e);
    t = t._next;
  }
  --frame;
}

function wake() {
  clockNow = (clockLast = clock.now()) + clockSkew;
  frame = timeout = 0;
  try {
    timerFlush();
  } finally {
    frame = 0;
    nap();
    clockNow = 0;
  }
}

function poke() {
  var now = clock.now(), delay = now - clockLast;
  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
}

function nap() {
  var t0, t1 = taskHead, t2, time = Infinity;
  while (t1) {
    if (t1._call) {
      if (time > t1._time) time = t1._time;
      t0 = t1, t1 = t1._next;
    } else {
      t2 = t1._next, t1._next = null;
      t1 = t0 ? t0._next = t2 : taskHead = t2;
    }
  }
  taskTail = t0;
  sleep(time);
}

function sleep(time) {
  if (frame) return; // Soonest alarm already set, or will be.
  if (timeout) timeout = clearTimeout(timeout);
  var delay = time - clockNow; // Strictly less than if we recomputed clockNow.
  if (delay > 24) {
    if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);
    if (interval) interval = clearInterval(interval);
  } else {
    if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
    frame = 1, setFrame(wake);
  }
}

function timeout$1(callback, delay, time) {
  var t = new Timer;
  delay = delay == null ? 0 : +delay;
  t.restart(function(elapsed) {
    t.stop();
    callback(elapsed + delay);
  }, delay, time);
  return t;
}

function interval$1(callback, delay, time) {
  var t = new Timer, total = delay;
  if (delay == null) return t.restart(callback, delay, time), t;
  delay = +delay, time = time == null ? now() : +time;
  t.restart(function tick(elapsed) {
    elapsed += total;
    t.restart(tick, total += delay, time);
    callback(elapsed);
  }, delay, time);
  return t;
}

exports.now = now;
exports.timer = timer;
exports.timerFlush = timerFlush;
exports.timeout = timeout$1;
exports.interval = interval$1;

Object.defineProperty(exports, '__esModule', { value: true });

})));

},{}],35:[function(require,module,exports){
// https://d3js.org/d3-transition/ v1.2.0 Copyright 2019 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-dispatch'), require('d3-timer'), require('d3-color'), require('d3-interpolate'), require('d3-selection'), require('d3-ease')) :
typeof define === 'function' && define.amd ? define(['exports', 'd3-dispatch', 'd3-timer', 'd3-color', 'd3-interpolate', 'd3-selection', 'd3-ease'], factory) :
(factory((global.d3 = global.d3 || {}),global.d3,global.d3,global.d3,global.d3,global.d3,global.d3));
}(this, (function (exports,d3Dispatch,d3Timer,d3Color,d3Interpolate,d3Selection,d3Ease) { 'use strict';

var emptyOn = d3Dispatch.dispatch("start", "end", "cancel", "interrupt");
var emptyTween = [];

var CREATED = 0;
var SCHEDULED = 1;
var STARTING = 2;
var STARTED = 3;
var RUNNING = 4;
var ENDING = 5;
var ENDED = 6;

function schedule(node, name, id, index, group, timing) {
  var schedules = node.__transition;
  if (!schedules) node.__transition = {};
  else if (id in schedules) return;
  create(node, id, {
    name: name,
    index: index, // For context during callback.
    group: group, // For context during callback.
    on: emptyOn,
    tween: emptyTween,
    time: timing.time,
    delay: timing.delay,
    duration: timing.duration,
    ease: timing.ease,
    timer: null,
    state: CREATED
  });
}

function init(node, id) {
  var schedule = get(node, id);
  if (schedule.state > CREATED) throw new Error("too late; already scheduled");
  return schedule;
}

function set(node, id) {
  var schedule = get(node, id);
  if (schedule.state > STARTED) throw new Error("too late; already running");
  return schedule;
}

function get(node, id) {
  var schedule = node.__transition;
  if (!schedule || !(schedule = schedule[id])) throw new Error("transition not found");
  return schedule;
}

function create(node, id, self) {
  var schedules = node.__transition,
      tween;

  // Initialize the self timer when the transition is created.
  // Note the actual delay is not known until the first callback!
  schedules[id] = self;
  self.timer = d3Timer.timer(schedule, 0, self.time);

  function schedule(elapsed) {
    self.state = SCHEDULED;
    self.timer.restart(start, self.delay, self.time);

    // If the elapsed delay is less than our first sleep, start immediately.
    if (self.delay <= elapsed) start(elapsed - self.delay);
  }

  function start(elapsed) {
    var i, j, n, o;

    // If the state is not SCHEDULED, then we previously errored on start.
    if (self.state !== SCHEDULED) return stop();

    for (i in schedules) {
      o = schedules[i];
      if (o.name !== self.name) continue;

      // While this element already has a starting transition during this frame,
      // defer starting an interrupting transition until that transition has a
      // chance to tick (and possibly end); see d3/d3-transition#54!
      if (o.state === STARTED) return d3Timer.timeout(start);

      // Interrupt the active transition, if any.
      if (o.state === RUNNING) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("interrupt", node, node.__data__, o.index, o.group);
        delete schedules[i];
      }

      // Cancel any pre-empted transitions.
      else if (+i < id) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("cancel", node, node.__data__, o.index, o.group);
        delete schedules[i];
      }
    }

    // Defer the first tick to end of the current frame; see d3/d3#1576.
    // Note the transition may be canceled after start and before the first tick!
    // Note this must be scheduled before the start event; see d3/d3-transition#16!
    // Assuming this is successful, subsequent callbacks go straight to tick.
    d3Timer.timeout(function() {
      if (self.state === STARTED) {
        self.state = RUNNING;
        self.timer.restart(tick, self.delay, self.time);
        tick(elapsed);
      }
    });

    // Dispatch the start event.
    // Note this must be done before the tween are initialized.
    self.state = STARTING;
    self.on.call("start", node, node.__data__, self.index, self.group);
    if (self.state !== STARTING) return; // interrupted
    self.state = STARTED;

    // Initialize the tween, deleting null tween.
    tween = new Array(n = self.tween.length);
    for (i = 0, j = -1; i < n; ++i) {
      if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {
        tween[++j] = o;
      }
    }
    tween.length = j + 1;
  }

  function tick(elapsed) {
    var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),
        i = -1,
        n = tween.length;

    while (++i < n) {
      tween[i].call(node, t);
    }

    // Dispatch the end event.
    if (self.state === ENDING) {
      self.on.call("end", node, node.__data__, self.index, self.group);
      stop();
    }
  }

  function stop() {
    self.state = ENDED;
    self.timer.stop();
    delete schedules[id];
    for (var i in schedules) return; // eslint-disable-line no-unused-vars
    delete node.__transition;
  }
}

function interrupt(node, name) {
  var schedules = node.__transition,
      schedule$$1,
      active,
      empty = true,
      i;

  if (!schedules) return;

  name = name == null ? null : name + "";

  for (i in schedules) {
    if ((schedule$$1 = schedules[i]).name !== name) { empty = false; continue; }
    active = schedule$$1.state > STARTING && schedule$$1.state < ENDING;
    schedule$$1.state = ENDED;
    schedule$$1.timer.stop();
    schedule$$1.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule$$1.index, schedule$$1.group);
    delete schedules[i];
  }

  if (empty) delete node.__transition;
}

function selection_interrupt(name) {
  return this.each(function() {
    interrupt(this, name);
  });
}

function tweenRemove(id, name) {
  var tween0, tween1;
  return function() {
    var schedule$$1 = set(this, id),
        tween = schedule$$1.tween;

    // If this node shared tween with the previous node,
    // just assign the updated shared tween and we’re done!
    // Otherwise, copy-on-write.
    if (tween !== tween0) {
      tween1 = tween0 = tween;
      for (var i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1 = tween1.slice();
          tween1.splice(i, 1);
          break;
        }
      }
    }

    schedule$$1.tween = tween1;
  };
}

function tweenFunction(id, name, value) {
  var tween0, tween1;
  if (typeof value !== "function") throw new Error;
  return function() {
    var schedule$$1 = set(this, id),
        tween = schedule$$1.tween;

    // If this node shared tween with the previous node,
    // just assign the updated shared tween and we’re done!
    // Otherwise, copy-on-write.
    if (tween !== tween0) {
      tween1 = (tween0 = tween).slice();
      for (var t = {name: name, value: value}, i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1[i] = t;
          break;
        }
      }
      if (i === n) tween1.push(t);
    }

    schedule$$1.tween = tween1;
  };
}

function transition_tween(name, value) {
  var id = this._id;

  name += "";

  if (arguments.length < 2) {
    var tween = get(this.node(), id).tween;
    for (var i = 0, n = tween.length, t; i < n; ++i) {
      if ((t = tween[i]).name === name) {
        return t.value;
      }
    }
    return null;
  }

  return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));
}

function tweenValue(transition, name, value) {
  var id = transition._id;

  transition.each(function() {
    var schedule$$1 = set(this, id);
    (schedule$$1.value || (schedule$$1.value = {}))[name] = value.apply(this, arguments);
  });

  return function(node) {
    return get(node, id).value[name];
  };
}

function interpolate(a, b) {
  var c;
  return (typeof b === "number" ? d3Interpolate.interpolateNumber
      : b instanceof d3Color.color ? d3Interpolate.interpolateRgb
      : (c = d3Color.color(b)) ? (b = c, d3Interpolate.interpolateRgb)
      : d3Interpolate.interpolateString)(a, b);
}

function attrRemove(name) {
  return function() {
    this.removeAttribute(name);
  };
}

function attrRemoveNS(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}

function attrConstant(name, interpolate$$1, value1) {
  var string00,
      string1 = value1 + "",
      interpolate0;
  return function() {
    var string0 = this.getAttribute(name);
    return string0 === string1 ? null
        : string0 === string00 ? interpolate0
        : interpolate0 = interpolate$$1(string00 = string0, value1);
  };
}

function attrConstantNS(fullname, interpolate$$1, value1) {
  var string00,
      string1 = value1 + "",
      interpolate0;
  return function() {
    var string0 = this.getAttributeNS(fullname.space, fullname.local);
    return string0 === string1 ? null
        : string0 === string00 ? interpolate0
        : interpolate0 = interpolate$$1(string00 = string0, value1);
  };
}

function attrFunction(name, interpolate$$1, value) {
  var string00,
      string10,
      interpolate0;
  return function() {
    var string0, value1 = value(this), string1;
    if (value1 == null) return void this.removeAttribute(name);
    string0 = this.getAttribute(name);
    string1 = value1 + "";
    return string0 === string1 ? null
        : string0 === string00 && string1 === string10 ? interpolate0
        : (string10 = string1, interpolate0 = interpolate$$1(string00 = string0, value1));
  };
}

function attrFunctionNS(fullname, interpolate$$1, value) {
  var string00,
      string10,
      interpolate0;
  return function() {
    var string0, value1 = value(this), string1;
    if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);
    string0 = this.getAttributeNS(fullname.space, fullname.local);
    string1 = value1 + "";
    return string0 === string1 ? null
        : string0 === string00 && string1 === string10 ? interpolate0
        : (string10 = string1, interpolate0 = interpolate$$1(string00 = string0, value1));
  };
}

function transition_attr(name, value) {
  var fullname = d3Selection.namespace(name), i = fullname === "transform" ? d3Interpolate.interpolateTransformSvg : interpolate;
  return this.attrTween(name, typeof value === "function"
      ? (fullname.local ? attrFunctionNS : attrFunction)(fullname, i, tweenValue(this, "attr." + name, value))
      : value == null ? (fullname.local ? attrRemoveNS : attrRemove)(fullname)
      : (fullname.local ? attrConstantNS : attrConstant)(fullname, i, value));
}

function attrInterpolate(name, i) {
  return function(t) {
    this.setAttribute(name, i(t));
  };
}

function attrInterpolateNS(fullname, i) {
  return function(t) {
    this.setAttributeNS(fullname.space, fullname.local, i(t));
  };
}

function attrTweenNS(fullname, value) {
  var t0, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t0 = (i0 = i) && attrInterpolateNS(fullname, i);
    return t0;
  }
  tween._value = value;
  return tween;
}

function attrTween(name, value) {
  var t0, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t0 = (i0 = i) && attrInterpolate(name, i);
    return t0;
  }
  tween._value = value;
  return tween;
}

function transition_attrTween(name, value) {
  var key = "attr." + name;
  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error;
  var fullname = d3Selection.namespace(name);
  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
}

function delayFunction(id, value) {
  return function() {
    init(this, id).delay = +value.apply(this, arguments);
  };
}

function delayConstant(id, value) {
  return value = +value, function() {
    init(this, id).delay = value;
  };
}

function transition_delay(value) {
  var id = this._id;

  return arguments.length
      ? this.each((typeof value === "function"
          ? delayFunction
          : delayConstant)(id, value))
      : get(this.node(), id).delay;
}

function durationFunction(id, value) {
  return function() {
    set(this, id).duration = +value.apply(this, arguments);
  };
}

function durationConstant(id, value) {
  return value = +value, function() {
    set(this, id).duration = value;
  };
}

function transition_duration(value) {
  var id = this._id;

  return arguments.length
      ? this.each((typeof value === "function"
          ? durationFunction
          : durationConstant)(id, value))
      : get(this.node(), id).duration;
}

function easeConstant(id, value) {
  if (typeof value !== "function") throw new Error;
  return function() {
    set(this, id).ease = value;
  };
}

function transition_ease(value) {
  var id = this._id;

  return arguments.length
      ? this.each(easeConstant(id, value))
      : get(this.node(), id).ease;
}

function transition_filter(match) {
  if (typeof match !== "function") match = d3Selection.matcher(match);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }

  return new Transition(subgroups, this._parents, this._name, this._id);
}

function transition_merge(transition$$1) {
  if (transition$$1._id !== this._id) throw new Error;

  for (var groups0 = this._groups, groups1 = transition$$1._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }

  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }

  return new Transition(merges, this._parents, this._name, this._id);
}

function start(name) {
  return (name + "").trim().split(/^|\s+/).every(function(t) {
    var i = t.indexOf(".");
    if (i >= 0) t = t.slice(0, i);
    return !t || t === "start";
  });
}

function onFunction(id, name, listener) {
  var on0, on1, sit = start(name) ? init : set;
  return function() {
    var schedule$$1 = sit(this, id),
        on = schedule$$1.on;

    // If this node shared a dispatch with the previous node,
    // just assign the updated shared dispatch and we’re done!
    // Otherwise, copy-on-write.
    if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);

    schedule$$1.on = on1;
  };
}

function transition_on(name, listener) {
  var id = this._id;

  return arguments.length < 2
      ? get(this.node(), id).on.on(name)
      : this.each(onFunction(id, name, listener));
}

function removeFunction(id) {
  return function() {
    var parent = this.parentNode;
    for (var i in this.__transition) if (+i !== id) return;
    if (parent) parent.removeChild(this);
  };
}

function transition_remove() {
  return this.on("end.remove", removeFunction(this._id));
}

function transition_select(select) {
  var name = this._name,
      id = this._id;

  if (typeof select !== "function") select = d3Selection.selector(select);

  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
        schedule(subgroup[i], name, id, i, subgroup, get(node, id));
      }
    }
  }

  return new Transition(subgroups, this._parents, name, id);
}

function transition_selectAll(select) {
  var name = this._name,
      id = this._id;

  if (typeof select !== "function") select = d3Selection.selectorAll(select);

  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        for (var children = select.call(node, node.__data__, i, group), child, inherit = get(node, id), k = 0, l = children.length; k < l; ++k) {
          if (child = children[k]) {
            schedule(child, name, id, k, children, inherit);
          }
        }
        subgroups.push(children);
        parents.push(node);
      }
    }
  }

  return new Transition(subgroups, parents, name, id);
}

var Selection = d3Selection.selection.prototype.constructor;

function transition_selection() {
  return new Selection(this._groups, this._parents);
}

function styleNull(name, interpolate$$1) {
  var string00,
      string10,
      interpolate0;
  return function() {
    var string0 = d3Selection.style(this, name),
        string1 = (this.style.removeProperty(name), d3Selection.style(this, name));
    return string0 === string1 ? null
        : string0 === string00 && string1 === string10 ? interpolate0
        : interpolate0 = interpolate$$1(string00 = string0, string10 = string1);
  };
}

function styleRemove(name) {
  return function() {
    this.style.removeProperty(name);
  };
}

function styleConstant(name, interpolate$$1, value1) {
  var string00,
      string1 = value1 + "",
      interpolate0;
  return function() {
    var string0 = d3Selection.style(this, name);
    return string0 === string1 ? null
        : string0 === string00 ? interpolate0
        : interpolate0 = interpolate$$1(string00 = string0, value1);
  };
}

function styleFunction(name, interpolate$$1, value) {
  var string00,
      string10,
      interpolate0;
  return function() {
    var string0 = d3Selection.style(this, name),
        value1 = value(this),
        string1 = value1 + "";
    if (value1 == null) string1 = value1 = (this.style.removeProperty(name), d3Selection.style(this, name));
    return string0 === string1 ? null
        : string0 === string00 && string1 === string10 ? interpolate0
        : (string10 = string1, interpolate0 = interpolate$$1(string00 = string0, value1));
  };
}

function styleMaybeRemove(id, name) {
  var on0, on1, listener0, key = "style." + name, event = "end." + key, remove;
  return function() {
    var schedule$$1 = set(this, id),
        on = schedule$$1.on,
        listener = schedule$$1.value[key] == null ? remove || (remove = styleRemove(name)) : undefined;

    // If this node shared a dispatch with the previous node,
    // just assign the updated shared dispatch and we’re done!
    // Otherwise, copy-on-write.
    if (on !== on0 || listener0 !== listener) (on1 = (on0 = on).copy()).on(event, listener0 = listener);

    schedule$$1.on = on1;
  };
}

function transition_style(name, value, priority) {
  var i = (name += "") === "transform" ? d3Interpolate.interpolateTransformCss : interpolate;
  return value == null ? this
      .styleTween(name, styleNull(name, i))
      .on("end.style." + name, styleRemove(name))
    : typeof value === "function" ? this
      .styleTween(name, styleFunction(name, i, tweenValue(this, "style." + name, value)))
      .each(styleMaybeRemove(this._id, name))
    : this
      .styleTween(name, styleConstant(name, i, value), priority)
      .on("end.style." + name, null);
}

function styleInterpolate(name, i, priority) {
  return function(t) {
    this.style.setProperty(name, i(t), priority);
  };
}

function styleTween(name, value, priority) {
  var t, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0) t = (i0 = i) && styleInterpolate(name, i, priority);
    return t;
  }
  tween._value = value;
  return tween;
}

function transition_styleTween(name, value, priority) {
  var key = "style." + (name += "");
  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
  if (value == null) return this.tween(key, null);
  if (typeof value !== "function") throw new Error;
  return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
}

function textConstant(value) {
  return function() {
    this.textContent = value;
  };
}

function textFunction(value) {
  return function() {
    var value1 = value(this);
    this.textContent = value1 == null ? "" : value1;
  };
}

function transition_text(value) {
  return this.tween("text", typeof value === "function"
      ? textFunction(tweenValue(this, "text", value))
      : textConstant(value == null ? "" : value + ""));
}

function transition_transition() {
  var name = this._name,
      id0 = this._id,
      id1 = newId();

  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        var inherit = get(node, id0);
        schedule(node, name, id1, i, group, {
          time: inherit.time + inherit.delay + inherit.duration,
          delay: 0,
          duration: inherit.duration,
          ease: inherit.ease
        });
      }
    }
  }

  return new Transition(groups, this._parents, name, id1);
}

function transition_end() {
  var on0, on1, that = this, id = that._id, size = that.size();
  return new Promise(function(resolve, reject) {
    var cancel = {value: reject},
        end = {value: function() { if (--size === 0) resolve(); }};

    that.each(function() {
      var schedule$$1 = set(this, id),
          on = schedule$$1.on;

      // If this node shared a dispatch with the previous node,
      // just assign the updated shared dispatch and we’re done!
      // Otherwise, copy-on-write.
      if (on !== on0) {
        on1 = (on0 = on).copy();
        on1._.cancel.push(cancel);
        on1._.interrupt.push(cancel);
        on1._.end.push(end);
      }

      schedule$$1.on = on1;
    });
  });
}

var id = 0;

function Transition(groups, parents, name, id) {
  this._groups = groups;
  this._parents = parents;
  this._name = name;
  this._id = id;
}

function transition(name) {
  return d3Selection.selection().transition(name);
}

function newId() {
  return ++id;
}

var selection_prototype = d3Selection.selection.prototype;

Transition.prototype = transition.prototype = {
  constructor: Transition,
  select: transition_select,
  selectAll: transition_selectAll,
  filter: transition_filter,
  merge: transition_merge,
  selection: transition_selection,
  transition: transition_transition,
  call: selection_prototype.call,
  nodes: selection_prototype.nodes,
  node: selection_prototype.node,
  size: selection_prototype.size,
  empty: selection_prototype.empty,
  each: selection_prototype.each,
  on: transition_on,
  attr: transition_attr,
  attrTween: transition_attrTween,
  style: transition_style,
  styleTween: transition_styleTween,
  text: transition_text,
  remove: transition_remove,
  tween: transition_tween,
  delay: transition_delay,
  duration: transition_duration,
  ease: transition_ease,
  end: transition_end
};

var defaultTiming = {
  time: null, // Set on use.
  delay: 0,
  duration: 250,
  ease: d3Ease.easeCubicInOut
};

function inherit(node, id) {
  var timing;
  while (!(timing = node.__transition) || !(timing = timing[id])) {
    if (!(node = node.parentNode)) {
      return defaultTiming.time = d3Timer.now(), defaultTiming;
    }
  }
  return timing;
}

function selection_transition(name) {
  var id,
      timing;

  if (name instanceof Transition) {
    id = name._id, name = name._name;
  } else {
    id = newId(), (timing = defaultTiming).time = d3Timer.now(), name = name == null ? null : name + "";
  }

  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        schedule(node, name, id, i, group, timing || inherit(node, id));
      }
    }
  }

  return new Transition(groups, this._parents, name, id);
}

d3Selection.selection.prototype.interrupt = selection_interrupt;
d3Selection.selection.prototype.transition = selection_transition;

var root = [null];

function active(node, name) {
  var schedules = node.__transition,
      schedule$$1,
      i;

  if (schedules) {
    name = name == null ? null : name + "";
    for (i in schedules) {
      if ((schedule$$1 = schedules[i]).state > SCHEDULED && schedule$$1.name === name) {
        return new Transition([[node]], root, name, +i);
      }
    }
  }

  return null;
}

exports.transition = transition;
exports.active = active;
exports.interrupt = interrupt;

Object.defineProperty(exports, '__esModule', { value: true });

})));

},{"d3-color":12,"d3-dispatch":14,"d3-ease":17,"d3-interpolate":23,"d3-selection":30,"d3-timer":34}],36:[function(require,module,exports){
// https://d3js.org/d3-voronoi/ v1.1.4 Copyright 2018 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
typeof define === 'function' && define.amd ? define(['exports'], factory) :
(factory((global.d3 = global.d3 || {})));
}(this, (function (exports) { 'use strict';

function constant(x) {
  return function() {
    return x;
  };
}

function x(d) {
  return d[0];
}

function y(d) {
  return d[1];
}

function RedBlackTree() {
  this._ = null; // root node
}

function RedBlackNode(node) {
  node.U = // parent node
  node.C = // color - true for red, false for black
  node.L = // left node
  node.R = // right node
  node.P = // previous node
  node.N = null; // next node
}

RedBlackTree.prototype = {
  constructor: RedBlackTree,

  insert: function(after, node) {
    var parent, grandpa, uncle;

    if (after) {
      node.P = after;
      node.N = after.N;
      if (after.N) after.N.P = node;
      after.N = node;
      if (after.R) {
        after = after.R;
        while (after.L) after = after.L;
        after.L = node;
      } else {
        after.R = node;
      }
      parent = after;
    } else if (this._) {
      after = RedBlackFirst(this._);
      node.P = null;
      node.N = after;
      after.P = after.L = node;
      parent = after;
    } else {
      node.P = node.N = null;
      this._ = node;
      parent = null;
    }
    node.L = node.R = null;
    node.U = parent;
    node.C = true;

    after = node;
    while (parent && parent.C) {
      grandpa = parent.U;
      if (parent === grandpa.L) {
        uncle = grandpa.R;
        if (uncle && uncle.C) {
          parent.C = uncle.C = false;
          grandpa.C = true;
          after = grandpa;
        } else {
          if (after === parent.R) {
            RedBlackRotateLeft(this, parent);
            after = parent;
            parent = after.U;
          }
          parent.C = false;
          grandpa.C = true;
          RedBlackRotateRight(this, grandpa);
        }
      } else {
        uncle = grandpa.L;
        if (uncle && uncle.C) {
          parent.C = uncle.C = false;
          grandpa.C = true;
          after = grandpa;
        } else {
          if (after === parent.L) {
            RedBlackRotateRight(this, parent);
            after = parent;
            parent = after.U;
          }
          parent.C = false;
          grandpa.C = true;
          RedBlackRotateLeft(this, grandpa);
        }
      }
      parent = after.U;
    }
    this._.C = false;
  },

  remove: function(node) {
    if (node.N) node.N.P = node.P;
    if (node.P) node.P.N = node.N;
    node.N = node.P = null;

    var parent = node.U,
        sibling,
        left = node.L,
        right = node.R,
        next,
        red;

    if (!left) next = right;
    else if (!right) next = left;
    else next = RedBlackFirst(right);

    if (parent) {
      if (parent.L === node) parent.L = next;
      else parent.R = next;
    } else {
      this._ = next;
    }

    if (left && right) {
      red = next.C;
      next.C = node.C;
      next.L = left;
      left.U = next;
      if (next !== right) {
        parent = next.U;
        next.U = node.U;
        node = next.R;
        parent.L = node;
        next.R = right;
        right.U = next;
      } else {
        next.U = parent;
        parent = next;
        node = next.R;
      }
    } else {
      red = node.C;
      node = next;
    }

    if (node) node.U = parent;
    if (red) return;
    if (node && node.C) { node.C = false; return; }

    do {
      if (node === this._) break;
      if (node === parent.L) {
        sibling = parent.R;
        if (sibling.C) {
          sibling.C = false;
          parent.C = true;
          RedBlackRotateLeft(this, parent);
          sibling = parent.R;
        }
        if ((sibling.L && sibling.L.C)
            || (sibling.R && sibling.R.C)) {
          if (!sibling.R || !sibling.R.C) {
            sibling.L.C = false;
            sibling.C = true;
            RedBlackRotateRight(this, sibling);
            sibling = parent.R;
          }
          sibling.C = parent.C;
          parent.C = sibling.R.C = false;
          RedBlackRotateLeft(this, parent);
          node = this._;
          break;
        }
      } else {
        sibling = parent.L;
        if (sibling.C) {
          sibling.C = false;
          parent.C = true;
          RedBlackRotateRight(this, parent);
          sibling = parent.L;
        }
        if ((sibling.L && sibling.L.C)
          || (sibling.R && sibling.R.C)) {
          if (!sibling.L || !sibling.L.C) {
            sibling.R.C = false;
            sibling.C = true;
            RedBlackRotateLeft(this, sibling);
            sibling = parent.L;
          }
          sibling.C = parent.C;
          parent.C = sibling.L.C = false;
          RedBlackRotateRight(this, parent);
          node = this._;
          break;
        }
      }
      sibling.C = true;
      node = parent;
      parent = parent.U;
    } while (!node.C);

    if (node) node.C = false;
  }
};

function RedBlackRotateLeft(tree, node) {
  var p = node,
      q = node.R,
      parent = p.U;

  if (parent) {
    if (parent.L === p) parent.L = q;
    else parent.R = q;
  } else {
    tree._ = q;
  }

  q.U = parent;
  p.U = q;
  p.R = q.L;
  if (p.R) p.R.U = p;
  q.L = p;
}

function RedBlackRotateRight(tree, node) {
  var p = node,
      q = node.L,
      parent = p.U;

  if (parent) {
    if (parent.L === p) parent.L = q;
    else parent.R = q;
  } else {
    tree._ = q;
  }

  q.U = parent;
  p.U = q;
  p.L = q.R;
  if (p.L) p.L.U = p;
  q.R = p;
}

function RedBlackFirst(node) {
  while (node.L) node = node.L;
  return node;
}

function createEdge(left, right, v0, v1) {
  var edge = [null, null],
      index = edges.push(edge) - 1;
  edge.left = left;
  edge.right = right;
  if (v0) setEdgeEnd(edge, left, right, v0);
  if (v1) setEdgeEnd(edge, right, left, v1);
  cells[left.index].halfedges.push(index);
  cells[right.index].halfedges.push(index);
  return edge;
}

function createBorderEdge(left, v0, v1) {
  var edge = [v0, v1];
  edge.left = left;
  return edge;
}

function setEdgeEnd(edge, left, right, vertex) {
  if (!edge[0] && !edge[1]) {
    edge[0] = vertex;
    edge.left = left;
    edge.right = right;
  } else if (edge.left === right) {
    edge[1] = vertex;
  } else {
    edge[0] = vertex;
  }
}

// Liang–Barsky line clipping.
function clipEdge(edge, x0, y0, x1, y1) {
  var a = edge[0],
      b = edge[1],
      ax = a[0],
      ay = a[1],
      bx = b[0],
      by = b[1],
      t0 = 0,
      t1 = 1,
      dx = bx - ax,
      dy = by - ay,
      r;

  r = x0 - ax;
  if (!dx && r > 0) return;
  r /= dx;
  if (dx < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dx > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = x1 - ax;
  if (!dx && r < 0) return;
  r /= dx;
  if (dx < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dx > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  r = y0 - ay;
  if (!dy && r > 0) return;
  r /= dy;
  if (dy < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dy > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = y1 - ay;
  if (!dy && r < 0) return;
  r /= dy;
  if (dy < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dy > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  if (!(t0 > 0) && !(t1 < 1)) return true; // TODO Better check?

  if (t0 > 0) edge[0] = [ax + t0 * dx, ay + t0 * dy];
  if (t1 < 1) edge[1] = [ax + t1 * dx, ay + t1 * dy];
  return true;
}

function connectEdge(edge, x0, y0, x1, y1) {
  var v1 = edge[1];
  if (v1) return true;

  var v0 = edge[0],
      left = edge.left,
      right = edge.right,
      lx = left[0],
      ly = left[1],
      rx = right[0],
      ry = right[1],
      fx = (lx + rx) / 2,
      fy = (ly + ry) / 2,
      fm,
      fb;

  if (ry === ly) {
    if (fx < x0 || fx >= x1) return;
    if (lx > rx) {
      if (!v0) v0 = [fx, y0];
      else if (v0[1] >= y1) return;
      v1 = [fx, y1];
    } else {
      if (!v0) v0 = [fx, y1];
      else if (v0[1] < y0) return;
      v1 = [fx, y0];
    }
  } else {
    fm = (lx - rx) / (ry - ly);
    fb = fy - fm * fx;
    if (fm < -1 || fm > 1) {
      if (lx > rx) {
        if (!v0) v0 = [(y0 - fb) / fm, y0];
        else if (v0[1] >= y1) return;
        v1 = [(y1 - fb) / fm, y1];
      } else {
        if (!v0) v0 = [(y1 - fb) / fm, y1];
        else if (v0[1] < y0) return;
        v1 = [(y0 - fb) / fm, y0];
      }
    } else {
      if (ly < ry) {
        if (!v0) v0 = [x0, fm * x0 + fb];
        else if (v0[0] >= x1) return;
        v1 = [x1, fm * x1 + fb];
      } else {
        if (!v0) v0 = [x1, fm * x1 + fb];
        else if (v0[0] < x0) return;
        v1 = [x0, fm * x0 + fb];
      }
    }
  }

  edge[0] = v0;
  edge[1] = v1;
  return true;
}

function clipEdges(x0, y0, x1, y1) {
  var i = edges.length,
      edge;

  while (i--) {
    if (!connectEdge(edge = edges[i], x0, y0, x1, y1)
        || !clipEdge(edge, x0, y0, x1, y1)
        || !(Math.abs(edge[0][0] - edge[1][0]) > epsilon
            || Math.abs(edge[0][1] - edge[1][1]) > epsilon)) {
      delete edges[i];
    }
  }
}

function createCell(site) {
  return cells[site.index] = {
    site: site,
    halfedges: []
  };
}

function cellHalfedgeAngle(cell, edge) {
  var site = cell.site,
      va = edge.left,
      vb = edge.right;
  if (site === vb) vb = va, va = site;
  if (vb) return Math.atan2(vb[1] - va[1], vb[0] - va[0]);
  if (site === va) va = edge[1], vb = edge[0];
  else va = edge[0], vb = edge[1];
  return Math.atan2(va[0] - vb[0], vb[1] - va[1]);
}

function cellHalfedgeStart(cell, edge) {
  return edge[+(edge.left !== cell.site)];
}

function cellHalfedgeEnd(cell, edge) {
  return edge[+(edge.left === cell.site)];
}

function sortCellHalfedges() {
  for (var i = 0, n = cells.length, cell, halfedges, j, m; i < n; ++i) {
    if ((cell = cells[i]) && (m = (halfedges = cell.halfedges).length)) {
      var index = new Array(m),
          array = new Array(m);
      for (j = 0; j < m; ++j) index[j] = j, array[j] = cellHalfedgeAngle(cell, edges[halfedges[j]]);
      index.sort(function(i, j) { return array[j] - array[i]; });
      for (j = 0; j < m; ++j) array[j] = halfedges[index[j]];
      for (j = 0; j < m; ++j) halfedges[j] = array[j];
    }
  }
}

function clipCells(x0, y0, x1, y1) {
  var nCells = cells.length,
      iCell,
      cell,
      site,
      iHalfedge,
      halfedges,
      nHalfedges,
      start,
      startX,
      startY,
      end,
      endX,
      endY,
      cover = true;

  for (iCell = 0; iCell < nCells; ++iCell) {
    if (cell = cells[iCell]) {
      site = cell.site;
      halfedges = cell.halfedges;
      iHalfedge = halfedges.length;

      // Remove any dangling clipped edges.
      while (iHalfedge--) {
        if (!edges[halfedges[iHalfedge]]) {
          halfedges.splice(iHalfedge, 1);
        }
      }

      // Insert any border edges as necessary.
      iHalfedge = 0, nHalfedges = halfedges.length;
      while (iHalfedge < nHalfedges) {
        end = cellHalfedgeEnd(cell, edges[halfedges[iHalfedge]]), endX = end[0], endY = end[1];
        start = cellHalfedgeStart(cell, edges[halfedges[++iHalfedge % nHalfedges]]), startX = start[0], startY = start[1];
        if (Math.abs(endX - startX) > epsilon || Math.abs(endY - startY) > epsilon) {
          halfedges.splice(iHalfedge, 0, edges.push(createBorderEdge(site, end,
              Math.abs(endX - x0) < epsilon && y1 - endY > epsilon ? [x0, Math.abs(startX - x0) < epsilon ? startY : y1]
              : Math.abs(endY - y1) < epsilon && x1 - endX > epsilon ? [Math.abs(startY - y1) < epsilon ? startX : x1, y1]
              : Math.abs(endX - x1) < epsilon && endY - y0 > epsilon ? [x1, Math.abs(startX - x1) < epsilon ? startY : y0]
              : Math.abs(endY - y0) < epsilon && endX - x0 > epsilon ? [Math.abs(startY - y0) < epsilon ? startX : x0, y0]
              : null)) - 1);
          ++nHalfedges;
        }
      }

      if (nHalfedges) cover = false;
    }
  }

  // If there weren’t any edges, have the closest site cover the extent.
  // It doesn’t matter which corner of the extent we measure!
  if (cover) {
    var dx, dy, d2, dc = Infinity;

    for (iCell = 0, cover = null; iCell < nCells; ++iCell) {
      if (cell = cells[iCell]) {
        site = cell.site;
        dx = site[0] - x0;
        dy = site[1] - y0;
        d2 = dx * dx + dy * dy;
        if (d2 < dc) dc = d2, cover = cell;
      }
    }

    if (cover) {
      var v00 = [x0, y0], v01 = [x0, y1], v11 = [x1, y1], v10 = [x1, y0];
      cover.halfedges.push(
        edges.push(createBorderEdge(site = cover.site, v00, v01)) - 1,
        edges.push(createBorderEdge(site, v01, v11)) - 1,
        edges.push(createBorderEdge(site, v11, v10)) - 1,
        edges.push(createBorderEdge(site, v10, v00)) - 1
      );
    }
  }

  // Lastly delete any cells with no edges; these were entirely clipped.
  for (iCell = 0; iCell < nCells; ++iCell) {
    if (cell = cells[iCell]) {
      if (!cell.halfedges.length) {
        delete cells[iCell];
      }
    }
  }
}

var circlePool = [];

var firstCircle;

function Circle() {
  RedBlackNode(this);
  this.x =
  this.y =
  this.arc =
  this.site =
  this.cy = null;
}

function attachCircle(arc) {
  var lArc = arc.P,
      rArc = arc.N;

  if (!lArc || !rArc) return;

  var lSite = lArc.site,
      cSite = arc.site,
      rSite = rArc.site;

  if (lSite === rSite) return;

  var bx = cSite[0],
      by = cSite[1],
      ax = lSite[0] - bx,
      ay = lSite[1] - by,
      cx = rSite[0] - bx,
      cy = rSite[1] - by;

  var d = 2 * (ax * cy - ay * cx);
  if (d >= -epsilon2) return;

  var ha = ax * ax + ay * ay,
      hc = cx * cx + cy * cy,
      x = (cy * ha - ay * hc) / d,
      y = (ax * hc - cx * ha) / d;

  var circle = circlePool.pop() || new Circle;
  circle.arc = arc;
  circle.site = cSite;
  circle.x = x + bx;
  circle.y = (circle.cy = y + by) + Math.sqrt(x * x + y * y); // y bottom

  arc.circle = circle;

  var before = null,
      node = circles._;

  while (node) {
    if (circle.y < node.y || (circle.y === node.y && circle.x <= node.x)) {
      if (node.L) node = node.L;
      else { before = node.P; break; }
    } else {
      if (node.R) node = node.R;
      else { before = node; break; }
    }
  }

  circles.insert(before, circle);
  if (!before) firstCircle = circle;
}

function detachCircle(arc) {
  var circle = arc.circle;
  if (circle) {
    if (!circle.P) firstCircle = circle.N;
    circles.remove(circle);
    circlePool.push(circle);
    RedBlackNode(circle);
    arc.circle = null;
  }
}

var beachPool = [];

function Beach() {
  RedBlackNode(this);
  this.edge =
  this.site =
  this.circle = null;
}

function createBeach(site) {
  var beach = beachPool.pop() || new Beach;
  beach.site = site;
  return beach;
}

function detachBeach(beach) {
  detachCircle(beach);
  beaches.remove(beach);
  beachPool.push(beach);
  RedBlackNode(beach);
}

function removeBeach(beach) {
  var circle = beach.circle,
      x = circle.x,
      y = circle.cy,
      vertex = [x, y],
      previous = beach.P,
      next = beach.N,
      disappearing = [beach];

  detachBeach(beach);

  var lArc = previous;
  while (lArc.circle
      && Math.abs(x - lArc.circle.x) < epsilon
      && Math.abs(y - lArc.circle.cy) < epsilon) {
    previous = lArc.P;
    disappearing.unshift(lArc);
    detachBeach(lArc);
    lArc = previous;
  }

  disappearing.unshift(lArc);
  detachCircle(lArc);

  var rArc = next;
  while (rArc.circle
      && Math.abs(x - rArc.circle.x) < epsilon
      && Math.abs(y - rArc.circle.cy) < epsilon) {
    next = rArc.N;
    disappearing.push(rArc);
    detachBeach(rArc);
    rArc = next;
  }

  disappearing.push(rArc);
  detachCircle(rArc);

  var nArcs = disappearing.length,
      iArc;
  for (iArc = 1; iArc < nArcs; ++iArc) {
    rArc = disappearing[iArc];
    lArc = disappearing[iArc - 1];
    setEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
  }

  lArc = disappearing[0];
  rArc = disappearing[nArcs - 1];
  rArc.edge = createEdge(lArc.site, rArc.site, null, vertex);

  attachCircle(lArc);
  attachCircle(rArc);
}

function addBeach(site) {
  var x = site[0],
      directrix = site[1],
      lArc,
      rArc,
      dxl,
      dxr,
      node = beaches._;

  while (node) {
    dxl = leftBreakPoint(node, directrix) - x;
    if (dxl > epsilon) node = node.L; else {
      dxr = x - rightBreakPoint(node, directrix);
      if (dxr > epsilon) {
        if (!node.R) {
          lArc = node;
          break;
        }
        node = node.R;
      } else {
        if (dxl > -epsilon) {
          lArc = node.P;
          rArc = node;
        } else if (dxr > -epsilon) {
          lArc = node;
          rArc = node.N;
        } else {
          lArc = rArc = node;
        }
        break;
      }
    }
  }

  createCell(site);
  var newArc = createBeach(site);
  beaches.insert(lArc, newArc);

  if (!lArc && !rArc) return;

  if (lArc === rArc) {
    detachCircle(lArc);
    rArc = createBeach(lArc.site);
    beaches.insert(newArc, rArc);
    newArc.edge = rArc.edge = createEdge(lArc.site, newArc.site);
    attachCircle(lArc);
    attachCircle(rArc);
    return;
  }

  if (!rArc) { // && lArc
    newArc.edge = createEdge(lArc.site, newArc.site);
    return;
  }

  // else lArc !== rArc
  detachCircle(lArc);
  detachCircle(rArc);

  var lSite = lArc.site,
      ax = lSite[0],
      ay = lSite[1],
      bx = site[0] - ax,
      by = site[1] - ay,
      rSite = rArc.site,
      cx = rSite[0] - ax,
      cy = rSite[1] - ay,
      d = 2 * (bx * cy - by * cx),
      hb = bx * bx + by * by,
      hc = cx * cx + cy * cy,
      vertex = [(cy * hb - by * hc) / d + ax, (bx * hc - cx * hb) / d + ay];

  setEdgeEnd(rArc.edge, lSite, rSite, vertex);
  newArc.edge = createEdge(lSite, site, null, vertex);
  rArc.edge = createEdge(site, rSite, null, vertex);
  attachCircle(lArc);
  attachCircle(rArc);
}

function leftBreakPoint(arc, directrix) {
  var site = arc.site,
      rfocx = site[0],
      rfocy = site[1],
      pby2 = rfocy - directrix;

  if (!pby2) return rfocx;

  var lArc = arc.P;
  if (!lArc) return -Infinity;

  site = lArc.site;
  var lfocx = site[0],
      lfocy = site[1],
      plby2 = lfocy - directrix;

  if (!plby2) return lfocx;

  var hl = lfocx - rfocx,
      aby2 = 1 / pby2 - 1 / plby2,
      b = hl / plby2;

  if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;

  return (rfocx + lfocx) / 2;
}

function rightBreakPoint(arc, directrix) {
  var rArc = arc.N;
  if (rArc) return leftBreakPoint(rArc, directrix);
  var site = arc.site;
  return site[1] === directrix ? site[0] : Infinity;
}

var epsilon = 1e-6;
var epsilon2 = 1e-12;
var beaches;
var cells;
var circles;
var edges;

function triangleArea(a, b, c) {
  return (a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]);
}

function lexicographic(a, b) {
  return b[1] - a[1]
      || b[0] - a[0];
}

function Diagram(sites, extent) {
  var site = sites.sort(lexicographic).pop(),
      x,
      y,
      circle;

  edges = [];
  cells = new Array(sites.length);
  beaches = new RedBlackTree;
  circles = new RedBlackTree;

  while (true) {
    circle = firstCircle;
    if (site && (!circle || site[1] < circle.y || (site[1] === circle.y && site[0] < circle.x))) {
      if (site[0] !== x || site[1] !== y) {
        addBeach(site);
        x = site[0], y = site[1];
      }
      site = sites.pop();
    } else if (circle) {
      removeBeach(circle.arc);
    } else {
      break;
    }
  }

  sortCellHalfedges();

  if (extent) {
    var x0 = +extent[0][0],
        y0 = +extent[0][1],
        x1 = +extent[1][0],
        y1 = +extent[1][1];
    clipEdges(x0, y0, x1, y1);
    clipCells(x0, y0, x1, y1);
  }

  this.edges = edges;
  this.cells = cells;

  beaches =
  circles =
  edges =
  cells = null;
}

Diagram.prototype = {
  constructor: Diagram,

  polygons: function() {
    var edges = this.edges;

    return this.cells.map(function(cell) {
      var polygon = cell.halfedges.map(function(i) { return cellHalfedgeStart(cell, edges[i]); });
      polygon.data = cell.site.data;
      return polygon;
    });
  },

  triangles: function() {
    var triangles = [],
        edges = this.edges;

    this.cells.forEach(function(cell, i) {
      if (!(m = (halfedges = cell.halfedges).length)) return;
      var site = cell.site,
          halfedges,
          j = -1,
          m,
          s0,
          e1 = edges[halfedges[m - 1]],
          s1 = e1.left === site ? e1.right : e1.left;

      while (++j < m) {
        s0 = s1;
        e1 = edges[halfedges[j]];
        s1 = e1.left === site ? e1.right : e1.left;
        if (s0 && s1 && i < s0.index && i < s1.index && triangleArea(site, s0, s1) < 0) {
          triangles.push([site.data, s0.data, s1.data]);
        }
      }
    });

    return triangles;
  },

  links: function() {
    return this.edges.filter(function(edge) {
      return edge.right;
    }).map(function(edge) {
      return {
        source: edge.left.data,
        target: edge.right.data
      };
    });
  },

  find: function(x, y, radius) {
    var that = this, i0, i1 = that._found || 0, n = that.cells.length, cell;

    // Use the previously-found cell, or start with an arbitrary one.
    while (!(cell = that.cells[i1])) if (++i1 >= n) return null;
    var dx = x - cell.site[0], dy = y - cell.site[1], d2 = dx * dx + dy * dy;

    // Traverse the half-edges to find a closer cell, if any.
    do {
      cell = that.cells[i0 = i1], i1 = null;
      cell.halfedges.forEach(function(e) {
        var edge = that.edges[e], v = edge.left;
        if ((v === cell.site || !v) && !(v = edge.right)) return;
        var vx = x - v[0], vy = y - v[1], v2 = vx * vx + vy * vy;
        if (v2 < d2) d2 = v2, i1 = v.index;
      });
    } while (i1 !== null);

    that._found = i0;

    return radius == null || d2 <= radius * radius ? cell.site : null;
  }
};

function voronoi() {
  var x$$1 = x,
      y$$1 = y,
      extent = null;

  function voronoi(data) {
    return new Diagram(data.map(function(d, i) {
      var s = [Math.round(x$$1(d, i, data) / epsilon) * epsilon, Math.round(y$$1(d, i, data) / epsilon) * epsilon];
      s.index = i;
      s.data = d;
      return s;
    }), extent);
  }

  voronoi.polygons = function(data) {
    return voronoi(data).polygons();
  };

  voronoi.links = function(data) {
    return voronoi(data).links();
  };

  voronoi.triangles = function(data) {
    return voronoi(data).triangles();
  };

  voronoi.x = function(_) {
    return arguments.length ? (x$$1 = typeof _ === "function" ? _ : constant(+_), voronoi) : x$$1;
  };

  voronoi.y = function(_) {
    return arguments.length ? (y$$1 = typeof _ === "function" ? _ : constant(+_), voronoi) : y$$1;
  };

  voronoi.extent = function(_) {
    return arguments.length ? (extent = _ == null ? null : [[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]], voronoi) : extent && [[extent[0][0], extent[0][1]], [extent[1][0], extent[1][1]]];
  };

  voronoi.size = function(_) {
    return arguments.length ? (extent = _ == null ? null : [[0, 0], [+_[0], +_[1]]], voronoi) : extent && [extent[1][0] - extent[0][0], extent[1][1] - extent[0][1]];
  };

  return voronoi;
}

exports.voronoi = voronoi;

Object.defineProperty(exports, '__esModule', { value: true });

})));

},{}],37:[function(require,module,exports){
// https://d3js.org/d3-zoom/ v1.8.3 Copyright 2019 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-dispatch'), require('d3-drag'), require('d3-interpolate'), require('d3-selection'), require('d3-transition')) :
typeof define === 'function' && define.amd ? define(['exports', 'd3-dispatch', 'd3-drag', 'd3-interpolate', 'd3-selection', 'd3-transition'], factory) :
(global = global || self, factory(global.d3 = global.d3 || {}, global.d3, global.d3, global.d3, global.d3, global.d3));
}(this, function (exports, d3Dispatch, d3Drag, d3Interpolate, d3Selection, d3Transition) { 'use strict';

function constant(x) {
  return function() {
    return x;
  };
}

function ZoomEvent(target, type, transform) {
  this.target = target;
  this.type = type;
  this.transform = transform;
}

function Transform(k, x, y) {
  this.k = k;
  this.x = x;
  this.y = y;
}

Transform.prototype = {
  constructor: Transform,
  scale: function(k) {
    return k === 1 ? this : new Transform(this.k * k, this.x, this.y);
  },
  translate: function(x, y) {
    return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);
  },
  apply: function(point) {
    return [point[0] * this.k + this.x, point[1] * this.k + this.y];
  },
  applyX: function(x) {
    return x * this.k + this.x;
  },
  applyY: function(y) {
    return y * this.k + this.y;
  },
  invert: function(location) {
    return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];
  },
  invertX: function(x) {
    return (x - this.x) / this.k;
  },
  invertY: function(y) {
    return (y - this.y) / this.k;
  },
  rescaleX: function(x) {
    return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));
  },
  rescaleY: function(y) {
    return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));
  },
  toString: function() {
    return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
  }
};

var identity = new Transform(1, 0, 0);

transform.prototype = Transform.prototype;

function transform(node) {
  while (!node.__zoom) if (!(node = node.parentNode)) return identity;
  return node.__zoom;
}

function nopropagation() {
  d3Selection.event.stopImmediatePropagation();
}

function noevent() {
  d3Selection.event.preventDefault();
  d3Selection.event.stopImmediatePropagation();
}

// Ignore right-click, since that should open the context menu.
function defaultFilter() {
  return !d3Selection.event.ctrlKey && !d3Selection.event.button;
}

function defaultExtent() {
  var e = this;
  if (e instanceof SVGElement) {
    e = e.ownerSVGElement || e;
    if (e.hasAttribute("viewBox")) {
      e = e.viewBox.baseVal;
      return [[e.x, e.y], [e.x + e.width, e.y + e.height]];
    }
    return [[0, 0], [e.width.baseVal.value, e.height.baseVal.value]];
  }
  return [[0, 0], [e.clientWidth, e.clientHeight]];
}

function defaultTransform() {
  return this.__zoom || identity;
}

function defaultWheelDelta() {
  return -d3Selection.event.deltaY * (d3Selection.event.deltaMode === 1 ? 0.05 : d3Selection.event.deltaMode ? 1 : 0.002);
}

function defaultTouchable() {
  return navigator.maxTouchPoints || ("ontouchstart" in this);
}

function defaultConstrain(transform, extent, translateExtent) {
  var dx0 = transform.invertX(extent[0][0]) - translateExtent[0][0],
      dx1 = transform.invertX(extent[1][0]) - translateExtent[1][0],
      dy0 = transform.invertY(extent[0][1]) - translateExtent[0][1],
      dy1 = transform.invertY(extent[1][1]) - translateExtent[1][1];
  return transform.translate(
    dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1),
    dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1)
  );
}

function zoom() {
  var filter = defaultFilter,
      extent = defaultExtent,
      constrain = defaultConstrain,
      wheelDelta = defaultWheelDelta,
      touchable = defaultTouchable,
      scaleExtent = [0, Infinity],
      translateExtent = [[-Infinity, -Infinity], [Infinity, Infinity]],
      duration = 250,
      interpolate = d3Interpolate.interpolateZoom,
      listeners = d3Dispatch.dispatch("start", "zoom", "end"),
      touchstarting,
      touchending,
      touchDelay = 500,
      wheelDelay = 150,
      clickDistance2 = 0;

  function zoom(selection) {
    selection
        .property("__zoom", defaultTransform)
        .on("wheel.zoom", wheeled)
        .on("mousedown.zoom", mousedowned)
        .on("dblclick.zoom", dblclicked)
      .filter(touchable)
        .on("touchstart.zoom", touchstarted)
        .on("touchmove.zoom", touchmoved)
        .on("touchend.zoom touchcancel.zoom", touchended)
        .style("touch-action", "none")
        .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }

  zoom.transform = function(collection, transform, point) {
    var selection = collection.selection ? collection.selection() : collection;
    selection.property("__zoom", defaultTransform);
    if (collection !== selection) {
      schedule(collection, transform, point);
    } else {
      selection.interrupt().each(function() {
        gesture(this, arguments)
            .start()
            .zoom(null, typeof transform === "function" ? transform.apply(this, arguments) : transform)
            .end();
      });
    }
  };

  zoom.scaleBy = function(selection, k, p) {
    zoom.scaleTo(selection, function() {
      var k0 = this.__zoom.k,
          k1 = typeof k === "function" ? k.apply(this, arguments) : k;
      return k0 * k1;
    }, p);
  };

  zoom.scaleTo = function(selection, k, p) {
    zoom.transform(selection, function() {
      var e = extent.apply(this, arguments),
          t0 = this.__zoom,
          p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p,
          p1 = t0.invert(p0),
          k1 = typeof k === "function" ? k.apply(this, arguments) : k;
      return constrain(translate(scale(t0, k1), p0, p1), e, translateExtent);
    }, p);
  };

  zoom.translateBy = function(selection, x, y) {
    zoom.transform(selection, function() {
      return constrain(this.__zoom.translate(
        typeof x === "function" ? x.apply(this, arguments) : x,
        typeof y === "function" ? y.apply(this, arguments) : y
      ), extent.apply(this, arguments), translateExtent);
    });
  };

  zoom.translateTo = function(selection, x, y, p) {
    zoom.transform(selection, function() {
      var e = extent.apply(this, arguments),
          t = this.__zoom,
          p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p;
      return constrain(identity.translate(p0[0], p0[1]).scale(t.k).translate(
        typeof x === "function" ? -x.apply(this, arguments) : -x,
        typeof y === "function" ? -y.apply(this, arguments) : -y
      ), e, translateExtent);
    }, p);
  };

  function scale(transform, k) {
    k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k));
    return k === transform.k ? transform : new Transform(k, transform.x, transform.y);
  }

  function translate(transform, p0, p1) {
    var x = p0[0] - p1[0] * transform.k, y = p0[1] - p1[1] * transform.k;
    return x === transform.x && y === transform.y ? transform : new Transform(transform.k, x, y);
  }

  function centroid(extent) {
    return [(+extent[0][0] + +extent[1][0]) / 2, (+extent[0][1] + +extent[1][1]) / 2];
  }

  function schedule(transition, transform, point) {
    transition
        .on("start.zoom", function() { gesture(this, arguments).start(); })
        .on("interrupt.zoom end.zoom", function() { gesture(this, arguments).end(); })
        .tween("zoom", function() {
          var that = this,
              args = arguments,
              g = gesture(that, args),
              e = extent.apply(that, args),
              p = point == null ? centroid(e) : typeof point === "function" ? point.apply(that, args) : point,
              w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]),
              a = that.__zoom,
              b = typeof transform === "function" ? transform.apply(that, args) : transform,
              i = interpolate(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));
          return function(t) {
            if (t === 1) t = b; // Avoid rounding error on end.
            else { var l = i(t), k = w / l[2]; t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k); }
            g.zoom(null, t);
          };
        });
  }

  function gesture(that, args, clean) {
    return (!clean && that.__zooming) || new Gesture(that, args);
  }

  function Gesture(that, args) {
    this.that = that;
    this.args = args;
    this.active = 0;
    this.extent = extent.apply(that, args);
    this.taps = 0;
  }

  Gesture.prototype = {
    start: function() {
      if (++this.active === 1) {
        this.that.__zooming = this;
        this.emit("start");
      }
      return this;
    },
    zoom: function(key, transform) {
      if (this.mouse && key !== "mouse") this.mouse[1] = transform.invert(this.mouse[0]);
      if (this.touch0 && key !== "touch") this.touch0[1] = transform.invert(this.touch0[0]);
      if (this.touch1 && key !== "touch") this.touch1[1] = transform.invert(this.touch1[0]);
      this.that.__zoom = transform;
      this.emit("zoom");
      return this;
    },
    end: function() {
      if (--this.active === 0) {
        delete this.that.__zooming;
        this.emit("end");
      }
      return this;
    },
    emit: function(type) {
      d3Selection.customEvent(new ZoomEvent(zoom, type, this.that.__zoom), listeners.apply, listeners, [type, this.that, this.args]);
    }
  };

  function wheeled() {
    if (!filter.apply(this, arguments)) return;
    var g = gesture(this, arguments),
        t = this.__zoom,
        k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t.k * Math.pow(2, wheelDelta.apply(this, arguments)))),
        p = d3Selection.mouse(this);

    // If the mouse is in the same location as before, reuse it.
    // If there were recent wheel events, reset the wheel idle timeout.
    if (g.wheel) {
      if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {
        g.mouse[1] = t.invert(g.mouse[0] = p);
      }
      clearTimeout(g.wheel);
    }

    // If this wheel event won’t trigger a transform change, ignore it.
    else if (t.k === k) return;

    // Otherwise, capture the mouse point and location at the start.
    else {
      g.mouse = [p, t.invert(p)];
      d3Transition.interrupt(this);
      g.start();
    }

    noevent();
    g.wheel = setTimeout(wheelidled, wheelDelay);
    g.zoom("mouse", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent, translateExtent));

    function wheelidled() {
      g.wheel = null;
      g.end();
    }
  }

  function mousedowned() {
    if (touchending || !filter.apply(this, arguments)) return;
    var g = gesture(this, arguments, true),
        v = d3Selection.select(d3Selection.event.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true),
        p = d3Selection.mouse(this),
        x0 = d3Selection.event.clientX,
        y0 = d3Selection.event.clientY;

    d3Drag.dragDisable(d3Selection.event.view);
    nopropagation();
    g.mouse = [p, this.__zoom.invert(p)];
    d3Transition.interrupt(this);
    g.start();

    function mousemoved() {
      noevent();
      if (!g.moved) {
        var dx = d3Selection.event.clientX - x0, dy = d3Selection.event.clientY - y0;
        g.moved = dx * dx + dy * dy > clickDistance2;
      }
      g.zoom("mouse", constrain(translate(g.that.__zoom, g.mouse[0] = d3Selection.mouse(g.that), g.mouse[1]), g.extent, translateExtent));
    }

    function mouseupped() {
      v.on("mousemove.zoom mouseup.zoom", null);
      d3Drag.dragEnable(d3Selection.event.view, g.moved);
      noevent();
      g.end();
    }
  }

  function dblclicked() {
    if (!filter.apply(this, arguments)) return;
    var t0 = this.__zoom,
        p0 = d3Selection.mouse(this),
        p1 = t0.invert(p0),
        k1 = t0.k * (d3Selection.event.shiftKey ? 0.5 : 2),
        t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, arguments), translateExtent);

    noevent();
    if (duration > 0) d3Selection.select(this).transition().duration(duration).call(schedule, t1, p0);
    else d3Selection.select(this).call(zoom.transform, t1);
  }

  function touchstarted() {
    if (!filter.apply(this, arguments)) return;
    var touches = d3Selection.event.touches,
        n = touches.length,
        g = gesture(this, arguments, d3Selection.event.changedTouches.length === n),
        started, i, t, p;

    nopropagation();
    for (i = 0; i < n; ++i) {
      t = touches[i], p = d3Selection.touch(this, touches, t.identifier);
      p = [p, this.__zoom.invert(p), t.identifier];
      if (!g.touch0) g.touch0 = p, started = true, g.taps = 1 + !!touchstarting;
      else if (!g.touch1 && g.touch0[2] !== p[2]) g.touch1 = p, g.taps = 0;
    }

    if (touchstarting) touchstarting = clearTimeout(touchstarting);

    if (started) {
      if (g.taps < 2) touchstarting = setTimeout(function() { touchstarting = null; }, touchDelay);
      d3Transition.interrupt(this);
      g.start();
    }
  }

  function touchmoved() {
    if (!this.__zooming) return;
    var g = gesture(this, arguments),
        touches = d3Selection.event.changedTouches,
        n = touches.length, i, t, p, l;

    noevent();
    if (touchstarting) touchstarting = clearTimeout(touchstarting);
    g.taps = 0;
    for (i = 0; i < n; ++i) {
      t = touches[i], p = d3Selection.touch(this, touches, t.identifier);
      if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p;
      else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p;
    }
    t = g.that.__zoom;
    if (g.touch1) {
      var p0 = g.touch0[0], l0 = g.touch0[1],
          p1 = g.touch1[0], l1 = g.touch1[1],
          dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp,
          dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
      t = scale(t, Math.sqrt(dp / dl));
      p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];
      l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
    }
    else if (g.touch0) p = g.touch0[0], l = g.touch0[1];
    else return;
    g.zoom("touch", constrain(translate(t, p, l), g.extent, translateExtent));
  }

  function touchended() {
    if (!this.__zooming) return;
    var g = gesture(this, arguments),
        touches = d3Selection.event.changedTouches,
        n = touches.length, i, t;

    nopropagation();
    if (touchending) clearTimeout(touchending);
    touchending = setTimeout(function() { touchending = null; }, touchDelay);
    for (i = 0; i < n; ++i) {
      t = touches[i];
      if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0;
      else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1;
    }
    if (g.touch1 && !g.touch0) g.touch0 = g.touch1, delete g.touch1;
    if (g.touch0) g.touch0[1] = this.__zoom.invert(g.touch0[0]);
    else {
      g.end();
      // If this was a dbltap, reroute to the (optional) dblclick.zoom handler.
      if (g.taps === 2) {
        var p = d3Selection.select(this).on("dblclick.zoom");
        if (p) p.apply(this, arguments);
      }
    }
  }

  zoom.wheelDelta = function(_) {
    return arguments.length ? (wheelDelta = typeof _ === "function" ? _ : constant(+_), zoom) : wheelDelta;
  };

  zoom.filter = function(_) {
    return arguments.length ? (filter = typeof _ === "function" ? _ : constant(!!_), zoom) : filter;
  };

  zoom.touchable = function(_) {
    return arguments.length ? (touchable = typeof _ === "function" ? _ : constant(!!_), zoom) : touchable;
  };

  zoom.extent = function(_) {
    return arguments.length ? (extent = typeof _ === "function" ? _ : constant([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;
  };

  zoom.scaleExtent = function(_) {
    return arguments.length ? (scaleExtent[0] = +_[0], scaleExtent[1] = +_[1], zoom) : [scaleExtent[0], scaleExtent[1]];
  };

  zoom.translateExtent = function(_) {
    return arguments.length ? (translateExtent[0][0] = +_[0][0], translateExtent[1][0] = +_[1][0], translateExtent[0][1] = +_[0][1], translateExtent[1][1] = +_[1][1], zoom) : [[translateExtent[0][0], translateExtent[0][1]], [translateExtent[1][0], translateExtent[1][1]]];
  };

  zoom.constrain = function(_) {
    return arguments.length ? (constrain = _, zoom) : constrain;
  };

  zoom.duration = function(_) {
    return arguments.length ? (duration = +_, zoom) : duration;
  };

  zoom.interpolate = function(_) {
    return arguments.length ? (interpolate = _, zoom) : interpolate;
  };

  zoom.on = function() {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? zoom : value;
  };

  zoom.clickDistance = function(_) {
    return arguments.length ? (clickDistance2 = (_ = +_) * _, zoom) : Math.sqrt(clickDistance2);
  };

  return zoom;
}

exports.zoom = zoom;
exports.zoomIdentity = identity;
exports.zoomTransform = transform;

Object.defineProperty(exports, '__esModule', { value: true });

}));

},{"d3-dispatch":14,"d3-drag":15,"d3-interpolate":23,"d3-selection":30,"d3-transition":35}],38:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var d3Array = require('d3-array');
var d3Axis = require('d3-axis');
var d3Brush = require('d3-brush');
var d3Chord = require('d3-chord');
var d3Collection = require('d3-collection');
var d3Color = require('d3-color');
var d3Contour = require('d3-contour');
var d3Dispatch = require('d3-dispatch');
var d3Drag = require('d3-drag');
var d3Dsv = require('d3-dsv');
var d3Ease = require('d3-ease');
var d3Fetch = require('d3-fetch');
var d3Force = require('d3-force');
var d3Format = require('d3-format');
var d3Geo = require('d3-geo');
var d3Hierarchy = require('d3-hierarchy');
var d3Interpolate = require('d3-interpolate');
var d3Path = require('d3-path');
var d3Polygon = require('d3-polygon');
var d3Quadtree = require('d3-quadtree');
var d3Random = require('d3-random');
var d3Scale = require('d3-scale');
var d3ScaleChromatic = require('d3-scale-chromatic');
var d3Selection = require('d3-selection');
var d3Shape = require('d3-shape');
var d3Time = require('d3-time');
var d3TimeFormat = require('d3-time-format');
var d3Timer = require('d3-timer');
var d3Transition = require('d3-transition');
var d3Voronoi = require('d3-voronoi');
var d3Zoom = require('d3-zoom');

var version = "5.10.0";

Object.keys(d3Array).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Array[k];
		}
	});
});
Object.keys(d3Axis).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Axis[k];
		}
	});
});
Object.keys(d3Brush).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Brush[k];
		}
	});
});
Object.keys(d3Chord).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Chord[k];
		}
	});
});
Object.keys(d3Collection).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Collection[k];
		}
	});
});
Object.keys(d3Color).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Color[k];
		}
	});
});
Object.keys(d3Contour).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Contour[k];
		}
	});
});
Object.keys(d3Dispatch).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Dispatch[k];
		}
	});
});
Object.keys(d3Drag).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Drag[k];
		}
	});
});
Object.keys(d3Dsv).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Dsv[k];
		}
	});
});
Object.keys(d3Ease).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Ease[k];
		}
	});
});
Object.keys(d3Fetch).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Fetch[k];
		}
	});
});
Object.keys(d3Force).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Force[k];
		}
	});
});
Object.keys(d3Format).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Format[k];
		}
	});
});
Object.keys(d3Geo).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Geo[k];
		}
	});
});
Object.keys(d3Hierarchy).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Hierarchy[k];
		}
	});
});
Object.keys(d3Interpolate).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Interpolate[k];
		}
	});
});
Object.keys(d3Path).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Path[k];
		}
	});
});
Object.keys(d3Polygon).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Polygon[k];
		}
	});
});
Object.keys(d3Quadtree).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Quadtree[k];
		}
	});
});
Object.keys(d3Random).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Random[k];
		}
	});
});
Object.keys(d3Scale).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Scale[k];
		}
	});
});
Object.keys(d3ScaleChromatic).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3ScaleChromatic[k];
		}
	});
});
Object.keys(d3Selection).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Selection[k];
		}
	});
});
Object.keys(d3Shape).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Shape[k];
		}
	});
});
Object.keys(d3Time).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Time[k];
		}
	});
});
Object.keys(d3TimeFormat).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3TimeFormat[k];
		}
	});
});
Object.keys(d3Timer).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Timer[k];
		}
	});
});
Object.keys(d3Transition).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Transition[k];
		}
	});
});
Object.keys(d3Voronoi).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Voronoi[k];
		}
	});
});
Object.keys(d3Zoom).forEach(function (k) {
	if (k !== 'default') Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () {
			return d3Zoom[k];
		}
	});
});
exports.version = version;

},{"d3-array":7,"d3-axis":8,"d3-brush":9,"d3-chord":10,"d3-collection":11,"d3-color":12,"d3-contour":13,"d3-dispatch":14,"d3-drag":15,"d3-dsv":16,"d3-ease":17,"d3-fetch":18,"d3-force":19,"d3-format":20,"d3-geo":21,"d3-hierarchy":22,"d3-interpolate":23,"d3-path":24,"d3-polygon":25,"d3-quadtree":26,"d3-random":27,"d3-scale":29,"d3-scale-chromatic":28,"d3-selection":30,"d3-shape":31,"d3-time":33,"d3-time-format":32,"d3-timer":34,"d3-transition":35,"d3-voronoi":36,"d3-zoom":37}],39:[function(require,module,exports){
"use strict"

function dupe_array(count, value, i) {
  var c = count[i]|0
  if(c <= 0) {
    return []
  }
  var result = new Array(c), j
  if(i === count.length-1) {
    for(j=0; j<c; ++j) {
      result[j] = value
    }
  } else {
    for(j=0; j<c; ++j) {
      result[j] = dupe_array(count, value, i+1)
    }
  }
  return result
}

function dupe_number(count, value) {
  var result, i
  result = new Array(count)
  for(i=0; i<count; ++i) {
    result[i] = value
  }
  return result
}

function dupe(count, value) {
  if(typeof value === "undefined") {
    value = 0
  }
  switch(typeof count) {
    case "number":
      if(count > 0) {
        return dupe_number(count|0, value)
      }
    break
    case "object":
      if(typeof (count.length) === "number") {
        return dupe_array(count, value, 0)
      }
    break
  }
  return []
}

module.exports = dupe
},{}],40:[function(require,module,exports){
module.exports = require('./lib/heap');

},{"./lib/heap":41}],41:[function(require,module,exports){
// Generated by CoffeeScript 1.8.0
(function() {
  var Heap, defaultCmp, floor, heapify, heappop, heappush, heappushpop, heapreplace, insort, min, nlargest, nsmallest, updateItem, _siftdown, _siftup;

  floor = Math.floor, min = Math.min;


  /*
  Default comparison function to be used
   */

  defaultCmp = function(x, y) {
    if (x < y) {
      return -1;
    }
    if (x > y) {
      return 1;
    }
    return 0;
  };


  /*
  Insert item x in list a, and keep it sorted assuming a is sorted.
  
  If x is already in a, insert it to the right of the rightmost x.
  
  Optional args lo (default 0) and hi (default a.length) bound the slice
  of a to be searched.
   */

  insort = function(a, x, lo, hi, cmp) {
    var mid;
    if (lo == null) {
      lo = 0;
    }
    if (cmp == null) {
      cmp = defaultCmp;
    }
    if (lo < 0) {
      throw new Error('lo must be non-negative');
    }
    if (hi == null) {
      hi = a.length;
    }
    while (lo < hi) {
      mid = floor((lo + hi) / 2);
      if (cmp(x, a[mid]) < 0) {
        hi = mid;
      } else {
        lo = mid + 1;
      }
    }
    return ([].splice.apply(a, [lo, lo - lo].concat(x)), x);
  };


  /*
  Push item onto heap, maintaining the heap invariant.
   */

  heappush = function(array, item, cmp) {
    if (cmp == null) {
      cmp = defaultCmp;
    }
    array.push(item);
    return _siftdown(array, 0, array.length - 1, cmp);
  };


  /*
  Pop the smallest item off the heap, maintaining the heap invariant.
   */

  heappop = function(array, cmp) {
    var lastelt, returnitem;
    if (cmp == null) {
      cmp = defaultCmp;
    }
    lastelt = array.pop();
    if (array.length) {
      returnitem = array[0];
      array[0] = lastelt;
      _siftup(array, 0, cmp);
    } else {
      returnitem = lastelt;
    }
    return returnitem;
  };


  /*
  Pop and return the current smallest value, and add the new item.
  
  This is more efficient than heappop() followed by heappush(), and can be
  more appropriate when using a fixed size heap. Note that the value
  returned may be larger than item! That constrains reasonable use of
  this routine unless written as part of a conditional replacement:
      if item > array[0]
        item = heapreplace(array, item)
   */

  heapreplace = function(array, item, cmp) {
    var returnitem;
    if (cmp == null) {
      cmp = defaultCmp;
    }
    returnitem = array[0];
    array[0] = item;
    _siftup(array, 0, cmp);
    return returnitem;
  };


  /*
  Fast version of a heappush followed by a heappop.
   */

  heappushpop = function(array, item, cmp) {
    var _ref;
    if (cmp == null) {
      cmp = defaultCmp;
    }
    if (array.length && cmp(array[0], item) < 0) {
      _ref = [array[0], item], item = _ref[0], array[0] = _ref[1];
      _siftup(array, 0, cmp);
    }
    return item;
  };


  /*
  Transform list into a heap, in-place, in O(array.length) time.
   */

  heapify = function(array, cmp) {
    var i, _i, _j, _len, _ref, _ref1, _results, _results1;
    if (cmp == null) {
      cmp = defaultCmp;
    }
    _ref1 = (function() {
      _results1 = [];
      for (var _j = 0, _ref = floor(array.length / 2); 0 <= _ref ? _j < _ref : _j > _ref; 0 <= _ref ? _j++ : _j--){ _results1.push(_j); }
      return _results1;
    }).apply(this).reverse();
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      i = _ref1[_i];
      _results.push(_siftup(array, i, cmp));
    }
    return _results;
  };


  /*
  Update the position of the given item in the heap.
  This function should be called every time the item is being modified.
   */

  updateItem = function(array, item, cmp) {
    var pos;
    if (cmp == null) {
      cmp = defaultCmp;
    }
    pos = array.indexOf(item);
    if (pos === -1) {
      return;
    }
    _siftdown(array, 0, pos, cmp);
    return _siftup(array, pos, cmp);
  };


  /*
  Find the n largest elements in a dataset.
   */

  nlargest = function(array, n, cmp) {
    var elem, result, _i, _len, _ref;
    if (cmp == null) {
      cmp = defaultCmp;
    }
    result = array.slice(0, n);
    if (!result.length) {
      return result;
    }
    heapify(result, cmp);
    _ref = array.slice(n);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      elem = _ref[_i];
      heappushpop(result, elem, cmp);
    }
    return result.sort(cmp).reverse();
  };


  /*
  Find the n smallest elements in a dataset.
   */

  nsmallest = function(array, n, cmp) {
    var elem, i, los, result, _i, _j, _len, _ref, _ref1, _results;
    if (cmp == null) {
      cmp = defaultCmp;
    }
    if (n * 10 <= array.length) {
      result = array.slice(0, n).sort(cmp);
      if (!result.length) {
        return result;
      }
      los = result[result.length - 1];
      _ref = array.slice(n);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        elem = _ref[_i];
        if (cmp(elem, los) < 0) {
          insort(result, elem, 0, null, cmp);
          result.pop();
          los = result[result.length - 1];
        }
      }
      return result;
    }
    heapify(array, cmp);
    _results = [];
    for (i = _j = 0, _ref1 = min(n, array.length); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
      _results.push(heappop(array, cmp));
    }
    return _results;
  };

  _siftdown = function(array, startpos, pos, cmp) {
    var newitem, parent, parentpos;
    if (cmp == null) {
      cmp = defaultCmp;
    }
    newitem = array[pos];
    while (pos > startpos) {
      parentpos = (pos - 1) >> 1;
      parent = array[parentpos];
      if (cmp(newitem, parent) < 0) {
        array[pos] = parent;
        pos = parentpos;
        continue;
      }
      break;
    }
    return array[pos] = newitem;
  };

  _siftup = function(array, pos, cmp) {
    var childpos, endpos, newitem, rightpos, startpos;
    if (cmp == null) {
      cmp = defaultCmp;
    }
    endpos = array.length;
    startpos = pos;
    newitem = array[pos];
    childpos = 2 * pos + 1;
    while (childpos < endpos) {
      rightpos = childpos + 1;
      if (rightpos < endpos && !(cmp(array[childpos], array[rightpos]) < 0)) {
        childpos = rightpos;
      }
      array[pos] = array[childpos];
      pos = childpos;
      childpos = 2 * pos + 1;
    }
    array[pos] = newitem;
    return _siftdown(array, startpos, pos, cmp);
  };

  Heap = (function() {
    Heap.push = heappush;

    Heap.pop = heappop;

    Heap.replace = heapreplace;

    Heap.pushpop = heappushpop;

    Heap.heapify = heapify;

    Heap.updateItem = updateItem;

    Heap.nlargest = nlargest;

    Heap.nsmallest = nsmallest;

    function Heap(cmp) {
      this.cmp = cmp != null ? cmp : defaultCmp;
      this.nodes = [];
    }

    Heap.prototype.push = function(x) {
      return heappush(this.nodes, x, this.cmp);
    };

    Heap.prototype.pop = function() {
      return heappop(this.nodes, this.cmp);
    };

    Heap.prototype.peek = function() {
      return this.nodes[0];
    };

    Heap.prototype.contains = function(x) {
      return this.nodes.indexOf(x) !== -1;
    };

    Heap.prototype.replace = function(x) {
      return heapreplace(this.nodes, x, this.cmp);
    };

    Heap.prototype.pushpop = function(x) {
      return heappushpop(this.nodes, x, this.cmp);
    };

    Heap.prototype.heapify = function() {
      return heapify(this.nodes, this.cmp);
    };

    Heap.prototype.updateItem = function(x) {
      return updateItem(this.nodes, x, this.cmp);
    };

    Heap.prototype.clear = function() {
      return this.nodes = [];
    };

    Heap.prototype.empty = function() {
      return this.nodes.length === 0;
    };

    Heap.prototype.size = function() {
      return this.nodes.length;
    };

    Heap.prototype.clone = function() {
      var heap;
      heap = new Heap();
      heap.nodes = this.nodes.slice(0);
      return heap;
    };

    Heap.prototype.toArray = function() {
      return this.nodes.slice(0);
    };

    Heap.prototype.insert = Heap.prototype.push;

    Heap.prototype.top = Heap.prototype.peek;

    Heap.prototype.front = Heap.prototype.peek;

    Heap.prototype.has = Heap.prototype.contains;

    Heap.prototype.copy = Heap.prototype.clone;

    return Heap;

  })();

  (function(root, factory) {
    if (typeof define === 'function' && define.amd) {
      return define([], factory);
    } else if (typeof exports === 'object') {
      return module.exports = factory();
    } else {
      return root.Heap = factory();
    }
  })(this, function() {
    return Heap;
  });

}).call(this);

},{}],42:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],43:[function(require,module,exports){
"use strict"

var bits = require("bit-twiddle")

function rootInorder(n) {
  var ptree = (bits.nextPow2(n+1)>>>1) - 1
  var f     = n - ptree
  if(bits.nextPow2(f)-1 >= ptree) {
    return ptree
  }
  return (ptree>>>1)+f
}
exports.root = rootInorder

function beginInorder(n) {
  return 0
}
exports.begin = beginInorder

function endInorder(n) {
  return n-1
}
exports.end = endInorder


//This is really horrible because n is not necessarily a power of 2
// If it was, we could just do:
//
//    height = bits.countTrailingZeros(~x)
//
// Instead, we just binary search because doing the right thing here is way too complicated.
function heightInorder(n, x) {
  if(n <= 0) {
    return 0
  }
  var r = rootInorder(n)
  if(x > r) {
    return heightInorder(n-r-1, x-r-1)
  } else if(x === r) {
    return bits.log2(n)
  }
  return heightInorder(r, x)
}
exports.height = heightInorder

function prevInorder(n, x) {
  return Math.max(x-1,0)
}
exports.prev = prevInorder

function nextInorder(n, x) {
  return Math.min(x+1,n-1)
}
exports.next = nextInorder


//The version for n = (1<<k)-1:
//
//  parent = (x & ~(1<<(h+1))) + (1<<h)
//
function parentInorder(n, x) {
  if(n <= 0) {
    return -1
  }
  var r = rootInorder(n)
  if(x > r) {
    var q = parentInorder(n-r-1, x-r-1)
    if(q < 0) {
      return r
    } else {
      return q + r + 1
    }
  } else if(x === r) {
    return -1
  }
  var q =  parentInorder(r, x)
  if(q < 0) {
    return r
  }
  return q
}
exports.parent = parentInorder


//Again, we get screwed because n is not a power of two -1.  If it was, we could do:
//
//    left = x - (1 << (h-1) )
//
// Where h is the height of the node
//
function leftInorder(n, x) {
  if(n <= 0) {
    return 0
  }
  var r = rootInorder(n)
  if(x > r) {
    return leftInorder(n-r-1, x-r-1) + r + 1
  } else if(x === r) {
    return rootInorder(x)
  }
  return leftInorder(r, x)

}
exports.left = leftInorder

//for power of two minus one:
//
//    right = x + (1<<(h-1))
//
function rightInorder(n, x) {
  if(n <= 0) {
    return 0
  }
  var r = rootInorder(n)
  if(x > r) {
    return rightInorder(n-r-1, x-r-1) + r + 1
  } else if(x === r) {
    return rootInorder(n-r-1) + r + 1
  }
  return rightInorder(r, x)
}
exports.right = rightInorder


function leafInorder(n, x) {
  return heightInorder(n, x) === 0
}
exports.leaf = leafInorder


function loInorder(n, x) {
  n |= 0
  x |= 0
  var l = 0
  while(n > 1) {
    var r = rootInorder(n)
    if(x > r) {
      l += r + 1
      n -= r + 1
      x -= r + 1
    } else if(x === r) {
      break
    } else {
      n = r
    }
  }
  return l
}
exports.lo = loInorder

function hiInorder(n, x) {
  n |= 0
  x |= 0
  var l = 0
  while(n > 1) {
    var r = rootInorder(n)
    if(x > r) {
      l += r + 1
      n -= r + 1
      x -= r + 1
    } else if(x === r) {
      l += n-1
      break
    } else {
      n = r
    }
  }
  return l
}
exports.hi = hiInorder

},{"bit-twiddle":44}],44:[function(require,module,exports){
arguments[4][2][0].apply(exports,arguments)
},{"dup":2}],45:[function(require,module,exports){
"use strict"

function iota(n) {
  var result = new Array(n)
  for(var i=0; i<n; ++i) {
    result[i] = i
  }
  return result
}

module.exports = iota
},{}],46:[function(require,module,exports){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

},{}],47:[function(require,module,exports){
"use strict"

var compile = require("cwise-compiler")

var EmptyProc = {
  body: "",
  args: [],
  thisVars: [],
  localVars: []
}

function fixup(x) {
  if(!x) {
    return EmptyProc
  }
  for(var i=0; i<x.args.length; ++i) {
    var a = x.args[i]
    if(i === 0) {
      x.args[i] = {name: a, lvalue:true, rvalue: !!x.rvalue, count:x.count||1 }
    } else {
      x.args[i] = {name: a, lvalue:false, rvalue:true, count: 1}
    }
  }
  if(!x.thisVars) {
    x.thisVars = []
  }
  if(!x.localVars) {
    x.localVars = []
  }
  return x
}

function pcompile(user_args) {
  return compile({
    args:     user_args.args,
    pre:      fixup(user_args.pre),
    body:     fixup(user_args.body),
    post:     fixup(user_args.proc),
    funcName: user_args.funcName
  })
}

function makeOp(user_args) {
  var args = []
  for(var i=0; i<user_args.args.length; ++i) {
    args.push("a"+i)
  }
  var wrapper = new Function("P", [
    "return function ", user_args.funcName, "_ndarrayops(", args.join(","), ") {P(", args.join(","), ");return a0}"
  ].join(""))
  return wrapper(pcompile(user_args))
}

var assign_ops = {
  add:  "+",
  sub:  "-",
  mul:  "*",
  div:  "/",
  mod:  "%",
  band: "&",
  bor:  "|",
  bxor: "^",
  lshift: "<<",
  rshift: ">>",
  rrshift: ">>>"
}
;(function(){
  for(var id in assign_ops) {
    var op = assign_ops[id]
    exports[id] = makeOp({
      args: ["array","array","array"],
      body: {args:["a","b","c"],
             body: "a=b"+op+"c"},
      funcName: id
    })
    exports[id+"eq"] = makeOp({
      args: ["array","array"],
      body: {args:["a","b"],
             body:"a"+op+"=b"},
      rvalue: true,
      funcName: id+"eq"
    })
    exports[id+"s"] = makeOp({
      args: ["array", "array", "scalar"],
      body: {args:["a","b","s"],
             body:"a=b"+op+"s"},
      funcName: id+"s"
    })
    exports[id+"seq"] = makeOp({
      args: ["array","scalar"],
      body: {args:["a","s"],
             body:"a"+op+"=s"},
      rvalue: true,
      funcName: id+"seq"
    })
  }
})();

var unary_ops = {
  not: "!",
  bnot: "~",
  neg: "-",
  recip: "1.0/"
}
;(function(){
  for(var id in unary_ops) {
    var op = unary_ops[id]
    exports[id] = makeOp({
      args: ["array", "array"],
      body: {args:["a","b"],
             body:"a="+op+"b"},
      funcName: id
    })
    exports[id+"eq"] = makeOp({
      args: ["array"],
      body: {args:["a"],
             body:"a="+op+"a"},
      rvalue: true,
      count: 2,
      funcName: id+"eq"
    })
  }
})();

var binary_ops = {
  and: "&&",
  or: "||",
  eq: "===",
  neq: "!==",
  lt: "<",
  gt: ">",
  leq: "<=",
  geq: ">="
}
;(function() {
  for(var id in binary_ops) {
    var op = binary_ops[id]
    exports[id] = makeOp({
      args: ["array","array","array"],
      body: {args:["a", "b", "c"],
             body:"a=b"+op+"c"},
      funcName: id
    })
    exports[id+"s"] = makeOp({
      args: ["array","array","scalar"],
      body: {args:["a", "b", "s"],
             body:"a=b"+op+"s"},
      funcName: id+"s"
    })
    exports[id+"eq"] = makeOp({
      args: ["array", "array"],
      body: {args:["a", "b"],
             body:"a=a"+op+"b"},
      rvalue:true,
      count:2,
      funcName: id+"eq"
    })
    exports[id+"seq"] = makeOp({
      args: ["array", "scalar"],
      body: {args:["a","s"],
             body:"a=a"+op+"s"},
      rvalue:true,
      count:2,
      funcName: id+"seq"
    })
  }
})();

var math_unary = [
  "abs",
  "acos",
  "asin",
  "atan",
  "ceil",
  "cos",
  "exp",
  "floor",
  "log",
  "round",
  "sin",
  "sqrt",
  "tan"
]
;(function() {
  for(var i=0; i<math_unary.length; ++i) {
    var f = math_unary[i]
    exports[f] = makeOp({
                    args: ["array", "array"],
                    pre: {args:[], body:"this_f=Math."+f, thisVars:["this_f"]},
                    body: {args:["a","b"], body:"a=this_f(b)", thisVars:["this_f"]},
                    funcName: f
                  })
    exports[f+"eq"] = makeOp({
                      args: ["array"],
                      pre: {args:[], body:"this_f=Math."+f, thisVars:["this_f"]},
                      body: {args: ["a"], body:"a=this_f(a)", thisVars:["this_f"]},
                      rvalue: true,
                      count: 2,
                      funcName: f+"eq"
                    })
  }
})();

var math_comm = [
  "max",
  "min",
  "atan2",
  "pow"
]
;(function(){
  for(var i=0; i<math_comm.length; ++i) {
    var f= math_comm[i]
    exports[f] = makeOp({
                  args:["array", "array", "array"],
                  pre: {args:[], body:"this_f=Math."+f, thisVars:["this_f"]},
                  body: {args:["a","b","c"], body:"a=this_f(b,c)", thisVars:["this_f"]},
                  funcName: f
                })
    exports[f+"s"] = makeOp({
                  args:["array", "array", "scalar"],
                  pre: {args:[], body:"this_f=Math."+f, thisVars:["this_f"]},
                  body: {args:["a","b","c"], body:"a=this_f(b,c)", thisVars:["this_f"]},
                  funcName: f+"s"
                  })
    exports[f+"eq"] = makeOp({ args:["array", "array"],
                  pre: {args:[], body:"this_f=Math."+f, thisVars:["this_f"]},
                  body: {args:["a","b"], body:"a=this_f(a,b)", thisVars:["this_f"]},
                  rvalue: true,
                  count: 2,
                  funcName: f+"eq"
                  })
    exports[f+"seq"] = makeOp({ args:["array", "scalar"],
                  pre: {args:[], body:"this_f=Math."+f, thisVars:["this_f"]},
                  body: {args:["a","b"], body:"a=this_f(a,b)", thisVars:["this_f"]},
                  rvalue:true,
                  count:2,
                  funcName: f+"seq"
                  })
  }
})();

var math_noncomm = [
  "atan2",
  "pow"
]
;(function(){
  for(var i=0; i<math_noncomm.length; ++i) {
    var f= math_noncomm[i]
    exports[f+"op"] = makeOp({
                  args:["array", "array", "array"],
                  pre: {args:[], body:"this_f=Math."+f, thisVars:["this_f"]},
                  body: {args:["a","b","c"], body:"a=this_f(c,b)", thisVars:["this_f"]},
                  funcName: f+"op"
                })
    exports[f+"ops"] = makeOp({
                  args:["array", "array", "scalar"],
                  pre: {args:[], body:"this_f=Math."+f, thisVars:["this_f"]},
                  body: {args:["a","b","c"], body:"a=this_f(c,b)", thisVars:["this_f"]},
                  funcName: f+"ops"
                  })
    exports[f+"opeq"] = makeOp({ args:["array", "array"],
                  pre: {args:[], body:"this_f=Math."+f, thisVars:["this_f"]},
                  body: {args:["a","b"], body:"a=this_f(b,a)", thisVars:["this_f"]},
                  rvalue: true,
                  count: 2,
                  funcName: f+"opeq"
                  })
    exports[f+"opseq"] = makeOp({ args:["array", "scalar"],
                  pre: {args:[], body:"this_f=Math."+f, thisVars:["this_f"]},
                  body: {args:["a","b"], body:"a=this_f(b,a)", thisVars:["this_f"]},
                  rvalue:true,
                  count:2,
                  funcName: f+"opseq"
                  })
  }
})();

exports.any = compile({
  args:["array"],
  pre: EmptyProc,
  body: {args:[{name:"a", lvalue:false, rvalue:true, count:1}], body: "if(a){return true}", localVars: [], thisVars: []},
  post: {args:[], localVars:[], thisVars:[], body:"return false"},
  funcName: "any"
})

exports.all = compile({
  args:["array"],
  pre: EmptyProc,
  body: {args:[{name:"x", lvalue:false, rvalue:true, count:1}], body: "if(!x){return false}", localVars: [], thisVars: []},
  post: {args:[], localVars:[], thisVars:[], body:"return true"},
  funcName: "all"
})

exports.sum = compile({
  args:["array"],
  pre: {args:[], localVars:[], thisVars:["this_s"], body:"this_s=0"},
  body: {args:[{name:"a", lvalue:false, rvalue:true, count:1}], body: "this_s+=a", localVars: [], thisVars: ["this_s"]},
  post: {args:[], localVars:[], thisVars:["this_s"], body:"return this_s"},
  funcName: "sum"
})

exports.prod = compile({
  args:["array"],
  pre: {args:[], localVars:[], thisVars:["this_s"], body:"this_s=1"},
  body: {args:[{name:"a", lvalue:false, rvalue:true, count:1}], body: "this_s*=a", localVars: [], thisVars: ["this_s"]},
  post: {args:[], localVars:[], thisVars:["this_s"], body:"return this_s"},
  funcName: "prod"
})

exports.norm2squared = compile({
  args:["array"],
  pre: {args:[], localVars:[], thisVars:["this_s"], body:"this_s=0"},
  body: {args:[{name:"a", lvalue:false, rvalue:true, count:2}], body: "this_s+=a*a", localVars: [], thisVars: ["this_s"]},
  post: {args:[], localVars:[], thisVars:["this_s"], body:"return this_s"},
  funcName: "norm2squared"
})
  
exports.norm2 = compile({
  args:["array"],
  pre: {args:[], localVars:[], thisVars:["this_s"], body:"this_s=0"},
  body: {args:[{name:"a", lvalue:false, rvalue:true, count:2}], body: "this_s+=a*a", localVars: [], thisVars: ["this_s"]},
  post: {args:[], localVars:[], thisVars:["this_s"], body:"return Math.sqrt(this_s)"},
  funcName: "norm2"
})
  

exports.norminf = compile({
  args:["array"],
  pre: {args:[], localVars:[], thisVars:["this_s"], body:"this_s=0"},
  body: {args:[{name:"a", lvalue:false, rvalue:true, count:4}], body:"if(-a>this_s){this_s=-a}else if(a>this_s){this_s=a}", localVars: [], thisVars: ["this_s"]},
  post: {args:[], localVars:[], thisVars:["this_s"], body:"return this_s"},
  funcName: "norminf"
})

exports.norm1 = compile({
  args:["array"],
  pre: {args:[], localVars:[], thisVars:["this_s"], body:"this_s=0"},
  body: {args:[{name:"a", lvalue:false, rvalue:true, count:3}], body: "this_s+=a<0?-a:a", localVars: [], thisVars: ["this_s"]},
  post: {args:[], localVars:[], thisVars:["this_s"], body:"return this_s"},
  funcName: "norm1"
})

exports.sup = compile({
  args: [ "array" ],
  pre:
   { body: "this_h=-Infinity",
     args: [],
     thisVars: [ "this_h" ],
     localVars: [] },
  body:
   { body: "if(_inline_1_arg0_>this_h)this_h=_inline_1_arg0_",
     args: [{"name":"_inline_1_arg0_","lvalue":false,"rvalue":true,"count":2} ],
     thisVars: [ "this_h" ],
     localVars: [] },
  post:
   { body: "return this_h",
     args: [],
     thisVars: [ "this_h" ],
     localVars: [] }
 })

exports.inf = compile({
  args: [ "array" ],
  pre:
   { body: "this_h=Infinity",
     args: [],
     thisVars: [ "this_h" ],
     localVars: [] },
  body:
   { body: "if(_inline_1_arg0_<this_h)this_h=_inline_1_arg0_",
     args: [{"name":"_inline_1_arg0_","lvalue":false,"rvalue":true,"count":2} ],
     thisVars: [ "this_h" ],
     localVars: [] },
  post:
   { body: "return this_h",
     args: [],
     thisVars: [ "this_h" ],
     localVars: [] }
 })

exports.argmin = compile({
  args:["index","array","shape"],
  pre:{
    body:"{this_v=Infinity;this_i=_inline_0_arg2_.slice(0)}",
    args:[
      {name:"_inline_0_arg0_",lvalue:false,rvalue:false,count:0},
      {name:"_inline_0_arg1_",lvalue:false,rvalue:false,count:0},
      {name:"_inline_0_arg2_",lvalue:false,rvalue:true,count:1}
      ],
    thisVars:["this_i","this_v"],
    localVars:[]},
  body:{
    body:"{if(_inline_1_arg1_<this_v){this_v=_inline_1_arg1_;for(var _inline_1_k=0;_inline_1_k<_inline_1_arg0_.length;++_inline_1_k){this_i[_inline_1_k]=_inline_1_arg0_[_inline_1_k]}}}",
    args:[
      {name:"_inline_1_arg0_",lvalue:false,rvalue:true,count:2},
      {name:"_inline_1_arg1_",lvalue:false,rvalue:true,count:2}],
    thisVars:["this_i","this_v"],
    localVars:["_inline_1_k"]},
  post:{
    body:"{return this_i}",
    args:[],
    thisVars:["this_i"],
    localVars:[]}
})

exports.argmax = compile({
  args:["index","array","shape"],
  pre:{
    body:"{this_v=-Infinity;this_i=_inline_0_arg2_.slice(0)}",
    args:[
      {name:"_inline_0_arg0_",lvalue:false,rvalue:false,count:0},
      {name:"_inline_0_arg1_",lvalue:false,rvalue:false,count:0},
      {name:"_inline_0_arg2_",lvalue:false,rvalue:true,count:1}
      ],
    thisVars:["this_i","this_v"],
    localVars:[]},
  body:{
    body:"{if(_inline_1_arg1_>this_v){this_v=_inline_1_arg1_;for(var _inline_1_k=0;_inline_1_k<_inline_1_arg0_.length;++_inline_1_k){this_i[_inline_1_k]=_inline_1_arg0_[_inline_1_k]}}}",
    args:[
      {name:"_inline_1_arg0_",lvalue:false,rvalue:true,count:2},
      {name:"_inline_1_arg1_",lvalue:false,rvalue:true,count:2}],
    thisVars:["this_i","this_v"],
    localVars:["_inline_1_k"]},
  post:{
    body:"{return this_i}",
    args:[],
    thisVars:["this_i"],
    localVars:[]}
})  

exports.random = makeOp({
  args: ["array"],
  pre: {args:[], body:"this_f=Math.random", thisVars:["this_f"]},
  body: {args: ["a"], body:"a=this_f()", thisVars:["this_f"]},
  funcName: "random"
})

exports.assign = makeOp({
  args:["array", "array"],
  body: {args:["a", "b"], body:"a=b"},
  funcName: "assign" })

exports.assigns = makeOp({
  args:["array", "scalar"],
  body: {args:["a", "b"], body:"a=b"},
  funcName: "assigns" })


exports.equals = compile({
  args:["array", "array"],
  pre: EmptyProc,
  body: {args:[{name:"x", lvalue:false, rvalue:true, count:1},
               {name:"y", lvalue:false, rvalue:true, count:1}], 
        body: "if(x!==y){return false}", 
        localVars: [], 
        thisVars: []},
  post: {args:[], localVars:[], thisVars:[], body:"return true"},
  funcName: "equals"
})



},{"cwise-compiler":4}],48:[function(require,module,exports){
"use strict"

var ndarray = require("ndarray")
var do_convert = require("./doConvert.js")

module.exports = function convert(arr, result) {
  var shape = [], c = arr, sz = 1
  while(Array.isArray(c)) {
    shape.push(c.length)
    sz *= c.length
    c = c[0]
  }
  if(shape.length === 0) {
    return ndarray()
  }
  if(!result) {
    result = ndarray(new Float64Array(sz), shape)
  }
  do_convert(result, arr)
  return result
}

},{"./doConvert.js":49,"ndarray":52}],49:[function(require,module,exports){
module.exports=require('cwise-compiler')({"args":["array","scalar","index"],"pre":{"body":"{}","args":[],"thisVars":[],"localVars":[]},"body":{"body":"{\nvar _inline_1_v=_inline_1_arg1_,_inline_1_i\nfor(_inline_1_i=0;_inline_1_i<_inline_1_arg2_.length-1;++_inline_1_i) {\n_inline_1_v=_inline_1_v[_inline_1_arg2_[_inline_1_i]]\n}\n_inline_1_arg0_=_inline_1_v[_inline_1_arg2_[_inline_1_arg2_.length-1]]\n}","args":[{"name":"_inline_1_arg0_","lvalue":true,"rvalue":false,"count":1},{"name":"_inline_1_arg1_","lvalue":false,"rvalue":true,"count":1},{"name":"_inline_1_arg2_","lvalue":false,"rvalue":true,"count":4}],"thisVars":[],"localVars":["_inline_1_i","_inline_1_v"]},"post":{"body":"{}","args":[],"thisVars":[],"localVars":[]},"funcName":"convert","blockSize":64})

},{"cwise-compiler":4}],50:[function(require,module,exports){
"use strict"

var ndarray = require("ndarray")
var ops = require("ndarray-ops")
var pool = require("typedarray-pool")

function clone(array) {
  var dtype = array.dtype
  if(dtype === "generic" || dtype === "array") {
    dtype = "double"
  }
  var data = pool.malloc(array.size, dtype)
  var result = ndarray(data, array.shape)
  ops.assign(result, array)
  return result
}
exports.clone = clone

function malloc(shape, dtype) {
  if(!dtype) {
    dtype = "double"
  }
  var sz = 1
  var stride = new Array(shape.length)
  for(var i=shape.length-1; i>=0; --i) {
    stride[i] = sz
    sz *= shape[i]
  }
  return ndarray(pool.malloc(sz, dtype), shape, stride, 0)
}
exports.malloc = malloc

function free(array) {
  if(array.dtype === "generic" || array.dtype === "array") {
    return
  }
  pool.free(array.data)
}
exports.free = free

function zeros(shape, dtype) {
  if(!dtype) {
    dtype = "double"
  }

  var sz = 1
  var stride = new Array(shape.length)
  for(var i=shape.length-1; i>=0; --i) {
    stride[i] = sz
    sz *= shape[i]
  }
  var buf = pool.malloc(sz, dtype)
  for(var i=0; i<sz; ++i) {
    buf[i] = 0
  }
  return ndarray(buf, shape, stride, 0)
}
exports.zeros = zeros

function ones(shape, dtype) {
  if(!dtype) {
    dtype = "double"
  }

  var sz = 1
  var stride = new Array(shape.length)
  for(var i=shape.length-1; i>=0; --i) {
    stride[i] = sz
    sz *= shape[i]
  }
  var buf = pool.malloc(sz, dtype)
  for(var i=0; i<sz; ++i) {
    buf[i] = 1
  }
  return ndarray(buf, shape, stride, 0)
}
exports.ones = ones

function eye(shape, dtype) {
  var i, offset
  if(!dtype) {
    dtype = "double"
  }

  var sz = 1
  var stride = new Array(shape.length)
  for(i=shape.length-1; i>=0; --i) {
    stride[i] = sz
    sz *= shape[i]
  }
  var buf = pool.malloc(sz, dtype)
  for(i=0; i<sz; ++i) {
    buf[i] = 0
  }
  var mindim = Infinity
  var offsum = 0
  for( i=shape.length-1; i>=0; i--) {
    offsum += stride[i]
    mindim = Math.min(mindim,shape[i])
  }
  for(i=0,offset=0; i<mindim; i++,offset+=offsum) {
    buf[offset] = 1
  }
  return ndarray(buf, shape, stride, 0)
}
exports.eye = eye

},{"ndarray":52,"ndarray-ops":47,"typedarray-pool":61}],51:[function(require,module,exports){
"use strict"

module.exports = ndSelect
module.exports.compile = lookupCache

//Macros
var ARRAY = "a"
var RANK = "K"
var CMP = "C"
var DATA = "d"
var OFFSET = "o"
var RND = "R"
var TMP = "T"
var LO = "L"
var HI = "H"
var PIVOT = "X"
function SHAPE(i) {
  return "s" + i
}
function STRIDE(i) {
  return "t" + i
}
function STEP(i) {
  return "u" + i
}
function STEP_CMP(i) {
  return "v" + i
}
function INDEX(i) {
  return "i" + i
}
function PICK(i) {
  return "p" + i
}
function PTR(i) {
  return "x" + i
}

//Create new order where index 0 is slowest index
function permuteOrder(order) {
  var norder = order.slice()
  norder.splice(order.indexOf(0), 1)
  norder.unshift(0)
  return norder
}

//Generate quick select procedure
function compileQuickSelect(order, useCompare, dtype) {
  order = permuteOrder(order)

  var dimension = order.length
  var useGetter = (dtype === "generic")
  var funcName = "ndSelect" + dtype + order.join("_") + "_" + (useCompare ? "cmp" : "lex")

  var code = []

  //Get arguments for code
  var args = [ARRAY, RANK]
  if(useCompare) {
    args.push(CMP)
  }

  //Unpack ndarray variables
  var vars = [
    DATA + "=" + ARRAY + ".data",
    OFFSET + "=" + ARRAY + ".offset|0",
    RND + "=Math.random",
    TMP]
  for(var i=0; i<2; ++i) {
    vars.push(PTR(i) + "=0")
  }
  for(var i=0; i<dimension; ++i) {
    vars.push(
      SHAPE(i) + "=" + ARRAY + ".shape[" + i + "]|0",
      STRIDE(i) + "=" + ARRAY + ".stride[" + i + "]|0",
      INDEX(i) + "=0")
  }
  for(var i=1; i<dimension; ++i) {
    if(i > 1) {
      vars.push(STEP_CMP(i) + "=(" + STRIDE(i) + "-" + SHAPE(i-1) + "*" + STRIDE(i-1) + ")|0",
                STEP(order[i]) + "=(" + STRIDE(order[i]) + "-" + SHAPE(order[i-1]) + "*" + STRIDE(order[i-1]) + ")|0")
    } else {
      vars.push(STEP_CMP(i) + "=" + STRIDE(i),
                STEP(order[i]) + "=" + STRIDE(order[i]))
    }
  }
  if(useCompare) {
    for(var i=0; i<2; ++i) {
      vars.push(PICK(i) + "=" + ARRAY + ".pick(0)")
    }
  }
  vars.push(
    PIVOT + "=0",
    LO + "=0",
    HI + "=" + SHAPE(order[0]) + "-1")

  function compare(out, i0, i1) {
    if(useCompare) {
      code.push(
        PICK(0), ".offset=", OFFSET, "+", STRIDE(order[0]), "*(", i0, ");",
        PICK(1), ".offset=", OFFSET, "+", STRIDE(order[0]), "*(", i1, ");",
        out, "=", CMP, "(", PICK(0), ",", PICK(1), ");")
    } else {
      code.push(
        PTR(0), "=", OFFSET, "+", STRIDE(0), "*(", i0, ");",
        PTR(1), "=", OFFSET, "+", STRIDE(0), "*(", i1, ");")
      if(dimension > 1) {
        code.push("_cmp:")
      }
      for(var i=dimension-1; i>0; --i) {
        code.push("for(", INDEX(i), "=0;", 
          INDEX(i), "<", SHAPE(i), ";",
          INDEX(i), "++){")
      }
      if(useGetter) {
        code.push(out, "=", DATA, ".get(", PTR(0), ")-", 
                            DATA, ".get(", PTR(1), ");")
      } else {
        code.push(out, "=", DATA, "[", PTR(0), "]-", 
                            DATA, "[", PTR(1), "];")
      }
      if(dimension > 1) {
        code.push("if(", out, ")break _cmp;")
      }
      for(var i=1; i<dimension; ++i) {
        code.push(
          PTR(0), "+=", STEP_CMP(i), ";",
          PTR(1), "+=", STEP_CMP(i),
          "}")
      }
    }
  }

  function swap(i0, i1) {
    code.push(
      PTR(0), "=", OFFSET, "+", STRIDE(order[0]), "*(", i0, ");",
      PTR(1), "=", OFFSET, "+", STRIDE(order[0]), "*(", i1, ");")
    for(var i=dimension-1; i>0; --i) {
      code.push("for(", INDEX(order[i]), "=0;", 
        INDEX(order[i]), "<", SHAPE(order[i]), ";",
        INDEX(order[i]), "++){")
    }
    if(useGetter) {
      code.push(TMP, "=", DATA, ".get(", PTR(0), ");", 
                DATA, ".set(", PTR(0), ",", DATA, ".get(", PTR(1), "));",
                DATA, ".set(", PTR(1), ",", TMP, ");")
    } else {
      code.push(TMP, "=", DATA, "[", PTR(0), "];", 
                DATA, "[", PTR(0), "]=", DATA, "[", PTR(1), "];",
                DATA, "[", PTR(1), "]=", TMP, ";")
    }
    for(var i=1; i<dimension; ++i) {
      code.push(
        PTR(0), "+=", STEP(order[i]), ";",
        PTR(1), "+=", STEP(order[i]),
        "}")
    }
  }

  code.push(
    "while(", LO, "<", HI, "){",
      PIVOT, "=(", RND, "()*(", HI, "-", LO, "+1)+", LO, ")|0;")

  //Partition array by pivot
  swap(PIVOT, HI) // Store pivot temporarily at the end of the array

  code.push(
    PIVOT, "=", LO, ";", // PIVOT will now be used to keep track of the end of the interval of elements less than the pivot
    "for(", INDEX(0), "=", LO, ";",
      INDEX(0), "<", HI, ";",
      INDEX(0), "++){") // Loop over other elements (unequal to the pivot), note that HI now points to the pivot
  compare(TMP, INDEX(0), HI) // Lexicographical compare of element with pivot
  code.push("if(", TMP, "<0){")
  swap(PIVOT, INDEX(0)) // Swap current element with element at index PIVOT if it is less than the pivot
  code.push(PIVOT, "++;")
  code.push("}}")
  swap(PIVOT, HI) // Store pivot right after all elements that are less than the pivot (implying that all elements >= the pivot are behind the pivot)

  //Check pivot bounds
  code.push(
    "if(", PIVOT, "===", RANK, "){",
      LO, "=", PIVOT, ";",
      "break;",
    "}else if(", RANK, "<", PIVOT, "){",
      HI, "=", PIVOT, "-1;",
    "}else{",
      LO, "=", PIVOT, "+1;",
    "}",
  "}")

  if(useCompare) {
    code.push(PICK(0), ".offset=", OFFSET, "+", LO, "*", STRIDE(0), ";",
      "return ", PICK(0), ";")
  } else {
    code.push("return ", ARRAY, ".pick(", LO, ");")
  }

  //Compile and link js together
  var procCode = [
    "'use strict';function ", funcName, "(", args, "){",
      "var ", vars.join(), ";",
      code.join(""),
    "};return ", funcName
  ].join("")

  var proc = new Function(procCode)
  return proc()
}

var CACHE = {}

function lookupCache(order, useCompare, dtype) {
  var typesig = order.join() + useCompare + dtype
  var proc = CACHE[typesig]
  if(proc) {
    return proc
  }
  return CACHE[typesig] = compileQuickSelect(order, useCompare, dtype)
}

function ndSelect(array, k, compare) {
  k |= 0
  if((array.dimension === 0) || 
    (array.shape[0] <= k) ||
    (k < 0)) {
    return null
  }
  var useCompare = !!compare
  var proc = lookupCache(array.order, useCompare, array.dtype)
  if(useCompare) {
    return proc(array, k, compare)
  } else {
    return proc(array, k)
  }
}
},{}],52:[function(require,module,exports){
var iota = require("iota-array")
var isBuffer = require("is-buffer")

var hasTypedArrays  = ((typeof Float64Array) !== "undefined")

function compare1st(a, b) {
  return a[0] - b[0]
}

function order() {
  var stride = this.stride
  var terms = new Array(stride.length)
  var i
  for(i=0; i<terms.length; ++i) {
    terms[i] = [Math.abs(stride[i]), i]
  }
  terms.sort(compare1st)
  var result = new Array(terms.length)
  for(i=0; i<result.length; ++i) {
    result[i] = terms[i][1]
  }
  return result
}

function compileConstructor(dtype, dimension) {
  var className = ["View", dimension, "d", dtype].join("")
  if(dimension < 0) {
    className = "View_Nil" + dtype
  }
  var useGetters = (dtype === "generic")

  if(dimension === -1) {
    //Special case for trivial arrays
    var code =
      "function "+className+"(a){this.data=a;};\
var proto="+className+".prototype;\
proto.dtype='"+dtype+"';\
proto.index=function(){return -1};\
proto.size=0;\
proto.dimension=-1;\
proto.shape=proto.stride=proto.order=[];\
proto.lo=proto.hi=proto.transpose=proto.step=\
function(){return new "+className+"(this.data);};\
proto.get=proto.set=function(){};\
proto.pick=function(){return null};\
return function construct_"+className+"(a){return new "+className+"(a);}"
    var procedure = new Function(code)
    return procedure()
  } else if(dimension === 0) {
    //Special case for 0d arrays
    var code =
      "function "+className+"(a,d) {\
this.data = a;\
this.offset = d\
};\
var proto="+className+".prototype;\
proto.dtype='"+dtype+"';\
proto.index=function(){return this.offset};\
proto.dimension=0;\
proto.size=1;\
proto.shape=\
proto.stride=\
proto.order=[];\
proto.lo=\
proto.hi=\
proto.transpose=\
proto.step=function "+className+"_copy() {\
return new "+className+"(this.data,this.offset)\
};\
proto.pick=function "+className+"_pick(){\
return TrivialArray(this.data);\
};\
proto.valueOf=proto.get=function "+className+"_get(){\
return "+(useGetters ? "this.data.get(this.offset)" : "this.data[this.offset]")+
"};\
proto.set=function "+className+"_set(v){\
return "+(useGetters ? "this.data.set(this.offset,v)" : "this.data[this.offset]=v")+"\
};\
return function construct_"+className+"(a,b,c,d){return new "+className+"(a,d)}"
    var procedure = new Function("TrivialArray", code)
    return procedure(CACHED_CONSTRUCTORS[dtype][0])
  }

  var code = ["'use strict'"]

  //Create constructor for view
  var indices = iota(dimension)
  var args = indices.map(function(i) { return "i"+i })
  var index_str = "this.offset+" + indices.map(function(i) {
        return "this.stride[" + i + "]*i" + i
      }).join("+")
  var shapeArg = indices.map(function(i) {
      return "b"+i
    }).join(",")
  var strideArg = indices.map(function(i) {
      return "c"+i
    }).join(",")
  code.push(
    "function "+className+"(a," + shapeArg + "," + strideArg + ",d){this.data=a",
      "this.shape=[" + shapeArg + "]",
      "this.stride=[" + strideArg + "]",
      "this.offset=d|0}",
    "var proto="+className+".prototype",
    "proto.dtype='"+dtype+"'",
    "proto.dimension="+dimension)

  //view.size:
  code.push("Object.defineProperty(proto,'size',{get:function "+className+"_size(){\
return "+indices.map(function(i) { return "this.shape["+i+"]" }).join("*"),
"}})")

  //view.order:
  if(dimension === 1) {
    code.push("proto.order=[0]")
  } else {
    code.push("Object.defineProperty(proto,'order',{get:")
    if(dimension < 4) {
      code.push("function "+className+"_order(){")
      if(dimension === 2) {
        code.push("return (Math.abs(this.stride[0])>Math.abs(this.stride[1]))?[1,0]:[0,1]}})")
      } else if(dimension === 3) {
        code.push(
"var s0=Math.abs(this.stride[0]),s1=Math.abs(this.stride[1]),s2=Math.abs(this.stride[2]);\
if(s0>s1){\
if(s1>s2){\
return [2,1,0];\
}else if(s0>s2){\
return [1,2,0];\
}else{\
return [1,0,2];\
}\
}else if(s0>s2){\
return [2,0,1];\
}else if(s2>s1){\
return [0,1,2];\
}else{\
return [0,2,1];\
}}})")
      }
    } else {
      code.push("ORDER})")
    }
  }

  //view.set(i0, ..., v):
  code.push(
"proto.set=function "+className+"_set("+args.join(",")+",v){")
  if(useGetters) {
    code.push("return this.data.set("+index_str+",v)}")
  } else {
    code.push("return this.data["+index_str+"]=v}")
  }

  //view.get(i0, ...):
  code.push("proto.get=function "+className+"_get("+args.join(",")+"){")
  if(useGetters) {
    code.push("return this.data.get("+index_str+")}")
  } else {
    code.push("return this.data["+index_str+"]}")
  }

  //view.index:
  code.push(
    "proto.index=function "+className+"_index(", args.join(), "){return "+index_str+"}")

  //view.hi():
  code.push("proto.hi=function "+className+"_hi("+args.join(",")+"){return new "+className+"(this.data,"+
    indices.map(function(i) {
      return ["(typeof i",i,"!=='number'||i",i,"<0)?this.shape[", i, "]:i", i,"|0"].join("")
    }).join(",")+","+
    indices.map(function(i) {
      return "this.stride["+i + "]"
    }).join(",")+",this.offset)}")

  //view.lo():
  var a_vars = indices.map(function(i) { return "a"+i+"=this.shape["+i+"]" })
  var c_vars = indices.map(function(i) { return "c"+i+"=this.stride["+i+"]" })
  code.push("proto.lo=function "+className+"_lo("+args.join(",")+"){var b=this.offset,d=0,"+a_vars.join(",")+","+c_vars.join(","))
  for(var i=0; i<dimension; ++i) {
    code.push(
"if(typeof i"+i+"==='number'&&i"+i+">=0){\
d=i"+i+"|0;\
b+=c"+i+"*d;\
a"+i+"-=d}")
  }
  code.push("return new "+className+"(this.data,"+
    indices.map(function(i) {
      return "a"+i
    }).join(",")+","+
    indices.map(function(i) {
      return "c"+i
    }).join(",")+",b)}")

  //view.step():
  code.push("proto.step=function "+className+"_step("+args.join(",")+"){var "+
    indices.map(function(i) {
      return "a"+i+"=this.shape["+i+"]"
    }).join(",")+","+
    indices.map(function(i) {
      return "b"+i+"=this.stride["+i+"]"
    }).join(",")+",c=this.offset,d=0,ceil=Math.ceil")
  for(var i=0; i<dimension; ++i) {
    code.push(
"if(typeof i"+i+"==='number'){\
d=i"+i+"|0;\
if(d<0){\
c+=b"+i+"*(a"+i+"-1);\
a"+i+"=ceil(-a"+i+"/d)\
}else{\
a"+i+"=ceil(a"+i+"/d)\
}\
b"+i+"*=d\
}")
  }
  code.push("return new "+className+"(this.data,"+
    indices.map(function(i) {
      return "a" + i
    }).join(",")+","+
    indices.map(function(i) {
      return "b" + i
    }).join(",")+",c)}")

  //view.transpose():
  var tShape = new Array(dimension)
  var tStride = new Array(dimension)
  for(var i=0; i<dimension; ++i) {
    tShape[i] = "a[i"+i+"]"
    tStride[i] = "b[i"+i+"]"
  }
  code.push("proto.transpose=function "+className+"_transpose("+args+"){"+
    args.map(function(n,idx) { return n + "=(" + n + "===undefined?" + idx + ":" + n + "|0)"}).join(";"),
    "var a=this.shape,b=this.stride;return new "+className+"(this.data,"+tShape.join(",")+","+tStride.join(",")+",this.offset)}")

  //view.pick():
  code.push("proto.pick=function "+className+"_pick("+args+"){var a=[],b=[],c=this.offset")
  for(var i=0; i<dimension; ++i) {
    code.push("if(typeof i"+i+"==='number'&&i"+i+">=0){c=(c+this.stride["+i+"]*i"+i+")|0}else{a.push(this.shape["+i+"]);b.push(this.stride["+i+"])}")
  }
  code.push("var ctor=CTOR_LIST[a.length+1];return ctor(this.data,a,b,c)}")

  //Add return statement
  code.push("return function construct_"+className+"(data,shape,stride,offset){return new "+className+"(data,"+
    indices.map(function(i) {
      return "shape["+i+"]"
    }).join(",")+","+
    indices.map(function(i) {
      return "stride["+i+"]"
    }).join(",")+",offset)}")

  //Compile procedure
  var procedure = new Function("CTOR_LIST", "ORDER", code.join("\n"))
  return procedure(CACHED_CONSTRUCTORS[dtype], order)
}

function arrayDType(data) {
  if(isBuffer(data)) {
    return "buffer"
  }
  if(hasTypedArrays) {
    switch(Object.prototype.toString.call(data)) {
      case "[object Float64Array]":
        return "float64"
      case "[object Float32Array]":
        return "float32"
      case "[object Int8Array]":
        return "int8"
      case "[object Int16Array]":
        return "int16"
      case "[object Int32Array]":
        return "int32"
      case "[object Uint8Array]":
        return "uint8"
      case "[object Uint16Array]":
        return "uint16"
      case "[object Uint32Array]":
        return "uint32"
      case "[object Uint8ClampedArray]":
        return "uint8_clamped"
    }
  }
  if(Array.isArray(data)) {
    return "array"
  }
  return "generic"
}

var CACHED_CONSTRUCTORS = {
  "float32":[],
  "float64":[],
  "int8":[],
  "int16":[],
  "int32":[],
  "uint8":[],
  "uint16":[],
  "uint32":[],
  "array":[],
  "uint8_clamped":[],
  "buffer":[],
  "generic":[]
}

;(function() {
  for(var id in CACHED_CONSTRUCTORS) {
    CACHED_CONSTRUCTORS[id].push(compileConstructor(id, -1))
  }
});

function wrappedNDArrayCtor(data, shape, stride, offset) {
  if(data === undefined) {
    var ctor = CACHED_CONSTRUCTORS.array[0]
    return ctor([])
  } else if(typeof data === "number") {
    data = [data]
  }
  if(shape === undefined) {
    shape = [ data.length ]
  }
  var d = shape.length
  if(stride === undefined) {
    stride = new Array(d)
    for(var i=d-1, sz=1; i>=0; --i) {
      stride[i] = sz
      sz *= shape[i]
    }
  }
  if(offset === undefined) {
    offset = 0
    for(var i=0; i<d; ++i) {
      if(stride[i] < 0) {
        offset -= (shape[i]-1)*stride[i]
      }
    }
  }
  var dtype = arrayDType(data)
  var ctor_list = CACHED_CONSTRUCTORS[dtype]
  while(ctor_list.length <= d+1) {
    ctor_list.push(compileConstructor(dtype, ctor_list.length-1))
  }
  var ctor = ctor_list[d+1]
  return ctor(data, shape, stride, offset)
}

module.exports = wrappedNDArrayCtor

},{"iota-array":45,"is-buffer":46}],53:[function(require,module,exports){
(function (global){
"use strict";

var numeric = (typeof exports === "undefined")?(function numeric() {}):(exports);
if(typeof global !== "undefined") { global.numeric = numeric; }

numeric.version = "1.2.6";

// 1. Utility functions
numeric.bench = function bench (f,interval) {
    var t1,t2,n,i;
    if(typeof interval === "undefined") { interval = 15; }
    n = 0.5;
    t1 = new Date();
    while(1) {
        n*=2;
        for(i=n;i>3;i-=4) { f(); f(); f(); f(); }
        while(i>0) { f(); i--; }
        t2 = new Date();
        if(t2-t1 > interval) break;
    }
    for(i=n;i>3;i-=4) { f(); f(); f(); f(); }
    while(i>0) { f(); i--; }
    t2 = new Date();
    return 1000*(3*n-1)/(t2-t1);
}

numeric._myIndexOf = (function _myIndexOf(w) {
    var n = this.length,k;
    for(k=0;k<n;++k) if(this[k]===w) return k;
    return -1;
});
numeric.myIndexOf = (Array.prototype.indexOf)?Array.prototype.indexOf:numeric._myIndexOf;

numeric.Function = Function;
numeric.precision = 4;
numeric.largeArray = 50;

numeric.prettyPrint = function prettyPrint(x) {
    function fmtnum(x) {
        if(x === 0) { return '0'; }
        if(isNaN(x)) { return 'NaN'; }
        if(x<0) { return '-'+fmtnum(-x); }
        if(isFinite(x)) {
            var scale = Math.floor(Math.log(x) / Math.log(10));
            var normalized = x / Math.pow(10,scale);
            var basic = normalized.toPrecision(numeric.precision);
            if(parseFloat(basic) === 10) { scale++; normalized = 1; basic = normalized.toPrecision(numeric.precision); }
            return parseFloat(basic).toString()+'e'+scale.toString();
        }
        return 'Infinity';
    }
    var ret = [];
    function foo(x) {
        var k;
        if(typeof x === "undefined") { ret.push(Array(numeric.precision+8).join(' ')); return false; }
        if(typeof x === "string") { ret.push('"'+x+'"'); return false; }
        if(typeof x === "boolean") { ret.push(x.toString()); return false; }
        if(typeof x === "number") {
            var a = fmtnum(x);
            var b = x.toPrecision(numeric.precision);
            var c = parseFloat(x.toString()).toString();
            var d = [a,b,c,parseFloat(b).toString(),parseFloat(c).toString()];
            for(k=1;k<d.length;k++) { if(d[k].length < a.length) a = d[k]; }
            ret.push(Array(numeric.precision+8-a.length).join(' ')+a);
            return false;
        }
        if(x === null) { ret.push("null"); return false; }
        if(typeof x === "function") { 
            ret.push(x.toString());
            var flag = false;
            for(k in x) { if(x.hasOwnProperty(k)) { 
                if(flag) ret.push(',\n');
                else ret.push('\n{');
                flag = true; 
                ret.push(k); 
                ret.push(': \n'); 
                foo(x[k]); 
            } }
            if(flag) ret.push('}\n');
            return true;
        }
        if(x instanceof Array) {
            if(x.length > numeric.largeArray) { ret.push('...Large Array...'); return true; }
            var flag = false;
            ret.push('[');
            for(k=0;k<x.length;k++) { if(k>0) { ret.push(','); if(flag) ret.push('\n '); } flag = foo(x[k]); }
            ret.push(']');
            return true;
        }
        ret.push('{');
        var flag = false;
        for(k in x) { if(x.hasOwnProperty(k)) { if(flag) ret.push(',\n'); flag = true; ret.push(k); ret.push(': \n'); foo(x[k]); } }
        ret.push('}');
        return true;
    }
    foo(x);
    return ret.join('');
}

numeric.parseDate = function parseDate(d) {
    function foo(d) {
        if(typeof d === 'string') { return Date.parse(d.replace(/-/g,'/')); }
        if(!(d instanceof Array)) { throw new Error("parseDate: parameter must be arrays of strings"); }
        var ret = [],k;
        for(k=0;k<d.length;k++) { ret[k] = foo(d[k]); }
        return ret;
    }
    return foo(d);
}

numeric.parseFloat = function parseFloat_(d) {
    function foo(d) {
        if(typeof d === 'string') { return parseFloat(d); }
        if(!(d instanceof Array)) { throw new Error("parseFloat: parameter must be arrays of strings"); }
        var ret = [],k;
        for(k=0;k<d.length;k++) { ret[k] = foo(d[k]); }
        return ret;
    }
    return foo(d);
}

numeric.parseCSV = function parseCSV(t) {
    var foo = t.split('\n');
    var j,k;
    var ret = [];
    var pat = /(([^'",]*)|('[^']*')|("[^"]*")),/g;
    var patnum = /^\s*(([+-]?[0-9]+(\.[0-9]*)?(e[+-]?[0-9]+)?)|([+-]?[0-9]*(\.[0-9]+)?(e[+-]?[0-9]+)?))\s*$/;
    var stripper = function(n) { return n.substr(0,n.length-1); }
    var count = 0;
    for(k=0;k<foo.length;k++) {
      var bar = (foo[k]+",").match(pat),baz;
      if(bar.length>0) {
          ret[count] = [];
          for(j=0;j<bar.length;j++) {
              baz = stripper(bar[j]);
              if(patnum.test(baz)) { ret[count][j] = parseFloat(baz); }
              else ret[count][j] = baz;
          }
          count++;
      }
    }
    return ret;
}

numeric.toCSV = function toCSV(A) {
    var s = numeric.dim(A);
    var i,j,m,n,row,ret;
    m = s[0];
    n = s[1];
    ret = [];
    for(i=0;i<m;i++) {
        row = [];
        for(j=0;j<m;j++) { row[j] = A[i][j].toString(); }
        ret[i] = row.join(', ');
    }
    return ret.join('\n')+'\n';
}

numeric.getURL = function getURL(url) {
    var client = new XMLHttpRequest();
    client.open("GET",url,false);
    client.send();
    return client;
}

numeric.imageURL = function imageURL(img) {
    function base64(A) {
        var n = A.length, i,x,y,z,p,q,r,s;
        var key = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
        var ret = "";
        for(i=0;i<n;i+=3) {
            x = A[i];
            y = A[i+1];
            z = A[i+2];
            p = x >> 2;
            q = ((x & 3) << 4) + (y >> 4);
            r = ((y & 15) << 2) + (z >> 6);
            s = z & 63;
            if(i+1>=n) { r = s = 64; }
            else if(i+2>=n) { s = 64; }
            ret += key.charAt(p) + key.charAt(q) + key.charAt(r) + key.charAt(s);
            }
        return ret;
    }
    function crc32Array (a,from,to) {
        if(typeof from === "undefined") { from = 0; }
        if(typeof to === "undefined") { to = a.length; }
        var table = [0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3,
                     0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988, 0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91, 
                     0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE, 0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7,
                     0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC, 0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5, 
                     0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172, 0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B, 
                     0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940, 0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59, 
                     0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116, 0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F,
                     0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924, 0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D,
                     0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A, 0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433,
                     0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818, 0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01, 
                     0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E, 0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457, 
                     0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65, 
                     0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2, 0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB, 
                     0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0, 0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9, 
                     0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086, 0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F, 
                     0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD, 
                     0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A, 0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683, 
                     0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8, 0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1, 
                     0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE, 0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7, 
                     0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC, 0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5, 
                     0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B, 
                     0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60, 0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79, 
                     0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236, 0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F, 
                     0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D, 
                     0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A, 0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713, 
                     0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38, 0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21, 
                     0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777, 
                     0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C, 0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45, 
                     0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2, 0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB, 
                     0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9, 
                     0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF, 
                     0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94, 0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D];
     
        var crc = -1, y = 0, n = a.length,i;

        for (i = from; i < to; i++) {
            y = (crc ^ a[i]) & 0xFF;
            crc = (crc >>> 8) ^ table[y];
        }
     
        return crc ^ (-1);
    }

    var h = img[0].length, w = img[0][0].length, s1, s2, next,k,length,a,b,i,j,adler32,crc32;
    var stream = [
                  137, 80, 78, 71, 13, 10, 26, 10,                           //  0: PNG signature
                  0,0,0,13,                                                  //  8: IHDR Chunk length
                  73, 72, 68, 82,                                            // 12: "IHDR" 
                  (w >> 24) & 255, (w >> 16) & 255, (w >> 8) & 255, w&255,   // 16: Width
                  (h >> 24) & 255, (h >> 16) & 255, (h >> 8) & 255, h&255,   // 20: Height
                  8,                                                         // 24: bit depth
                  2,                                                         // 25: RGB
                  0,                                                         // 26: deflate
                  0,                                                         // 27: no filter
                  0,                                                         // 28: no interlace
                  -1,-2,-3,-4,                                               // 29: CRC
                  -5,-6,-7,-8,                                               // 33: IDAT Chunk length
                  73, 68, 65, 84,                                            // 37: "IDAT"
                  // RFC 1950 header starts here
                  8,                                                         // 41: RFC1950 CMF
                  29                                                         // 42: RFC1950 FLG
                  ];
    crc32 = crc32Array(stream,12,29);
    stream[29] = (crc32>>24)&255;
    stream[30] = (crc32>>16)&255;
    stream[31] = (crc32>>8)&255;
    stream[32] = (crc32)&255;
    s1 = 1;
    s2 = 0;
    for(i=0;i<h;i++) {
        if(i<h-1) { stream.push(0); }
        else { stream.push(1); }
        a = (3*w+1+(i===0))&255; b = ((3*w+1+(i===0))>>8)&255;
        stream.push(a); stream.push(b);
        stream.push((~a)&255); stream.push((~b)&255);
        if(i===0) stream.push(0);
        for(j=0;j<w;j++) {
            for(k=0;k<3;k++) {
                a = img[k][i][j];
                if(a>255) a = 255;
                else if(a<0) a=0;
                else a = Math.round(a);
                s1 = (s1 + a )%65521;
                s2 = (s2 + s1)%65521;
                stream.push(a);
            }
        }
        stream.push(0);
    }
    adler32 = (s2<<16)+s1;
    stream.push((adler32>>24)&255);
    stream.push((adler32>>16)&255);
    stream.push((adler32>>8)&255);
    stream.push((adler32)&255);
    length = stream.length - 41;
    stream[33] = (length>>24)&255;
    stream[34] = (length>>16)&255;
    stream[35] = (length>>8)&255;
    stream[36] = (length)&255;
    crc32 = crc32Array(stream,37);
    stream.push((crc32>>24)&255);
    stream.push((crc32>>16)&255);
    stream.push((crc32>>8)&255);
    stream.push((crc32)&255);
    stream.push(0);
    stream.push(0);
    stream.push(0);
    stream.push(0);
//    a = stream.length;
    stream.push(73);  // I
    stream.push(69);  // E
    stream.push(78);  // N
    stream.push(68);  // D
    stream.push(174); // CRC1
    stream.push(66);  // CRC2
    stream.push(96);  // CRC3
    stream.push(130); // CRC4
    return 'data:image/png;base64,'+base64(stream);
}

// 2. Linear algebra with Arrays.
numeric._dim = function _dim(x) {
    var ret = [];
    while(typeof x === "object") { ret.push(x.length); x = x[0]; }
    return ret;
}

numeric.dim = function dim(x) {
    var y,z;
    if(typeof x === "object") {
        y = x[0];
        if(typeof y === "object") {
            z = y[0];
            if(typeof z === "object") {
                return numeric._dim(x);
            }
            return [x.length,y.length];
        }
        return [x.length];
    }
    return [];
}

numeric.mapreduce = function mapreduce(body,init) {
    return Function('x','accum','_s','_k',
            'if(typeof accum === "undefined") accum = '+init+';\n'+
            'if(typeof x === "number") { var xi = x; '+body+'; return accum; }\n'+
            'if(typeof _s === "undefined") _s = numeric.dim(x);\n'+
            'if(typeof _k === "undefined") _k = 0;\n'+
            'var _n = _s[_k];\n'+
            'var i,xi;\n'+
            'if(_k < _s.length-1) {\n'+
            '    for(i=_n-1;i>=0;i--) {\n'+
            '        accum = arguments.callee(x[i],accum,_s,_k+1);\n'+
            '    }'+
            '    return accum;\n'+
            '}\n'+
            'for(i=_n-1;i>=1;i-=2) { \n'+
            '    xi = x[i];\n'+
            '    '+body+';\n'+
            '    xi = x[i-1];\n'+
            '    '+body+';\n'+
            '}\n'+
            'if(i === 0) {\n'+
            '    xi = x[i];\n'+
            '    '+body+'\n'+
            '}\n'+
            'return accum;'
            );
}
numeric.mapreduce2 = function mapreduce2(body,setup) {
    return Function('x',
            'var n = x.length;\n'+
            'var i,xi;\n'+setup+';\n'+
            'for(i=n-1;i!==-1;--i) { \n'+
            '    xi = x[i];\n'+
            '    '+body+';\n'+
            '}\n'+
            'return accum;'
            );
}


numeric.same = function same(x,y) {
    var i,n;
    if(!(x instanceof Array) || !(y instanceof Array)) { return false; }
    n = x.length;
    if(n !== y.length) { return false; }
    for(i=0;i<n;i++) {
        if(x[i] === y[i]) { continue; }
        if(typeof x[i] === "object") { if(!same(x[i],y[i])) return false; }
        else { return false; }
    }
    return true;
}

numeric.rep = function rep(s,v,k) {
    if(typeof k === "undefined") { k=0; }
    var n = s[k], ret = Array(n), i;
    if(k === s.length-1) {
        for(i=n-2;i>=0;i-=2) { ret[i+1] = v; ret[i] = v; }
        if(i===-1) { ret[0] = v; }
        return ret;
    }
    for(i=n-1;i>=0;i--) { ret[i] = numeric.rep(s,v,k+1); }
    return ret;
}


numeric.dotMMsmall = function dotMMsmall(x,y) {
    var i,j,k,p,q,r,ret,foo,bar,woo,i0,k0,p0,r0;
    p = x.length; q = y.length; r = y[0].length;
    ret = Array(p);
    for(i=p-1;i>=0;i--) {
        foo = Array(r);
        bar = x[i];
        for(k=r-1;k>=0;k--) {
            woo = bar[q-1]*y[q-1][k];
            for(j=q-2;j>=1;j-=2) {
                i0 = j-1;
                woo += bar[j]*y[j][k] + bar[i0]*y[i0][k];
            }
            if(j===0) { woo += bar[0]*y[0][k]; }
            foo[k] = woo;
        }
        ret[i] = foo;
    }
    return ret;
}
numeric._getCol = function _getCol(A,j,x) {
    var n = A.length, i;
    for(i=n-1;i>0;--i) {
        x[i] = A[i][j];
        --i;
        x[i] = A[i][j];
    }
    if(i===0) x[0] = A[0][j];
}
numeric.dotMMbig = function dotMMbig(x,y){
    var gc = numeric._getCol, p = y.length, v = Array(p);
    var m = x.length, n = y[0].length, A = new Array(m), xj;
    var VV = numeric.dotVV;
    var i,j,k,z;
    --p;
    --m;
    for(i=m;i!==-1;--i) A[i] = Array(n);
    --n;
    for(i=n;i!==-1;--i) {
        gc(y,i,v);
        for(j=m;j!==-1;--j) {
            z=0;
            xj = x[j];
            A[j][i] = VV(xj,v);
        }
    }
    return A;
}

numeric.dotMV = function dotMV(x,y) {
    var p = x.length, q = y.length,i;
    var ret = Array(p), dotVV = numeric.dotVV;
    for(i=p-1;i>=0;i--) { ret[i] = dotVV(x[i],y); }
    return ret;
}

numeric.dotVM = function dotVM(x,y) {
    var i,j,k,p,q,r,ret,foo,bar,woo,i0,k0,p0,r0,s1,s2,s3,baz,accum;
    p = x.length; q = y[0].length;
    ret = Array(q);
    for(k=q-1;k>=0;k--) {
        woo = x[p-1]*y[p-1][k];
        for(j=p-2;j>=1;j-=2) {
            i0 = j-1;
            woo += x[j]*y[j][k] + x[i0]*y[i0][k];
        }
        if(j===0) { woo += x[0]*y[0][k]; }
        ret[k] = woo;
    }
    return ret;
}

numeric.dotVV = function dotVV(x,y) {
    var i,n=x.length,i1,ret = x[n-1]*y[n-1];
    for(i=n-2;i>=1;i-=2) {
        i1 = i-1;
        ret += x[i]*y[i] + x[i1]*y[i1];
    }
    if(i===0) { ret += x[0]*y[0]; }
    return ret;
}

numeric.dot = function dot(x,y) {
    var d = numeric.dim;
    switch(d(x).length*1000+d(y).length) {
    case 2002:
        if(y.length < 10) return numeric.dotMMsmall(x,y);
        else return numeric.dotMMbig(x,y);
    case 2001: return numeric.dotMV(x,y);
    case 1002: return numeric.dotVM(x,y);
    case 1001: return numeric.dotVV(x,y);
    case 1000: return numeric.mulVS(x,y);
    case 1: return numeric.mulSV(x,y);
    case 0: return x*y;
    default: throw new Error('numeric.dot only works on vectors and matrices');
    }
}

numeric.diag = function diag(d) {
    var i,i1,j,n = d.length, A = Array(n), Ai;
    for(i=n-1;i>=0;i--) {
        Ai = Array(n);
        i1 = i+2;
        for(j=n-1;j>=i1;j-=2) {
            Ai[j] = 0;
            Ai[j-1] = 0;
        }
        if(j>i) { Ai[j] = 0; }
        Ai[i] = d[i];
        for(j=i-1;j>=1;j-=2) {
            Ai[j] = 0;
            Ai[j-1] = 0;
        }
        if(j===0) { Ai[0] = 0; }
        A[i] = Ai;
    }
    return A;
}
numeric.getDiag = function(A) {
    var n = Math.min(A.length,A[0].length),i,ret = Array(n);
    for(i=n-1;i>=1;--i) {
        ret[i] = A[i][i];
        --i;
        ret[i] = A[i][i];
    }
    if(i===0) {
        ret[0] = A[0][0];
    }
    return ret;
}

numeric.identity = function identity(n) { return numeric.diag(numeric.rep([n],1)); }
numeric.pointwise = function pointwise(params,body,setup) {
    if(typeof setup === "undefined") { setup = ""; }
    var fun = [];
    var k;
    var avec = /\[i\]$/,p,thevec = '';
    var haveret = false;
    for(k=0;k<params.length;k++) {
        if(avec.test(params[k])) {
            p = params[k].substring(0,params[k].length-3);
            thevec = p;
        } else { p = params[k]; }
        if(p==='ret') haveret = true;
        fun.push(p);
    }
    fun[params.length] = '_s';
    fun[params.length+1] = '_k';
    fun[params.length+2] = (
            'if(typeof _s === "undefined") _s = numeric.dim('+thevec+');\n'+
            'if(typeof _k === "undefined") _k = 0;\n'+
            'var _n = _s[_k];\n'+
            'var i'+(haveret?'':', ret = Array(_n)')+';\n'+
            'if(_k < _s.length-1) {\n'+
            '    for(i=_n-1;i>=0;i--) ret[i] = arguments.callee('+params.join(',')+',_s,_k+1);\n'+
            '    return ret;\n'+
            '}\n'+
            setup+'\n'+
            'for(i=_n-1;i!==-1;--i) {\n'+
            '    '+body+'\n'+
            '}\n'+
            'return ret;'
            );
    return Function.apply(null,fun);
}
numeric.pointwise2 = function pointwise2(params,body,setup) {
    if(typeof setup === "undefined") { setup = ""; }
    var fun = [];
    var k;
    var avec = /\[i\]$/,p,thevec = '';
    var haveret = false;
    for(k=0;k<params.length;k++) {
        if(avec.test(params[k])) {
            p = params[k].substring(0,params[k].length-3);
            thevec = p;
        } else { p = params[k]; }
        if(p==='ret') haveret = true;
        fun.push(p);
    }
    fun[params.length] = (
            'var _n = '+thevec+'.length;\n'+
            'var i'+(haveret?'':', ret = Array(_n)')+';\n'+
            setup+'\n'+
            'for(i=_n-1;i!==-1;--i) {\n'+
            body+'\n'+
            '}\n'+
            'return ret;'
            );
    return Function.apply(null,fun);
}
numeric._biforeach = (function _biforeach(x,y,s,k,f) {
    if(k === s.length-1) { f(x,y); return; }
    var i,n=s[k];
    for(i=n-1;i>=0;i--) { _biforeach(typeof x==="object"?x[i]:x,typeof y==="object"?y[i]:y,s,k+1,f); }
});
numeric._biforeach2 = (function _biforeach2(x,y,s,k,f) {
    if(k === s.length-1) { return f(x,y); }
    var i,n=s[k],ret = Array(n);
    for(i=n-1;i>=0;--i) { ret[i] = _biforeach2(typeof x==="object"?x[i]:x,typeof y==="object"?y[i]:y,s,k+1,f); }
    return ret;
});
numeric._foreach = (function _foreach(x,s,k,f) {
    if(k === s.length-1) { f(x); return; }
    var i,n=s[k];
    for(i=n-1;i>=0;i--) { _foreach(x[i],s,k+1,f); }
});
numeric._foreach2 = (function _foreach2(x,s,k,f) {
    if(k === s.length-1) { return f(x); }
    var i,n=s[k], ret = Array(n);
    for(i=n-1;i>=0;i--) { ret[i] = _foreach2(x[i],s,k+1,f); }
    return ret;
});

/*numeric.anyV = numeric.mapreduce('if(xi) return true;','false');
numeric.allV = numeric.mapreduce('if(!xi) return false;','true');
numeric.any = function(x) { if(typeof x.length === "undefined") return x; return numeric.anyV(x); }
numeric.all = function(x) { if(typeof x.length === "undefined") return x; return numeric.allV(x); }*/

numeric.ops2 = {
        add: '+',
        sub: '-',
        mul: '*',
        div: '/',
        mod: '%',
        and: '&&',
        or:  '||',
        eq:  '===',
        neq: '!==',
        lt:  '<',
        gt:  '>',
        leq: '<=',
        geq: '>=',
        band: '&',
        bor: '|',
        bxor: '^',
        lshift: '<<',
        rshift: '>>',
        rrshift: '>>>'
};
numeric.opseq = {
        addeq: '+=',
        subeq: '-=',
        muleq: '*=',
        diveq: '/=',
        modeq: '%=',
        lshifteq: '<<=',
        rshifteq: '>>=',
        rrshifteq: '>>>=',
        bandeq: '&=',
        boreq: '|=',
        bxoreq: '^='
};
numeric.mathfuns = ['abs','acos','asin','atan','ceil','cos',
                    'exp','floor','log','round','sin','sqrt','tan',
                    'isNaN','isFinite'];
numeric.mathfuns2 = ['atan2','pow','max','min'];
numeric.ops1 = {
        neg: '-',
        not: '!',
        bnot: '~',
        clone: ''
};
numeric.mapreducers = {
        any: ['if(xi) return true;','var accum = false;'],
        all: ['if(!xi) return false;','var accum = true;'],
        sum: ['accum += xi;','var accum = 0;'],
        prod: ['accum *= xi;','var accum = 1;'],
        norm2Squared: ['accum += xi*xi;','var accum = 0;'],
        norminf: ['accum = max(accum,abs(xi));','var accum = 0, max = Math.max, abs = Math.abs;'],
        norm1: ['accum += abs(xi)','var accum = 0, abs = Math.abs;'],
        sup: ['accum = max(accum,xi);','var accum = -Infinity, max = Math.max;'],
        inf: ['accum = min(accum,xi);','var accum = Infinity, min = Math.min;']
};

(function () {
    var i,o;
    for(i=0;i<numeric.mathfuns2.length;++i) {
        o = numeric.mathfuns2[i];
        numeric.ops2[o] = o;
    }
    for(i in numeric.ops2) {
        if(numeric.ops2.hasOwnProperty(i)) {
            o = numeric.ops2[i];
            var code, codeeq, setup = '';
            if(numeric.myIndexOf.call(numeric.mathfuns2,i)!==-1) {
                setup = 'var '+o+' = Math.'+o+';\n';
                code = function(r,x,y) { return r+' = '+o+'('+x+','+y+')'; };
                codeeq = function(x,y) { return x+' = '+o+'('+x+','+y+')'; };
            } else {
                code = function(r,x,y) { return r+' = '+x+' '+o+' '+y; };
                if(numeric.opseq.hasOwnProperty(i+'eq')) {
                    codeeq = function(x,y) { return x+' '+o+'= '+y; };
                } else {
                    codeeq = function(x,y) { return x+' = '+x+' '+o+' '+y; };                    
                }
            }
            numeric[i+'VV'] = numeric.pointwise2(['x[i]','y[i]'],code('ret[i]','x[i]','y[i]'),setup);
            numeric[i+'SV'] = numeric.pointwise2(['x','y[i]'],code('ret[i]','x','y[i]'),setup);
            numeric[i+'VS'] = numeric.pointwise2(['x[i]','y'],code('ret[i]','x[i]','y'),setup);
            numeric[i] = Function(
                    'var n = arguments.length, i, x = arguments[0], y;\n'+
                    'var VV = numeric.'+i+'VV, VS = numeric.'+i+'VS, SV = numeric.'+i+'SV;\n'+
                    'var dim = numeric.dim;\n'+
                    'for(i=1;i!==n;++i) { \n'+
                    '  y = arguments[i];\n'+
                    '  if(typeof x === "object") {\n'+
                    '      if(typeof y === "object") x = numeric._biforeach2(x,y,dim(x),0,VV);\n'+
                    '      else x = numeric._biforeach2(x,y,dim(x),0,VS);\n'+
                    '  } else if(typeof y === "object") x = numeric._biforeach2(x,y,dim(y),0,SV);\n'+
                    '  else '+codeeq('x','y')+'\n'+
                    '}\nreturn x;\n');
            numeric[o] = numeric[i];
            numeric[i+'eqV'] = numeric.pointwise2(['ret[i]','x[i]'], codeeq('ret[i]','x[i]'),setup);
            numeric[i+'eqS'] = numeric.pointwise2(['ret[i]','x'], codeeq('ret[i]','x'),setup);
            numeric[i+'eq'] = Function(
                    'var n = arguments.length, i, x = arguments[0], y;\n'+
                    'var V = numeric.'+i+'eqV, S = numeric.'+i+'eqS\n'+
                    'var s = numeric.dim(x);\n'+
                    'for(i=1;i!==n;++i) { \n'+
                    '  y = arguments[i];\n'+
                    '  if(typeof y === "object") numeric._biforeach(x,y,s,0,V);\n'+
                    '  else numeric._biforeach(x,y,s,0,S);\n'+
                    '}\nreturn x;\n');
        }
    }
    for(i=0;i<numeric.mathfuns2.length;++i) {
        o = numeric.mathfuns2[i];
        delete numeric.ops2[o];
    }
    for(i=0;i<numeric.mathfuns.length;++i) {
        o = numeric.mathfuns[i];
        numeric.ops1[o] = o;
    }
    for(i in numeric.ops1) {
        if(numeric.ops1.hasOwnProperty(i)) {
            setup = '';
            o = numeric.ops1[i];
            if(numeric.myIndexOf.call(numeric.mathfuns,i)!==-1) {
                if(Math.hasOwnProperty(o)) setup = 'var '+o+' = Math.'+o+';\n';
            }
            numeric[i+'eqV'] = numeric.pointwise2(['ret[i]'],'ret[i] = '+o+'(ret[i]);',setup);
            numeric[i+'eq'] = Function('x',
                    'if(typeof x !== "object") return '+o+'x\n'+
                    'var i;\n'+
                    'var V = numeric.'+i+'eqV;\n'+
                    'var s = numeric.dim(x);\n'+
                    'numeric._foreach(x,s,0,V);\n'+
                    'return x;\n');
            numeric[i+'V'] = numeric.pointwise2(['x[i]'],'ret[i] = '+o+'(x[i]);',setup);
            numeric[i] = Function('x',
                    'if(typeof x !== "object") return '+o+'(x)\n'+
                    'var i;\n'+
                    'var V = numeric.'+i+'V;\n'+
                    'var s = numeric.dim(x);\n'+
                    'return numeric._foreach2(x,s,0,V);\n');
        }
    }
    for(i=0;i<numeric.mathfuns.length;++i) {
        o = numeric.mathfuns[i];
        delete numeric.ops1[o];
    }
    for(i in numeric.mapreducers) {
        if(numeric.mapreducers.hasOwnProperty(i)) {
            o = numeric.mapreducers[i];
            numeric[i+'V'] = numeric.mapreduce2(o[0],o[1]);
            numeric[i] = Function('x','s','k',
                    o[1]+
                    'if(typeof x !== "object") {'+
                    '    xi = x;\n'+
                    o[0]+';\n'+
                    '    return accum;\n'+
                    '}'+
                    'if(typeof s === "undefined") s = numeric.dim(x);\n'+
                    'if(typeof k === "undefined") k = 0;\n'+
                    'if(k === s.length-1) return numeric.'+i+'V(x);\n'+
                    'var xi;\n'+
                    'var n = x.length, i;\n'+
                    'for(i=n-1;i!==-1;--i) {\n'+
                    '   xi = arguments.callee(x[i]);\n'+
                    o[0]+';\n'+
                    '}\n'+
                    'return accum;\n');
        }
    }
}());

numeric.truncVV = numeric.pointwise(['x[i]','y[i]'],'ret[i] = round(x[i]/y[i])*y[i];','var round = Math.round;');
numeric.truncVS = numeric.pointwise(['x[i]','y'],'ret[i] = round(x[i]/y)*y;','var round = Math.round;');
numeric.truncSV = numeric.pointwise(['x','y[i]'],'ret[i] = round(x/y[i])*y[i];','var round = Math.round;');
numeric.trunc = function trunc(x,y) {
    if(typeof x === "object") {
        if(typeof y === "object") return numeric.truncVV(x,y);
        return numeric.truncVS(x,y);
    }
    if (typeof y === "object") return numeric.truncSV(x,y);
    return Math.round(x/y)*y;
}

numeric.inv = function inv(x) {
    var s = numeric.dim(x), abs = Math.abs, m = s[0], n = s[1];
    var A = numeric.clone(x), Ai, Aj;
    var I = numeric.identity(m), Ii, Ij;
    var i,j,k,x;
    for(j=0;j<n;++j) {
        var i0 = -1;
        var v0 = -1;
        for(i=j;i!==m;++i) { k = abs(A[i][j]); if(k>v0) { i0 = i; v0 = k; } }
        Aj = A[i0]; A[i0] = A[j]; A[j] = Aj;
        Ij = I[i0]; I[i0] = I[j]; I[j] = Ij;
        x = Aj[j];
        for(k=j;k!==n;++k)    Aj[k] /= x; 
        for(k=n-1;k!==-1;--k) Ij[k] /= x;
        for(i=m-1;i!==-1;--i) {
            if(i!==j) {
                Ai = A[i];
                Ii = I[i];
                x = Ai[j];
                for(k=j+1;k!==n;++k)  Ai[k] -= Aj[k]*x;
                for(k=n-1;k>0;--k) { Ii[k] -= Ij[k]*x; --k; Ii[k] -= Ij[k]*x; }
                if(k===0) Ii[0] -= Ij[0]*x;
            }
        }
    }
    return I;
}

numeric.det = function det(x) {
    var s = numeric.dim(x);
    if(s.length !== 2 || s[0] !== s[1]) { throw new Error('numeric: det() only works on square matrices'); }
    var n = s[0], ret = 1,i,j,k,A = numeric.clone(x),Aj,Ai,alpha,temp,k1,k2,k3;
    for(j=0;j<n-1;j++) {
        k=j;
        for(i=j+1;i<n;i++) { if(Math.abs(A[i][j]) > Math.abs(A[k][j])) { k = i; } }
        if(k !== j) {
            temp = A[k]; A[k] = A[j]; A[j] = temp;
            ret *= -1;
        }
        Aj = A[j];
        for(i=j+1;i<n;i++) {
            Ai = A[i];
            alpha = Ai[j]/Aj[j];
            for(k=j+1;k<n-1;k+=2) {
                k1 = k+1;
                Ai[k] -= Aj[k]*alpha;
                Ai[k1] -= Aj[k1]*alpha;
            }
            if(k!==n) { Ai[k] -= Aj[k]*alpha; }
        }
        if(Aj[j] === 0) { return 0; }
        ret *= Aj[j];
    }
    return ret*A[j][j];
}

numeric.transpose = function transpose(x) {
    var i,j,m = x.length,n = x[0].length, ret=Array(n),A0,A1,Bj;
    for(j=0;j<n;j++) ret[j] = Array(m);
    for(i=m-1;i>=1;i-=2) {
        A1 = x[i];
        A0 = x[i-1];
        for(j=n-1;j>=1;--j) {
            Bj = ret[j]; Bj[i] = A1[j]; Bj[i-1] = A0[j];
            --j;
            Bj = ret[j]; Bj[i] = A1[j]; Bj[i-1] = A0[j];
        }
        if(j===0) {
            Bj = ret[0]; Bj[i] = A1[0]; Bj[i-1] = A0[0];
        }
    }
    if(i===0) {
        A0 = x[0];
        for(j=n-1;j>=1;--j) {
            ret[j][0] = A0[j];
            --j;
            ret[j][0] = A0[j];
        }
        if(j===0) { ret[0][0] = A0[0]; }
    }
    return ret;
}
numeric.negtranspose = function negtranspose(x) {
    var i,j,m = x.length,n = x[0].length, ret=Array(n),A0,A1,Bj;
    for(j=0;j<n;j++) ret[j] = Array(m);
    for(i=m-1;i>=1;i-=2) {
        A1 = x[i];
        A0 = x[i-1];
        for(j=n-1;j>=1;--j) {
            Bj = ret[j]; Bj[i] = -A1[j]; Bj[i-1] = -A0[j];
            --j;
            Bj = ret[j]; Bj[i] = -A1[j]; Bj[i-1] = -A0[j];
        }
        if(j===0) {
            Bj = ret[0]; Bj[i] = -A1[0]; Bj[i-1] = -A0[0];
        }
    }
    if(i===0) {
        A0 = x[0];
        for(j=n-1;j>=1;--j) {
            ret[j][0] = -A0[j];
            --j;
            ret[j][0] = -A0[j];
        }
        if(j===0) { ret[0][0] = -A0[0]; }
    }
    return ret;
}

numeric._random = function _random(s,k) {
    var i,n=s[k],ret=Array(n), rnd;
    if(k === s.length-1) {
        rnd = Math.random;
        for(i=n-1;i>=1;i-=2) {
            ret[i] = rnd();
            ret[i-1] = rnd();
        }
        if(i===0) { ret[0] = rnd(); }
        return ret;
    }
    for(i=n-1;i>=0;i--) ret[i] = _random(s,k+1);
    return ret;
}
numeric.random = function random(s) { return numeric._random(s,0); }

numeric.norm2 = function norm2(x) { return Math.sqrt(numeric.norm2Squared(x)); }

numeric.linspace = function linspace(a,b,n) {
    if(typeof n === "undefined") n = Math.max(Math.round(b-a)+1,1);
    if(n<2) { return n===1?[a]:[]; }
    var i,ret = Array(n);
    n--;
    for(i=n;i>=0;i--) { ret[i] = (i*b+(n-i)*a)/n; }
    return ret;
}

numeric.getBlock = function getBlock(x,from,to) {
    var s = numeric.dim(x);
    function foo(x,k) {
        var i,a = from[k], n = to[k]-a, ret = Array(n);
        if(k === s.length-1) {
            for(i=n;i>=0;i--) { ret[i] = x[i+a]; }
            return ret;
        }
        for(i=n;i>=0;i--) { ret[i] = foo(x[i+a],k+1); }
        return ret;
    }
    return foo(x,0);
}

numeric.setBlock = function setBlock(x,from,to,B) {
    var s = numeric.dim(x);
    function foo(x,y,k) {
        var i,a = from[k], n = to[k]-a;
        if(k === s.length-1) { for(i=n;i>=0;i--) { x[i+a] = y[i]; } }
        for(i=n;i>=0;i--) { foo(x[i+a],y[i],k+1); }
    }
    foo(x,B,0);
    return x;
}

numeric.getRange = function getRange(A,I,J) {
    var m = I.length, n = J.length;
    var i,j;
    var B = Array(m), Bi, AI;
    for(i=m-1;i!==-1;--i) {
        B[i] = Array(n);
        Bi = B[i];
        AI = A[I[i]];
        for(j=n-1;j!==-1;--j) Bi[j] = AI[J[j]];
    }
    return B;
}

numeric.blockMatrix = function blockMatrix(X) {
    var s = numeric.dim(X);
    if(s.length<4) return numeric.blockMatrix([X]);
    var m=s[0],n=s[1],M,N,i,j,Xij;
    M = 0; N = 0;
    for(i=0;i<m;++i) M+=X[i][0].length;
    for(j=0;j<n;++j) N+=X[0][j][0].length;
    var Z = Array(M);
    for(i=0;i<M;++i) Z[i] = Array(N);
    var I=0,J,ZI,k,l,Xijk;
    for(i=0;i<m;++i) {
        J=N;
        for(j=n-1;j!==-1;--j) {
            Xij = X[i][j];
            J -= Xij[0].length;
            for(k=Xij.length-1;k!==-1;--k) {
                Xijk = Xij[k];
                ZI = Z[I+k];
                for(l = Xijk.length-1;l!==-1;--l) ZI[J+l] = Xijk[l];
            }
        }
        I += X[i][0].length;
    }
    return Z;
}

numeric.tensor = function tensor(x,y) {
    if(typeof x === "number" || typeof y === "number") return numeric.mul(x,y);
    var s1 = numeric.dim(x), s2 = numeric.dim(y);
    if(s1.length !== 1 || s2.length !== 1) {
        throw new Error('numeric: tensor product is only defined for vectors');
    }
    var m = s1[0], n = s2[0], A = Array(m), Ai, i,j,xi;
    for(i=m-1;i>=0;i--) {
        Ai = Array(n);
        xi = x[i];
        for(j=n-1;j>=3;--j) {
            Ai[j] = xi * y[j];
            --j;
            Ai[j] = xi * y[j];
            --j;
            Ai[j] = xi * y[j];
            --j;
            Ai[j] = xi * y[j];
        }
        while(j>=0) { Ai[j] = xi * y[j]; --j; }
        A[i] = Ai;
    }
    return A;
}

// 3. The Tensor type T
numeric.T = function T(x,y) { this.x = x; this.y = y; }
numeric.t = function t(x,y) { return new numeric.T(x,y); }

numeric.Tbinop = function Tbinop(rr,rc,cr,cc,setup) {
    var io = numeric.indexOf;
    if(typeof setup !== "string") {
        var k;
        setup = '';
        for(k in numeric) {
            if(numeric.hasOwnProperty(k) && (rr.indexOf(k)>=0 || rc.indexOf(k)>=0 || cr.indexOf(k)>=0 || cc.indexOf(k)>=0) && k.length>1) {
                setup += 'var '+k+' = numeric.'+k+';\n';
            }
        }
    }
    return Function(['y'],
            'var x = this;\n'+
            'if(!(y instanceof numeric.T)) { y = new numeric.T(y); }\n'+
            setup+'\n'+
            'if(x.y) {'+
            '  if(y.y) {'+
            '    return new numeric.T('+cc+');\n'+
            '  }\n'+
            '  return new numeric.T('+cr+');\n'+
            '}\n'+
            'if(y.y) {\n'+
            '  return new numeric.T('+rc+');\n'+
            '}\n'+
            'return new numeric.T('+rr+');\n'
    );
}

numeric.T.prototype.add = numeric.Tbinop(
        'add(x.x,y.x)',
        'add(x.x,y.x),y.y',
        'add(x.x,y.x),x.y',
        'add(x.x,y.x),add(x.y,y.y)');
numeric.T.prototype.sub = numeric.Tbinop(
        'sub(x.x,y.x)',
        'sub(x.x,y.x),neg(y.y)',
        'sub(x.x,y.x),x.y',
        'sub(x.x,y.x),sub(x.y,y.y)');
numeric.T.prototype.mul = numeric.Tbinop(
        'mul(x.x,y.x)',
        'mul(x.x,y.x),mul(x.x,y.y)',
        'mul(x.x,y.x),mul(x.y,y.x)',
        'sub(mul(x.x,y.x),mul(x.y,y.y)),add(mul(x.x,y.y),mul(x.y,y.x))');

numeric.T.prototype.reciprocal = function reciprocal() {
    var mul = numeric.mul, div = numeric.div;
    if(this.y) {
        var d = numeric.add(mul(this.x,this.x),mul(this.y,this.y));
        return new numeric.T(div(this.x,d),div(numeric.neg(this.y),d));
    }
    return new T(div(1,this.x));
}
numeric.T.prototype.div = function div(y) {
    if(!(y instanceof numeric.T)) y = new numeric.T(y);
    if(y.y) { return this.mul(y.reciprocal()); }
    var div = numeric.div;
    if(this.y) { return new numeric.T(div(this.x,y.x),div(this.y,y.x)); }
    return new numeric.T(div(this.x,y.x));
}
numeric.T.prototype.dot = numeric.Tbinop(
        'dot(x.x,y.x)',
        'dot(x.x,y.x),dot(x.x,y.y)',
        'dot(x.x,y.x),dot(x.y,y.x)',
        'sub(dot(x.x,y.x),dot(x.y,y.y)),add(dot(x.x,y.y),dot(x.y,y.x))'
        );
numeric.T.prototype.transpose = function transpose() {
    var t = numeric.transpose, x = this.x, y = this.y;
    if(y) { return new numeric.T(t(x),t(y)); }
    return new numeric.T(t(x));
}
numeric.T.prototype.transjugate = function transjugate() {
    var t = numeric.transpose, x = this.x, y = this.y;
    if(y) { return new numeric.T(t(x),numeric.negtranspose(y)); }
    return new numeric.T(t(x));
}
numeric.Tunop = function Tunop(r,c,s) {
    if(typeof s !== "string") { s = ''; }
    return Function(
            'var x = this;\n'+
            s+'\n'+
            'if(x.y) {'+
            '  '+c+';\n'+
            '}\n'+
            r+';\n'
    );
}

numeric.T.prototype.exp = numeric.Tunop(
        'return new numeric.T(ex)',
        'return new numeric.T(mul(cos(x.y),ex),mul(sin(x.y),ex))',
        'var ex = numeric.exp(x.x), cos = numeric.cos, sin = numeric.sin, mul = numeric.mul;');
numeric.T.prototype.conj = numeric.Tunop(
        'return new numeric.T(x.x);',
        'return new numeric.T(x.x,numeric.neg(x.y));');
numeric.T.prototype.neg = numeric.Tunop(
        'return new numeric.T(neg(x.x));',
        'return new numeric.T(neg(x.x),neg(x.y));',
        'var neg = numeric.neg;');
numeric.T.prototype.sin = numeric.Tunop(
        'return new numeric.T(numeric.sin(x.x))',
        'return x.exp().sub(x.neg().exp()).div(new numeric.T(0,2));');
numeric.T.prototype.cos = numeric.Tunop(
        'return new numeric.T(numeric.cos(x.x))',
        'return x.exp().add(x.neg().exp()).div(2);');
numeric.T.prototype.abs = numeric.Tunop(
        'return new numeric.T(numeric.abs(x.x));',
        'return new numeric.T(numeric.sqrt(numeric.add(mul(x.x,x.x),mul(x.y,x.y))));',
        'var mul = numeric.mul;');
numeric.T.prototype.log = numeric.Tunop(
        'return new numeric.T(numeric.log(x.x));',
        'var theta = new numeric.T(numeric.atan2(x.y,x.x)), r = x.abs();\n'+
        'return new numeric.T(numeric.log(r.x),theta.x);');
numeric.T.prototype.norm2 = numeric.Tunop(
        'return numeric.norm2(x.x);',
        'var f = numeric.norm2Squared;\n'+
        'return Math.sqrt(f(x.x)+f(x.y));');
numeric.T.prototype.inv = function inv() {
    var A = this;
    if(typeof A.y === "undefined") { return new numeric.T(numeric.inv(A.x)); }
    var n = A.x.length, i, j, k;
    var Rx = numeric.identity(n),Ry = numeric.rep([n,n],0);
    var Ax = numeric.clone(A.x), Ay = numeric.clone(A.y);
    var Aix, Aiy, Ajx, Ajy, Rix, Riy, Rjx, Rjy;
    var i,j,k,d,d1,ax,ay,bx,by,temp;
    for(i=0;i<n;i++) {
        ax = Ax[i][i]; ay = Ay[i][i];
        d = ax*ax+ay*ay;
        k = i;
        for(j=i+1;j<n;j++) {
            ax = Ax[j][i]; ay = Ay[j][i];
            d1 = ax*ax+ay*ay;
            if(d1 > d) { k=j; d = d1; }
        }
        if(k!==i) {
            temp = Ax[i]; Ax[i] = Ax[k]; Ax[k] = temp;
            temp = Ay[i]; Ay[i] = Ay[k]; Ay[k] = temp;
            temp = Rx[i]; Rx[i] = Rx[k]; Rx[k] = temp;
            temp = Ry[i]; Ry[i] = Ry[k]; Ry[k] = temp;
        }
        Aix = Ax[i]; Aiy = Ay[i];
        Rix = Rx[i]; Riy = Ry[i];
        ax = Aix[i]; ay = Aiy[i];
        for(j=i+1;j<n;j++) {
            bx = Aix[j]; by = Aiy[j];
            Aix[j] = (bx*ax+by*ay)/d;
            Aiy[j] = (by*ax-bx*ay)/d;
        }
        for(j=0;j<n;j++) {
            bx = Rix[j]; by = Riy[j];
            Rix[j] = (bx*ax+by*ay)/d;
            Riy[j] = (by*ax-bx*ay)/d;
        }
        for(j=i+1;j<n;j++) {
            Ajx = Ax[j]; Ajy = Ay[j];
            Rjx = Rx[j]; Rjy = Ry[j];
            ax = Ajx[i]; ay = Ajy[i];
            for(k=i+1;k<n;k++) {
                bx = Aix[k]; by = Aiy[k];
                Ajx[k] -= bx*ax-by*ay;
                Ajy[k] -= by*ax+bx*ay;
            }
            for(k=0;k<n;k++) {
                bx = Rix[k]; by = Riy[k];
                Rjx[k] -= bx*ax-by*ay;
                Rjy[k] -= by*ax+bx*ay;
            }
        }
    }
    for(i=n-1;i>0;i--) {
        Rix = Rx[i]; Riy = Ry[i];
        for(j=i-1;j>=0;j--) {
            Rjx = Rx[j]; Rjy = Ry[j];
            ax = Ax[j][i]; ay = Ay[j][i];
            for(k=n-1;k>=0;k--) {
                bx = Rix[k]; by = Riy[k];
                Rjx[k] -= ax*bx - ay*by;
                Rjy[k] -= ax*by + ay*bx;
            }
        }
    }
    return new numeric.T(Rx,Ry);
}
numeric.T.prototype.get = function get(i) {
    var x = this.x, y = this.y, k = 0, ik, n = i.length;
    if(y) {
        while(k<n) {
            ik = i[k];
            x = x[ik];
            y = y[ik];
            k++;
        }
        return new numeric.T(x,y);
    }
    while(k<n) {
        ik = i[k];
        x = x[ik];
        k++;
    }
    return new numeric.T(x);
}
numeric.T.prototype.set = function set(i,v) {
    var x = this.x, y = this.y, k = 0, ik, n = i.length, vx = v.x, vy = v.y;
    if(n===0) {
        if(vy) { this.y = vy; }
        else if(y) { this.y = undefined; }
        this.x = x;
        return this;
    }
    if(vy) {
        if(y) { /* ok */ }
        else {
            y = numeric.rep(numeric.dim(x),0);
            this.y = y;
        }
        while(k<n-1) {
            ik = i[k];
            x = x[ik];
            y = y[ik];
            k++;
        }
        ik = i[k];
        x[ik] = vx;
        y[ik] = vy;
        return this;
    }
    if(y) {
        while(k<n-1) {
            ik = i[k];
            x = x[ik];
            y = y[ik];
            k++;
        }
        ik = i[k];
        x[ik] = vx;
        if(vx instanceof Array) y[ik] = numeric.rep(numeric.dim(vx),0);
        else y[ik] = 0;
        return this;
    }
    while(k<n-1) {
        ik = i[k];
        x = x[ik];
        k++;
    }
    ik = i[k];
    x[ik] = vx;
    return this;
}
numeric.T.prototype.getRows = function getRows(i0,i1) {
    var n = i1-i0+1, j;
    var rx = Array(n), ry, x = this.x, y = this.y;
    for(j=i0;j<=i1;j++) { rx[j-i0] = x[j]; }
    if(y) {
        ry = Array(n);
        for(j=i0;j<=i1;j++) { ry[j-i0] = y[j]; }
        return new numeric.T(rx,ry);
    }
    return new numeric.T(rx);
}
numeric.T.prototype.setRows = function setRows(i0,i1,A) {
    var j;
    var rx = this.x, ry = this.y, x = A.x, y = A.y;
    for(j=i0;j<=i1;j++) { rx[j] = x[j-i0]; }
    if(y) {
        if(!ry) { ry = numeric.rep(numeric.dim(rx),0); this.y = ry; }
        for(j=i0;j<=i1;j++) { ry[j] = y[j-i0]; }
    } else if(ry) {
        for(j=i0;j<=i1;j++) { ry[j] = numeric.rep([x[j-i0].length],0); }
    }
    return this;
}
numeric.T.prototype.getRow = function getRow(k) {
    var x = this.x, y = this.y;
    if(y) { return new numeric.T(x[k],y[k]); }
    return new numeric.T(x[k]);
}
numeric.T.prototype.setRow = function setRow(i,v) {
    var rx = this.x, ry = this.y, x = v.x, y = v.y;
    rx[i] = x;
    if(y) {
        if(!ry) { ry = numeric.rep(numeric.dim(rx),0); this.y = ry; }
        ry[i] = y;
    } else if(ry) {
        ry = numeric.rep([x.length],0);
    }
    return this;
}

numeric.T.prototype.getBlock = function getBlock(from,to) {
    var x = this.x, y = this.y, b = numeric.getBlock;
    if(y) { return new numeric.T(b(x,from,to),b(y,from,to)); }
    return new numeric.T(b(x,from,to));
}
numeric.T.prototype.setBlock = function setBlock(from,to,A) {
    if(!(A instanceof numeric.T)) A = new numeric.T(A);
    var x = this.x, y = this.y, b = numeric.setBlock, Ax = A.x, Ay = A.y;
    if(Ay) {
        if(!y) { this.y = numeric.rep(numeric.dim(this),0); y = this.y; }
        b(x,from,to,Ax);
        b(y,from,to,Ay);
        return this;
    }
    b(x,from,to,Ax);
    if(y) b(y,from,to,numeric.rep(numeric.dim(Ax),0));
}
numeric.T.rep = function rep(s,v) {
    var T = numeric.T;
    if(!(v instanceof T)) v = new T(v);
    var x = v.x, y = v.y, r = numeric.rep;
    if(y) return new T(r(s,x),r(s,y));
    return new T(r(s,x));
}
numeric.T.diag = function diag(d) {
    if(!(d instanceof numeric.T)) d = new numeric.T(d);
    var x = d.x, y = d.y, diag = numeric.diag;
    if(y) return new numeric.T(diag(x),diag(y));
    return new numeric.T(diag(x));
}
numeric.T.eig = function eig() {
    if(this.y) { throw new Error('eig: not implemented for complex matrices.'); }
    return numeric.eig(this.x);
}
numeric.T.identity = function identity(n) { return new numeric.T(numeric.identity(n)); }
numeric.T.prototype.getDiag = function getDiag() {
    var n = numeric;
    var x = this.x, y = this.y;
    if(y) { return new n.T(n.getDiag(x),n.getDiag(y)); }
    return new n.T(n.getDiag(x));
}

// 4. Eigenvalues of real matrices

numeric.house = function house(x) {
    var v = numeric.clone(x);
    var s = x[0] >= 0 ? 1 : -1;
    var alpha = s*numeric.norm2(x);
    v[0] += alpha;
    var foo = numeric.norm2(v);
    if(foo === 0) { /* this should not happen */ throw new Error('eig: internal error'); }
    return numeric.div(v,foo);
}

numeric.toUpperHessenberg = function toUpperHessenberg(me) {
    var s = numeric.dim(me);
    if(s.length !== 2 || s[0] !== s[1]) { throw new Error('numeric: toUpperHessenberg() only works on square matrices'); }
    var m = s[0], i,j,k,x,v,A = numeric.clone(me),B,C,Ai,Ci,Q = numeric.identity(m),Qi;
    for(j=0;j<m-2;j++) {
        x = Array(m-j-1);
        for(i=j+1;i<m;i++) { x[i-j-1] = A[i][j]; }
        if(numeric.norm2(x)>0) {
            v = numeric.house(x);
            B = numeric.getBlock(A,[j+1,j],[m-1,m-1]);
            C = numeric.tensor(v,numeric.dot(v,B));
            for(i=j+1;i<m;i++) { Ai = A[i]; Ci = C[i-j-1]; for(k=j;k<m;k++) Ai[k] -= 2*Ci[k-j]; }
            B = numeric.getBlock(A,[0,j+1],[m-1,m-1]);
            C = numeric.tensor(numeric.dot(B,v),v);
            for(i=0;i<m;i++) { Ai = A[i]; Ci = C[i]; for(k=j+1;k<m;k++) Ai[k] -= 2*Ci[k-j-1]; }
            B = Array(m-j-1);
            for(i=j+1;i<m;i++) B[i-j-1] = Q[i];
            C = numeric.tensor(v,numeric.dot(v,B));
            for(i=j+1;i<m;i++) { Qi = Q[i]; Ci = C[i-j-1]; for(k=0;k<m;k++) Qi[k] -= 2*Ci[k]; }
        }
    }
    return {H:A, Q:Q};
}

numeric.epsilon = 2.220446049250313e-16;

numeric.QRFrancis = function(H,maxiter) {
    if(typeof maxiter === "undefined") { maxiter = 10000; }
    H = numeric.clone(H);
    var H0 = numeric.clone(H);
    var s = numeric.dim(H),m=s[0],x,v,a,b,c,d,det,tr, Hloc, Q = numeric.identity(m), Qi, Hi, B, C, Ci,i,j,k,iter;
    if(m<3) { return {Q:Q, B:[ [0,m-1] ]}; }
    var epsilon = numeric.epsilon;
    for(iter=0;iter<maxiter;iter++) {
        for(j=0;j<m-1;j++) {
            if(Math.abs(H[j+1][j]) < epsilon*(Math.abs(H[j][j])+Math.abs(H[j+1][j+1]))) {
                var QH1 = numeric.QRFrancis(numeric.getBlock(H,[0,0],[j,j]),maxiter);
                var QH2 = numeric.QRFrancis(numeric.getBlock(H,[j+1,j+1],[m-1,m-1]),maxiter);
                B = Array(j+1);
                for(i=0;i<=j;i++) { B[i] = Q[i]; }
                C = numeric.dot(QH1.Q,B);
                for(i=0;i<=j;i++) { Q[i] = C[i]; }
                B = Array(m-j-1);
                for(i=j+1;i<m;i++) { B[i-j-1] = Q[i]; }
                C = numeric.dot(QH2.Q,B);
                for(i=j+1;i<m;i++) { Q[i] = C[i-j-1]; }
                return {Q:Q,B:QH1.B.concat(numeric.add(QH2.B,j+1))};
            }
        }
        a = H[m-2][m-2]; b = H[m-2][m-1];
        c = H[m-1][m-2]; d = H[m-1][m-1];
        tr = a+d;
        det = (a*d-b*c);
        Hloc = numeric.getBlock(H, [0,0], [2,2]);
        if(tr*tr>=4*det) {
            var s1,s2;
            s1 = 0.5*(tr+Math.sqrt(tr*tr-4*det));
            s2 = 0.5*(tr-Math.sqrt(tr*tr-4*det));
            Hloc = numeric.add(numeric.sub(numeric.dot(Hloc,Hloc),
                                           numeric.mul(Hloc,s1+s2)),
                               numeric.diag(numeric.rep([3],s1*s2)));
        } else {
            Hloc = numeric.add(numeric.sub(numeric.dot(Hloc,Hloc),
                                           numeric.mul(Hloc,tr)),
                               numeric.diag(numeric.rep([3],det)));
        }
        x = [Hloc[0][0],Hloc[1][0],Hloc[2][0]];
        v = numeric.house(x);
        B = [H[0],H[1],H[2]];
        C = numeric.tensor(v,numeric.dot(v,B));
        for(i=0;i<3;i++) { Hi = H[i]; Ci = C[i]; for(k=0;k<m;k++) Hi[k] -= 2*Ci[k]; }
        B = numeric.getBlock(H, [0,0],[m-1,2]);
        C = numeric.tensor(numeric.dot(B,v),v);
        for(i=0;i<m;i++) { Hi = H[i]; Ci = C[i]; for(k=0;k<3;k++) Hi[k] -= 2*Ci[k]; }
        B = [Q[0],Q[1],Q[2]];
        C = numeric.tensor(v,numeric.dot(v,B));
        for(i=0;i<3;i++) { Qi = Q[i]; Ci = C[i]; for(k=0;k<m;k++) Qi[k] -= 2*Ci[k]; }
        var J;
        for(j=0;j<m-2;j++) {
            for(k=j;k<=j+1;k++) {
                if(Math.abs(H[k+1][k]) < epsilon*(Math.abs(H[k][k])+Math.abs(H[k+1][k+1]))) {
                    var QH1 = numeric.QRFrancis(numeric.getBlock(H,[0,0],[k,k]),maxiter);
                    var QH2 = numeric.QRFrancis(numeric.getBlock(H,[k+1,k+1],[m-1,m-1]),maxiter);
                    B = Array(k+1);
                    for(i=0;i<=k;i++) { B[i] = Q[i]; }
                    C = numeric.dot(QH1.Q,B);
                    for(i=0;i<=k;i++) { Q[i] = C[i]; }
                    B = Array(m-k-1);
                    for(i=k+1;i<m;i++) { B[i-k-1] = Q[i]; }
                    C = numeric.dot(QH2.Q,B);
                    for(i=k+1;i<m;i++) { Q[i] = C[i-k-1]; }
                    return {Q:Q,B:QH1.B.concat(numeric.add(QH2.B,k+1))};
                }
            }
            J = Math.min(m-1,j+3);
            x = Array(J-j);
            for(i=j+1;i<=J;i++) { x[i-j-1] = H[i][j]; }
            v = numeric.house(x);
            B = numeric.getBlock(H, [j+1,j],[J,m-1]);
            C = numeric.tensor(v,numeric.dot(v,B));
            for(i=j+1;i<=J;i++) { Hi = H[i]; Ci = C[i-j-1]; for(k=j;k<m;k++) Hi[k] -= 2*Ci[k-j]; }
            B = numeric.getBlock(H, [0,j+1],[m-1,J]);
            C = numeric.tensor(numeric.dot(B,v),v);
            for(i=0;i<m;i++) { Hi = H[i]; Ci = C[i]; for(k=j+1;k<=J;k++) Hi[k] -= 2*Ci[k-j-1]; }
            B = Array(J-j);
            for(i=j+1;i<=J;i++) B[i-j-1] = Q[i];
            C = numeric.tensor(v,numeric.dot(v,B));
            for(i=j+1;i<=J;i++) { Qi = Q[i]; Ci = C[i-j-1]; for(k=0;k<m;k++) Qi[k] -= 2*Ci[k]; }
        }
    }
    throw new Error('numeric: eigenvalue iteration does not converge -- increase maxiter?');
}

numeric.eig = function eig(A,maxiter) {
    var QH = numeric.toUpperHessenberg(A);
    var QB = numeric.QRFrancis(QH.H,maxiter);
    var T = numeric.T;
    var n = A.length,i,k,flag = false,B = QB.B,H = numeric.dot(QB.Q,numeric.dot(QH.H,numeric.transpose(QB.Q)));
    var Q = new T(numeric.dot(QB.Q,QH.Q)),Q0;
    var m = B.length,j;
    var a,b,c,d,p1,p2,disc,x,y,p,q,n1,n2;
    var sqrt = Math.sqrt;
    for(k=0;k<m;k++) {
        i = B[k][0];
        if(i === B[k][1]) {
            // nothing
        } else {
            j = i+1;
            a = H[i][i];
            b = H[i][j];
            c = H[j][i];
            d = H[j][j];
            if(b === 0 && c === 0) continue;
            p1 = -a-d;
            p2 = a*d-b*c;
            disc = p1*p1-4*p2;
            if(disc>=0) {
                if(p1<0) x = -0.5*(p1-sqrt(disc));
                else     x = -0.5*(p1+sqrt(disc));
                n1 = (a-x)*(a-x)+b*b;
                n2 = c*c+(d-x)*(d-x);
                if(n1>n2) {
                    n1 = sqrt(n1);
                    p = (a-x)/n1;
                    q = b/n1;
                } else {
                    n2 = sqrt(n2);
                    p = c/n2;
                    q = (d-x)/n2;
                }
                Q0 = new T([[q,-p],[p,q]]);
                Q.setRows(i,j,Q0.dot(Q.getRows(i,j)));
            } else {
                x = -0.5*p1;
                y = 0.5*sqrt(-disc);
                n1 = (a-x)*(a-x)+b*b;
                n2 = c*c+(d-x)*(d-x);
                if(n1>n2) {
                    n1 = sqrt(n1+y*y);
                    p = (a-x)/n1;
                    q = b/n1;
                    x = 0;
                    y /= n1;
                } else {
                    n2 = sqrt(n2+y*y);
                    p = c/n2;
                    q = (d-x)/n2;
                    x = y/n2;
                    y = 0;
                }
                Q0 = new T([[q,-p],[p,q]],[[x,y],[y,-x]]);
                Q.setRows(i,j,Q0.dot(Q.getRows(i,j)));
            }
        }
    }
    var R = Q.dot(A).dot(Q.transjugate()), n = A.length, E = numeric.T.identity(n);
    for(j=0;j<n;j++) {
        if(j>0) {
            for(k=j-1;k>=0;k--) {
                var Rk = R.get([k,k]), Rj = R.get([j,j]);
                if(numeric.neq(Rk.x,Rj.x) || numeric.neq(Rk.y,Rj.y)) {
                    x = R.getRow(k).getBlock([k],[j-1]);
                    y = E.getRow(j).getBlock([k],[j-1]);
                    E.set([j,k],(R.get([k,j]).neg().sub(x.dot(y))).div(Rk.sub(Rj)));
                } else {
                    E.setRow(j,E.getRow(k));
                    continue;
                }
            }
        }
    }
    for(j=0;j<n;j++) {
        x = E.getRow(j);
        E.setRow(j,x.div(x.norm2()));
    }
    E = E.transpose();
    E = Q.transjugate().dot(E);
    return { lambda:R.getDiag(), E:E };
};

// 5. Compressed Column Storage matrices
numeric.ccsSparse = function ccsSparse(A) {
    var m = A.length,n,foo, i,j, counts = [];
    for(i=m-1;i!==-1;--i) {
        foo = A[i];
        for(j in foo) {
            j = parseInt(j);
            while(j>=counts.length) counts[counts.length] = 0;
            if(foo[j]!==0) counts[j]++;
        }
    }
    var n = counts.length;
    var Ai = Array(n+1);
    Ai[0] = 0;
    for(i=0;i<n;++i) Ai[i+1] = Ai[i] + counts[i];
    var Aj = Array(Ai[n]), Av = Array(Ai[n]);
    for(i=m-1;i!==-1;--i) {
        foo = A[i];
        for(j in foo) {
            if(foo[j]!==0) {
                counts[j]--;
                Aj[Ai[j]+counts[j]] = i;
                Av[Ai[j]+counts[j]] = foo[j];
            }
        }
    }
    return [Ai,Aj,Av];
}
numeric.ccsFull = function ccsFull(A) {
    var Ai = A[0], Aj = A[1], Av = A[2], s = numeric.ccsDim(A), m = s[0], n = s[1], i,j,j0,j1,k;
    var B = numeric.rep([m,n],0);
    for(i=0;i<n;i++) {
        j0 = Ai[i];
        j1 = Ai[i+1];
        for(j=j0;j<j1;++j) { B[Aj[j]][i] = Av[j]; }
    }
    return B;
}
numeric.ccsTSolve = function ccsTSolve(A,b,x,bj,xj) {
    var Ai = A[0], Aj = A[1], Av = A[2],m = Ai.length-1, max = Math.max,n=0;
    if(typeof bj === "undefined") x = numeric.rep([m],0);
    if(typeof bj === "undefined") bj = numeric.linspace(0,x.length-1);
    if(typeof xj === "undefined") xj = [];
    function dfs(j) {
        var k;
        if(x[j] !== 0) return;
        x[j] = 1;
        for(k=Ai[j];k<Ai[j+1];++k) dfs(Aj[k]);
        xj[n] = j;
        ++n;
    }
    var i,j,j0,j1,k,l,l0,l1,a;
    for(i=bj.length-1;i!==-1;--i) { dfs(bj[i]); }
    xj.length = n;
    for(i=xj.length-1;i!==-1;--i) { x[xj[i]] = 0; }
    for(i=bj.length-1;i!==-1;--i) { j = bj[i]; x[j] = b[j]; }
    for(i=xj.length-1;i!==-1;--i) {
        j = xj[i];
        j0 = Ai[j];
        j1 = max(Ai[j+1],j0);
        for(k=j0;k!==j1;++k) { if(Aj[k] === j) { x[j] /= Av[k]; break; } }
        a = x[j];
        for(k=j0;k!==j1;++k) {
            l = Aj[k];
            if(l !== j) x[l] -= a*Av[k];
        }
    }
    return x;
}
numeric.ccsDFS = function ccsDFS(n) {
    this.k = Array(n);
    this.k1 = Array(n);
    this.j = Array(n);
}
numeric.ccsDFS.prototype.dfs = function dfs(J,Ai,Aj,x,xj,Pinv) {
    var m = 0,foo,n=xj.length;
    var k = this.k, k1 = this.k1, j = this.j,km,k11;
    if(x[J]!==0) return;
    x[J] = 1;
    j[0] = J;
    k[0] = km = Ai[J];
    k1[0] = k11 = Ai[J+1];
    while(1) {
        if(km >= k11) {
            xj[n] = j[m];
            if(m===0) return;
            ++n;
            --m;
            km = k[m];
            k11 = k1[m];
        } else {
            foo = Pinv[Aj[km]];
            if(x[foo] === 0) {
                x[foo] = 1;
                k[m] = km;
                ++m;
                j[m] = foo;
                km = Ai[foo];
                k1[m] = k11 = Ai[foo+1];
            } else ++km;
        }
    }
}
numeric.ccsLPSolve = function ccsLPSolve(A,B,x,xj,I,Pinv,dfs) {
    var Ai = A[0], Aj = A[1], Av = A[2],m = Ai.length-1, n=0;
    var Bi = B[0], Bj = B[1], Bv = B[2];
    
    var i,i0,i1,j,J,j0,j1,k,l,l0,l1,a;
    i0 = Bi[I];
    i1 = Bi[I+1];
    xj.length = 0;
    for(i=i0;i<i1;++i) { dfs.dfs(Pinv[Bj[i]],Ai,Aj,x,xj,Pinv); }
    for(i=xj.length-1;i!==-1;--i) { x[xj[i]] = 0; }
    for(i=i0;i!==i1;++i) { j = Pinv[Bj[i]]; x[j] = Bv[i]; }
    for(i=xj.length-1;i!==-1;--i) {
        j = xj[i];
        j0 = Ai[j];
        j1 = Ai[j+1];
        for(k=j0;k<j1;++k) { if(Pinv[Aj[k]] === j) { x[j] /= Av[k]; break; } }
        a = x[j];
        for(k=j0;k<j1;++k) {
            l = Pinv[Aj[k]];
            if(l !== j) x[l] -= a*Av[k];
        }
    }
    return x;
}
numeric.ccsLUP1 = function ccsLUP1(A,threshold) {
    var m = A[0].length-1;
    var L = [numeric.rep([m+1],0),[],[]], U = [numeric.rep([m+1], 0),[],[]];
    var Li = L[0], Lj = L[1], Lv = L[2], Ui = U[0], Uj = U[1], Uv = U[2];
    var x = numeric.rep([m],0), xj = numeric.rep([m],0);
    var i,j,k,j0,j1,a,e,c,d,K;
    var sol = numeric.ccsLPSolve, max = Math.max, abs = Math.abs;
    var P = numeric.linspace(0,m-1),Pinv = numeric.linspace(0,m-1);
    var dfs = new numeric.ccsDFS(m);
    if(typeof threshold === "undefined") { threshold = 1; }
    for(i=0;i<m;++i) {
        sol(L,A,x,xj,i,Pinv,dfs);
        a = -1;
        e = -1;
        for(j=xj.length-1;j!==-1;--j) {
            k = xj[j];
            if(k <= i) continue;
            c = abs(x[k]);
            if(c > a) { e = k; a = c; }
        }
        if(abs(x[i])<threshold*a) {
            j = P[i];
            a = P[e];
            P[i] = a; Pinv[a] = i;
            P[e] = j; Pinv[j] = e;
            a = x[i]; x[i] = x[e]; x[e] = a;
        }
        a = Li[i];
        e = Ui[i];
        d = x[i];
        Lj[a] = P[i];
        Lv[a] = 1;
        ++a;
        for(j=xj.length-1;j!==-1;--j) {
            k = xj[j];
            c = x[k];
            xj[j] = 0;
            x[k] = 0;
            if(k<=i) { Uj[e] = k; Uv[e] = c;   ++e; }
            else     { Lj[a] = P[k]; Lv[a] = c/d; ++a; }
        }
        Li[i+1] = a;
        Ui[i+1] = e;
    }
    for(j=Lj.length-1;j!==-1;--j) { Lj[j] = Pinv[Lj[j]]; }
    return {L:L, U:U, P:P, Pinv:Pinv};
}
numeric.ccsDFS0 = function ccsDFS0(n) {
    this.k = Array(n);
    this.k1 = Array(n);
    this.j = Array(n);
}
numeric.ccsDFS0.prototype.dfs = function dfs(J,Ai,Aj,x,xj,Pinv,P) {
    var m = 0,foo,n=xj.length;
    var k = this.k, k1 = this.k1, j = this.j,km,k11;
    if(x[J]!==0) return;
    x[J] = 1;
    j[0] = J;
    k[0] = km = Ai[Pinv[J]];
    k1[0] = k11 = Ai[Pinv[J]+1];
    while(1) {
        if(isNaN(km)) throw new Error("Ow!");
        if(km >= k11) {
            xj[n] = Pinv[j[m]];
            if(m===0) return;
            ++n;
            --m;
            km = k[m];
            k11 = k1[m];
        } else {
            foo = Aj[km];
            if(x[foo] === 0) {
                x[foo] = 1;
                k[m] = km;
                ++m;
                j[m] = foo;
                foo = Pinv[foo];
                km = Ai[foo];
                k1[m] = k11 = Ai[foo+1];
            } else ++km;
        }
    }
}
numeric.ccsLPSolve0 = function ccsLPSolve0(A,B,y,xj,I,Pinv,P,dfs) {
    var Ai = A[0], Aj = A[1], Av = A[2],m = Ai.length-1, n=0;
    var Bi = B[0], Bj = B[1], Bv = B[2];
    
    var i,i0,i1,j,J,j0,j1,k,l,l0,l1,a;
    i0 = Bi[I];
    i1 = Bi[I+1];
    xj.length = 0;
    for(i=i0;i<i1;++i) { dfs.dfs(Bj[i],Ai,Aj,y,xj,Pinv,P); }
    for(i=xj.length-1;i!==-1;--i) { j = xj[i]; y[P[j]] = 0; }
    for(i=i0;i!==i1;++i) { j = Bj[i]; y[j] = Bv[i]; }
    for(i=xj.length-1;i!==-1;--i) {
        j = xj[i];
        l = P[j];
        j0 = Ai[j];
        j1 = Ai[j+1];
        for(k=j0;k<j1;++k) { if(Aj[k] === l) { y[l] /= Av[k]; break; } }
        a = y[l];
        for(k=j0;k<j1;++k) y[Aj[k]] -= a*Av[k];
        y[l] = a;
    }
}
numeric.ccsLUP0 = function ccsLUP0(A,threshold) {
    var m = A[0].length-1;
    var L = [numeric.rep([m+1],0),[],[]], U = [numeric.rep([m+1], 0),[],[]];
    var Li = L[0], Lj = L[1], Lv = L[2], Ui = U[0], Uj = U[1], Uv = U[2];
    var y = numeric.rep([m],0), xj = numeric.rep([m],0);
    var i,j,k,j0,j1,a,e,c,d,K;
    var sol = numeric.ccsLPSolve0, max = Math.max, abs = Math.abs;
    var P = numeric.linspace(0,m-1),Pinv = numeric.linspace(0,m-1);
    var dfs = new numeric.ccsDFS0(m);
    if(typeof threshold === "undefined") { threshold = 1; }
    for(i=0;i<m;++i) {
        sol(L,A,y,xj,i,Pinv,P,dfs);
        a = -1;
        e = -1;
        for(j=xj.length-1;j!==-1;--j) {
            k = xj[j];
            if(k <= i) continue;
            c = abs(y[P[k]]);
            if(c > a) { e = k; a = c; }
        }
        if(abs(y[P[i]])<threshold*a) {
            j = P[i];
            a = P[e];
            P[i] = a; Pinv[a] = i;
            P[e] = j; Pinv[j] = e;
        }
        a = Li[i];
        e = Ui[i];
        d = y[P[i]];
        Lj[a] = P[i];
        Lv[a] = 1;
        ++a;
        for(j=xj.length-1;j!==-1;--j) {
            k = xj[j];
            c = y[P[k]];
            xj[j] = 0;
            y[P[k]] = 0;
            if(k<=i) { Uj[e] = k; Uv[e] = c;   ++e; }
            else     { Lj[a] = P[k]; Lv[a] = c/d; ++a; }
        }
        Li[i+1] = a;
        Ui[i+1] = e;
    }
    for(j=Lj.length-1;j!==-1;--j) { Lj[j] = Pinv[Lj[j]]; }
    return {L:L, U:U, P:P, Pinv:Pinv};
}
numeric.ccsLUP = numeric.ccsLUP0;

numeric.ccsDim = function ccsDim(A) { return [numeric.sup(A[1])+1,A[0].length-1]; }
numeric.ccsGetBlock = function ccsGetBlock(A,i,j) {
    var s = numeric.ccsDim(A),m=s[0],n=s[1];
    if(typeof i === "undefined") { i = numeric.linspace(0,m-1); }
    else if(typeof i === "number") { i = [i]; }
    if(typeof j === "undefined") { j = numeric.linspace(0,n-1); }
    else if(typeof j === "number") { j = [j]; }
    var p,p0,p1,P = i.length,q,Q = j.length,r,jq,ip;
    var Bi = numeric.rep([n],0), Bj=[], Bv=[], B = [Bi,Bj,Bv];
    var Ai = A[0], Aj = A[1], Av = A[2];
    var x = numeric.rep([m],0),count=0,flags = numeric.rep([m],0);
    for(q=0;q<Q;++q) {
        jq = j[q];
        var q0 = Ai[jq];
        var q1 = Ai[jq+1];
        for(p=q0;p<q1;++p) {
            r = Aj[p];
            flags[r] = 1;
            x[r] = Av[p];
        }
        for(p=0;p<P;++p) {
            ip = i[p];
            if(flags[ip]) {
                Bj[count] = p;
                Bv[count] = x[i[p]];
                ++count;
            }
        }
        for(p=q0;p<q1;++p) {
            r = Aj[p];
            flags[r] = 0;
        }
        Bi[q+1] = count;
    }
    return B;
}

numeric.ccsDot = function ccsDot(A,B) {
    var Ai = A[0], Aj = A[1], Av = A[2];
    var Bi = B[0], Bj = B[1], Bv = B[2];
    var sA = numeric.ccsDim(A), sB = numeric.ccsDim(B);
    var m = sA[0], n = sA[1], o = sB[1];
    var x = numeric.rep([m],0), flags = numeric.rep([m],0), xj = Array(m);
    var Ci = numeric.rep([o],0), Cj = [], Cv = [], C = [Ci,Cj,Cv];
    var i,j,k,j0,j1,i0,i1,l,p,a,b;
    for(k=0;k!==o;++k) {
        j0 = Bi[k];
        j1 = Bi[k+1];
        p = 0;
        for(j=j0;j<j1;++j) {
            a = Bj[j];
            b = Bv[j];
            i0 = Ai[a];
            i1 = Ai[a+1];
            for(i=i0;i<i1;++i) {
                l = Aj[i];
                if(flags[l]===0) {
                    xj[p] = l;
                    flags[l] = 1;
                    p = p+1;
                }
                x[l] = x[l] + Av[i]*b;
            }
        }
        j0 = Ci[k];
        j1 = j0+p;
        Ci[k+1] = j1;
        for(j=p-1;j!==-1;--j) {
            b = j0+j;
            i = xj[j];
            Cj[b] = i;
            Cv[b] = x[i];
            flags[i] = 0;
            x[i] = 0;
        }
        Ci[k+1] = Ci[k]+p;
    }
    return C;
}

numeric.ccsLUPSolve = function ccsLUPSolve(LUP,B) {
    var L = LUP.L, U = LUP.U, P = LUP.P;
    var Bi = B[0];
    var flag = false;
    if(typeof Bi !== "object") { B = [[0,B.length],numeric.linspace(0,B.length-1),B]; Bi = B[0]; flag = true; }
    var Bj = B[1], Bv = B[2];
    var n = L[0].length-1, m = Bi.length-1;
    var x = numeric.rep([n],0), xj = Array(n);
    var b = numeric.rep([n],0), bj = Array(n);
    var Xi = numeric.rep([m+1],0), Xj = [], Xv = [];
    var sol = numeric.ccsTSolve;
    var i,j,j0,j1,k,J,N=0;
    for(i=0;i<m;++i) {
        k = 0;
        j0 = Bi[i];
        j1 = Bi[i+1];
        for(j=j0;j<j1;++j) { 
            J = LUP.Pinv[Bj[j]];
            bj[k] = J;
            b[J] = Bv[j];
            ++k;
        }
        bj.length = k;
        sol(L,b,x,bj,xj);
        for(j=bj.length-1;j!==-1;--j) b[bj[j]] = 0;
        sol(U,x,b,xj,bj);
        if(flag) return b;
        for(j=xj.length-1;j!==-1;--j) x[xj[j]] = 0;
        for(j=bj.length-1;j!==-1;--j) {
            J = bj[j];
            Xj[N] = J;
            Xv[N] = b[J];
            b[J] = 0;
            ++N;
        }
        Xi[i+1] = N;
    }
    return [Xi,Xj,Xv];
}

numeric.ccsbinop = function ccsbinop(body,setup) {
    if(typeof setup === "undefined") setup='';
    return Function('X','Y',
            'var Xi = X[0], Xj = X[1], Xv = X[2];\n'+
            'var Yi = Y[0], Yj = Y[1], Yv = Y[2];\n'+
            'var n = Xi.length-1,m = Math.max(numeric.sup(Xj),numeric.sup(Yj))+1;\n'+
            'var Zi = numeric.rep([n+1],0), Zj = [], Zv = [];\n'+
            'var x = numeric.rep([m],0),y = numeric.rep([m],0);\n'+
            'var xk,yk,zk;\n'+
            'var i,j,j0,j1,k,p=0;\n'+
            setup+
            'for(i=0;i<n;++i) {\n'+
            '  j0 = Xi[i]; j1 = Xi[i+1];\n'+
            '  for(j=j0;j!==j1;++j) {\n'+
            '    k = Xj[j];\n'+
            '    x[k] = 1;\n'+
            '    Zj[p] = k;\n'+
            '    ++p;\n'+
            '  }\n'+
            '  j0 = Yi[i]; j1 = Yi[i+1];\n'+
            '  for(j=j0;j!==j1;++j) {\n'+
            '    k = Yj[j];\n'+
            '    y[k] = Yv[j];\n'+
            '    if(x[k] === 0) {\n'+
            '      Zj[p] = k;\n'+
            '      ++p;\n'+
            '    }\n'+
            '  }\n'+
            '  Zi[i+1] = p;\n'+
            '  j0 = Xi[i]; j1 = Xi[i+1];\n'+
            '  for(j=j0;j!==j1;++j) x[Xj[j]] = Xv[j];\n'+
            '  j0 = Zi[i]; j1 = Zi[i+1];\n'+
            '  for(j=j0;j!==j1;++j) {\n'+
            '    k = Zj[j];\n'+
            '    xk = x[k];\n'+
            '    yk = y[k];\n'+
            body+'\n'+
            '    Zv[j] = zk;\n'+
            '  }\n'+
            '  j0 = Xi[i]; j1 = Xi[i+1];\n'+
            '  for(j=j0;j!==j1;++j) x[Xj[j]] = 0;\n'+
            '  j0 = Yi[i]; j1 = Yi[i+1];\n'+
            '  for(j=j0;j!==j1;++j) y[Yj[j]] = 0;\n'+
            '}\n'+
            'return [Zi,Zj,Zv];'
            );
};

(function() {
    var k,A,B,C;
    for(k in numeric.ops2) {
        if(isFinite(eval('1'+numeric.ops2[k]+'0'))) A = '[Y[0],Y[1],numeric.'+k+'(X,Y[2])]';
        else A = 'NaN';
        if(isFinite(eval('0'+numeric.ops2[k]+'1'))) B = '[X[0],X[1],numeric.'+k+'(X[2],Y)]';
        else B = 'NaN';
        if(isFinite(eval('1'+numeric.ops2[k]+'0')) && isFinite(eval('0'+numeric.ops2[k]+'1'))) C = 'numeric.ccs'+k+'MM(X,Y)';
        else C = 'NaN';
        numeric['ccs'+k+'MM'] = numeric.ccsbinop('zk = xk '+numeric.ops2[k]+'yk;');
        numeric['ccs'+k] = Function('X','Y',
                'if(typeof X === "number") return '+A+';\n'+
                'if(typeof Y === "number") return '+B+';\n'+
                'return '+C+';\n'
                );
    }
}());

numeric.ccsScatter = function ccsScatter(A) {
    var Ai = A[0], Aj = A[1], Av = A[2];
    var n = numeric.sup(Aj)+1,m=Ai.length;
    var Ri = numeric.rep([n],0),Rj=Array(m), Rv = Array(m);
    var counts = numeric.rep([n],0),i;
    for(i=0;i<m;++i) counts[Aj[i]]++;
    for(i=0;i<n;++i) Ri[i+1] = Ri[i] + counts[i];
    var ptr = Ri.slice(0),k,Aii;
    for(i=0;i<m;++i) {
        Aii = Aj[i];
        k = ptr[Aii];
        Rj[k] = Ai[i];
        Rv[k] = Av[i];
        ptr[Aii]=ptr[Aii]+1;
    }
    return [Ri,Rj,Rv];
}

numeric.ccsGather = function ccsGather(A) {
    var Ai = A[0], Aj = A[1], Av = A[2];
    var n = Ai.length-1,m = Aj.length;
    var Ri = Array(m), Rj = Array(m), Rv = Array(m);
    var i,j,j0,j1,p;
    p=0;
    for(i=0;i<n;++i) {
        j0 = Ai[i];
        j1 = Ai[i+1];
        for(j=j0;j!==j1;++j) {
            Rj[p] = i;
            Ri[p] = Aj[j];
            Rv[p] = Av[j];
            ++p;
        }
    }
    return [Ri,Rj,Rv];
}

// The following sparse linear algebra routines are deprecated.

numeric.sdim = function dim(A,ret,k) {
    if(typeof ret === "undefined") { ret = []; }
    if(typeof A !== "object") return ret;
    if(typeof k === "undefined") { k=0; }
    if(!(k in ret)) { ret[k] = 0; }
    if(A.length > ret[k]) ret[k] = A.length;
    var i;
    for(i in A) {
        if(A.hasOwnProperty(i)) dim(A[i],ret,k+1);
    }
    return ret;
};

numeric.sclone = function clone(A,k,n) {
    if(typeof k === "undefined") { k=0; }
    if(typeof n === "undefined") { n = numeric.sdim(A).length; }
    var i,ret = Array(A.length);
    if(k === n-1) {
        for(i in A) { if(A.hasOwnProperty(i)) ret[i] = A[i]; }
        return ret;
    }
    for(i in A) {
        if(A.hasOwnProperty(i)) ret[i] = clone(A[i],k+1,n);
    }
    return ret;
}

numeric.sdiag = function diag(d) {
    var n = d.length,i,ret = Array(n),i1,i2,i3;
    for(i=n-1;i>=1;i-=2) {
        i1 = i-1;
        ret[i] = []; ret[i][i] = d[i];
        ret[i1] = []; ret[i1][i1] = d[i1];
    }
    if(i===0) { ret[0] = []; ret[0][0] = d[i]; }
    return ret;
}

numeric.sidentity = function identity(n) { return numeric.sdiag(numeric.rep([n],1)); }

numeric.stranspose = function transpose(A) {
    var ret = [], n = A.length, i,j,Ai;
    for(i in A) {
        if(!(A.hasOwnProperty(i))) continue;
        Ai = A[i];
        for(j in Ai) {
            if(!(Ai.hasOwnProperty(j))) continue;
            if(typeof ret[j] !== "object") { ret[j] = []; }
            ret[j][i] = Ai[j];
        }
    }
    return ret;
}

numeric.sLUP = function LUP(A,tol) {
    throw new Error("The function numeric.sLUP had a bug in it and has been removed. Please use the new numeric.ccsLUP function instead.");
};

numeric.sdotMM = function dotMM(A,B) {
    var p = A.length, q = B.length, BT = numeric.stranspose(B), r = BT.length, Ai, BTk;
    var i,j,k,accum;
    var ret = Array(p),reti;
    for(i=p-1;i>=0;i--) {
        reti = [];
        Ai = A[i];
        for(k=r-1;k>=0;k--) {
            accum = 0;
            BTk = BT[k];
            for(j in Ai) {
                if(!(Ai.hasOwnProperty(j))) continue;
                if(j in BTk) { accum += Ai[j]*BTk[j]; }
            }
            if(accum) reti[k] = accum;
        }
        ret[i] = reti;
    }
    return ret;
}

numeric.sdotMV = function dotMV(A,x) {
    var p = A.length, Ai, i,j;
    var ret = Array(p), accum;
    for(i=p-1;i>=0;i--) {
        Ai = A[i];
        accum = 0;
        for(j in Ai) {
            if(!(Ai.hasOwnProperty(j))) continue;
            if(x[j]) accum += Ai[j]*x[j];
        }
        if(accum) ret[i] = accum;
    }
    return ret;
}

numeric.sdotVM = function dotMV(x,A) {
    var i,j,Ai,alpha;
    var ret = [], accum;
    for(i in x) {
        if(!x.hasOwnProperty(i)) continue;
        Ai = A[i];
        alpha = x[i];
        for(j in Ai) {
            if(!Ai.hasOwnProperty(j)) continue;
            if(!ret[j]) { ret[j] = 0; }
            ret[j] += alpha*Ai[j];
        }
    }
    return ret;
}

numeric.sdotVV = function dotVV(x,y) {
    var i,ret=0;
    for(i in x) { if(x[i] && y[i]) ret+= x[i]*y[i]; }
    return ret;
}

numeric.sdot = function dot(A,B) {
    var m = numeric.sdim(A).length, n = numeric.sdim(B).length;
    var k = m*1000+n;
    switch(k) {
    case 0: return A*B;
    case 1001: return numeric.sdotVV(A,B);
    case 2001: return numeric.sdotMV(A,B);
    case 1002: return numeric.sdotVM(A,B);
    case 2002: return numeric.sdotMM(A,B);
    default: throw new Error('numeric.sdot not implemented for tensors of order '+m+' and '+n);
    }
}

numeric.sscatter = function scatter(V) {
    var n = V[0].length, Vij, i, j, m = V.length, A = [], Aj;
    for(i=n-1;i>=0;--i) {
        if(!V[m-1][i]) continue;
        Aj = A;
        for(j=0;j<m-2;j++) {
            Vij = V[j][i];
            if(!Aj[Vij]) Aj[Vij] = [];
            Aj = Aj[Vij];
        }
        Aj[V[j][i]] = V[j+1][i];
    }
    return A;
}

numeric.sgather = function gather(A,ret,k) {
    if(typeof ret === "undefined") ret = [];
    if(typeof k === "undefined") k = [];
    var n,i,Ai;
    n = k.length;
    for(i in A) {
        if(A.hasOwnProperty(i)) {
            k[n] = parseInt(i);
            Ai = A[i];
            if(typeof Ai === "number") {
                if(Ai) {
                    if(ret.length === 0) {
                        for(i=n+1;i>=0;--i) ret[i] = [];
                    }
                    for(i=n;i>=0;--i) ret[i].push(k[i]);
                    ret[n+1].push(Ai);
                }
            } else gather(Ai,ret,k);
        }
    }
    if(k.length>n) k.pop();
    return ret;
}

// 6. Coordinate matrices
numeric.cLU = function LU(A) {
    var I = A[0], J = A[1], V = A[2];
    var p = I.length, m=0, i,j,k,a,b,c;
    for(i=0;i<p;i++) if(I[i]>m) m=I[i];
    m++;
    var L = Array(m), U = Array(m), left = numeric.rep([m],Infinity), right = numeric.rep([m],-Infinity);
    var Ui, Uj,alpha;
    for(k=0;k<p;k++) {
        i = I[k];
        j = J[k];
        if(j<left[i]) left[i] = j;
        if(j>right[i]) right[i] = j;
    }
    for(i=0;i<m-1;i++) { if(right[i] > right[i+1]) right[i+1] = right[i]; }
    for(i=m-1;i>=1;i--) { if(left[i]<left[i-1]) left[i-1] = left[i]; }
    var countL = 0, countU = 0;
    for(i=0;i<m;i++) {
        U[i] = numeric.rep([right[i]-left[i]+1],0);
        L[i] = numeric.rep([i-left[i]],0);
        countL += i-left[i]+1;
        countU += right[i]-i+1;
    }
    for(k=0;k<p;k++) { i = I[k]; U[i][J[k]-left[i]] = V[k]; }
    for(i=0;i<m-1;i++) {
        a = i-left[i];
        Ui = U[i];
        for(j=i+1;left[j]<=i && j<m;j++) {
            b = i-left[j];
            c = right[i]-i;
            Uj = U[j];
            alpha = Uj[b]/Ui[a];
            if(alpha) {
                for(k=1;k<=c;k++) { Uj[k+b] -= alpha*Ui[k+a]; }
                L[j][i-left[j]] = alpha;
            }
        }
    }
    var Ui = [], Uj = [], Uv = [], Li = [], Lj = [], Lv = [];
    var p,q,foo;
    p=0; q=0;
    for(i=0;i<m;i++) {
        a = left[i];
        b = right[i];
        foo = U[i];
        for(j=i;j<=b;j++) {
            if(foo[j-a]) {
                Ui[p] = i;
                Uj[p] = j;
                Uv[p] = foo[j-a];
                p++;
            }
        }
        foo = L[i];
        for(j=a;j<i;j++) {
            if(foo[j-a]) {
                Li[q] = i;
                Lj[q] = j;
                Lv[q] = foo[j-a];
                q++;
            }
        }
        Li[q] = i;
        Lj[q] = i;
        Lv[q] = 1;
        q++;
    }
    return {U:[Ui,Uj,Uv], L:[Li,Lj,Lv]};
};

numeric.cLUsolve = function LUsolve(lu,b) {
    var L = lu.L, U = lu.U, ret = numeric.clone(b);
    var Li = L[0], Lj = L[1], Lv = L[2];
    var Ui = U[0], Uj = U[1], Uv = U[2];
    var p = Ui.length, q = Li.length;
    var m = ret.length,i,j,k;
    k = 0;
    for(i=0;i<m;i++) {
        while(Lj[k] < i) {
            ret[i] -= Lv[k]*ret[Lj[k]];
            k++;
        }
        k++;
    }
    k = p-1;
    for(i=m-1;i>=0;i--) {
        while(Uj[k] > i) {
            ret[i] -= Uv[k]*ret[Uj[k]];
            k--;
        }
        ret[i] /= Uv[k];
        k--;
    }
    return ret;
};

numeric.cgrid = function grid(n,shape) {
    if(typeof n === "number") n = [n,n];
    var ret = numeric.rep(n,-1);
    var i,j,count;
    if(typeof shape !== "function") {
        switch(shape) {
        case 'L':
            shape = function(i,j) { return (i>=n[0]/2 || j<n[1]/2); }
            break;
        default:
            shape = function(i,j) { return true; };
            break;
        }
    }
    count=0;
    for(i=1;i<n[0]-1;i++) for(j=1;j<n[1]-1;j++) 
        if(shape(i,j)) {
            ret[i][j] = count;
            count++;
        }
    return ret;
}

numeric.cdelsq = function delsq(g) {
    var dir = [[-1,0],[0,-1],[0,1],[1,0]];
    var s = numeric.dim(g), m = s[0], n = s[1], i,j,k,p,q;
    var Li = [], Lj = [], Lv = [];
    for(i=1;i<m-1;i++) for(j=1;j<n-1;j++) {
        if(g[i][j]<0) continue;
        for(k=0;k<4;k++) {
            p = i+dir[k][0];
            q = j+dir[k][1];
            if(g[p][q]<0) continue;
            Li.push(g[i][j]);
            Lj.push(g[p][q]);
            Lv.push(-1);
        }
        Li.push(g[i][j]);
        Lj.push(g[i][j]);
        Lv.push(4);
    }
    return [Li,Lj,Lv];
}

numeric.cdotMV = function dotMV(A,x) {
    var ret, Ai = A[0], Aj = A[1], Av = A[2],k,p=Ai.length,N;
    N=0;
    for(k=0;k<p;k++) { if(Ai[k]>N) N = Ai[k]; }
    N++;
    ret = numeric.rep([N],0);
    for(k=0;k<p;k++) { ret[Ai[k]]+=Av[k]*x[Aj[k]]; }
    return ret;
}

// 7. Splines

numeric.Spline = function Spline(x,yl,yr,kl,kr) { this.x = x; this.yl = yl; this.yr = yr; this.kl = kl; this.kr = kr; }
numeric.Spline.prototype._at = function _at(x1,p) {
    var x = this.x;
    var yl = this.yl;
    var yr = this.yr;
    var kl = this.kl;
    var kr = this.kr;
    var x1,a,b,t;
    var add = numeric.add, sub = numeric.sub, mul = numeric.mul;
    a = sub(mul(kl[p],x[p+1]-x[p]),sub(yr[p+1],yl[p]));
    b = add(mul(kr[p+1],x[p]-x[p+1]),sub(yr[p+1],yl[p]));
    t = (x1-x[p])/(x[p+1]-x[p]);
    var s = t*(1-t);
    return add(add(add(mul(1-t,yl[p]),mul(t,yr[p+1])),mul(a,s*(1-t))),mul(b,s*t));
}
numeric.Spline.prototype.at = function at(x0) {
    if(typeof x0 === "number") {
        var x = this.x;
        var n = x.length;
        var p,q,mid,floor = Math.floor,a,b,t;
        p = 0;
        q = n-1;
        while(q-p>1) {
            mid = floor((p+q)/2);
            if(x[mid] <= x0) p = mid;
            else q = mid;
        }
        return this._at(x0,p);
    }
    var n = x0.length, i, ret = Array(n);
    for(i=n-1;i!==-1;--i) ret[i] = this.at(x0[i]);
    return ret;
}
numeric.Spline.prototype.diff = function diff() {
    var x = this.x;
    var yl = this.yl;
    var yr = this.yr;
    var kl = this.kl;
    var kr = this.kr;
    var n = yl.length;
    var i,dx,dy;
    var zl = kl, zr = kr, pl = Array(n), pr = Array(n);
    var add = numeric.add, mul = numeric.mul, div = numeric.div, sub = numeric.sub;
    for(i=n-1;i!==-1;--i) {
        dx = x[i+1]-x[i];
        dy = sub(yr[i+1],yl[i]);
        pl[i] = div(add(mul(dy, 6),mul(kl[i],-4*dx),mul(kr[i+1],-2*dx)),dx*dx);
        pr[i+1] = div(add(mul(dy,-6),mul(kl[i], 2*dx),mul(kr[i+1], 4*dx)),dx*dx);
    }
    return new numeric.Spline(x,zl,zr,pl,pr);
}
numeric.Spline.prototype.roots = function roots() {
    function sqr(x) { return x*x; }
    function heval(y0,y1,k0,k1,x) {
        var A = k0*2-(y1-y0);
        var B = -k1*2+(y1-y0);
        var t = (x+1)*0.5;
        var s = t*(1-t);
        return (1-t)*y0+t*y1+A*s*(1-t)+B*s*t;
    }
    var ret = [];
    var x = this.x, yl = this.yl, yr = this.yr, kl = this.kl, kr = this.kr;
    if(typeof yl[0] === "number") {
        yl = [yl];
        yr = [yr];
        kl = [kl];
        kr = [kr];
    }
    var m = yl.length,n=x.length-1,i,j,k,y,s,t;
    var ai,bi,ci,di, ret = Array(m),ri,k0,k1,y0,y1,A,B,D,dx,cx,stops,z0,z1,zm,t0,t1,tm;
    var sqrt = Math.sqrt;
    for(i=0;i!==m;++i) {
        ai = yl[i];
        bi = yr[i];
        ci = kl[i];
        di = kr[i];
        ri = [];
        for(j=0;j!==n;j++) {
            if(j>0 && bi[j]*ai[j]<0) ri.push(x[j]);
            dx = (x[j+1]-x[j]);
            cx = x[j];
            y0 = ai[j];
            y1 = bi[j+1];
            k0 = ci[j]/dx;
            k1 = di[j+1]/dx;
            D = sqr(k0-k1+3*(y0-y1)) + 12*k1*y0;
            A = k1+3*y0+2*k0-3*y1;
            B = 3*(k1+k0+2*(y0-y1));
            if(D<=0) {
                z0 = A/B;
                if(z0>x[j] && z0<x[j+1]) stops = [x[j],z0,x[j+1]];
                else stops = [x[j],x[j+1]];
            } else {
                z0 = (A-sqrt(D))/B;
                z1 = (A+sqrt(D))/B;
                stops = [x[j]];
                if(z0>x[j] && z0<x[j+1]) stops.push(z0);
                if(z1>x[j] && z1<x[j+1]) stops.push(z1);
                stops.push(x[j+1]);
            }
            t0 = stops[0];
            z0 = this._at(t0,j);
            for(k=0;k<stops.length-1;k++) {
                t1 = stops[k+1];
                z1 = this._at(t1,j);
                if(z0 === 0) {
                    ri.push(t0); 
                    t0 = t1;
                    z0 = z1;
                    continue;
                }
                if(z1 === 0 || z0*z1>0) {
                    t0 = t1;
                    z0 = z1;
                    continue;
                }
                var side = 0;
                while(1) {
                    tm = (z0*t1-z1*t0)/(z0-z1);
                    if(tm <= t0 || tm >= t1) { break; }
                    zm = this._at(tm,j);
                    if(zm*z1>0) {
                        t1 = tm;
                        z1 = zm;
                        if(side === -1) z0*=0.5;
                        side = -1;
                    } else if(zm*z0>0) {
                        t0 = tm;
                        z0 = zm;
                        if(side === 1) z1*=0.5;
                        side = 1;
                    } else break;
                }
                ri.push(tm);
                t0 = stops[k+1];
                z0 = this._at(t0, j);
            }
            if(z1 === 0) ri.push(t1);
        }
        ret[i] = ri;
    }
    if(typeof this.yl[0] === "number") return ret[0];
    return ret;
}
numeric.spline = function spline(x,y,k1,kn) {
    var n = x.length, b = [], dx = [], dy = [];
    var i;
    var sub = numeric.sub,mul = numeric.mul,add = numeric.add;
    for(i=n-2;i>=0;i--) { dx[i] = x[i+1]-x[i]; dy[i] = sub(y[i+1],y[i]); }
    if(typeof k1 === "string" || typeof kn === "string") { 
        k1 = kn = "periodic";
    }
    // Build sparse tridiagonal system
    var T = [[],[],[]];
    switch(typeof k1) {
    case "undefined":
        b[0] = mul(3/(dx[0]*dx[0]),dy[0]);
        T[0].push(0,0);
        T[1].push(0,1);
        T[2].push(2/dx[0],1/dx[0]);
        break;
    case "string":
        b[0] = add(mul(3/(dx[n-2]*dx[n-2]),dy[n-2]),mul(3/(dx[0]*dx[0]),dy[0]));
        T[0].push(0,0,0);
        T[1].push(n-2,0,1);
        T[2].push(1/dx[n-2],2/dx[n-2]+2/dx[0],1/dx[0]);
        break;
    default:
        b[0] = k1;
        T[0].push(0);
        T[1].push(0);
        T[2].push(1);
        break;
    }
    for(i=1;i<n-1;i++) {
        b[i] = add(mul(3/(dx[i-1]*dx[i-1]),dy[i-1]),mul(3/(dx[i]*dx[i]),dy[i]));
        T[0].push(i,i,i);
        T[1].push(i-1,i,i+1);
        T[2].push(1/dx[i-1],2/dx[i-1]+2/dx[i],1/dx[i]);
    }
    switch(typeof kn) {
    case "undefined":
        b[n-1] = mul(3/(dx[n-2]*dx[n-2]),dy[n-2]);
        T[0].push(n-1,n-1);
        T[1].push(n-2,n-1);
        T[2].push(1/dx[n-2],2/dx[n-2]);
        break;
    case "string":
        T[1][T[1].length-1] = 0;
        break;
    default:
        b[n-1] = kn;
        T[0].push(n-1);
        T[1].push(n-1);
        T[2].push(1);
        break;
    }
    if(typeof b[0] !== "number") b = numeric.transpose(b);
    else b = [b];
    var k = Array(b.length);
    if(typeof k1 === "string") {
        for(i=k.length-1;i!==-1;--i) {
            k[i] = numeric.ccsLUPSolve(numeric.ccsLUP(numeric.ccsScatter(T)),b[i]);
            k[i][n-1] = k[i][0];
        }
    } else {
        for(i=k.length-1;i!==-1;--i) {
            k[i] = numeric.cLUsolve(numeric.cLU(T),b[i]);
        }
    }
    if(typeof y[0] === "number") k = k[0];
    else k = numeric.transpose(k);
    return new numeric.Spline(x,y,y,k,k);
}

// 8. FFT
numeric.fftpow2 = function fftpow2(x,y) {
    var n = x.length;
    if(n === 1) return;
    var cos = Math.cos, sin = Math.sin, i,j;
    var xe = Array(n/2), ye = Array(n/2), xo = Array(n/2), yo = Array(n/2);
    j = n/2;
    for(i=n-1;i!==-1;--i) {
        --j;
        xo[j] = x[i];
        yo[j] = y[i];
        --i;
        xe[j] = x[i];
        ye[j] = y[i];
    }
    fftpow2(xe,ye);
    fftpow2(xo,yo);
    j = n/2;
    var t,k = (-6.2831853071795864769252867665590057683943387987502116419/n),ci,si;
    for(i=n-1;i!==-1;--i) {
        --j;
        if(j === -1) j = n/2-1;
        t = k*i;
        ci = cos(t);
        si = sin(t);
        x[i] = xe[j] + ci*xo[j] - si*yo[j];
        y[i] = ye[j] + ci*yo[j] + si*xo[j];
    }
}
numeric._ifftpow2 = function _ifftpow2(x,y) {
    var n = x.length;
    if(n === 1) return;
    var cos = Math.cos, sin = Math.sin, i,j;
    var xe = Array(n/2), ye = Array(n/2), xo = Array(n/2), yo = Array(n/2);
    j = n/2;
    for(i=n-1;i!==-1;--i) {
        --j;
        xo[j] = x[i];
        yo[j] = y[i];
        --i;
        xe[j] = x[i];
        ye[j] = y[i];
    }
    _ifftpow2(xe,ye);
    _ifftpow2(xo,yo);
    j = n/2;
    var t,k = (6.2831853071795864769252867665590057683943387987502116419/n),ci,si;
    for(i=n-1;i!==-1;--i) {
        --j;
        if(j === -1) j = n/2-1;
        t = k*i;
        ci = cos(t);
        si = sin(t);
        x[i] = xe[j] + ci*xo[j] - si*yo[j];
        y[i] = ye[j] + ci*yo[j] + si*xo[j];
    }
}
numeric.ifftpow2 = function ifftpow2(x,y) {
    numeric._ifftpow2(x,y);
    numeric.diveq(x,x.length);
    numeric.diveq(y,y.length);
}
numeric.convpow2 = function convpow2(ax,ay,bx,by) {
    numeric.fftpow2(ax,ay);
    numeric.fftpow2(bx,by);
    var i,n = ax.length,axi,bxi,ayi,byi;
    for(i=n-1;i!==-1;--i) {
        axi = ax[i]; ayi = ay[i]; bxi = bx[i]; byi = by[i];
        ax[i] = axi*bxi-ayi*byi;
        ay[i] = axi*byi+ayi*bxi;
    }
    numeric.ifftpow2(ax,ay);
}
numeric.T.prototype.fft = function fft() {
    var x = this.x, y = this.y;
    var n = x.length, log = Math.log, log2 = log(2),
        p = Math.ceil(log(2*n-1)/log2), m = Math.pow(2,p);
    var cx = numeric.rep([m],0), cy = numeric.rep([m],0), cos = Math.cos, sin = Math.sin;
    var k, c = (-3.141592653589793238462643383279502884197169399375105820/n),t;
    var a = numeric.rep([m],0), b = numeric.rep([m],0),nhalf = Math.floor(n/2);
    for(k=0;k<n;k++) a[k] = x[k];
    if(typeof y !== "undefined") for(k=0;k<n;k++) b[k] = y[k];
    cx[0] = 1;
    for(k=1;k<=m/2;k++) {
        t = c*k*k;
        cx[k] = cos(t);
        cy[k] = sin(t);
        cx[m-k] = cos(t);
        cy[m-k] = sin(t)
    }
    var X = new numeric.T(a,b), Y = new numeric.T(cx,cy);
    X = X.mul(Y);
    numeric.convpow2(X.x,X.y,numeric.clone(Y.x),numeric.neg(Y.y));
    X = X.mul(Y);
    X.x.length = n;
    X.y.length = n;
    return X;
}
numeric.T.prototype.ifft = function ifft() {
    var x = this.x, y = this.y;
    var n = x.length, log = Math.log, log2 = log(2),
        p = Math.ceil(log(2*n-1)/log2), m = Math.pow(2,p);
    var cx = numeric.rep([m],0), cy = numeric.rep([m],0), cos = Math.cos, sin = Math.sin;
    var k, c = (3.141592653589793238462643383279502884197169399375105820/n),t;
    var a = numeric.rep([m],0), b = numeric.rep([m],0),nhalf = Math.floor(n/2);
    for(k=0;k<n;k++) a[k] = x[k];
    if(typeof y !== "undefined") for(k=0;k<n;k++) b[k] = y[k];
    cx[0] = 1;
    for(k=1;k<=m/2;k++) {
        t = c*k*k;
        cx[k] = cos(t);
        cy[k] = sin(t);
        cx[m-k] = cos(t);
        cy[m-k] = sin(t)
    }
    var X = new numeric.T(a,b), Y = new numeric.T(cx,cy);
    X = X.mul(Y);
    numeric.convpow2(X.x,X.y,numeric.clone(Y.x),numeric.neg(Y.y));
    X = X.mul(Y);
    X.x.length = n;
    X.y.length = n;
    return X.div(n);
}

//9. Unconstrained optimization
numeric.gradient = function gradient(f,x) {
    var n = x.length;
    var f0 = f(x);
    if(isNaN(f0)) throw new Error('gradient: f(x) is a NaN!');
    var max = Math.max;
    var i,x0 = numeric.clone(x),f1,f2, J = Array(n);
    var div = numeric.div, sub = numeric.sub,errest,roundoff,max = Math.max,eps = 1e-3,abs = Math.abs, min = Math.min;
    var t0,t1,t2,it=0,d1,d2,N;
    for(i=0;i<n;i++) {
        var h = max(1e-6*f0,1e-8);
        while(1) {
            ++it;
            if(it>20) { throw new Error("Numerical gradient fails"); }
            x0[i] = x[i]+h;
            f1 = f(x0);
            x0[i] = x[i]-h;
            f2 = f(x0);
            x0[i] = x[i];
            if(isNaN(f1) || isNaN(f2)) { h/=16; continue; }
            J[i] = (f1-f2)/(2*h);
            t0 = x[i]-h;
            t1 = x[i];
            t2 = x[i]+h;
            d1 = (f1-f0)/h;
            d2 = (f0-f2)/h;
            N = max(abs(J[i]),abs(f0),abs(f1),abs(f2),abs(t0),abs(t1),abs(t2),1e-8);
            errest = min(max(abs(d1-J[i]),abs(d2-J[i]),abs(d1-d2))/N,h/N);
            if(errest>eps) { h/=16; }
            else break;
            }
    }
    return J;
}

numeric.uncmin = function uncmin(f,x0,tol,gradient,maxit,callback,options) {
    var grad = numeric.gradient;
    if(typeof options === "undefined") { options = {}; }
    if(typeof tol === "undefined") { tol = 1e-8; }
    if(typeof gradient === "undefined") { gradient = function(x) { return grad(f,x); }; }
    if(typeof maxit === "undefined") maxit = 1000;
    x0 = numeric.clone(x0);
    var n = x0.length;
    var f0 = f(x0),f1,df0;
    if(isNaN(f0)) throw new Error('uncmin: f(x0) is a NaN!');
    var max = Math.max, norm2 = numeric.norm2;
    tol = max(tol,numeric.epsilon);
    var step,g0,g1,H1 = options.Hinv || numeric.identity(n);
    var dot = numeric.dot, inv = numeric.inv, sub = numeric.sub, add = numeric.add, ten = numeric.tensor, div = numeric.div, mul = numeric.mul;
    var all = numeric.all, isfinite = numeric.isFinite, neg = numeric.neg;
    var it=0,i,s,x1,y,Hy,Hs,ys,i0,t,nstep,t1,t2;
    var msg = "";
    g0 = gradient(x0);
    while(it<maxit) {
        if(typeof callback === "function") { if(callback(it,x0,f0,g0,H1)) { msg = "Callback returned true"; break; } }
        if(!all(isfinite(g0))) { msg = "Gradient has Infinity or NaN"; break; }
        step = neg(dot(H1,g0));
        if(!all(isfinite(step))) { msg = "Search direction has Infinity or NaN"; break; }
        nstep = norm2(step);
        if(nstep < tol) { msg="Newton step smaller than tol"; break; }
        t = 1;
        df0 = dot(g0,step);
        // line search
        x1 = x0;
        while(it < maxit) {
            if(t*nstep < tol) { break; }
            s = mul(step,t);
            x1 = add(x0,s);
            f1 = f(x1);
            if(f1-f0 >= 0.1*t*df0 || isNaN(f1)) {
                t *= 0.5;
                ++it;
                continue;
            }
            break;
        }
        if(t*nstep < tol) { msg = "Line search step size smaller than tol"; break; }
        if(it === maxit) { msg = "maxit reached during line search"; break; }
        g1 = gradient(x1);
        y = sub(g1,g0);
        ys = dot(y,s);
        Hy = dot(H1,y);
        H1 = sub(add(H1,
                mul(
                        (ys+dot(y,Hy))/(ys*ys),
                        ten(s,s)    )),
                div(add(ten(Hy,s),ten(s,Hy)),ys));
        x0 = x1;
        f0 = f1;
        g0 = g1;
        ++it;
    }
    return {solution: x0, f: f0, gradient: g0, invHessian: H1, iterations:it, message: msg};
}

// 10. Ode solver (Dormand-Prince)
numeric.Dopri = function Dopri(x,y,f,ymid,iterations,msg,events) {
    this.x = x;
    this.y = y;
    this.f = f;
    this.ymid = ymid;
    this.iterations = iterations;
    this.events = events;
    this.message = msg;
}
numeric.Dopri.prototype._at = function _at(xi,j) {
    function sqr(x) { return x*x; }
    var sol = this;
    var xs = sol.x;
    var ys = sol.y;
    var k1 = sol.f;
    var ymid = sol.ymid;
    var n = xs.length;
    var x0,x1,xh,y0,y1,yh,xi;
    var floor = Math.floor,h;
    var c = 0.5;
    var add = numeric.add, mul = numeric.mul,sub = numeric.sub, p,q,w;
    x0 = xs[j];
    x1 = xs[j+1];
    y0 = ys[j];
    y1 = ys[j+1];
    h  = x1-x0;
    xh = x0+c*h;
    yh = ymid[j];
    p = sub(k1[j  ],mul(y0,1/(x0-xh)+2/(x0-x1)));
    q = sub(k1[j+1],mul(y1,1/(x1-xh)+2/(x1-x0)));
    w = [sqr(xi - x1) * (xi - xh) / sqr(x0 - x1) / (x0 - xh),
         sqr(xi - x0) * sqr(xi - x1) / sqr(x0 - xh) / sqr(x1 - xh),
         sqr(xi - x0) * (xi - xh) / sqr(x1 - x0) / (x1 - xh),
         (xi - x0) * sqr(xi - x1) * (xi - xh) / sqr(x0-x1) / (x0 - xh),
         (xi - x1) * sqr(xi - x0) * (xi - xh) / sqr(x0-x1) / (x1 - xh)];
    return add(add(add(add(mul(y0,w[0]),
                           mul(yh,w[1])),
                           mul(y1,w[2])),
                           mul( p,w[3])),
                           mul( q,w[4]));
}
numeric.Dopri.prototype.at = function at(x) {
    var i,j,k,floor = Math.floor;
    if(typeof x !== "number") {
        var n = x.length, ret = Array(n);
        for(i=n-1;i!==-1;--i) {
            ret[i] = this.at(x[i]);
        }
        return ret;
    }
    var x0 = this.x;
    i = 0; j = x0.length-1;
    while(j-i>1) {
        k = floor(0.5*(i+j));
        if(x0[k] <= x) i = k;
        else j = k;
    }
    return this._at(x,i);
}

numeric.dopri = function dopri(x0,x1,y0,f,tol,maxit,event) {
    if(typeof tol === "undefined") { tol = 1e-6; }
    if(typeof maxit === "undefined") { maxit = 1000; }
    var xs = [x0], ys = [y0], k1 = [f(x0,y0)], k2,k3,k4,k5,k6,k7, ymid = [];
    var A2 = 1/5;
    var A3 = [3/40,9/40];
    var A4 = [44/45,-56/15,32/9];
    var A5 = [19372/6561,-25360/2187,64448/6561,-212/729];
    var A6 = [9017/3168,-355/33,46732/5247,49/176,-5103/18656];
    var b = [35/384,0,500/1113,125/192,-2187/6784,11/84];
    var bm = [0.5*6025192743/30085553152,
              0,
              0.5*51252292925/65400821598,
              0.5*-2691868925/45128329728,
              0.5*187940372067/1594534317056,
              0.5*-1776094331/19743644256,
              0.5*11237099/235043384];
    var c = [1/5,3/10,4/5,8/9,1,1];
    var e = [-71/57600,0,71/16695,-71/1920,17253/339200,-22/525,1/40];
    var i = 0,er,j;
    var h = (x1-x0)/10;
    var it = 0;
    var add = numeric.add, mul = numeric.mul, y1,erinf;
    var max = Math.max, min = Math.min, abs = Math.abs, norminf = numeric.norminf,pow = Math.pow;
    var any = numeric.any, lt = numeric.lt, and = numeric.and, sub = numeric.sub;
    var e0, e1, ev;
    var ret = new numeric.Dopri(xs,ys,k1,ymid,-1,"");
    if(typeof event === "function") e0 = event(x0,y0);
    while(x0<x1 && it<maxit) {
        ++it;
        if(x0+h>x1) h = x1-x0;
        k2 = f(x0+c[0]*h,                add(y0,mul(   A2*h,k1[i])));
        k3 = f(x0+c[1]*h,            add(add(y0,mul(A3[0]*h,k1[i])),mul(A3[1]*h,k2)));
        k4 = f(x0+c[2]*h,        add(add(add(y0,mul(A4[0]*h,k1[i])),mul(A4[1]*h,k2)),mul(A4[2]*h,k3)));
        k5 = f(x0+c[3]*h,    add(add(add(add(y0,mul(A5[0]*h,k1[i])),mul(A5[1]*h,k2)),mul(A5[2]*h,k3)),mul(A5[3]*h,k4)));
        k6 = f(x0+c[4]*h,add(add(add(add(add(y0,mul(A6[0]*h,k1[i])),mul(A6[1]*h,k2)),mul(A6[2]*h,k3)),mul(A6[3]*h,k4)),mul(A6[4]*h,k5)));
        y1 = add(add(add(add(add(y0,mul(k1[i],h*b[0])),mul(k3,h*b[2])),mul(k4,h*b[3])),mul(k5,h*b[4])),mul(k6,h*b[5]));
        k7 = f(x0+h,y1);
        er = add(add(add(add(add(mul(k1[i],h*e[0]),mul(k3,h*e[2])),mul(k4,h*e[3])),mul(k5,h*e[4])),mul(k6,h*e[5])),mul(k7,h*e[6]));
        if(typeof er === "number") erinf = abs(er);
        else erinf = norminf(er);
        if(erinf > tol) { // reject
            h = 0.2*h*pow(tol/erinf,0.25);
            if(x0+h === x0) {
                ret.msg = "Step size became too small";
                break;
            }
            continue;
        }
        ymid[i] = add(add(add(add(add(add(y0,
                mul(k1[i],h*bm[0])),
                mul(k3   ,h*bm[2])),
                mul(k4   ,h*bm[3])),
                mul(k5   ,h*bm[4])),
                mul(k6   ,h*bm[5])),
                mul(k7   ,h*bm[6]));
        ++i;
        xs[i] = x0+h;
        ys[i] = y1;
        k1[i] = k7;
        if(typeof event === "function") {
            var yi,xl = x0,xr = x0+0.5*h,xi;
            e1 = event(xr,ymid[i-1]);
            ev = and(lt(e0,0),lt(0,e1));
            if(!any(ev)) { xl = xr; xr = x0+h; e0 = e1; e1 = event(xr,y1); ev = and(lt(e0,0),lt(0,e1)); }
            if(any(ev)) {
                var xc, yc, en,ei;
                var side=0, sl = 1.0, sr = 1.0;
                while(1) {
                    if(typeof e0 === "number") xi = (sr*e1*xl-sl*e0*xr)/(sr*e1-sl*e0);
                    else {
                        xi = xr;
                        for(j=e0.length-1;j!==-1;--j) {
                            if(e0[j]<0 && e1[j]>0) xi = min(xi,(sr*e1[j]*xl-sl*e0[j]*xr)/(sr*e1[j]-sl*e0[j]));
                        }
                    }
                    if(xi <= xl || xi >= xr) break;
                    yi = ret._at(xi, i-1);
                    ei = event(xi,yi);
                    en = and(lt(e0,0),lt(0,ei));
                    if(any(en)) {
                        xr = xi;
                        e1 = ei;
                        ev = en;
                        sr = 1.0;
                        if(side === -1) sl *= 0.5;
                        else sl = 1.0;
                        side = -1;
                    } else {
                        xl = xi;
                        e0 = ei;
                        sl = 1.0;
                        if(side === 1) sr *= 0.5;
                        else sr = 1.0;
                        side = 1;
                    }
                }
                y1 = ret._at(0.5*(x0+xi),i-1);
                ret.f[i] = f(xi,yi);
                ret.x[i] = xi;
                ret.y[i] = yi;
                ret.ymid[i-1] = y1;
                ret.events = ev;
                ret.iterations = it;
                return ret;
            }
        }
        x0 += h;
        y0 = y1;
        e0 = e1;
        h = min(0.8*h*pow(tol/erinf,0.25),4*h);
    }
    ret.iterations = it;
    return ret;
}

// 11. Ax = b
numeric.LU = function(A, fast) {
  fast = fast || false;

  var abs = Math.abs;
  var i, j, k, absAjk, Akk, Ak, Pk, Ai;
  var max;
  var n = A.length, n1 = n-1;
  var P = new Array(n);
  if(!fast) A = numeric.clone(A);

  for (k = 0; k < n; ++k) {
    Pk = k;
    Ak = A[k];
    max = abs(Ak[k]);
    for (j = k + 1; j < n; ++j) {
      absAjk = abs(A[j][k]);
      if (max < absAjk) {
        max = absAjk;
        Pk = j;
      }
    }
    P[k] = Pk;

    if (Pk != k) {
      A[k] = A[Pk];
      A[Pk] = Ak;
      Ak = A[k];
    }

    Akk = Ak[k];

    for (i = k + 1; i < n; ++i) {
      A[i][k] /= Akk;
    }

    for (i = k + 1; i < n; ++i) {
      Ai = A[i];
      for (j = k + 1; j < n1; ++j) {
        Ai[j] -= Ai[k] * Ak[j];
        ++j;
        Ai[j] -= Ai[k] * Ak[j];
      }
      if(j===n1) Ai[j] -= Ai[k] * Ak[j];
    }
  }

  return {
    LU: A,
    P:  P
  };
}

numeric.LUsolve = function LUsolve(LUP, b) {
  var i, j;
  var LU = LUP.LU;
  var n   = LU.length;
  var x = numeric.clone(b);
  var P   = LUP.P;
  var Pi, LUi, LUii, tmp;

  for (i=n-1;i!==-1;--i) x[i] = b[i];
  for (i = 0; i < n; ++i) {
    Pi = P[i];
    if (P[i] !== i) {
      tmp = x[i];
      x[i] = x[Pi];
      x[Pi] = tmp;
    }

    LUi = LU[i];
    for (j = 0; j < i; ++j) {
      x[i] -= x[j] * LUi[j];
    }
  }

  for (i = n - 1; i >= 0; --i) {
    LUi = LU[i];
    for (j = i + 1; j < n; ++j) {
      x[i] -= x[j] * LUi[j];
    }

    x[i] /= LUi[i];
  }

  return x;
}

numeric.solve = function solve(A,b,fast) { return numeric.LUsolve(numeric.LU(A,fast), b); }

// 12. Linear programming
numeric.echelonize = function echelonize(A) {
    var s = numeric.dim(A), m = s[0], n = s[1];
    var I = numeric.identity(m);
    var P = Array(m);
    var i,j,k,l,Ai,Ii,Z,a;
    var abs = Math.abs;
    var diveq = numeric.diveq;
    A = numeric.clone(A);
    for(i=0;i<m;++i) {
        k = 0;
        Ai = A[i];
        Ii = I[i];
        for(j=1;j<n;++j) if(abs(Ai[k])<abs(Ai[j])) k=j;
        P[i] = k;
        diveq(Ii,Ai[k]);
        diveq(Ai,Ai[k]);
        for(j=0;j<m;++j) if(j!==i) {
            Z = A[j]; a = Z[k];
            for(l=n-1;l!==-1;--l) Z[l] -= Ai[l]*a;
            Z = I[j];
            for(l=m-1;l!==-1;--l) Z[l] -= Ii[l]*a;
        }
    }
    return {I:I, A:A, P:P};
}

numeric.__solveLP = function __solveLP(c,A,b,tol,maxit,x,flag) {
    var sum = numeric.sum, log = numeric.log, mul = numeric.mul, sub = numeric.sub, dot = numeric.dot, div = numeric.div, add = numeric.add;
    var m = c.length, n = b.length,y;
    var unbounded = false, cb,i0=0;
    var alpha = 1.0;
    var f0,df0,AT = numeric.transpose(A), svd = numeric.svd,transpose = numeric.transpose,leq = numeric.leq, sqrt = Math.sqrt, abs = Math.abs;
    var muleq = numeric.muleq;
    var norm = numeric.norminf, any = numeric.any,min = Math.min;
    var all = numeric.all, gt = numeric.gt;
    var p = Array(m), A0 = Array(n),e=numeric.rep([n],1), H;
    var solve = numeric.solve, z = sub(b,dot(A,x)),count;
    var dotcc = dot(c,c);
    var g;
    for(count=i0;count<maxit;++count) {
        var i,j,d;
        for(i=n-1;i!==-1;--i) A0[i] = div(A[i],z[i]);
        var A1 = transpose(A0);
        for(i=m-1;i!==-1;--i) p[i] = (/*x[i]+*/sum(A1[i]));
        alpha = 0.25*abs(dotcc/dot(c,p));
        var a1 = 100*sqrt(dotcc/dot(p,p));
        if(!isFinite(alpha) || alpha>a1) alpha = a1;
        g = add(c,mul(alpha,p));
        H = dot(A1,A0);
        for(i=m-1;i!==-1;--i) H[i][i] += 1;
        d = solve(H,div(g,alpha),true);
        var t0 = div(z,dot(A,d));
        var t = 1.0;
        for(i=n-1;i!==-1;--i) if(t0[i]<0) t = min(t,-0.999*t0[i]);
        y = sub(x,mul(d,t));
        z = sub(b,dot(A,y));
        if(!all(gt(z,0))) return { solution: x, message: "", iterations: count };
        x = y;
        if(alpha<tol) return { solution: y, message: "", iterations: count };
        if(flag) {
            var s = dot(c,g), Ag = dot(A,g);
            unbounded = true;
            for(i=n-1;i!==-1;--i) if(s*Ag[i]<0) { unbounded = false; break; }
        } else {
            if(x[m-1]>=0) unbounded = false;
            else unbounded = true;
        }
        if(unbounded) return { solution: y, message: "Unbounded", iterations: count };
    }
    return { solution: x, message: "maximum iteration count exceeded", iterations:count };
}

numeric._solveLP = function _solveLP(c,A,b,tol,maxit) {
    var m = c.length, n = b.length,y;
    var sum = numeric.sum, log = numeric.log, mul = numeric.mul, sub = numeric.sub, dot = numeric.dot, div = numeric.div, add = numeric.add;
    var c0 = numeric.rep([m],0).concat([1]);
    var J = numeric.rep([n,1],-1);
    var A0 = numeric.blockMatrix([[A                   ,   J  ]]);
    var b0 = b;
    var y = numeric.rep([m],0).concat(Math.max(0,numeric.sup(numeric.neg(b)))+1);
    var x0 = numeric.__solveLP(c0,A0,b0,tol,maxit,y,false);
    var x = numeric.clone(x0.solution);
    x.length = m;
    var foo = numeric.inf(sub(b,dot(A,x)));
    if(foo<0) { return { solution: NaN, message: "Infeasible", iterations: x0.iterations }; }
    var ret = numeric.__solveLP(c, A, b, tol, maxit-x0.iterations, x, true);
    ret.iterations += x0.iterations;
    return ret;
};

numeric.solveLP = function solveLP(c,A,b,Aeq,beq,tol,maxit) {
    if(typeof maxit === "undefined") maxit = 1000;
    if(typeof tol === "undefined") tol = numeric.epsilon;
    if(typeof Aeq === "undefined") return numeric._solveLP(c,A,b,tol,maxit);
    var m = Aeq.length, n = Aeq[0].length, o = A.length;
    var B = numeric.echelonize(Aeq);
    var flags = numeric.rep([n],0);
    var P = B.P;
    var Q = [];
    var i;
    for(i=P.length-1;i!==-1;--i) flags[P[i]] = 1;
    for(i=n-1;i!==-1;--i) if(flags[i]===0) Q.push(i);
    var g = numeric.getRange;
    var I = numeric.linspace(0,m-1), J = numeric.linspace(0,o-1);
    var Aeq2 = g(Aeq,I,Q), A1 = g(A,J,P), A2 = g(A,J,Q), dot = numeric.dot, sub = numeric.sub;
    var A3 = dot(A1,B.I);
    var A4 = sub(A2,dot(A3,Aeq2)), b4 = sub(b,dot(A3,beq));
    var c1 = Array(P.length), c2 = Array(Q.length);
    for(i=P.length-1;i!==-1;--i) c1[i] = c[P[i]];
    for(i=Q.length-1;i!==-1;--i) c2[i] = c[Q[i]];
    var c4 = sub(c2,dot(c1,dot(B.I,Aeq2)));
    var S = numeric._solveLP(c4,A4,b4,tol,maxit);
    var x2 = S.solution;
    if(x2!==x2) return S;
    var x1 = dot(B.I,sub(beq,dot(Aeq2,x2)));
    var x = Array(c.length);
    for(i=P.length-1;i!==-1;--i) x[P[i]] = x1[i];
    for(i=Q.length-1;i!==-1;--i) x[Q[i]] = x2[i];
    return { solution: x, message:S.message, iterations: S.iterations };
}

numeric.MPStoLP = function MPStoLP(MPS) {
    if(MPS instanceof String) { MPS.split('\n'); }
    var state = 0;
    var states = ['Initial state','NAME','ROWS','COLUMNS','RHS','BOUNDS','ENDATA'];
    var n = MPS.length;
    var i,j,z,N=0,rows = {}, sign = [], rl = 0, vars = {}, nv = 0;
    var name;
    var c = [], A = [], b = [];
    function err(e) { throw new Error('MPStoLP: '+e+'\nLine '+i+': '+MPS[i]+'\nCurrent state: '+states[state]+'\n'); }
    for(i=0;i<n;++i) {
        z = MPS[i];
        var w0 = z.match(/\S*/g);
        var w = [];
        for(j=0;j<w0.length;++j) if(w0[j]!=="") w.push(w0[j]);
        if(w.length === 0) continue;
        for(j=0;j<states.length;++j) if(z.substr(0,states[j].length) === states[j]) break;
        if(j<states.length) {
            state = j;
            if(j===1) { name = w[1]; }
            if(j===6) return { name:name, c:c, A:numeric.transpose(A), b:b, rows:rows, vars:vars };
            continue;
        }
        switch(state) {
        case 0: case 1: err('Unexpected line');
        case 2: 
            switch(w[0]) {
            case 'N': if(N===0) N = w[1]; else err('Two or more N rows'); break;
            case 'L': rows[w[1]] = rl; sign[rl] = 1; b[rl] = 0; ++rl; break;
            case 'G': rows[w[1]] = rl; sign[rl] = -1;b[rl] = 0; ++rl; break;
            case 'E': rows[w[1]] = rl; sign[rl] = 0;b[rl] = 0; ++rl; break;
            default: err('Parse error '+numeric.prettyPrint(w));
            }
            break;
        case 3:
            if(!vars.hasOwnProperty(w[0])) { vars[w[0]] = nv; c[nv] = 0; A[nv] = numeric.rep([rl],0); ++nv; }
            var p = vars[w[0]];
            for(j=1;j<w.length;j+=2) {
                if(w[j] === N) { c[p] = parseFloat(w[j+1]); continue; }
                var q = rows[w[j]];
                A[p][q] = (sign[q]<0?-1:1)*parseFloat(w[j+1]);
            }
            break;
        case 4:
            for(j=1;j<w.length;j+=2) b[rows[w[j]]] = (sign[rows[w[j]]]<0?-1:1)*parseFloat(w[j+1]);
            break;
        case 5: /*FIXME*/ break;
        case 6: err('Internal error');
        }
    }
    err('Reached end of file without ENDATA');
}
// seedrandom.js version 2.0.
// Author: David Bau 4/2/2011
//
// Defines a method Math.seedrandom() that, when called, substitutes
// an explicitly seeded RC4-based algorithm for Math.random().  Also
// supports automatic seeding from local or network sources of entropy.
//
// Usage:
//
//   <script src=http://davidbau.com/encode/seedrandom-min.js></script>
//
//   Math.seedrandom('yipee'); Sets Math.random to a function that is
//                             initialized using the given explicit seed.
//
//   Math.seedrandom();        Sets Math.random to a function that is
//                             seeded using the current time, dom state,
//                             and other accumulated local entropy.
//                             The generated seed string is returned.
//
//   Math.seedrandom('yowza', true);
//                             Seeds using the given explicit seed mixed
//                             together with accumulated entropy.
//
//   <script src="http://bit.ly/srandom-512"></script>
//                             Seeds using physical random bits downloaded
//                             from random.org.
//
//   <script src="https://jsonlib.appspot.com/urandom?callback=Math.seedrandom">
//   </script>                 Seeds using urandom bits from call.jsonlib.com,
//                             which is faster than random.org.
//
// Examples:
//
//   Math.seedrandom("hello");            // Use "hello" as the seed.
//   document.write(Math.random());       // Always 0.5463663768140734
//   document.write(Math.random());       // Always 0.43973793770592234
//   var rng1 = Math.random;              // Remember the current prng.
//
//   var autoseed = Math.seedrandom();    // New prng with an automatic seed.
//   document.write(Math.random());       // Pretty much unpredictable.
//
//   Math.random = rng1;                  // Continue "hello" prng sequence.
//   document.write(Math.random());       // Always 0.554769432473455
//
//   Math.seedrandom(autoseed);           // Restart at the previous seed.
//   document.write(Math.random());       // Repeat the 'unpredictable' value.
//
// Notes:
//
// Each time seedrandom('arg') is called, entropy from the passed seed
// is accumulated in a pool to help generate future seeds for the
// zero-argument form of Math.seedrandom, so entropy can be injected over
// time by calling seedrandom with explicit data repeatedly.
//
// On speed - This javascript implementation of Math.random() is about
// 3-10x slower than the built-in Math.random() because it is not native
// code, but this is typically fast enough anyway.  Seeding is more expensive,
// especially if you use auto-seeding.  Some details (timings on Chrome 4):
//
// Our Math.random()            - avg less than 0.002 milliseconds per call
// seedrandom('explicit')       - avg less than 0.5 milliseconds per call
// seedrandom('explicit', true) - avg less than 2 milliseconds per call
// seedrandom()                 - avg about 38 milliseconds per call
//
// LICENSE (BSD):
//
// Copyright 2010 David Bau, all rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
// 
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
// 
//   3. Neither the name of this module nor the names of its contributors may
//      be used to endorse or promote products derived from this software
//      without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
/**
 * All code is in an anonymous closure to keep the global namespace clean.
 *
 * @param {number=} overflow 
 * @param {number=} startdenom
 */

// Patched by Seb so that seedrandom.js does not pollute the Math object.
// My tests suggest that doing Math.trouble = 1 makes Math lookups about 5%
// slower.
numeric.seedrandom = { pow:Math.pow, random:Math.random };

(function (pool, math, width, chunks, significance, overflow, startdenom) {


//
// seedrandom()
// This is the seedrandom function described above.
//
math['seedrandom'] = function seedrandom(seed, use_entropy) {
  var key = [];
  var arc4;

  // Flatten the seed string or build one from local entropy if needed.
  seed = mixkey(flatten(
    use_entropy ? [seed, pool] :
    arguments.length ? seed :
    [new Date().getTime(), pool, window], 3), key);

  // Use the seed to initialize an ARC4 generator.
  arc4 = new ARC4(key);

  // Mix the randomness into accumulated entropy.
  mixkey(arc4.S, pool);

  // Override Math.random

  // This function returns a random double in [0, 1) that contains
  // randomness in every bit of the mantissa of the IEEE 754 value.

  math['random'] = function random() {  // Closure to return a random double:
    var n = arc4.g(chunks);             // Start with a numerator n < 2 ^ 48
    var d = startdenom;                 //   and denominator d = 2 ^ 48.
    var x = 0;                          //   and no 'extra last byte'.
    while (n < significance) {          // Fill up all significant digits by
      n = (n + x) * width;              //   shifting numerator and
      d *= width;                       //   denominator and generating a
      x = arc4.g(1);                    //   new least-significant-byte.
    }
    while (n >= overflow) {             // To avoid rounding up, before adding
      n /= 2;                           //   last byte, shift everything
      d /= 2;                           //   right using integer math until
      x >>>= 1;                         //   we have exactly the desired bits.
    }
    return (n + x) / d;                 // Form the number within [0, 1).
  };

  // Return the seed that was used
  return seed;
};

//
// ARC4
//
// An ARC4 implementation.  The constructor takes a key in the form of
// an array of at most (width) integers that should be 0 <= x < (width).
//
// The g(count) method returns a pseudorandom integer that concatenates
// the next (count) outputs from ARC4.  Its return value is a number x
// that is in the range 0 <= x < (width ^ count).
//
/** @constructor */
function ARC4(key) {
  var t, u, me = this, keylen = key.length;
  var i = 0, j = me.i = me.j = me.m = 0;
  me.S = [];
  me.c = [];

  // The empty key [] is treated as [0].
  if (!keylen) { key = [keylen++]; }

  // Set up S using the standard key scheduling algorithm.
  while (i < width) { me.S[i] = i++; }
  for (i = 0; i < width; i++) {
    t = me.S[i];
    j = lowbits(j + t + key[i % keylen]);
    u = me.S[j];
    me.S[i] = u;
    me.S[j] = t;
  }

  // The "g" method returns the next (count) outputs as one number.
  me.g = function getnext(count) {
    var s = me.S;
    var i = lowbits(me.i + 1); var t = s[i];
    var j = lowbits(me.j + t); var u = s[j];
    s[i] = u;
    s[j] = t;
    var r = s[lowbits(t + u)];
    while (--count) {
      i = lowbits(i + 1); t = s[i];
      j = lowbits(j + t); u = s[j];
      s[i] = u;
      s[j] = t;
      r = r * width + s[lowbits(t + u)];
    }
    me.i = i;
    me.j = j;
    return r;
  };
  // For robust unpredictability discard an initial batch of values.
  // See http://www.rsa.com/rsalabs/node.asp?id=2009
  me.g(width);
}

//
// flatten()
// Converts an object tree to nested arrays of strings.
//
/** @param {Object=} result 
  * @param {string=} prop
  * @param {string=} typ */
function flatten(obj, depth, result, prop, typ) {
  result = [];
  typ = typeof(obj);
  if (depth && typ == 'object') {
    for (prop in obj) {
      if (prop.indexOf('S') < 5) {    // Avoid FF3 bug (local/sessionStorage)
        try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}
      }
    }
  }
  return (result.length ? result : obj + (typ != 'string' ? '\0' : ''));
}

//
// mixkey()
// Mixes a string seed into a key that is an array of integers, and
// returns a shortened string seed that is equivalent to the result key.
//
/** @param {number=} smear 
  * @param {number=} j */
function mixkey(seed, key, smear, j) {
  seed += '';                         // Ensure the seed is a string
  smear = 0;
  for (j = 0; j < seed.length; j++) {
    key[lowbits(j)] =
      lowbits((smear ^= key[lowbits(j)] * 19) + seed.charCodeAt(j));
  }
  seed = '';
  for (j in key) { seed += String.fromCharCode(key[j]); }
  return seed;
}

//
// lowbits()
// A quick "n mod width" for width a power of 2.
//
function lowbits(n) { return n & (width - 1); }

//
// The following constants are related to IEEE 754 limits.
//
startdenom = math.pow(width, chunks);
significance = math.pow(2, significance);
overflow = significance * 2;

//
// When seedrandom.js is loaded, we immediately mix a few bits
// from the built-in RNG into the entropy pool.  Because we do
// not want to intefere with determinstic PRNG state later,
// seedrandom will not call math.random on its own again after
// initialization.
//
mixkey(math.random(), pool);

// End anonymous scope, and pass initial values.
}(
  [],   // pool: entropy pool starts empty
  numeric.seedrandom, // math: package containing random, pow, and seedrandom
  256,  // width: each RC4 output is 0 <= x < 256
  6,    // chunks: at least six RC4 outputs for each double
  52    // significance: there are 52 significant digits in a double
  ));
/* This file is a slightly modified version of quadprog.js from Alberto Santini.
 * It has been slightly modified by Sébastien Loisel to make sure that it handles
 * 0-based Arrays instead of 1-based Arrays.
 * License is in resources/LICENSE.quadprog */
(function(exports) {

function base0to1(A) {
    if(typeof A !== "object") { return A; }
    var ret = [], i,n=A.length;
    for(i=0;i<n;i++) ret[i+1] = base0to1(A[i]);
    return ret;
}
function base1to0(A) {
    if(typeof A !== "object") { return A; }
    var ret = [], i,n=A.length;
    for(i=1;i<n;i++) ret[i-1] = base1to0(A[i]);
    return ret;
}

function dpori(a, lda, n) {
    var i, j, k, kp1, t;

    for (k = 1; k <= n; k = k + 1) {
        a[k][k] = 1 / a[k][k];
        t = -a[k][k];
        //~ dscal(k - 1, t, a[1][k], 1);
        for (i = 1; i < k; i = i + 1) {
            a[i][k] = t * a[i][k];
        }

        kp1 = k + 1;
        if (n < kp1) {
            break;
        }
        for (j = kp1; j <= n; j = j + 1) {
            t = a[k][j];
            a[k][j] = 0;
            //~ daxpy(k, t, a[1][k], 1, a[1][j], 1);
            for (i = 1; i <= k; i = i + 1) {
                a[i][j] = a[i][j] + (t * a[i][k]);
            }
        }
    }

}

function dposl(a, lda, n, b) {
    var i, k, kb, t;

    for (k = 1; k <= n; k = k + 1) {
        //~ t = ddot(k - 1, a[1][k], 1, b[1], 1);
        t = 0;
        for (i = 1; i < k; i = i + 1) {
            t = t + (a[i][k] * b[i]);
        }

        b[k] = (b[k] - t) / a[k][k];
    }

    for (kb = 1; kb <= n; kb = kb + 1) {
        k = n + 1 - kb;
        b[k] = b[k] / a[k][k];
        t = -b[k];
        //~ daxpy(k - 1, t, a[1][k], 1, b[1], 1);
        for (i = 1; i < k; i = i + 1) {
            b[i] = b[i] + (t * a[i][k]);
        }
    }
}

function dpofa(a, lda, n, info) {
    var i, j, jm1, k, t, s;

    for (j = 1; j <= n; j = j + 1) {
        info[1] = j;
        s = 0;
        jm1 = j - 1;
        if (jm1 < 1) {
            s = a[j][j] - s;
            if (s <= 0) {
                break;
            }
            a[j][j] = Math.sqrt(s);
        } else {
            for (k = 1; k <= jm1; k = k + 1) {
                //~ t = a[k][j] - ddot(k - 1, a[1][k], 1, a[1][j], 1);
                t = a[k][j];
                for (i = 1; i < k; i = i + 1) {
                    t = t - (a[i][j] * a[i][k]);
                }
                t = t / a[k][k];
                a[k][j] = t;
                s = s + t * t;
            }
            s = a[j][j] - s;
            if (s <= 0) {
                break;
            }
            a[j][j] = Math.sqrt(s);
        }
        info[1] = 0;
    }
}

function qpgen2(dmat, dvec, fddmat, n, sol, crval, amat,
    bvec, fdamat, q, meq, iact, nact, iter, work, ierr) {

    var i, j, l, l1, info, it1, iwzv, iwrv, iwrm, iwsv, iwuv, nvl, r, iwnbv,
        temp, sum, t1, tt, gc, gs, nu,
        t1inf, t2min,
        vsmall, tmpa, tmpb,
        go;

    r = Math.min(n, q);
    l = 2 * n + (r * (r + 5)) / 2 + 2 * q + 1;

    vsmall = 1.0e-60;
    do {
        vsmall = vsmall + vsmall;
        tmpa = 1 + 0.1 * vsmall;
        tmpb = 1 + 0.2 * vsmall;
    } while (tmpa <= 1 || tmpb <= 1);

    for (i = 1; i <= n; i = i + 1) {
        work[i] = dvec[i];
    }
    for (i = n + 1; i <= l; i = i + 1) {
        work[i] = 0;
    }
    for (i = 1; i <= q; i = i + 1) {
        iact[i] = 0;
    }

    info = [];

    if (ierr[1] === 0) {
        dpofa(dmat, fddmat, n, info);
        if (info[1] !== 0) {
            ierr[1] = 2;
            return;
        }
        dposl(dmat, fddmat, n, dvec);
        dpori(dmat, fddmat, n);
    } else {
        for (j = 1; j <= n; j = j + 1) {
            sol[j] = 0;
            for (i = 1; i <= j; i = i + 1) {
                sol[j] = sol[j] + dmat[i][j] * dvec[i];
            }
        }
        for (j = 1; j <= n; j = j + 1) {
            dvec[j] = 0;
            for (i = j; i <= n; i = i + 1) {
                dvec[j] = dvec[j] + dmat[j][i] * sol[i];
            }
        }
    }

    crval[1] = 0;
    for (j = 1; j <= n; j = j + 1) {
        sol[j] = dvec[j];
        crval[1] = crval[1] + work[j] * sol[j];
        work[j] = 0;
        for (i = j + 1; i <= n; i = i + 1) {
            dmat[i][j] = 0;
        }
    }
    crval[1] = -crval[1] / 2;
    ierr[1] = 0;

    iwzv = n;
    iwrv = iwzv + n;
    iwuv = iwrv + r;
    iwrm = iwuv + r + 1;
    iwsv = iwrm + (r * (r + 1)) / 2;
    iwnbv = iwsv + q;

    for (i = 1; i <= q; i = i + 1) {
        sum = 0;
        for (j = 1; j <= n; j = j + 1) {
            sum = sum + amat[j][i] * amat[j][i];
        }
        work[iwnbv + i] = Math.sqrt(sum);
    }
    nact = 0;
    iter[1] = 0;
    iter[2] = 0;

    function fn_goto_50() {
        iter[1] = iter[1] + 1;

        l = iwsv;
        for (i = 1; i <= q; i = i + 1) {
            l = l + 1;
            sum = -bvec[i];
            for (j = 1; j <= n; j = j + 1) {
                sum = sum + amat[j][i] * sol[j];
            }
            if (Math.abs(sum) < vsmall) {
                sum = 0;
            }
            if (i > meq) {
                work[l] = sum;
            } else {
                work[l] = -Math.abs(sum);
                if (sum > 0) {
                    for (j = 1; j <= n; j = j + 1) {
                        amat[j][i] = -amat[j][i];
                    }
                    bvec[i] = -bvec[i];
                }
            }
        }

        for (i = 1; i <= nact; i = i + 1) {
            work[iwsv + iact[i]] = 0;
        }

        nvl = 0;
        temp = 0;
        for (i = 1; i <= q; i = i + 1) {
            if (work[iwsv + i] < temp * work[iwnbv + i]) {
                nvl = i;
                temp = work[iwsv + i] / work[iwnbv + i];
            }
        }
        if (nvl === 0) {
            return 999;
        }

        return 0;
    }

    function fn_goto_55() {
        for (i = 1; i <= n; i = i + 1) {
            sum = 0;
            for (j = 1; j <= n; j = j + 1) {
                sum = sum + dmat[j][i] * amat[j][nvl];
            }
            work[i] = sum;
        }

        l1 = iwzv;
        for (i = 1; i <= n; i = i + 1) {
            work[l1 + i] = 0;
        }
        for (j = nact + 1; j <= n; j = j + 1) {
            for (i = 1; i <= n; i = i + 1) {
                work[l1 + i] = work[l1 + i] + dmat[i][j] * work[j];
            }
        }

        t1inf = true;
        for (i = nact; i >= 1; i = i - 1) {
            sum = work[i];
            l = iwrm + (i * (i + 3)) / 2;
            l1 = l - i;
            for (j = i + 1; j <= nact; j = j + 1) {
                sum = sum - work[l] * work[iwrv + j];
                l = l + j;
            }
            sum = sum / work[l1];
            work[iwrv + i] = sum;
            if (iact[i] < meq) {
                // continue;
                break;
            }
            if (sum < 0) {
                // continue;
                break;
            }
            t1inf = false;
            it1 = i;
        }

        if (!t1inf) {
            t1 = work[iwuv + it1] / work[iwrv + it1];
            for (i = 1; i <= nact; i = i + 1) {
                if (iact[i] < meq) {
                    // continue;
                    break;
                }
                if (work[iwrv + i] < 0) {
                    // continue;
                    break;
                }
                temp = work[iwuv + i] / work[iwrv + i];
                if (temp < t1) {
                    t1 = temp;
                    it1 = i;
                }
            }
        }

        sum = 0;
        for (i = iwzv + 1; i <= iwzv + n; i = i + 1) {
            sum = sum + work[i] * work[i];
        }
        if (Math.abs(sum) <= vsmall) {
            if (t1inf) {
                ierr[1] = 1;
                // GOTO 999
                return 999;
            } else {
                for (i = 1; i <= nact; i = i + 1) {
                    work[iwuv + i] = work[iwuv + i] - t1 * work[iwrv + i];
                }
                work[iwuv + nact + 1] = work[iwuv + nact + 1] + t1;
                // GOTO 700
                return 700;
            }
        } else {
            sum = 0;
            for (i = 1; i <= n; i = i + 1) {
                sum = sum + work[iwzv + i] * amat[i][nvl];
            }
            tt = -work[iwsv + nvl] / sum;
            t2min = true;
            if (!t1inf) {
                if (t1 < tt) {
                    tt = t1;
                    t2min = false;
                }
            }

            for (i = 1; i <= n; i = i + 1) {
                sol[i] = sol[i] + tt * work[iwzv + i];
                if (Math.abs(sol[i]) < vsmall) {
                    sol[i] = 0;
                }
            }

            crval[1] = crval[1] + tt * sum * (tt / 2 + work[iwuv + nact + 1]);
            for (i = 1; i <= nact; i = i + 1) {
                work[iwuv + i] = work[iwuv + i] - tt * work[iwrv + i];
            }
            work[iwuv + nact + 1] = work[iwuv + nact + 1] + tt;

            if (t2min) {
                nact = nact + 1;
                iact[nact] = nvl;

                l = iwrm + ((nact - 1) * nact) / 2 + 1;
                for (i = 1; i <= nact - 1; i = i + 1) {
                    work[l] = work[i];
                    l = l + 1;
                }

                if (nact === n) {
                    work[l] = work[n];
                } else {
                    for (i = n; i >= nact + 1; i = i - 1) {
                        if (work[i] === 0) {
                            // continue;
                            break;
                        }
                        gc = Math.max(Math.abs(work[i - 1]), Math.abs(work[i]));
                        gs = Math.min(Math.abs(work[i - 1]), Math.abs(work[i]));
                        if (work[i - 1] >= 0) {
                            temp = Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));
                        } else {
                            temp = -Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));
                        }
                        gc = work[i - 1] / temp;
                        gs = work[i] / temp;

                        if (gc === 1) {
                            // continue;
                            break;
                        }
                        if (gc === 0) {
                            work[i - 1] = gs * temp;
                            for (j = 1; j <= n; j = j + 1) {
                                temp = dmat[j][i - 1];
                                dmat[j][i - 1] = dmat[j][i];
                                dmat[j][i] = temp;
                            }
                        } else {
                            work[i - 1] = temp;
                            nu = gs / (1 + gc);
                            for (j = 1; j <= n; j = j + 1) {
                                temp = gc * dmat[j][i - 1] + gs * dmat[j][i];
                                dmat[j][i] = nu * (dmat[j][i - 1] + temp) - dmat[j][i];
                                dmat[j][i - 1] = temp;

                            }
                        }
                    }
                    work[l] = work[nact];
                }
            } else {
                sum = -bvec[nvl];
                for (j = 1; j <= n; j = j + 1) {
                    sum = sum + sol[j] * amat[j][nvl];
                }
                if (nvl > meq) {
                    work[iwsv + nvl] = sum;
                } else {
                    work[iwsv + nvl] = -Math.abs(sum);
                    if (sum > 0) {
                        for (j = 1; j <= n; j = j + 1) {
                            amat[j][nvl] = -amat[j][nvl];
                        }
                        bvec[nvl] = -bvec[nvl];
                    }
                }
                // GOTO 700
                return 700;
            }
        }

        return 0;
    }

    function fn_goto_797() {
        l = iwrm + (it1 * (it1 + 1)) / 2 + 1;
        l1 = l + it1;
        if (work[l1] === 0) {
            // GOTO 798
            return 798;
        }
        gc = Math.max(Math.abs(work[l1 - 1]), Math.abs(work[l1]));
        gs = Math.min(Math.abs(work[l1 - 1]), Math.abs(work[l1]));
        if (work[l1 - 1] >= 0) {
            temp = Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));
        } else {
            temp = -Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));
        }
        gc = work[l1 - 1] / temp;
        gs = work[l1] / temp;

        if (gc === 1) {
            // GOTO 798
            return 798;
        }
        if (gc === 0) {
            for (i = it1 + 1; i <= nact; i = i + 1) {
                temp = work[l1 - 1];
                work[l1 - 1] = work[l1];
                work[l1] = temp;
                l1 = l1 + i;
            }
            for (i = 1; i <= n; i = i + 1) {
                temp = dmat[i][it1];
                dmat[i][it1] = dmat[i][it1 + 1];
                dmat[i][it1 + 1] = temp;
            }
        } else {
            nu = gs / (1 + gc);
            for (i = it1 + 1; i <= nact; i = i + 1) {
                temp = gc * work[l1 - 1] + gs * work[l1];
                work[l1] = nu * (work[l1 - 1] + temp) - work[l1];
                work[l1 - 1] = temp;
                l1 = l1 + i;
            }
            for (i = 1; i <= n; i = i + 1) {
                temp = gc * dmat[i][it1] + gs * dmat[i][it1 + 1];
                dmat[i][it1 + 1] = nu * (dmat[i][it1] + temp) - dmat[i][it1 + 1];
                dmat[i][it1] = temp;
            }
        }

        return 0;
    }

    function fn_goto_798() {
        l1 = l - it1;
        for (i = 1; i <= it1; i = i + 1) {
            work[l1] = work[l];
            l = l + 1;
            l1 = l1 + 1;
        }

        work[iwuv + it1] = work[iwuv + it1 + 1];
        iact[it1] = iact[it1 + 1];
        it1 = it1 + 1;
        if (it1 < nact) {
            // GOTO 797
            return 797;
        }

        return 0;
    }

    function fn_goto_799() {
        work[iwuv + nact] = work[iwuv + nact + 1];
        work[iwuv + nact + 1] = 0;
        iact[nact] = 0;
        nact = nact - 1;
        iter[2] = iter[2] + 1;

        return 0;
    }

    go = 0;
    while (true) {
        go = fn_goto_50();
        if (go === 999) {
            return;
        }
        while (true) {
            go = fn_goto_55();
            if (go === 0) {
                break;
            }
            if (go === 999) {
                return;
            }
            if (go === 700) {
                if (it1 === nact) {
                    fn_goto_799();
                } else {
                    while (true) {
                        fn_goto_797();
                        go = fn_goto_798();
                        if (go !== 797) {
                            break;
                        }
                    }
                    fn_goto_799();
                }
            }
        }
    }

}

function solveQP(Dmat, dvec, Amat, bvec, meq, factorized) {
    Dmat = base0to1(Dmat);
    dvec = base0to1(dvec);
    Amat = base0to1(Amat);
    var i, n, q,
        nact, r,
        crval = [], iact = [], sol = [], work = [], iter = [],
        message;

    meq = meq || 0;
    factorized = factorized ? base0to1(factorized) : [undefined, 0];
    bvec = bvec ? base0to1(bvec) : [];

    // In Fortran the array index starts from 1
    n = Dmat.length - 1;
    q = Amat[1].length - 1;

    if (!bvec) {
        for (i = 1; i <= q; i = i + 1) {
            bvec[i] = 0;
        }
    }
    for (i = 1; i <= q; i = i + 1) {
        iact[i] = 0;
    }
    nact = 0;
    r = Math.min(n, q);
    for (i = 1; i <= n; i = i + 1) {
        sol[i] = 0;
    }
    crval[1] = 0;
    for (i = 1; i <= (2 * n + (r * (r + 5)) / 2 + 2 * q + 1); i = i + 1) {
        work[i] = 0;
    }
    for (i = 1; i <= 2; i = i + 1) {
        iter[i] = 0;
    }

    qpgen2(Dmat, dvec, n, n, sol, crval, Amat,
        bvec, n, q, meq, iact, nact, iter, work, factorized);

    message = "";
    if (factorized[1] === 1) {
        message = "constraints are inconsistent, no solution!";
    }
    if (factorized[1] === 2) {
        message = "matrix D in quadratic function is not positive definite!";
    }

    return {
        solution: base1to0(sol),
        value: base1to0(crval),
        unconstrained_solution: base1to0(dvec),
        iterations: base1to0(iter),
        iact: base1to0(iact),
        message: message
    };
}
exports.solveQP = solveQP;
}(numeric));
/*
Shanti Rao sent me this routine by private email. I had to modify it
slightly to work on Arrays instead of using a Matrix object.
It is apparently translated from http://stitchpanorama.sourceforge.net/Python/svd.py
*/

numeric.svd= function svd(A) {
    var temp;
//Compute the thin SVD from G. H. Golub and C. Reinsch, Numer. Math. 14, 403-420 (1970)
	var prec= numeric.epsilon; //Math.pow(2,-52) // assumes double prec
	var tolerance= 1.e-64/prec;
	var itmax= 50;
	var c=0;
	var i=0;
	var j=0;
	var k=0;
	var l=0;
	
	var u= numeric.clone(A);
	var m= u.length;
	
	var n= u[0].length;
	
	if (m < n) throw "Need more rows than columns"
	
	var e = new Array(n);
	var q = new Array(n);
	for (i=0; i<n; i++) e[i] = q[i] = 0.0;
	var v = numeric.rep([n,n],0);
//	v.zero();
	
 	function pythag(a,b)
 	{
		a = Math.abs(a)
		b = Math.abs(b)
		if (a > b)
			return a*Math.sqrt(1.0+(b*b/a/a))
		else if (b == 0.0) 
			return a
		return b*Math.sqrt(1.0+(a*a/b/b))
	}

	//Householder's reduction to bidiagonal form

	var f= 0.0;
	var g= 0.0;
	var h= 0.0;
	var x= 0.0;
	var y= 0.0;
	var z= 0.0;
	var s= 0.0;
	
	for (i=0; i < n; i++)
	{	
		e[i]= g;
		s= 0.0;
		l= i+1;
		for (j=i; j < m; j++) 
			s += (u[j][i]*u[j][i]);
		if (s <= tolerance)
			g= 0.0;
		else
		{	
			f= u[i][i];
			g= Math.sqrt(s);
			if (f >= 0.0) g= -g;
			h= f*g-s
			u[i][i]=f-g;
			for (j=l; j < n; j++)
			{
				s= 0.0
				for (k=i; k < m; k++) 
					s += u[k][i]*u[k][j]
				f= s/h
				for (k=i; k < m; k++) 
					u[k][j]+=f*u[k][i]
			}
		}
		q[i]= g
		s= 0.0
		for (j=l; j < n; j++) 
			s= s + u[i][j]*u[i][j]
		if (s <= tolerance)
			g= 0.0
		else
		{	
			f= u[i][i+1]
			g= Math.sqrt(s)
			if (f >= 0.0) g= -g
			h= f*g - s
			u[i][i+1] = f-g;
			for (j=l; j < n; j++) e[j]= u[i][j]/h
			for (j=l; j < m; j++)
			{	
				s=0.0
				for (k=l; k < n; k++) 
					s += (u[j][k]*u[i][k])
				for (k=l; k < n; k++) 
					u[j][k]+=s*e[k]
			}	
		}
		y= Math.abs(q[i])+Math.abs(e[i])
		if (y>x) 
			x=y
	}
	
	// accumulation of right hand gtransformations
	for (i=n-1; i != -1; i+= -1)
	{	
		if (g != 0.0)
		{
		 	h= g*u[i][i+1]
			for (j=l; j < n; j++) 
				v[j][i]=u[i][j]/h
			for (j=l; j < n; j++)
			{	
				s=0.0
				for (k=l; k < n; k++) 
					s += u[i][k]*v[k][j]
				for (k=l; k < n; k++) 
					v[k][j]+=(s*v[k][i])
			}	
		}
		for (j=l; j < n; j++)
		{
			v[i][j] = 0;
			v[j][i] = 0;
		}
		v[i][i] = 1;
		g= e[i]
		l= i
	}
	
	// accumulation of left hand transformations
	for (i=n-1; i != -1; i+= -1)
	{	
		l= i+1
		g= q[i]
		for (j=l; j < n; j++) 
			u[i][j] = 0;
		if (g != 0.0)
		{
			h= u[i][i]*g
			for (j=l; j < n; j++)
			{
				s=0.0
				for (k=l; k < m; k++) s += u[k][i]*u[k][j];
				f= s/h
				for (k=i; k < m; k++) u[k][j]+=f*u[k][i];
			}
			for (j=i; j < m; j++) u[j][i] = u[j][i]/g;
		}
		else
			for (j=i; j < m; j++) u[j][i] = 0;
		u[i][i] += 1;
	}
	
	// diagonalization of the bidiagonal form
	prec= prec*x
	for (k=n-1; k != -1; k+= -1)
	{
		for (var iteration=0; iteration < itmax; iteration++)
		{	// test f splitting
			var test_convergence = false
			for (l=k; l != -1; l+= -1)
			{	
				if (Math.abs(e[l]) <= prec)
				{	test_convergence= true
					break 
				}
				if (Math.abs(q[l-1]) <= prec)
					break 
			}
			if (!test_convergence)
			{	// cancellation of e[l] if l>0
				c= 0.0
				s= 1.0
				var l1= l-1
				for (i =l; i<k+1; i++)
				{	
					f= s*e[i]
					e[i]= c*e[i]
					if (Math.abs(f) <= prec)
						break
					g= q[i]
					h= pythag(f,g)
					q[i]= h
					c= g/h
					s= -f/h
					for (j=0; j < m; j++)
					{	
						y= u[j][l1]
						z= u[j][i]
						u[j][l1] =  y*c+(z*s)
						u[j][i] = -y*s+(z*c)
					} 
				}	
			}
			// test f convergence
			z= q[k]
			if (l== k)
			{	//convergence
				if (z<0.0)
				{	//q[k] is made non-negative
					q[k]= -z
					for (j=0; j < n; j++)
						v[j][k] = -v[j][k]
				}
				break  //break out of iteration loop and move on to next k value
			}
			if (iteration >= itmax-1)
				throw 'Error: no convergence.'
			// shift from bottom 2x2 minor
			x= q[l]
			y= q[k-1]
			g= e[k-1]
			h= e[k]
			f= ((y-z)*(y+z)+(g-h)*(g+h))/(2.0*h*y)
			g= pythag(f,1.0)
			if (f < 0.0)
				f= ((x-z)*(x+z)+h*(y/(f-g)-h))/x
			else
				f= ((x-z)*(x+z)+h*(y/(f+g)-h))/x
			// next QR transformation
			c= 1.0
			s= 1.0
			for (i=l+1; i< k+1; i++)
			{	
				g= e[i]
				y= q[i]
				h= s*g
				g= c*g
				z= pythag(f,h)
				e[i-1]= z
				c= f/z
				s= h/z
				f= x*c+g*s
				g= -x*s+g*c
				h= y*s
				y= y*c
				for (j=0; j < n; j++)
				{	
					x= v[j][i-1]
					z= v[j][i]
					v[j][i-1] = x*c+z*s
					v[j][i] = -x*s+z*c
				}
				z= pythag(f,h)
				q[i-1]= z
				c= f/z
				s= h/z
				f= c*g+s*y
				x= -s*g+c*y
				for (j=0; j < m; j++)
				{
					y= u[j][i-1]
					z= u[j][i]
					u[j][i-1] = y*c+z*s
					u[j][i] = -y*s+z*c
				}
			}
			e[l]= 0.0
			e[k]= f
			q[k]= x
		} 
	}
		
	//vt= transpose(v)
	//return (u,q,vt)
	for (i=0;i<q.length; i++) 
	  if (q[i] < prec) q[i] = 0
	  
	//sort eigenvalues	
	for (i=0; i< n; i++)
	{	 
	//writeln(q)
	 for (j=i-1; j >= 0; j--)
	 {
	  if (q[j] < q[i])
	  {
	//  writeln(i,'-',j)
	   c = q[j]
	   q[j] = q[i]
	   q[i] = c
	   for(k=0;k<u.length;k++) { temp = u[k][i]; u[k][i] = u[k][j]; u[k][j] = temp; }
	   for(k=0;k<v.length;k++) { temp = v[k][i]; v[k][i] = v[k][j]; v[k][j] = temp; }
//	   u.swapCols(i,j)
//	   v.swapCols(i,j)
	   i = j	   
	  }
	 }	
	}
	
	return {U:u,S:q,V:v}
};


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],54:[function(require,module,exports){
/*
 (c) 2017, Vladimir Agafonkin
 Simplify.js, a high-performance JS polyline simplification library
 mourner.github.io/simplify-js
*/

(function () { 'use strict';

// to suit your point format, run search/replace for '.x' and '.y';
// for 3D version, see 3d branch (configurability would draw significant performance overhead)

// square distance between 2 points
function getSqDist(p1, p2) {

    var dx = p1.x - p2.x,
        dy = p1.y - p2.y;

    return dx * dx + dy * dy;
}

// square distance from a point to a segment
function getSqSegDist(p, p1, p2) {

    var x = p1.x,
        y = p1.y,
        dx = p2.x - x,
        dy = p2.y - y;

    if (dx !== 0 || dy !== 0) {

        var t = ((p.x - x) * dx + (p.y - y) * dy) / (dx * dx + dy * dy);

        if (t > 1) {
            x = p2.x;
            y = p2.y;

        } else if (t > 0) {
            x += dx * t;
            y += dy * t;
        }
    }

    dx = p.x - x;
    dy = p.y - y;

    return dx * dx + dy * dy;
}
// rest of the code doesn't care about point format

// basic distance-based simplification
function simplifyRadialDist(points, sqTolerance) {

    var prevPoint = points[0],
        newPoints = [prevPoint],
        point;

    for (var i = 1, len = points.length; i < len; i++) {
        point = points[i];

        if (getSqDist(point, prevPoint) > sqTolerance) {
            newPoints.push(point);
            prevPoint = point;
        }
    }

    if (prevPoint !== point) newPoints.push(point);

    return newPoints;
}

function simplifyDPStep(points, first, last, sqTolerance, simplified) {
    var maxSqDist = sqTolerance,
        index;

    for (var i = first + 1; i < last; i++) {
        var sqDist = getSqSegDist(points[i], points[first], points[last]);

        if (sqDist > maxSqDist) {
            index = i;
            maxSqDist = sqDist;
        }
    }

    if (maxSqDist > sqTolerance) {
        if (index - first > 1) simplifyDPStep(points, first, index, sqTolerance, simplified);
        simplified.push(points[index]);
        if (last - index > 1) simplifyDPStep(points, index, last, sqTolerance, simplified);
    }
}

// simplification using Ramer-Douglas-Peucker algorithm
function simplifyDouglasPeucker(points, sqTolerance) {
    var last = points.length - 1;

    var simplified = [points[0]];
    simplifyDPStep(points, 0, last, sqTolerance, simplified);
    simplified.push(points[last]);

    return simplified;
}

// both algorithms combined for awesome performance
function simplify(points, tolerance, highestQuality) {

    if (points.length <= 2) return points;

    var sqTolerance = tolerance !== undefined ? tolerance * tolerance : 1;

    points = highestQuality ? points : simplifyRadialDist(points, sqTolerance);
    points = simplifyDouglasPeucker(points, sqTolerance);

    return points;
}

// export as AMD module / Node module / browser or worker variable
if (typeof define === 'function' && define.amd) define(function() { return simplify; });
else if (typeof module !== 'undefined') {
    module.exports = simplify;
    module.exports.default = simplify;
} else if (typeof self !== 'undefined') self.simplify = simplify;
else window.simplify = simplify;

})();

},{}],55:[function(require,module,exports){
"use strict"

module.exports = createKDTree
module.exports.deserialize = deserializeKDTree

var ndarray = require("ndarray")
var ndselect = require("ndarray-select")
var pack = require("ndarray-pack")
var ops = require("ndarray-ops")
var ndscratch = require("ndarray-scratch")
var pool = require("typedarray-pool")
var inorderTree = require("inorder-tree-layout")
var bits = require("bit-twiddle")
var KDTHeap = require("./lib/heap.js")

function KDTree(points, ids, n, d) {
  this.points = points
  this.ids = ids
  this.dimension = d
  this.length = n
}

var proto = KDTree.prototype

proto.serialize = function() {
  if(this.length > 0) {
    return {
      p: Array.prototype.slice.call(this.points.data, 0, this.length*this.dimension),
      i: Array.prototype.slice.call(this.ids, 0, this.length)
    }
  } else {
    return { d: this.dimension }
  }
}

//Range query
proto.range = function kdtRangeQuery(lo, hi, visit) {
  var n = this.length
  if(n < 1) {
    return
  }

  //Check degenerate case
  var d = this.dimension
  for(var i=0; i<d; ++i) {
    if(hi[i] < lo[i]) {
      return
    }
  }

  var points = this.points
  var ids = this.ids

  //Walk tree in level order, skipping subtrees which do not intersect range
  var visitRange = ndscratch.malloc([n, 2, d])
  var visitIndex = pool.mallocInt32(n)
  var rangeData = visitRange.data
  var pointData = points.data
  var visitCount = 1
  var visitTop = 0
  var retval

  visitIndex[0] = 0
  pack(lo, visitRange.pick(0,0))
  pack(hi, visitRange.pick(0,1))
  
  while(visitTop < visitCount) {
    var idx = visitIndex[visitTop]
    var k = bits.log2(idx+1)%d
    var loidx = visitRange.index(visitTop, 0, 0)
    var hiidx = visitRange.index(visitTop, 1, 0)
    var pidx = points.index(idx, 0)

    var visitPoint = true
    for(var i=0; i<d; ++i) {
      var pc = pointData[pidx+i]
      if((pc < rangeData[loidx + i]) || 
         (rangeData[hiidx + i] < pc)) {
        visitPoint = false
        break
      }
    }
    if(visitPoint) {
      retval = visit(ids[idx])
      if(retval !== undefined) {
        break
      }
    }

    //Visit children
    var pk = pointData[pidx+k]
    var hk = rangeData[hiidx+k]
    var lk = rangeData[loidx+k]
    if(lk <= pk) {
      var left = 2 * idx + 1
      if(left < n) {
        visitIndex[visitCount] = left
        var y = visitRange.index(visitCount, 0, 0)
        for(var i=0; i<d; ++i) {
          rangeData[y+i] = rangeData[loidx+i]
        }
        var z = visitRange.index(visitCount, 1, 0)
        for(var i=0; i<d; ++i) {
          rangeData[z+i] = rangeData[hiidx+i]
        }
        rangeData[z+k] = Math.min(hk, pk)
        visitCount += 1
      }
    }
    if(pk <= hk) {
      var right = 2 * (idx + 1)
      if(right < n) {
        visitIndex[visitCount] = right
        var y = visitRange.index(visitCount, 0, 0)
        for(var i=0; i<d; ++i) {
          rangeData[y+i] = rangeData[loidx+i]
        }
        var z = visitRange.index(visitCount, 1, 0)
        for(var i=0; i<d; ++i) {
          rangeData[z+i] = rangeData[hiidx+i]
        }
        rangeData[y+k] = Math.max(lk, pk)
        visitCount += 1
      }
    }

    //Increment pointer
    visitTop += 1
  }
  ndscratch.free(visitRange)
  pool.free(visitIndex)
  return retval
}

proto.rnn = function(point, radius, visit) {
  if(radius < 0) {
    return
  }
  var n = this.length
  if(n < 1) {
    return
  }
  var d = this.dimension
  var points = this.points
  var ids = this.ids

  //Walk tree in level order, skipping subtrees which do not intersect sphere
  var visitDistance = ndscratch.malloc([n, d])
  var visitIndex = pool.mallocInt32(n)
  var distanceData = visitDistance.data
  var pointData = points.data
  var visitCount = 1
  var visitTop = 0
  var r2 = radius*radius
  var retval

  //Initialize top of queue
  visitIndex[0] = 0
  for(var i=0; i<d; ++i) {
    visitDistance.set(0, i, 0)
  }

  //Walk over queue
  while(visitTop < visitCount) {
    var idx = visitIndex[visitTop]
    var pidx = points.index(idx, 0)

    //Check if point in sphere
    var d2 = 0.0
    for(var i=0; i<d; ++i) {
      d2 += Math.pow(point[i] - pointData[pidx+i], 2)
    }
    if(d2 <= r2) {
      retval = visit(ids[idx])
      if(retval !== undefined) {
        break
      }
    }

    //Visit children
    var k = bits.log2(idx+1)%d
    var ds = 0.0
    var didx = visitDistance.index(visitTop, 0)
    for(var i=0; i<d; ++i) {
      if(i !== k) {
        ds += distanceData[didx + i]
      }
    }

    //Handle split axis
    var qk = point[k]
    var pk = pointData[pidx+k]
    var dk = distanceData[didx+k]
    var lk = dk
    var hk = dk
    if(qk < pk) {
      hk = Math.max(dk, Math.pow(pk - qk, 2))
    } else {
      lk = Math.max(dk, Math.pow(pk - qk, 2))
    }

    var d2l = lk + ds
    var d2h = hk + ds

    if(d2l <= r2) {
      var left = 2 * idx + 1
      if(left < n) {
        visitIndex[visitCount] = left
        var y = visitDistance.index(visitCount, 0)
        for(var i=0; i<d; ++i) {
          distanceData[y+i] = distanceData[didx+i]
        }
        distanceData[y+k] = lk
        visitCount += 1
      }
    }
    if(d2h <= r2) {
      var right = 2 * (idx + 1)
      if(right < n) {
        visitIndex[visitCount] = right
        var y = visitDistance.index(visitCount, 0)
        for(var i=0; i<d; ++i) {
          distanceData[y+i] = distanceData[didx+i]
        }
        distanceData[y+k] = hk
        visitCount += 1
      }
    }

    //Increment pointer
    visitTop += 1
  }

  ndscratch.free(visitDistance)
  pool.free(visitIndex)
  return retval
}

proto.nn = function(point, maxDistance) {
  var n = this.length
  if(n < 1) {
    return -1
  }
  if(typeof maxDistance === "number") {
    if(maxDistance < 0) {
      return -1
    } 
  } else {
    maxDistance = Infinity
  }
  var d = this.dimension
  var points = this.points
  var pointData = points.data
  var dataVector = pool.mallocFloat64(d)

  var toVisit = new KDTHeap(n, d+1)
  var index = toVisit.index
  var data = toVisit.data
  index[0] = 0
  for(var i=0; i<=d; ++i) {
    data[i] = 0
  }
  toVisit.count += 1

  var nearest = -1
  var nearestD = maxDistance

  while(toVisit.count > 0) {
    if(data[0] >= nearestD) {
      break
    }

    var idx = index[0]
    var pidx = points.index(idx, 0)
    var d2 = 0.0
    for(var i=0; i<d; ++i) {
      d2 += Math.pow(point[i]-pointData[pidx+i], 2)
    }
    if(d2 < nearestD) {
      nearestD = d2
      nearest = idx
    }

    //Compute distance bounds for children
    var k = bits.log2(idx+1)%d
    var ds = 0
    for(var i=0; i<d; ++i) {
      var dd = data[i+1]
      if(i !== k) {
        ds += dd
      }
      dataVector[i] = dd
    }
    var qk = point[k]
    var pk = pointData[pidx+k]
    var dk = dataVector[k]
    var lk = dk
    var hk = dk
    if(qk < pk) {
      hk = Math.max(dk, Math.pow(pk - qk, 2))
    } else {
      lk = Math.max(dk, Math.pow(pk - qk, 2))
    }
    var d2l = lk + ds
    var d2h = hk + ds

    toVisit.pop()
    
    if(d2l < nearestD) {
      var left = 2 * idx + 1
      if(left < n) {
        var vcount = toVisit.count
        index[vcount] = left
        var vptr = vcount * (d+1)
        data[vptr] = d2l
        for(var i=1; i<=d; ++i) {
          data[vptr+i] = dataVector[i-1]
        }
        data[vptr+k+1] = lk
        toVisit.push()
      }
    }
    if(d2h < nearestD) {
      var right = 2 * (idx + 1)
      if(right < n) {
        var vcount = toVisit.count
        index[vcount] = right
        var vptr = vcount * (d+1)
        data[vptr] = d2h
        for(var i=1; i<=d; ++i) {
          data[vptr+i] = dataVector[i-1]
        }
        data[vptr+k+1] = hk
        toVisit.push()
      }
    }
  }

  pool.freeFloat64(dataVector)
  toVisit.dispose()
  
  if(nearest < 0) {
    return -1
  }
  return this.ids[nearest]
}

proto.knn = function(point, maxPoints, maxDistance) {
  //Check degenerate cases
  if(typeof maxDistance === "number") {
    if(maxDistance < 0) {
      return []
    }
  } else {
    maxDistance = Infinity
  }
  var n = this.length
  if(n < 1) {
    return []
  }
  if(typeof maxPoints === "number") {
    if(maxPoints <= 0) {
      return []
    }
    maxPoints = Math.min(maxPoints, n)|0
  } else {
    maxPoints = n
  }
  var ids = this.ids

  var d = this.dimension
  var points = this.points
  var pointData = points.data
  var dataVector = pool.mallocFloat64(d)
  
  //List of closest points
  var closestPoints = new KDTHeap(maxPoints, 1)
  var cl_index = closestPoints.index
  var cl_data = closestPoints.data

  var toVisit = new KDTHeap(n, d+1)
  var index = toVisit.index
  var data = toVisit.data
  index[0] = 0
  for(var i=0; i<=d; ++i) {
    data[i] = 0
  }
  toVisit.count += 1

  var nearest = -1
  var nearestD = maxDistance

  while(toVisit.count > 0) {
    if(data[0] >= nearestD) {
      break
    }

    var idx = index[0]
    var pidx = points.index(idx, 0)
    var d2 = 0.0
    for(var i=0; i<d; ++i) {
      d2 += Math.pow(point[i]-pointData[pidx+i], 2)
    }
    if(d2 < nearestD) {
      if(closestPoints.count >= maxPoints) {
        closestPoints.pop()
      }
      var pcount = closestPoints.count
      cl_index[pcount] = idx
      cl_data[pcount] = -d2
      closestPoints.push()
      if(closestPoints.count >= maxPoints) {
        nearestD = -cl_data[0]
      }
    }

    //Compute distance bounds for children
    var k = bits.log2(idx+1)%d
    var ds = 0
    for(var i=0; i<d; ++i) {
      var dd = data[i+1]
      if(i !== k) {
        ds += dd
      }
      dataVector[i] = dd
    }
    var qk = point[k]
    var pk = pointData[pidx+k]
    var dk = dataVector[k]
    var lk = dk
    var hk = dk
    if(qk < pk) {
      hk = Math.max(dk, Math.pow(pk - qk, 2))
    } else {
      lk = Math.max(dk, Math.pow(pk - qk, 2))
    }
    var d2l = lk + ds
    var d2h = hk + ds

    toVisit.pop()
    if(d2l < nearestD) {
      var left = 2 * idx + 1
      if(left < n) {
        var vcount = toVisit.count
        index[vcount] = left
        var vptr = vcount * (d+1)
        data[vptr] = d2l
        for(var i=1; i<=d; ++i) {
          data[vptr+i] = dataVector[i-1]
        }
        data[vptr+k+1] = lk
        toVisit.push()
      }
    }
    if(d2h < nearestD) {
      var right = 2 * (idx + 1)
      if(right < n) {
        var vcount = toVisit.count
        index[vcount] = right
        var vptr = vcount * (d+1)
        data[vptr] = d2h
        for(var i=1; i<=d; ++i) {
          data[vptr+i] = dataVector[i-1]
        }
        data[vptr+k+1] = hk
        toVisit.push()
      }
    }
  }

  pool.freeFloat64(dataVector)
  toVisit.dispose()

  //Sort result
  var result = new Array(closestPoints.count)
  var ids = this.ids
  for(var i=closestPoints.count-1; i>=0; --i) {
    result[i] = ids[cl_index[0]]
    closestPoints.pop()
  }
  closestPoints.dispose()

  return result
}

proto.dispose = function kdtDispose() {
  pool.free(this.points.data)
  pool.freeInt32(this.ids)
  this.points = null
  this.ids = null
  this.length = 0
}

function Queue() {
  this.data = []
  this.offset = 0
}

Queue.prototype.size = function() {
  return this.data.length - this.offset
}

Queue.prototype.push = function(item) {
  return this.data.push(item)
}

Queue.prototype.pop = function() {
  if (this.size() === 0) {
    return undefined
  }

  var ret = this.data[this.offset]
  this.offset++
  if (this.data.length > 1024 && this.offset * 2 > this.data.length) {
    this.data = this.data.slice(this.offset)
    this.offset = 0
  }
  return ret
}

function createKDTree(points) {
  var n, d, indexed
  if(Array.isArray(points)) {
    n = points.length
    if(n === 0) {
      return new KDTree(null, null, 0, 0)
    }
    d = points[0].length
    indexed = ndarray(pool.mallocDouble(n*(d+1)), [n, d+1])
    pack(points, indexed.hi(n, d))
  } else {
    n = points.shape[0]
    d = points.shape[1]

    //Round up data type size
    var type = points.dtype
    if(type === "int8" ||
       type === "int16" ||
       type === "int32" ) {
      type = "int32"
    } else if(type === "uint8" ||
      type === "uint8_clamped" ||
      type === "buffer" ||
      type === "uint16" ||
      type === "uint32") {
      type = "uint32"
    } else if(type === "float32") {
      type = "float32"
    } else {
      type = "float64"
    }
    indexed = ndarray(pool.malloc(n*(d+1), type), [n, d+1])
    ops.assign(indexed.hi(n,d), points)
  }
  for(var i=0; i<n; ++i) {
    indexed.set(i, d, i)
  }

  var pointArray = ndscratch.malloc([n, d], points.dtype)
  var indexArray = pool.mallocInt32(n)
  var pointer = 0
  var pointData = pointArray.data
  var arrayData = indexed.data
  var l2_n = bits.log2(bits.nextPow2(n))

  var sel_cmp = ndselect.compile(indexed.order, true, indexed.dtype)

  //Walk tree in level order
  var toVisit = new Queue()
  toVisit.push(indexed)
  while(pointer < n) {
    var head = toVisit.pop()
    var array = head
    var nn = array.shape[0]|0
    
    //Find median
    if(nn > 1) {
      var k = bits.log2(pointer+1)%d
      var median
      var n_2 = inorderTree.root(nn)
      median = sel_cmp(array, n_2, function(a,b) {
        return a.get(k) - b.get(k)
      })

      //Copy into new array
      var pptr = pointArray.index(pointer, 0)
      var mptr = median.offset
      for(var i=0; i<d; ++i) {
        pointData[pptr++] = arrayData[mptr++]
      }
      indexArray[pointer] = arrayData[mptr]
      pointer += 1

      //Queue new items
      toVisit.push(array.hi(n_2))
      if(nn > 2) {
        toVisit.push(array.lo(n_2+1))
      }
    } else {
      //Copy into new array
      var mptr = array.offset
      var pptr = pointArray.index(pointer, 0)
      for(var i=0; i<d; ++i) {
        pointData[pptr+i] = arrayData[mptr++]
      }
      indexArray[pointer] = arrayData[mptr]
      pointer += 1
    }
  }

  //Release indexed
  pool.free(indexed.data)

  return new KDTree(pointArray, indexArray, n, d)
}

function deserializeKDTree(data) {
  var points = data.p
  var ids = data.i
  if(points) {
    var nd = points.length
    var pointArray = pool.mallocFloat64(nd)
    for(var i=0; i<nd; ++i) {
      pointArray[i] = points[i]
    }
    var n = ids.length
    var idArray = pool.mallocInt32(n)
    for(var i=0; i<n; ++i) {
      idArray[i] = ids[i]
    }
    var d = (nd/n)|0
    return new KDTree(
      ndarray(pointArray, [n,d]),
      idArray,
      n,
      d)
  } else {
    return new KDTree(null, null, 0, data.d)
  }
}

},{"./lib/heap.js":56,"bit-twiddle":2,"inorder-tree-layout":43,"ndarray":52,"ndarray-ops":47,"ndarray-pack":48,"ndarray-scratch":50,"ndarray-select":51,"typedarray-pool":61}],56:[function(require,module,exports){
"use strict"

module.exports = KDTHeap

var pool = require("typedarray-pool")

function heapParent(i) {
  if(i & 1) {
    return (i - 1) >> 1
  }
  return (i >> 1) - 1
}

function KDTHeap(n, d) {
  this.count = 0
  this.dataSize = d
  this.index = pool.mallocInt32(n)
  this.data = pool.mallocFloat64(n*d)
}

var proto = KDTHeap.prototype

proto.heapSwap = function(_i,_j) {
  var data = this.data
  var index = this.index
  var d = this.dataSize
  var tmp = index[_i]
  index[_i] = index[_j]
  index[_j] = tmp
  var aptr = d*_i
  var bptr = d*_j
  for(var _k=0; _k<d; ++_k) {
    var t2 = data[aptr]
    data[aptr] = data[bptr]
    data[bptr] = t2
    aptr += 1
    bptr += 1
  }
}

proto.heapUp = function(i) {
  var d = this.dataSize
  var index = this.index
  var data = this.data
  var w = data[d*i]
  while(i>0) {
    var parent = heapParent(i)
    if(parent >= 0) {
      var pw = data[d*parent]
      if(w < pw) {
        this.heapSwap(i, parent)
        i = parent
        continue
      }
    }
    break
  }
}

proto.heapDown = function(i) {
  var d = this.dataSize
  var index = this.index
  var data = this.data
  var count = this.count
  var w = data[d*i]
  while(true) {
    var tw = w
    var left  = 2*i + 1
    var right = 2*(i + 1)
    var next = i
    if(left < count) {
      var lw = data[d*left]
      if(lw < tw) {
        next = left
        tw = lw
      }
    }
    if(right < count) {
      var rw = data[d*right]
      if(rw < tw) {
        next = right
      }
    }
    if(next === i) {
      break
    }
    this.heapSwap(i, next)
    i = next      
  }
}

//Clear item from top of heap
proto.pop = function() {
  this.count -= 1
  this.heapSwap(0, this.count)
  this.heapDown(0)
}

//Assume object already written to data
proto.push = function() {
  this.heapUp(this.count)
  this.count += 1
}

proto.dispose = function() {
  pool.freeInt32(this.index)
  pool.freeFloat64(this.data)
}
},{"typedarray-pool":61}],57:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var topojsonClient = require('topojson-client');
var topojsonServer = require('topojson-server');
var topojsonSimplify = require('topojson-simplify');



Object.keys(topojsonClient).forEach(function (key) { exports[key] = topojsonClient[key]; });
Object.keys(topojsonServer).forEach(function (key) { exports[key] = topojsonServer[key]; });
Object.keys(topojsonSimplify).forEach(function (key) { exports[key] = topojsonSimplify[key]; });

},{"topojson-client":58,"topojson-server":59,"topojson-simplify":60}],58:[function(require,module,exports){
// https://github.com/topojson/topojson-client Version 3.0.0. Copyright 2017 Mike Bostock.
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global.topojson = global.topojson || {})));
}(this, (function (exports) { 'use strict';

var identity = function(x) {
  return x;
};

var transform = function(transform) {
  if (transform == null) return identity;
  var x0,
      y0,
      kx = transform.scale[0],
      ky = transform.scale[1],
      dx = transform.translate[0],
      dy = transform.translate[1];
  return function(input, i) {
    if (!i) x0 = y0 = 0;
    var j = 2, n = input.length, output = new Array(n);
    output[0] = (x0 += input[0]) * kx + dx;
    output[1] = (y0 += input[1]) * ky + dy;
    while (j < n) output[j] = input[j], ++j;
    return output;
  };
};

var bbox = function(topology) {
  var t = transform(topology.transform), key,
      x0 = Infinity, y0 = x0, x1 = -x0, y1 = -x0;

  function bboxPoint(p) {
    p = t(p);
    if (p[0] < x0) x0 = p[0];
    if (p[0] > x1) x1 = p[0];
    if (p[1] < y0) y0 = p[1];
    if (p[1] > y1) y1 = p[1];
  }

  function bboxGeometry(o) {
    switch (o.type) {
      case "GeometryCollection": o.geometries.forEach(bboxGeometry); break;
      case "Point": bboxPoint(o.coordinates); break;
      case "MultiPoint": o.coordinates.forEach(bboxPoint); break;
    }
  }

  topology.arcs.forEach(function(arc) {
    var i = -1, n = arc.length, p;
    while (++i < n) {
      p = t(arc[i], i);
      if (p[0] < x0) x0 = p[0];
      if (p[0] > x1) x1 = p[0];
      if (p[1] < y0) y0 = p[1];
      if (p[1] > y1) y1 = p[1];
    }
  });

  for (key in topology.objects) {
    bboxGeometry(topology.objects[key]);
  }

  return [x0, y0, x1, y1];
};

var reverse = function(array, n) {
  var t, j = array.length, i = j - n;
  while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;
};

var feature = function(topology, o) {
  return o.type === "GeometryCollection"
      ? {type: "FeatureCollection", features: o.geometries.map(function(o) { return feature$1(topology, o); })}
      : feature$1(topology, o);
};

function feature$1(topology, o) {
  var id = o.id,
      bbox = o.bbox,
      properties = o.properties == null ? {} : o.properties,
      geometry = object(topology, o);
  return id == null && bbox == null ? {type: "Feature", properties: properties, geometry: geometry}
      : bbox == null ? {type: "Feature", id: id, properties: properties, geometry: geometry}
      : {type: "Feature", id: id, bbox: bbox, properties: properties, geometry: geometry};
}

function object(topology, o) {
  var transformPoint = transform(topology.transform),
      arcs = topology.arcs;

  function arc(i, points) {
    if (points.length) points.pop();
    for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {
      points.push(transformPoint(a[k], k));
    }
    if (i < 0) reverse(points, n);
  }

  function point(p) {
    return transformPoint(p);
  }

  function line(arcs) {
    var points = [];
    for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);
    if (points.length < 2) points.push(points[0]); // This should never happen per the specification.
    return points;
  }

  function ring(arcs) {
    var points = line(arcs);
    while (points.length < 4) points.push(points[0]); // This may happen if an arc has only two points.
    return points;
  }

  function polygon(arcs) {
    return arcs.map(ring);
  }

  function geometry(o) {
    var type = o.type, coordinates;
    switch (type) {
      case "GeometryCollection": return {type: type, geometries: o.geometries.map(geometry)};
      case "Point": coordinates = point(o.coordinates); break;
      case "MultiPoint": coordinates = o.coordinates.map(point); break;
      case "LineString": coordinates = line(o.arcs); break;
      case "MultiLineString": coordinates = o.arcs.map(line); break;
      case "Polygon": coordinates = polygon(o.arcs); break;
      case "MultiPolygon": coordinates = o.arcs.map(polygon); break;
      default: return null;
    }
    return {type: type, coordinates: coordinates};
  }

  return geometry(o);
}

var stitch = function(topology, arcs) {
  var stitchedArcs = {},
      fragmentByStart = {},
      fragmentByEnd = {},
      fragments = [],
      emptyIndex = -1;

  // Stitch empty arcs first, since they may be subsumed by other arcs.
  arcs.forEach(function(i, j) {
    var arc = topology.arcs[i < 0 ? ~i : i], t;
    if (arc.length < 3 && !arc[1][0] && !arc[1][1]) {
      t = arcs[++emptyIndex], arcs[emptyIndex] = i, arcs[j] = t;
    }
  });

  arcs.forEach(function(i) {
    var e = ends(i),
        start = e[0],
        end = e[1],
        f, g;

    if (f = fragmentByEnd[start]) {
      delete fragmentByEnd[f.end];
      f.push(i);
      f.end = end;
      if (g = fragmentByStart[end]) {
        delete fragmentByStart[g.start];
        var fg = g === f ? f : f.concat(g);
        fragmentByStart[fg.start = f.start] = fragmentByEnd[fg.end = g.end] = fg;
      } else {
        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
      }
    } else if (f = fragmentByStart[end]) {
      delete fragmentByStart[f.start];
      f.unshift(i);
      f.start = start;
      if (g = fragmentByEnd[start]) {
        delete fragmentByEnd[g.end];
        var gf = g === f ? f : g.concat(f);
        fragmentByStart[gf.start = g.start] = fragmentByEnd[gf.end = f.end] = gf;
      } else {
        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
      }
    } else {
      f = [i];
      fragmentByStart[f.start = start] = fragmentByEnd[f.end = end] = f;
    }
  });

  function ends(i) {
    var arc = topology.arcs[i < 0 ? ~i : i], p0 = arc[0], p1;
    if (topology.transform) p1 = [0, 0], arc.forEach(function(dp) { p1[0] += dp[0], p1[1] += dp[1]; });
    else p1 = arc[arc.length - 1];
    return i < 0 ? [p1, p0] : [p0, p1];
  }

  function flush(fragmentByEnd, fragmentByStart) {
    for (var k in fragmentByEnd) {
      var f = fragmentByEnd[k];
      delete fragmentByStart[f.start];
      delete f.start;
      delete f.end;
      f.forEach(function(i) { stitchedArcs[i < 0 ? ~i : i] = 1; });
      fragments.push(f);
    }
  }

  flush(fragmentByEnd, fragmentByStart);
  flush(fragmentByStart, fragmentByEnd);
  arcs.forEach(function(i) { if (!stitchedArcs[i < 0 ? ~i : i]) fragments.push([i]); });

  return fragments;
};

var mesh = function(topology) {
  return object(topology, meshArcs.apply(this, arguments));
};

function meshArcs(topology, object$$1, filter) {
  var arcs, i, n;
  if (arguments.length > 1) arcs = extractArcs(topology, object$$1, filter);
  else for (i = 0, arcs = new Array(n = topology.arcs.length); i < n; ++i) arcs[i] = i;
  return {type: "MultiLineString", arcs: stitch(topology, arcs)};
}

function extractArcs(topology, object$$1, filter) {
  var arcs = [],
      geomsByArc = [],
      geom;

  function extract0(i) {
    var j = i < 0 ? ~i : i;
    (geomsByArc[j] || (geomsByArc[j] = [])).push({i: i, g: geom});
  }

  function extract1(arcs) {
    arcs.forEach(extract0);
  }

  function extract2(arcs) {
    arcs.forEach(extract1);
  }

  function extract3(arcs) {
    arcs.forEach(extract2);
  }

  function geometry(o) {
    switch (geom = o, o.type) {
      case "GeometryCollection": o.geometries.forEach(geometry); break;
      case "LineString": extract1(o.arcs); break;
      case "MultiLineString": case "Polygon": extract2(o.arcs); break;
      case "MultiPolygon": extract3(o.arcs); break;
    }
  }

  geometry(object$$1);

  geomsByArc.forEach(filter == null
      ? function(geoms) { arcs.push(geoms[0].i); }
      : function(geoms) { if (filter(geoms[0].g, geoms[geoms.length - 1].g)) arcs.push(geoms[0].i); });

  return arcs;
}

function planarRingArea(ring) {
  var i = -1, n = ring.length, a, b = ring[n - 1], area = 0;
  while (++i < n) a = b, b = ring[i], area += a[0] * b[1] - a[1] * b[0];
  return Math.abs(area); // Note: doubled area!
}

var merge = function(topology) {
  return object(topology, mergeArcs.apply(this, arguments));
};

function mergeArcs(topology, objects) {
  var polygonsByArc = {},
      polygons = [],
      groups = [];

  objects.forEach(geometry);

  function geometry(o) {
    switch (o.type) {
      case "GeometryCollection": o.geometries.forEach(geometry); break;
      case "Polygon": extract(o.arcs); break;
      case "MultiPolygon": o.arcs.forEach(extract); break;
    }
  }

  function extract(polygon) {
    polygon.forEach(function(ring) {
      ring.forEach(function(arc) {
        (polygonsByArc[arc = arc < 0 ? ~arc : arc] || (polygonsByArc[arc] = [])).push(polygon);
      });
    });
    polygons.push(polygon);
  }

  function area(ring) {
    return planarRingArea(object(topology, {type: "Polygon", arcs: [ring]}).coordinates[0]);
  }

  polygons.forEach(function(polygon) {
    if (!polygon._) {
      var group = [],
          neighbors = [polygon];
      polygon._ = 1;
      groups.push(group);
      while (polygon = neighbors.pop()) {
        group.push(polygon);
        polygon.forEach(function(ring) {
          ring.forEach(function(arc) {
            polygonsByArc[arc < 0 ? ~arc : arc].forEach(function(polygon) {
              if (!polygon._) {
                polygon._ = 1;
                neighbors.push(polygon);
              }
            });
          });
        });
      }
    }
  });

  polygons.forEach(function(polygon) {
    delete polygon._;
  });

  return {
    type: "MultiPolygon",
    arcs: groups.map(function(polygons) {
      var arcs = [], n;

      // Extract the exterior (unique) arcs.
      polygons.forEach(function(polygon) {
        polygon.forEach(function(ring) {
          ring.forEach(function(arc) {
            if (polygonsByArc[arc < 0 ? ~arc : arc].length < 2) {
              arcs.push(arc);
            }
          });
        });
      });

      // Stitch the arcs into one or more rings.
      arcs = stitch(topology, arcs);

      // If more than one ring is returned,
      // at most one of these rings can be the exterior;
      // choose the one with the greatest absolute area.
      if ((n = arcs.length) > 1) {
        for (var i = 1, k = area(arcs[0]), ki, t; i < n; ++i) {
          if ((ki = area(arcs[i])) > k) {
            t = arcs[0], arcs[0] = arcs[i], arcs[i] = t, k = ki;
          }
        }
      }

      return arcs;
    })
  };
}

var bisect = function(a, x) {
  var lo = 0, hi = a.length;
  while (lo < hi) {
    var mid = lo + hi >>> 1;
    if (a[mid] < x) lo = mid + 1;
    else hi = mid;
  }
  return lo;
};

var neighbors = function(objects) {
  var indexesByArc = {}, // arc index -> array of object indexes
      neighbors = objects.map(function() { return []; });

  function line(arcs, i) {
    arcs.forEach(function(a) {
      if (a < 0) a = ~a;
      var o = indexesByArc[a];
      if (o) o.push(i);
      else indexesByArc[a] = [i];
    });
  }

  function polygon(arcs, i) {
    arcs.forEach(function(arc) { line(arc, i); });
  }

  function geometry(o, i) {
    if (o.type === "GeometryCollection") o.geometries.forEach(function(o) { geometry(o, i); });
    else if (o.type in geometryType) geometryType[o.type](o.arcs, i);
  }

  var geometryType = {
    LineString: line,
    MultiLineString: polygon,
    Polygon: polygon,
    MultiPolygon: function(arcs, i) { arcs.forEach(function(arc) { polygon(arc, i); }); }
  };

  objects.forEach(geometry);

  for (var i in indexesByArc) {
    for (var indexes = indexesByArc[i], m = indexes.length, j = 0; j < m; ++j) {
      for (var k = j + 1; k < m; ++k) {
        var ij = indexes[j], ik = indexes[k], n;
        if ((n = neighbors[ij])[i = bisect(n, ik)] !== ik) n.splice(i, 0, ik);
        if ((n = neighbors[ik])[i = bisect(n, ij)] !== ij) n.splice(i, 0, ij);
      }
    }
  }

  return neighbors;
};

var untransform = function(transform) {
  if (transform == null) return identity;
  var x0,
      y0,
      kx = transform.scale[0],
      ky = transform.scale[1],
      dx = transform.translate[0],
      dy = transform.translate[1];
  return function(input, i) {
    if (!i) x0 = y0 = 0;
    var j = 2,
        n = input.length,
        output = new Array(n),
        x1 = Math.round((input[0] - dx) / kx),
        y1 = Math.round((input[1] - dy) / ky);
    output[0] = x1 - x0, x0 = x1;
    output[1] = y1 - y0, y0 = y1;
    while (j < n) output[j] = input[j], ++j;
    return output;
  };
};

var quantize = function(topology, transform) {
  if (topology.transform) throw new Error("already quantized");

  if (!transform || !transform.scale) {
    if (!((n = Math.floor(transform)) >= 2)) throw new Error("n must be ≥2");
    box = topology.bbox || bbox(topology);
    var x0 = box[0], y0 = box[1], x1 = box[2], y1 = box[3], n;
    transform = {scale: [x1 - x0 ? (x1 - x0) / (n - 1) : 1, y1 - y0 ? (y1 - y0) / (n - 1) : 1], translate: [x0, y0]};
  } else {
    box = topology.bbox;
  }

  var t = untransform(transform), box, key, inputs = topology.objects, outputs = {};

  function quantizePoint(point) {
    return t(point);
  }

  function quantizeGeometry(input) {
    var output;
    switch (input.type) {
      case "GeometryCollection": output = {type: "GeometryCollection", geometries: input.geometries.map(quantizeGeometry)}; break;
      case "Point": output = {type: "Point", coordinates: quantizePoint(input.coordinates)}; break;
      case "MultiPoint": output = {type: "MultiPoint", coordinates: input.coordinates.map(quantizePoint)}; break;
      default: return input;
    }
    if (input.id != null) output.id = input.id;
    if (input.bbox != null) output.bbox = input.bbox;
    if (input.properties != null) output.properties = input.properties;
    return output;
  }

  function quantizeArc(input) {
    var i = 0, j = 1, n = input.length, p, output = new Array(n); // pessimistic
    output[0] = t(input[0], 0);
    while (++i < n) if ((p = t(input[i], i))[0] || p[1]) output[j++] = p; // non-coincident points
    if (j === 1) output[j++] = [0, 0]; // an arc must have at least two points
    output.length = j;
    return output;
  }

  for (key in inputs) outputs[key] = quantizeGeometry(inputs[key]);

  return {
    type: "Topology",
    bbox: box,
    transform: transform,
    objects: outputs,
    arcs: topology.arcs.map(quantizeArc)
  };
};

exports.bbox = bbox;
exports.feature = feature;
exports.mesh = mesh;
exports.meshArcs = meshArcs;
exports.merge = merge;
exports.mergeArcs = mergeArcs;
exports.neighbors = neighbors;
exports.quantize = quantize;
exports.transform = transform;
exports.untransform = untransform;

Object.defineProperty(exports, '__esModule', { value: true });

})));

},{}],59:[function(require,module,exports){
// https://github.com/topojson/topojson-server Version 3.0.0. Copyright 2017 Mike Bostock.
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global.topojson = global.topojson || {})));
}(this, (function (exports) { 'use strict';

// Computes the bounding box of the specified hash of GeoJSON objects.
var bounds = function(objects) {
  var x0 = Infinity,
      y0 = Infinity,
      x1 = -Infinity,
      y1 = -Infinity;

  function boundGeometry(geometry) {
    if (geometry != null && boundGeometryType.hasOwnProperty(geometry.type)) boundGeometryType[geometry.type](geometry);
  }

  var boundGeometryType = {
    GeometryCollection: function(o) { o.geometries.forEach(boundGeometry); },
    Point: function(o) { boundPoint(o.coordinates); },
    MultiPoint: function(o) { o.coordinates.forEach(boundPoint); },
    LineString: function(o) { boundLine(o.arcs); },
    MultiLineString: function(o) { o.arcs.forEach(boundLine); },
    Polygon: function(o) { o.arcs.forEach(boundLine); },
    MultiPolygon: function(o) { o.arcs.forEach(boundMultiLine); }
  };

  function boundPoint(coordinates) {
    var x = coordinates[0],
        y = coordinates[1];
    if (x < x0) x0 = x;
    if (x > x1) x1 = x;
    if (y < y0) y0 = y;
    if (y > y1) y1 = y;
  }

  function boundLine(coordinates) {
    coordinates.forEach(boundPoint);
  }

  function boundMultiLine(coordinates) {
    coordinates.forEach(boundLine);
  }

  for (var key in objects) {
    boundGeometry(objects[key]);
  }

  return x1 >= x0 && y1 >= y0 ? [x0, y0, x1, y1] : undefined;
};

var hashset = function(size, hash, equal, type, empty) {
  if (arguments.length === 3) {
    type = Array;
    empty = null;
  }

  var store = new type(size = 1 << Math.max(4, Math.ceil(Math.log(size) / Math.LN2))),
      mask = size - 1;

  for (var i = 0; i < size; ++i) {
    store[i] = empty;
  }

  function add(value) {
    var index = hash(value) & mask,
        match = store[index],
        collisions = 0;
    while (match != empty) {
      if (equal(match, value)) return true;
      if (++collisions >= size) throw new Error("full hashset");
      match = store[index = (index + 1) & mask];
    }
    store[index] = value;
    return true;
  }

  function has(value) {
    var index = hash(value) & mask,
        match = store[index],
        collisions = 0;
    while (match != empty) {
      if (equal(match, value)) return true;
      if (++collisions >= size) break;
      match = store[index = (index + 1) & mask];
    }
    return false;
  }

  function values() {
    var values = [];
    for (var i = 0, n = store.length; i < n; ++i) {
      var match = store[i];
      if (match != empty) values.push(match);
    }
    return values;
  }

  return {
    add: add,
    has: has,
    values: values
  };
};

var hashmap = function(size, hash, equal, keyType, keyEmpty, valueType) {
  if (arguments.length === 3) {
    keyType = valueType = Array;
    keyEmpty = null;
  }

  var keystore = new keyType(size = 1 << Math.max(4, Math.ceil(Math.log(size) / Math.LN2))),
      valstore = new valueType(size),
      mask = size - 1;

  for (var i = 0; i < size; ++i) {
    keystore[i] = keyEmpty;
  }

  function set(key, value) {
    var index = hash(key) & mask,
        matchKey = keystore[index],
        collisions = 0;
    while (matchKey != keyEmpty) {
      if (equal(matchKey, key)) return valstore[index] = value;
      if (++collisions >= size) throw new Error("full hashmap");
      matchKey = keystore[index = (index + 1) & mask];
    }
    keystore[index] = key;
    valstore[index] = value;
    return value;
  }

  function maybeSet(key, value) {
    var index = hash(key) & mask,
        matchKey = keystore[index],
        collisions = 0;
    while (matchKey != keyEmpty) {
      if (equal(matchKey, key)) return valstore[index];
      if (++collisions >= size) throw new Error("full hashmap");
      matchKey = keystore[index = (index + 1) & mask];
    }
    keystore[index] = key;
    valstore[index] = value;
    return value;
  }

  function get(key, missingValue) {
    var index = hash(key) & mask,
        matchKey = keystore[index],
        collisions = 0;
    while (matchKey != keyEmpty) {
      if (equal(matchKey, key)) return valstore[index];
      if (++collisions >= size) break;
      matchKey = keystore[index = (index + 1) & mask];
    }
    return missingValue;
  }

  function keys() {
    var keys = [];
    for (var i = 0, n = keystore.length; i < n; ++i) {
      var matchKey = keystore[i];
      if (matchKey != keyEmpty) keys.push(matchKey);
    }
    return keys;
  }

  return {
    set: set,
    maybeSet: maybeSet, // set if unset
    get: get,
    keys: keys
  };
};

var equalPoint = function(pointA, pointB) {
  return pointA[0] === pointB[0] && pointA[1] === pointB[1];
};

// TODO if quantized, use simpler Int32 hashing?

var buffer = new ArrayBuffer(16);
var floats = new Float64Array(buffer);
var uints = new Uint32Array(buffer);

var hashPoint = function(point) {
  floats[0] = point[0];
  floats[1] = point[1];
  var hash = uints[0] ^ uints[1];
  hash = hash << 5 ^ hash >> 7 ^ uints[2] ^ uints[3];
  return hash & 0x7fffffff;
};

// Given an extracted (pre-)topology, identifies all of the junctions. These are
// the points at which arcs (lines or rings) will need to be cut so that each
// arc is represented uniquely.
//
// A junction is a point where at least one arc deviates from another arc going
// through the same point. For example, consider the point B. If there is a arc
// through ABC and another arc through CBA, then B is not a junction because in
// both cases the adjacent point pairs are {A,C}. However, if there is an
// additional arc ABD, then {A,D} != {A,C}, and thus B becomes a junction.
//
// For a closed ring ABCA, the first point A’s adjacent points are the second
// and last point {B,C}. For a line, the first and last point are always
// considered junctions, even if the line is closed; this ensures that a closed
// line is never rotated.
var join = function(topology) {
  var coordinates = topology.coordinates,
      lines = topology.lines,
      rings = topology.rings,
      indexes = index(),
      visitedByIndex = new Int32Array(coordinates.length),
      leftByIndex = new Int32Array(coordinates.length),
      rightByIndex = new Int32Array(coordinates.length),
      junctionByIndex = new Int8Array(coordinates.length),
      junctionCount = 0, // upper bound on number of junctions
      i, n,
      previousIndex,
      currentIndex,
      nextIndex;

  for (i = 0, n = coordinates.length; i < n; ++i) {
    visitedByIndex[i] = leftByIndex[i] = rightByIndex[i] = -1;
  }

  for (i = 0, n = lines.length; i < n; ++i) {
    var line = lines[i],
        lineStart = line[0],
        lineEnd = line[1];
    currentIndex = indexes[lineStart];
    nextIndex = indexes[++lineStart];
    ++junctionCount, junctionByIndex[currentIndex] = 1; // start
    while (++lineStart <= lineEnd) {
      sequence(i, previousIndex = currentIndex, currentIndex = nextIndex, nextIndex = indexes[lineStart]);
    }
    ++junctionCount, junctionByIndex[nextIndex] = 1; // end
  }

  for (i = 0, n = coordinates.length; i < n; ++i) {
    visitedByIndex[i] = -1;
  }

  for (i = 0, n = rings.length; i < n; ++i) {
    var ring = rings[i],
        ringStart = ring[0] + 1,
        ringEnd = ring[1];
    previousIndex = indexes[ringEnd - 1];
    currentIndex = indexes[ringStart - 1];
    nextIndex = indexes[ringStart];
    sequence(i, previousIndex, currentIndex, nextIndex);
    while (++ringStart <= ringEnd) {
      sequence(i, previousIndex = currentIndex, currentIndex = nextIndex, nextIndex = indexes[ringStart]);
    }
  }

  function sequence(i, previousIndex, currentIndex, nextIndex) {
    if (visitedByIndex[currentIndex] === i) return; // ignore self-intersection
    visitedByIndex[currentIndex] = i;
    var leftIndex = leftByIndex[currentIndex];
    if (leftIndex >= 0) {
      var rightIndex = rightByIndex[currentIndex];
      if ((leftIndex !== previousIndex || rightIndex !== nextIndex)
        && (leftIndex !== nextIndex || rightIndex !== previousIndex)) {
        ++junctionCount, junctionByIndex[currentIndex] = 1;
      }
    } else {
      leftByIndex[currentIndex] = previousIndex;
      rightByIndex[currentIndex] = nextIndex;
    }
  }

  function index() {
    var indexByPoint = hashmap(coordinates.length * 1.4, hashIndex, equalIndex, Int32Array, -1, Int32Array),
        indexes = new Int32Array(coordinates.length);

    for (var i = 0, n = coordinates.length; i < n; ++i) {
      indexes[i] = indexByPoint.maybeSet(i, i);
    }

    return indexes;
  }

  function hashIndex(i) {
    return hashPoint(coordinates[i]);
  }

  function equalIndex(i, j) {
    return equalPoint(coordinates[i], coordinates[j]);
  }

  visitedByIndex = leftByIndex = rightByIndex = null;

  var junctionByPoint = hashset(junctionCount * 1.4, hashPoint, equalPoint), j;

  // Convert back to a standard hashset by point for caller convenience.
  for (i = 0, n = coordinates.length; i < n; ++i) {
    if (junctionByIndex[j = indexes[i]]) {
      junctionByPoint.add(coordinates[j]);
    }
  }

  return junctionByPoint;
};

// Given an extracted (pre-)topology, cuts (or rotates) arcs so that all shared
// point sequences are identified. The topology can then be subsequently deduped
// to remove exact duplicate arcs.
var cut = function(topology) {
  var junctions = join(topology),
      coordinates = topology.coordinates,
      lines = topology.lines,
      rings = topology.rings,
      next,
      i, n;

  for (i = 0, n = lines.length; i < n; ++i) {
    var line = lines[i],
        lineMid = line[0],
        lineEnd = line[1];
    while (++lineMid < lineEnd) {
      if (junctions.has(coordinates[lineMid])) {
        next = {0: lineMid, 1: line[1]};
        line[1] = lineMid;
        line = line.next = next;
      }
    }
  }

  for (i = 0, n = rings.length; i < n; ++i) {
    var ring = rings[i],
        ringStart = ring[0],
        ringMid = ringStart,
        ringEnd = ring[1],
        ringFixed = junctions.has(coordinates[ringStart]);
    while (++ringMid < ringEnd) {
      if (junctions.has(coordinates[ringMid])) {
        if (ringFixed) {
          next = {0: ringMid, 1: ring[1]};
          ring[1] = ringMid;
          ring = ring.next = next;
        } else { // For the first junction, we can rotate rather than cut.
          rotateArray(coordinates, ringStart, ringEnd, ringEnd - ringMid);
          coordinates[ringEnd] = coordinates[ringStart];
          ringFixed = true;
          ringMid = ringStart; // restart; we may have skipped junctions
        }
      }
    }
  }

  return topology;
};

function rotateArray(array, start, end, offset) {
  reverse(array, start, end);
  reverse(array, start, start + offset);
  reverse(array, start + offset, end);
}

function reverse(array, start, end) {
  for (var mid = start + ((end-- - start) >> 1), t; start < mid; ++start, --end) {
    t = array[start], array[start] = array[end], array[end] = t;
  }
}

// Given a cut topology, combines duplicate arcs.
var dedup = function(topology) {
  var coordinates = topology.coordinates,
      lines = topology.lines, line,
      rings = topology.rings, ring,
      arcCount = lines.length + rings.length,
      i, n;

  delete topology.lines;
  delete topology.rings;

  // Count the number of (non-unique) arcs to initialize the hashmap safely.
  for (i = 0, n = lines.length; i < n; ++i) {
    line = lines[i]; while (line = line.next) ++arcCount;
  }
  for (i = 0, n = rings.length; i < n; ++i) {
    ring = rings[i]; while (ring = ring.next) ++arcCount;
  }

  var arcsByEnd = hashmap(arcCount * 2 * 1.4, hashPoint, equalPoint),
      arcs = topology.arcs = [];

  for (i = 0, n = lines.length; i < n; ++i) {
    line = lines[i];
    do {
      dedupLine(line);
    } while (line = line.next);
  }

  for (i = 0, n = rings.length; i < n; ++i) {
    ring = rings[i];
    if (ring.next) { // arc is no longer closed
      do {
        dedupLine(ring);
      } while (ring = ring.next);
    } else {
      dedupRing(ring);
    }
  }

  function dedupLine(arc) {
    var startPoint,
        endPoint,
        startArcs, startArc,
        endArcs, endArc,
        i, n;

    // Does this arc match an existing arc in order?
    if (startArcs = arcsByEnd.get(startPoint = coordinates[arc[0]])) {
      for (i = 0, n = startArcs.length; i < n; ++i) {
        startArc = startArcs[i];
        if (equalLine(startArc, arc)) {
          arc[0] = startArc[0];
          arc[1] = startArc[1];
          return;
        }
      }
    }

    // Does this arc match an existing arc in reverse order?
    if (endArcs = arcsByEnd.get(endPoint = coordinates[arc[1]])) {
      for (i = 0, n = endArcs.length; i < n; ++i) {
        endArc = endArcs[i];
        if (reverseEqualLine(endArc, arc)) {
          arc[1] = endArc[0];
          arc[0] = endArc[1];
          return;
        }
      }
    }

    if (startArcs) startArcs.push(arc); else arcsByEnd.set(startPoint, [arc]);
    if (endArcs) endArcs.push(arc); else arcsByEnd.set(endPoint, [arc]);
    arcs.push(arc);
  }

  function dedupRing(arc) {
    var endPoint,
        endArcs,
        endArc,
        i, n;

    // Does this arc match an existing line in order, or reverse order?
    // Rings are closed, so their start point and end point is the same.
    if (endArcs = arcsByEnd.get(endPoint = coordinates[arc[0]])) {
      for (i = 0, n = endArcs.length; i < n; ++i) {
        endArc = endArcs[i];
        if (equalRing(endArc, arc)) {
          arc[0] = endArc[0];
          arc[1] = endArc[1];
          return;
        }
        if (reverseEqualRing(endArc, arc)) {
          arc[0] = endArc[1];
          arc[1] = endArc[0];
          return;
        }
      }
    }

    // Otherwise, does this arc match an existing ring in order, or reverse order?
    if (endArcs = arcsByEnd.get(endPoint = coordinates[arc[0] + findMinimumOffset(arc)])) {
      for (i = 0, n = endArcs.length; i < n; ++i) {
        endArc = endArcs[i];
        if (equalRing(endArc, arc)) {
          arc[0] = endArc[0];
          arc[1] = endArc[1];
          return;
        }
        if (reverseEqualRing(endArc, arc)) {
          arc[0] = endArc[1];
          arc[1] = endArc[0];
          return;
        }
      }
    }

    if (endArcs) endArcs.push(arc); else arcsByEnd.set(endPoint, [arc]);
    arcs.push(arc);
  }

  function equalLine(arcA, arcB) {
    var ia = arcA[0], ib = arcB[0],
        ja = arcA[1], jb = arcB[1];
    if (ia - ja !== ib - jb) return false;
    for (; ia <= ja; ++ia, ++ib) if (!equalPoint(coordinates[ia], coordinates[ib])) return false;
    return true;
  }

  function reverseEqualLine(arcA, arcB) {
    var ia = arcA[0], ib = arcB[0],
        ja = arcA[1], jb = arcB[1];
    if (ia - ja !== ib - jb) return false;
    for (; ia <= ja; ++ia, --jb) if (!equalPoint(coordinates[ia], coordinates[jb])) return false;
    return true;
  }

  function equalRing(arcA, arcB) {
    var ia = arcA[0], ib = arcB[0],
        ja = arcA[1], jb = arcB[1],
        n = ja - ia;
    if (n !== jb - ib) return false;
    var ka = findMinimumOffset(arcA),
        kb = findMinimumOffset(arcB);
    for (var i = 0; i < n; ++i) {
      if (!equalPoint(coordinates[ia + (i + ka) % n], coordinates[ib + (i + kb) % n])) return false;
    }
    return true;
  }

  function reverseEqualRing(arcA, arcB) {
    var ia = arcA[0], ib = arcB[0],
        ja = arcA[1], jb = arcB[1],
        n = ja - ia;
    if (n !== jb - ib) return false;
    var ka = findMinimumOffset(arcA),
        kb = n - findMinimumOffset(arcB);
    for (var i = 0; i < n; ++i) {
      if (!equalPoint(coordinates[ia + (i + ka) % n], coordinates[jb - (i + kb) % n])) return false;
    }
    return true;
  }

  // Rings are rotated to a consistent, but arbitrary, start point.
  // This is necessary to detect when a ring and a rotated copy are dupes.
  function findMinimumOffset(arc) {
    var start = arc[0],
        end = arc[1],
        mid = start,
        minimum = mid,
        minimumPoint = coordinates[mid];
    while (++mid < end) {
      var point = coordinates[mid];
      if (point[0] < minimumPoint[0] || point[0] === minimumPoint[0] && point[1] < minimumPoint[1]) {
        minimum = mid;
        minimumPoint = point;
      }
    }
    return minimum - start;
  }

  return topology;
};

// Given an array of arcs in absolute (but already quantized!) coordinates,
// converts to fixed-point delta encoding.
// This is a destructive operation that modifies the given arcs!
var delta = function(arcs) {
  var i = -1,
      n = arcs.length;

  while (++i < n) {
    var arc = arcs[i],
        j = 0,
        k = 1,
        m = arc.length,
        point = arc[0],
        x0 = point[0],
        y0 = point[1],
        x1,
        y1;

    while (++j < m) {
      point = arc[j], x1 = point[0], y1 = point[1];
      if (x1 !== x0 || y1 !== y0) arc[k++] = [x1 - x0, y1 - y0], x0 = x1, y0 = y1;
    }

    if (k === 1) arc[k++] = [0, 0]; // Each arc must be an array of two or more positions.

    arc.length = k;
  }

  return arcs;
};

// Extracts the lines and rings from the specified hash of geometry objects.
//
// Returns an object with three properties:
//
// * coordinates - shared buffer of [x, y] coordinates
// * lines - lines extracted from the hash, of the form [start, end]
// * rings - rings extracted from the hash, of the form [start, end]
//
// For each ring or line, start and end represent inclusive indexes into the
// coordinates buffer. For rings (and closed lines), coordinates[start] equals
// coordinates[end].
//
// For each line or polygon geometry in the input hash, including nested
// geometries as in geometry collections, the `coordinates` array is replaced
// with an equivalent `arcs` array that, for each line (for line string
// geometries) or ring (for polygon geometries), points to one of the above
// lines or rings.
var extract = function(objects) {
  var index = -1,
      lines = [],
      rings = [],
      coordinates = [];

  function extractGeometry(geometry) {
    if (geometry && extractGeometryType.hasOwnProperty(geometry.type)) extractGeometryType[geometry.type](geometry);
  }

  var extractGeometryType = {
    GeometryCollection: function(o) { o.geometries.forEach(extractGeometry); },
    LineString: function(o) { o.arcs = extractLine(o.arcs); },
    MultiLineString: function(o) { o.arcs = o.arcs.map(extractLine); },
    Polygon: function(o) { o.arcs = o.arcs.map(extractRing); },
    MultiPolygon: function(o) { o.arcs = o.arcs.map(extractMultiRing); }
  };

  function extractLine(line) {
    for (var i = 0, n = line.length; i < n; ++i) coordinates[++index] = line[i];
    var arc = {0: index - n + 1, 1: index};
    lines.push(arc);
    return arc;
  }

  function extractRing(ring) {
    for (var i = 0, n = ring.length; i < n; ++i) coordinates[++index] = ring[i];
    var arc = {0: index - n + 1, 1: index};
    rings.push(arc);
    return arc;
  }

  function extractMultiRing(rings) {
    return rings.map(extractRing);
  }

  for (var key in objects) {
    extractGeometry(objects[key]);
  }

  return {
    type: "Topology",
    coordinates: coordinates,
    lines: lines,
    rings: rings,
    objects: objects
  };
};

// Given a hash of GeoJSON objects, returns a hash of GeoJSON geometry objects.
// Any null input geometry objects are represented as {type: null} in the output.
// Any feature.{id,properties,bbox} are transferred to the output geometry object.
// Each output geometry object is a shallow copy of the input (e.g., properties, coordinates)!
var geometry = function(inputs) {
  var outputs = {}, key;
  for (key in inputs) outputs[key] = geomifyObject(inputs[key]);
  return outputs;
};

function geomifyObject(input) {
  return input == null ? {type: null}
      : (input.type === "FeatureCollection" ? geomifyFeatureCollection
      : input.type === "Feature" ? geomifyFeature
      : geomifyGeometry)(input);
}

function geomifyFeatureCollection(input) {
  var output = {type: "GeometryCollection", geometries: input.features.map(geomifyFeature)};
  if (input.bbox != null) output.bbox = input.bbox;
  return output;
}

function geomifyFeature(input) {
  var output = geomifyGeometry(input.geometry), key; // eslint-disable-line no-unused-vars
  if (input.id != null) output.id = input.id;
  if (input.bbox != null) output.bbox = input.bbox;
  for (key in input.properties) { output.properties = input.properties; break; }
  return output;
}

function geomifyGeometry(input) {
  if (input == null) return {type: null};
  var output = input.type === "GeometryCollection" ? {type: "GeometryCollection", geometries: input.geometries.map(geomifyGeometry)}
      : input.type === "Point" || input.type === "MultiPoint" ? {type: input.type, coordinates: input.coordinates}
      : {type: input.type, arcs: input.coordinates}; // TODO Check for unknown types?
  if (input.bbox != null) output.bbox = input.bbox;
  return output;
}

var prequantize = function(objects, bbox, n) {
  var x0 = bbox[0],
      y0 = bbox[1],
      x1 = bbox[2],
      y1 = bbox[3],
      kx = x1 - x0 ? (n - 1) / (x1 - x0) : 1,
      ky = y1 - y0 ? (n - 1) / (y1 - y0) : 1;

  function quantizePoint(input) {
    return [Math.round((input[0] - x0) * kx), Math.round((input[1] - y0) * ky)];
  }

  function quantizePoints(input, m) {
    var i = -1,
        j = 0,
        n = input.length,
        output = new Array(n), // pessimistic
        pi,
        px,
        py,
        x,
        y;

    while (++i < n) {
      pi = input[i];
      x = Math.round((pi[0] - x0) * kx);
      y = Math.round((pi[1] - y0) * ky);
      if (x !== px || y !== py) output[j++] = [px = x, py = y]; // non-coincident points
    }

    output.length = j;
    while (j < m) j = output.push([output[0][0], output[0][1]]);
    return output;
  }

  function quantizeLine(input) {
    return quantizePoints(input, 2);
  }

  function quantizeRing(input) {
    return quantizePoints(input, 4);
  }

  function quantizePolygon(input) {
    return input.map(quantizeRing);
  }

  function quantizeGeometry(o) {
    if (o != null && quantizeGeometryType.hasOwnProperty(o.type)) quantizeGeometryType[o.type](o);
  }

  var quantizeGeometryType = {
    GeometryCollection: function(o) { o.geometries.forEach(quantizeGeometry); },
    Point: function(o) { o.coordinates = quantizePoint(o.coordinates); },
    MultiPoint: function(o) { o.coordinates = o.coordinates.map(quantizePoint); },
    LineString: function(o) { o.arcs = quantizeLine(o.arcs); },
    MultiLineString: function(o) { o.arcs = o.arcs.map(quantizeLine); },
    Polygon: function(o) { o.arcs = quantizePolygon(o.arcs); },
    MultiPolygon: function(o) { o.arcs = o.arcs.map(quantizePolygon); }
  };

  for (var key in objects) {
    quantizeGeometry(objects[key]);
  }

  return {
    scale: [1 / kx, 1 / ky],
    translate: [x0, y0]
  };
};

// Constructs the TopoJSON Topology for the specified hash of features.
// Each object in the specified hash must be a GeoJSON object,
// meaning FeatureCollection, a Feature or a geometry object.
var topology = function(objects, quantization) {
  var bbox = bounds(objects = geometry(objects)),
      transform = quantization > 0 && bbox && prequantize(objects, bbox, quantization),
      topology = dedup(cut(extract(objects))),
      coordinates = topology.coordinates,
      indexByArc = hashmap(topology.arcs.length * 1.4, hashArc, equalArc);

  objects = topology.objects; // for garbage collection
  topology.bbox = bbox;
  topology.arcs = topology.arcs.map(function(arc, i) {
    indexByArc.set(arc, i);
    return coordinates.slice(arc[0], arc[1] + 1);
  });

  delete topology.coordinates;
  coordinates = null;

  function indexGeometry(geometry$$1) {
    if (geometry$$1 && indexGeometryType.hasOwnProperty(geometry$$1.type)) indexGeometryType[geometry$$1.type](geometry$$1);
  }

  var indexGeometryType = {
    GeometryCollection: function(o) { o.geometries.forEach(indexGeometry); },
    LineString: function(o) { o.arcs = indexArcs(o.arcs); },
    MultiLineString: function(o) { o.arcs = o.arcs.map(indexArcs); },
    Polygon: function(o) { o.arcs = o.arcs.map(indexArcs); },
    MultiPolygon: function(o) { o.arcs = o.arcs.map(indexMultiArcs); }
  };

  function indexArcs(arc) {
    var indexes = [];
    do {
      var index = indexByArc.get(arc);
      indexes.push(arc[0] < arc[1] ? index : ~index);
    } while (arc = arc.next);
    return indexes;
  }

  function indexMultiArcs(arcs) {
    return arcs.map(indexArcs);
  }

  for (var key in objects) {
    indexGeometry(objects[key]);
  }

  if (transform) {
    topology.transform = transform;
    topology.arcs = delta(topology.arcs);
  }

  return topology;
};

function hashArc(arc) {
  var i = arc[0], j = arc[1], t;
  if (j < i) t = i, i = j, j = t;
  return i + 31 * j;
}

function equalArc(arcA, arcB) {
  var ia = arcA[0], ja = arcA[1],
      ib = arcB[0], jb = arcB[1], t;
  if (ja < ia) t = ia, ia = ja, ja = t;
  if (jb < ib) t = ib, ib = jb, jb = t;
  return ia === ib && ja === jb;
}

exports.topology = topology;

Object.defineProperty(exports, '__esModule', { value: true });

})));

},{}],60:[function(require,module,exports){
// https://github.com/topojson/topojson-simplify Version 3.0.2. Copyright 2017 Mike Bostock.
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('topojson-client')) :
	typeof define === 'function' && define.amd ? define(['exports', 'topojson-client'], factory) :
	(factory((global.topojson = global.topojson || {}),global.topojson));
}(this, (function (exports,topojsonClient) { 'use strict';

var prune = function(topology) {
  var oldObjects = topology.objects,
      newObjects = {},
      oldArcs = topology.arcs,
      oldArcsLength = oldArcs.length,
      oldIndex = -1,
      newIndexByOldIndex = new Array(oldArcsLength),
      newArcsLength = 0,
      newArcs,
      newIndex = -1,
      key;

  function scanGeometry(input) {
    switch (input.type) {
      case "GeometryCollection": input.geometries.forEach(scanGeometry); break;
      case "LineString": scanArcs(input.arcs); break;
      case "MultiLineString": input.arcs.forEach(scanArcs); break;
      case "Polygon": input.arcs.forEach(scanArcs); break;
      case "MultiPolygon": input.arcs.forEach(scanMultiArcs); break;
    }
  }

  function scanArc(index) {
    if (index < 0) index = ~index;
    if (!newIndexByOldIndex[index]) newIndexByOldIndex[index] = 1, ++newArcsLength;
  }

  function scanArcs(arcs) {
    arcs.forEach(scanArc);
  }

  function scanMultiArcs(arcs) {
    arcs.forEach(scanArcs);
  }

  function reindexGeometry(input) {
    var output;
    switch (input.type) {
      case "GeometryCollection": output = {type: "GeometryCollection", geometries: input.geometries.map(reindexGeometry)}; break;
      case "LineString": output = {type: "LineString", arcs: reindexArcs(input.arcs)}; break;
      case "MultiLineString": output = {type: "MultiLineString", arcs: input.arcs.map(reindexArcs)}; break;
      case "Polygon": output = {type: "Polygon", arcs: input.arcs.map(reindexArcs)}; break;
      case "MultiPolygon": output = {type: "MultiPolygon", arcs: input.arcs.map(reindexMultiArcs)}; break;
      default: return input;
    }
    if (input.id != null) output.id = input.id;
    if (input.bbox != null) output.bbox = input.bbox;
    if (input.properties != null) output.properties = input.properties;
    return output;
  }

  function reindexArc(oldIndex) {
    return oldIndex < 0 ? ~newIndexByOldIndex[~oldIndex] : newIndexByOldIndex[oldIndex];
  }

  function reindexArcs(arcs) {
    return arcs.map(reindexArc);
  }

  function reindexMultiArcs(arcs) {
    return arcs.map(reindexArcs);
  }

  for (key in oldObjects) {
    scanGeometry(oldObjects[key]);
  }

  newArcs = new Array(newArcsLength);

  while (++oldIndex < oldArcsLength) {
    if (newIndexByOldIndex[oldIndex]) {
      newIndexByOldIndex[oldIndex] = ++newIndex;
      newArcs[newIndex] = oldArcs[oldIndex];
    }
  }

  for (key in oldObjects) {
    newObjects[key] = reindexGeometry(oldObjects[key]);
  }

  return {
    type: "Topology",
    bbox: topology.bbox,
    transform: topology.transform,
    objects: newObjects,
    arcs: newArcs
  };
};

var filter = function(topology, filter) {
  var oldObjects = topology.objects,
      newObjects = {},
      key;

  if (filter == null) filter = filterTrue;

  function filterGeometry(input) {
    var output, arcs;
    switch (input.type) {
      case "Polygon": {
        arcs = filterRings(input.arcs);
        output = arcs ? {type: "Polygon", arcs: arcs} : {type: null};
        break;
      }
      case "MultiPolygon": {
        arcs = input.arcs.map(filterRings).filter(filterIdentity);
        output = arcs.length ? {type: "MultiPolygon", arcs: arcs} : {type: null};
        break;
      }
      case "GeometryCollection": {
        arcs = input.geometries.map(filterGeometry).filter(filterNotNull);
        output = arcs.length ? {type: "GeometryCollection", geometries: arcs} : {type: null};
        break;
      }
      default: return input;
    }
    if (input.id != null) output.id = input.id;
    if (input.bbox != null) output.bbox = input.bbox;
    if (input.properties != null) output.properties = input.properties;
    return output;
  }

  function filterRings(arcs) {
    return arcs.length && filterExteriorRing(arcs[0]) // if the exterior is small, ignore any holes
        ? [arcs[0]].concat(arcs.slice(1).filter(filterInteriorRing))
        : null;
  }

  function filterExteriorRing(ring) {
    return filter(ring, false);
  }

  function filterInteriorRing(ring) {
    return filter(ring, true);
  }

  for (key in oldObjects) {
    newObjects[key] = filterGeometry(oldObjects[key]);
  }

  return prune({
    type: "Topology",
    bbox: topology.bbox,
    transform: topology.transform,
    objects: newObjects,
    arcs: topology.arcs
  });
};

function filterTrue() {
  return true;
}

function filterIdentity(x) {
  return x;
}

function filterNotNull(geometry) {
  return geometry.type != null;
}

var filterAttached = function(topology) {
  var ownerByArc = new Array(topology.arcs.length), // arc index -> index of unique associated ring, or -1 if used by multiple rings
      ownerIndex = 0,
      key;

  function testGeometry(o) {
    switch (o.type) {
      case "GeometryCollection": o.geometries.forEach(testGeometry); break;
      case "Polygon": testArcs(o.arcs); break;
      case "MultiPolygon": o.arcs.forEach(testArcs); break;
    }
  }

  function testArcs(arcs) {
    for (var i = 0, n = arcs.length; i < n; ++i, ++ownerIndex) {
      for (var ring = arcs[i], j = 0, m = ring.length; j < m; ++j) {
        var arc = ring[j];
        if (arc < 0) arc = ~arc;
        var owner = ownerByArc[arc];
        if (owner == null) ownerByArc[arc] = ownerIndex;
        else if (owner !== ownerIndex) ownerByArc[arc] = -1;
      }
    }
  }

  for (key in topology.objects) {
    testGeometry(topology.objects[key]);
  }

  return function(ring) {
    for (var j = 0, m = ring.length, arc; j < m; ++j) {
      if (ownerByArc[(arc = ring[j]) < 0 ? ~arc : arc] === -1) {
        return true;
      }
    }
    return false;
  };
};

function planarTriangleArea(triangle) {
  var a = triangle[0], b = triangle[1], c = triangle[2];
  return Math.abs((a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1])) / 2;
}

function planarRingArea(ring) {
  var i = -1, n = ring.length, a, b = ring[n - 1], area = 0;
  while (++i < n) a = b, b = ring[i], area += a[0] * b[1] - a[1] * b[0];
  return Math.abs(area) / 2;
}

var filterWeight = function(topology, minWeight, weight) {
  minWeight = minWeight == null ? Number.MIN_VALUE : +minWeight;

  if (weight == null) weight = planarRingArea;

  return function(ring, interior) {
    return weight(topojsonClient.feature(topology, {type: "Polygon", arcs: [ring]}).geometry.coordinates[0], interior) >= minWeight;
  };
};

var filterAttachedWeight = function(topology, minWeight, weight) {
  var a = filterAttached(topology),
      w = filterWeight(topology, minWeight, weight);
  return function(ring, interior) {
    return a(ring, interior) || w(ring, interior);
  };
};

function compare(a, b) {
  return a[1][2] - b[1][2];
}

var newHeap = function() {
  var heap = {},
      array = [],
      size = 0;

  heap.push = function(object) {
    up(array[object._ = size] = object, size++);
    return size;
  };

  heap.pop = function() {
    if (size <= 0) return;
    var removed = array[0], object;
    if (--size > 0) object = array[size], down(array[object._ = 0] = object, 0);
    return removed;
  };

  heap.remove = function(removed) {
    var i = removed._, object;
    if (array[i] !== removed) return; // invalid request
    if (i !== --size) object = array[size], (compare(object, removed) < 0 ? up : down)(array[object._ = i] = object, i);
    return i;
  };

  function up(object, i) {
    while (i > 0) {
      var j = ((i + 1) >> 1) - 1,
          parent = array[j];
      if (compare(object, parent) >= 0) break;
      array[parent._ = i] = parent;
      array[object._ = i = j] = object;
    }
  }

  function down(object, i) {
    while (true) {
      var r = (i + 1) << 1,
          l = r - 1,
          j = i,
          child = array[j];
      if (l < size && compare(array[l], child) < 0) child = array[j = l];
      if (r < size && compare(array[r], child) < 0) child = array[j = r];
      if (j === i) break;
      array[child._ = i] = child;
      array[object._ = i = j] = object;
    }
  }

  return heap;
};

function copy(point) {
  return [point[0], point[1], 0];
}

var presimplify = function(topology, weight) {
  var point = topology.transform ? topojsonClient.transform(topology.transform) : copy,
      heap = newHeap();

  if (weight == null) weight = planarTriangleArea;

  var arcs = topology.arcs.map(function(arc) {
    var triangles = [],
        maxWeight = 0,
        triangle,
        i,
        n;

    arc = arc.map(point);

    for (i = 1, n = arc.length - 1; i < n; ++i) {
      triangle = [arc[i - 1], arc[i], arc[i + 1]];
      triangle[1][2] = weight(triangle);
      triangles.push(triangle);
      heap.push(triangle);
    }

    // Always keep the arc endpoints!
    arc[0][2] = arc[n][2] = Infinity;

    for (i = 0, n = triangles.length; i < n; ++i) {
      triangle = triangles[i];
      triangle.previous = triangles[i - 1];
      triangle.next = triangles[i + 1];
    }

    while (triangle = heap.pop()) {
      var previous = triangle.previous,
          next = triangle.next;

      // If the weight of the current point is less than that of the previous
      // point to be eliminated, use the latter’s weight instead. This ensures
      // that the current point cannot be eliminated without eliminating
      // previously- eliminated points.
      if (triangle[1][2] < maxWeight) triangle[1][2] = maxWeight;
      else maxWeight = triangle[1][2];

      if (previous) {
        previous.next = next;
        previous[2] = triangle[2];
        update(previous);
      }

      if (next) {
        next.previous = previous;
        next[0] = triangle[0];
        update(next);
      }
    }

    return arc;
  });

  function update(triangle) {
    heap.remove(triangle);
    triangle[1][2] = weight(triangle);
    heap.push(triangle);
  }

  return {
    type: "Topology",
    bbox: topology.bbox,
    objects: topology.objects,
    arcs: arcs
  };
};

var quantile = function(topology, p) {
  var array = [];

  topology.arcs.forEach(function(arc) {
    arc.forEach(function(point) {
      if (isFinite(point[2])) { // Ignore endpoints, whose weight is Infinity.
        array.push(point[2]);
      }
    });
  });

  return array.length && quantile$1(array.sort(descending), p);
};

function quantile$1(array, p) {
  if (!(n = array.length)) return;
  if ((p = +p) <= 0 || n < 2) return array[0];
  if (p >= 1) return array[n - 1];
  var n,
      h = (n - 1) * p,
      i = Math.floor(h),
      a = array[i],
      b = array[i + 1];
  return a + (b - a) * (h - i);
}

function descending(a, b) {
  return b - a;
}

var simplify = function(topology, minWeight) {
  minWeight = minWeight == null ? Number.MIN_VALUE : +minWeight;

  // Remove points whose weight is less than the minimum weight.
  var arcs = topology.arcs.map(function(input) {
    var i = -1,
        j = 0,
        n = input.length,
        output = new Array(n), // pessimistic
        point;

    while (++i < n) {
      if ((point = input[i])[2] >= minWeight) {
        output[j++] = [point[0], point[1]];
      }
    }

    output.length = j;
    return output;
  });

  return {
    type: "Topology",
    transform: topology.transform,
    bbox: topology.bbox,
    objects: topology.objects,
    arcs: arcs
  };
};

var pi = Math.PI;
var tau = 2 * pi;
var quarterPi = pi / 4;
var radians = pi / 180;
var abs = Math.abs;
var atan2 = Math.atan2;
var cos = Math.cos;
var sin = Math.sin;

function halfArea(ring, closed) {
  var i = 0,
      n = ring.length,
      sum = 0,
      point = ring[closed ? i++ : n - 1],
      lambda0, lambda1 = point[0] * radians,
      phi1 = (point[1] * radians) / 2 + quarterPi,
      cosPhi0, cosPhi1 = cos(phi1),
      sinPhi0, sinPhi1 = sin(phi1);

  for (; i < n; ++i) {
    point = ring[i];
    lambda0 = lambda1, lambda1 = point[0] * radians;
    phi1 = (point[1] * radians) / 2 + quarterPi;
    cosPhi0 = cosPhi1, cosPhi1 = cos(phi1);
    sinPhi0 = sinPhi1, sinPhi1 = sin(phi1);

    // Spherical excess E for a spherical triangle with vertices: south pole,
    // previous point, current point.  Uses a formula derived from Cagnoli’s
    // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).
    // See https://github.com/d3/d3-geo/blob/master/README.md#geoArea
    var dLambda = lambda1 - lambda0,
        sdLambda = dLambda >= 0 ? 1 : -1,
        adLambda = sdLambda * dLambda,
        k = sinPhi0 * sinPhi1,
        u = cosPhi0 * cosPhi1 + k * cos(adLambda),
        v = k * sdLambda * sin(adLambda);
    sum += atan2(v, u);
  }

  return sum;
}

function sphericalRingArea(ring, interior) {
  var sum = halfArea(ring, true);
  if (interior) sum *= -1;
  return (sum < 0 ? tau + sum : sum) * 2;
}

function sphericalTriangleArea(t) {
  return abs(halfArea(t, false)) * 2;
}

exports.filter = filter;
exports.filterAttached = filterAttached;
exports.filterAttachedWeight = filterAttachedWeight;
exports.filterWeight = filterWeight;
exports.planarRingArea = planarRingArea;
exports.planarTriangleArea = planarTriangleArea;
exports.presimplify = presimplify;
exports.quantile = quantile;
exports.simplify = simplify;
exports.sphericalRingArea = sphericalRingArea;
exports.sphericalTriangleArea = sphericalTriangleArea;

Object.defineProperty(exports, '__esModule', { value: true });

})));

},{"topojson-client":58}],61:[function(require,module,exports){
(function (global,Buffer){
'use strict'

var bits = require('bit-twiddle')
var dup = require('dup')

//Legacy pool support
if(!global.__TYPEDARRAY_POOL) {
  global.__TYPEDARRAY_POOL = {
      UINT8   : dup([32, 0])
    , UINT16  : dup([32, 0])
    , UINT32  : dup([32, 0])
    , INT8    : dup([32, 0])
    , INT16   : dup([32, 0])
    , INT32   : dup([32, 0])
    , FLOAT   : dup([32, 0])
    , DOUBLE  : dup([32, 0])
    , DATA    : dup([32, 0])
    , UINT8C  : dup([32, 0])
    , BUFFER  : dup([32, 0])
  }
}

var hasUint8C = (typeof Uint8ClampedArray) !== 'undefined'
var POOL = global.__TYPEDARRAY_POOL

//Upgrade pool
if(!POOL.UINT8C) {
  POOL.UINT8C = dup([32, 0])
}
if(!POOL.BUFFER) {
  POOL.BUFFER = dup([32, 0])
}

//New technique: Only allocate from ArrayBufferView and Buffer
var DATA    = POOL.DATA
  , BUFFER  = POOL.BUFFER

exports.free = function free(array) {
  if(Buffer.isBuffer(array)) {
    BUFFER[bits.log2(array.length)].push(array)
  } else {
    if(Object.prototype.toString.call(array) !== '[object ArrayBuffer]') {
      array = array.buffer
    }
    if(!array) {
      return
    }
    var n = array.length || array.byteLength
    var log_n = bits.log2(n)|0
    DATA[log_n].push(array)
  }
}

function freeArrayBuffer(buffer) {
  if(!buffer) {
    return
  }
  var n = buffer.length || buffer.byteLength
  var log_n = bits.log2(n)
  DATA[log_n].push(buffer)
}

function freeTypedArray(array) {
  freeArrayBuffer(array.buffer)
}

exports.freeUint8 =
exports.freeUint16 =
exports.freeUint32 =
exports.freeInt8 =
exports.freeInt16 =
exports.freeInt32 =
exports.freeFloat32 = 
exports.freeFloat =
exports.freeFloat64 = 
exports.freeDouble = 
exports.freeUint8Clamped = 
exports.freeDataView = freeTypedArray

exports.freeArrayBuffer = freeArrayBuffer

exports.freeBuffer = function freeBuffer(array) {
  BUFFER[bits.log2(array.length)].push(array)
}

exports.malloc = function malloc(n, dtype) {
  if(dtype === undefined || dtype === 'arraybuffer') {
    return mallocArrayBuffer(n)
  } else {
    switch(dtype) {
      case 'uint8':
        return mallocUint8(n)
      case 'uint16':
        return mallocUint16(n)
      case 'uint32':
        return mallocUint32(n)
      case 'int8':
        return mallocInt8(n)
      case 'int16':
        return mallocInt16(n)
      case 'int32':
        return mallocInt32(n)
      case 'float':
      case 'float32':
        return mallocFloat(n)
      case 'double':
      case 'float64':
        return mallocDouble(n)
      case 'uint8_clamped':
        return mallocUint8Clamped(n)
      case 'buffer':
        return mallocBuffer(n)
      case 'data':
      case 'dataview':
        return mallocDataView(n)

      default:
        return null
    }
  }
  return null
}

function mallocArrayBuffer(n) {
  var n = bits.nextPow2(n)
  var log_n = bits.log2(n)
  var d = DATA[log_n]
  if(d.length > 0) {
    return d.pop()
  }
  return new ArrayBuffer(n)
}
exports.mallocArrayBuffer = mallocArrayBuffer

function mallocUint8(n) {
  return new Uint8Array(mallocArrayBuffer(n), 0, n)
}
exports.mallocUint8 = mallocUint8

function mallocUint16(n) {
  return new Uint16Array(mallocArrayBuffer(2*n), 0, n)
}
exports.mallocUint16 = mallocUint16

function mallocUint32(n) {
  return new Uint32Array(mallocArrayBuffer(4*n), 0, n)
}
exports.mallocUint32 = mallocUint32

function mallocInt8(n) {
  return new Int8Array(mallocArrayBuffer(n), 0, n)
}
exports.mallocInt8 = mallocInt8

function mallocInt16(n) {
  return new Int16Array(mallocArrayBuffer(2*n), 0, n)
}
exports.mallocInt16 = mallocInt16

function mallocInt32(n) {
  return new Int32Array(mallocArrayBuffer(4*n), 0, n)
}
exports.mallocInt32 = mallocInt32

function mallocFloat(n) {
  return new Float32Array(mallocArrayBuffer(4*n), 0, n)
}
exports.mallocFloat32 = exports.mallocFloat = mallocFloat

function mallocDouble(n) {
  return new Float64Array(mallocArrayBuffer(8*n), 0, n)
}
exports.mallocFloat64 = exports.mallocDouble = mallocDouble

function mallocUint8Clamped(n) {
  if(hasUint8C) {
    return new Uint8ClampedArray(mallocArrayBuffer(n), 0, n)
  } else {
    return mallocUint8(n)
  }
}
exports.mallocUint8Clamped = mallocUint8Clamped

function mallocDataView(n) {
  return new DataView(mallocArrayBuffer(n), 0, n)
}
exports.mallocDataView = mallocDataView

function mallocBuffer(n) {
  n = bits.nextPow2(n)
  var log_n = bits.log2(n)
  var cache = BUFFER[log_n]
  if(cache.length > 0) {
    return cache.pop()
  }
  return new Buffer(n)
}
exports.mallocBuffer = mallocBuffer

exports.clearCache = function clearCache() {
  for(var i=0; i<32; ++i) {
    POOL.UINT8[i].length = 0
    POOL.UINT16[i].length = 0
    POOL.UINT32[i].length = 0
    POOL.INT8[i].length = 0
    POOL.INT16[i].length = 0
    POOL.INT32[i].length = 0
    POOL.FLOAT[i].length = 0
    POOL.DOUBLE[i].length = 0
    POOL.UINT8C[i].length = 0
    DATA[i].length = 0
    BUFFER[i].length = 0
  }
}
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
},{"bit-twiddle":2,"buffer":3,"dup":39}],62:[function(require,module,exports){
"use strict"

function unique_pred(list, compare) {
  var ptr = 1
    , len = list.length
    , a=list[0], b=list[0]
  for(var i=1; i<len; ++i) {
    b = a
    a = list[i]
    if(compare(a, b)) {
      if(i === ptr) {
        ptr++
        continue
      }
      list[ptr++] = a
    }
  }
  list.length = ptr
  return list
}

function unique_eq(list) {
  var ptr = 1
    , len = list.length
    , a=list[0], b = list[0]
  for(var i=1; i<len; ++i, b=a) {
    b = a
    a = list[i]
    if(a !== b) {
      if(i === ptr) {
        ptr++
        continue
      }
      list[ptr++] = a
    }
  }
  list.length = ptr
  return list
}

function unique(list, compare, sorted) {
  if(list.length === 0) {
    return list
  }
  if(compare) {
    if(!sorted) {
      list.sort(compare)
    }
    return unique_pred(list, compare)
  }
  if(!sorted) {
    list.sort()
  }
  return unique_eq(list)
}

module.exports = unique

},{}],63:[function(require,module,exports){
(function() {
    var colorSort;

    colorSort = require("../color/sort.js");

    module.exports = function(a, b, keys, sort, colors, vars, depth) {
        var i, k, retVal;
        if (!sort) {
            sort = "asc";
        }
        if (!(colors instanceof Array)) {
            colors = [colors];
        }
        if (!(keys instanceof Array)) {
            keys = [keys];
        }
        if (vars && depth !== void 0 && typeof depth !== "number") {
            depth = vars.id.nesting.indexOf(depth);
        }
        retVal = 0;
        i = 0;
        while (i < keys.length) {
            k = keys[i];
            a = vars && a.d3po && a.d3po.sortKeys ? a.d3po.sortKeys[k] : a[k];
            b = vars && b.d3po && b.d3po.sortKeys ? b.d3po.sortKeys[k] : b[k];
            if (vars && colors.indexOf(k) >= 0) {
                retVal = colorSort(a, b);
            } else {
                retVal = a < b ? -1 : 1;
            }
            if (retVal !== 0 || i === keys.length - 1) {
                break;
            }
            i++;
        }
        if (sort === "asc") {
            return retVal;
        } else {
            return -retVal;
        }
    };

}).call(this);
},{"../color/sort.js":80}],64:[function(require,module,exports){
(function() {
    module.exports = function(arr, value) {
        var constructor;
        if (arr instanceof Array) {
            constructor = value === void 0 || value === null ? value : value.constructor;
            return arr.indexOf(value) >= 0 || arr.indexOf(constructor) >= 0;
        } else {
            return false;
        }
    };

}).call(this);
},{}],65:[function(require,module,exports){
// Sorts an array of objects
(function() {
    var comparator, fetchSort;

    comparator = require("./comparator.js");

    fetchSort = require("../core/fetch/sort.js");

    module.exports = function(arr, keys, sort, colors, vars, depth) {
        var d, data, i, len;
        if (!arr || arr.length <= 1) {
            return arr || [];
        } else {
            if (vars) {
                if (!keys) {
                    keys = vars.order.value || vars.size.value || vars.id.value;
                }
                if (!sort) {
                    sort = vars.order.sort.value;
                }
                if (!colors) {
                    colors = vars.color.value || [];
                }
                for (i = 0, len = arr.length; i < len; i++) {
                    d = arr[i];
                    if (!d.d3po) {
                        d.d3po = {};
                    }
                    data = "d3po" in d && "d3po" in d.d3po ? d.d3po : d;
                    d.d3po.sortKeys = fetchSort(vars, data, keys, colors, depth);
                }
            }
            return arr.sort(function(a, b) {
                return comparator(a, b, keys, sort, colors, vars, depth);
            });
        }
    };

}).call(this);
},{"../core/fetch/sort.js":97,"./comparator.js":63}],66:[function(require,module,exports){
// Updates an array, either overwriting it with a new array, removing an entry
(function() {
    module.exports = function(arr, x) {
        if (x === void 0) {
            return arr;
        }
        if (x === false) {
            return [];
        }
        if (x instanceof Array) {
            return x;
        }
        if (!(arr instanceof Array)) {
            arr = [];
        }
        if (arr.indexOf(x) >= 0) {
            arr.splice(arr.indexOf(x), 1);
        } else {
            arr.push(x);
        }
        return arr;
    };

}).call(this);
},{}],67:[function(require,module,exports){
// Checks to see if a stylesheet is loaded
(function() {
    var sheet;

    sheet = function(name) {
        var css, i, returnBoolean, tested;
        tested = sheet.tested;
        if (name in tested) {
            return tested[name];
        }
        i = 0;
        returnBoolean = false;
        while (i < document.styleSheets.length) {
            css = document.styleSheets[i];
            if (css.href && css.href.indexOf(name) >= 0) {
                returnBoolean = true;
                break;
            }
            i++;
        }
        return returnBoolean;
    };

    sheet.tested = {};

    module.exports = sheet;

}).call(this);
},{}],68:[function(require,module,exports){
// Determines if the current browser is Internet Explorer.
module.exports = /(MSIE|Trident\/|Edge\/)/i.test(navigator.userAgent);
},{}],69:[function(require,module,exports){
// Creates custom mouse events based on IE and Touch Devices
(function() {
    var ie, touch;

    ie = require("./ie.js");

    touch = require("./touch.js");

    if (touch) {
        module.exports = {
            click: "touchend",
            down: "touchstart",
            up: "touchend",
            over: ie ? "mouseenter" : "mouseover",
            out: ie ? "mouseleave" : "mouseout",
            move: "mousemove"
        };
    } else {
        module.exports = {
            click: "click",
            down: "mousedown",
            up: "mouseup",
            over: ie ? "mouseenter" : "mouseover",
            out: ie ? "mouseleave" : "mouseout",
            move: "mousemove"
        };
    }

}).call(this);
},{"./ie.js":68,"./touch.js":74}],70:[function(require,module,exports){
// Calculates the correct CSS vendor prefix based on the current browser
(function() {
    var prefix;

    prefix = function() {
        var val;
        if ("-webkit-transform" in document.body.style) {
            val = "-webkit-";
        } else if ("-moz-transform" in document.body.style) {
            val = "-moz-";
        } else if ("-ms-transform" in document.body.style) {
            val = "-ms-";
        } else if ("-o-transform" in document.body.style) {
            val = "-o-";
        } else {
            val = "";
        }
        prefix = function() {
            return val;
        };
        return val;
    };

    module.exports = prefix;

}).call(this);
},{}],71:[function(require,module,exports){
// Detects right-to-left text direction on the page
(function() {
    module.exports = d3.select("html").attr("dir") === "rtl";

}).call(this);
},{}],72:[function(require,module,exports){
module.exports = {
    "y": function() {
        return (window.pageYOffset !== undefined) ? window.pageYOffset :
            (document.documentElement || document.body.parentNode || document.body).scrollTop
    },
    "x": function() {
        return (window.pageXOffset !== undefined) ? window.pageXOffset :
            (document.documentElement || document.body.parentNode || document.body).scrollLeft
    }
}
},{}],73:[function(require,module,exports){
// Detects scrollbar width for current browser
(function() {
    var scrollbar;

    scrollbar = function() {
        var inner, outer, val, w1, w2;
        inner = document.createElement("p");
        inner.style.width = "100%";
        inner.style.height = "200px";
        outer = document.createElement("div");
        outer.style.position = "absolute";
        outer.style.top = "0px";
        outer.style.left = "0px";
        outer.style.visibility = "hidden";
        outer.style.width = "200px";
        outer.style.height = "150px";
        outer.style.overflow = "hidden";
        outer.appendChild(inner);
        document.body.appendChild(outer);
        w1 = inner.offsetWidth;
        outer.style.overflow = "scroll";
        w2 = inner.offsetWidth;
        if (w1 === w2) {
            w2 = outer.clientWidth;
        }
        document.body.removeChild(outer);
        val = w1 - w2;
        scrollbar = function() {
            return val;
        };
        return val;
    };

    module.exports = scrollbar;

}).call(this);
},{}],74:[function(require,module,exports){
// Detects is the current browser supports touch events
(function() {
    module.exports = ("ontouchstart" in window) || window.DocumentTouch && document instanceof DocumentTouch ? true : false;

}).call(this);
},{}],75:[function(require,module,exports){
// Darkens a color if it's too light to appear on white
(function() {
    module.exports = function(color) {
        var hsl;
        hsl = d3.hsl(color);
        if (hsl.l > .45) {
            if (hsl.s > .8) {
                hsl.s = 0.8;
            }
            hsl.l = 0.45;
        }
        return hsl.formatHex();
    };

}).call(this);
},{}],76:[function(require,module,exports){
// Lightens a color
(function() {
    module.exports = function(color, increment) {
        var c;
        if (increment === void 0) {
            increment = 0.5;
        }
        c = d3.hsl(color);
        increment = (1 - c.l) * increment;
        c.l += increment;
        c.s -= increment;
        return c.formatHex();
    };

}).call(this);
},{}],77:[function(require,module,exports){
// Mixes 2 colors with optional opacities
(function() {
    module.exports = function(c1, c2, o1, o2) {
        var b, g, r;
        if (!o1) {
            o1 = 1;
        }
        if (!o2) {
            o2 = 1;
        }
        c1 = d3.rgb(c1);
        c2 = d3.rgb(c2);
        r = (o1 * c1.r + o2 * c2.r - o1 * o2 * c2.r) / (o1 + o2 - o1 * o2);
        g = (o1 * c1.g + o2 * c2.g - o1 * o2 * c2.g) / (o1 + o2 - o1 * o2);
        b = (o1 * c1.b + o2 * c2.b - o1 * o2 * c2.b) / (o1 + o2 - o1 * o2);
        return d3.rgb(r, g, b).formatHex();
    };

}).call(this);
},{}],78:[function(require,module,exports){
// Returns a random color
(function() {
    var defaultScale;

    defaultScale = require("./scale.js");

    module.exports = function(x, scale) {
        var rand_int;
        rand_int = x || Math.floor(Math.random() * 20);
        scale = scale || defaultScale;
        return scale(rand_int);
    };

}).call(this);
},{"./scale.js":79}],79:[function(require,module,exports){
// Default d3po color scale
(function() {
    module.exports = d3.scaleOrdinal().range(["#bf3251", "#5c57d9", "#d6c650", "#406662", "#872a41", "#1c26b3", "#d05555", "#549e95", "#993f7b", "#dc8e7a", "#ede788", "#7485aa", "#4d6fd0", "#635b56", "#7454a6", "#a8c380", "#8abdb6", "#74c0e2", "#bcd8af", "#a1aafb", "#a17cb0", "#d1a1bc"]);

}).call(this);
},{}],80:[function(require,module,exports){
(function() {
    module.exports = function(a, b) {
        var aHSL, bHSL;
        aHSL = d3.hsl(a);
        bHSL = d3.hsl(b);
        a = aHSL.s === 0 ? 361 : aHSL.h;
        b = bHSL.s === 0 ? 361 : bHSL.h;
        if (a === b) {
            return aHSL.l - bHSL.l;
        } else {
            return a - b;
        }
    };

}).call(this);
},{}],81:[function(require,module,exports){
// Returns appropriate text color based off of a given color
(function() {
    module.exports = function(color) {
        var b, g, r, rgbColor, yiq;
        rgbColor = d3.rgb(color);
        r = rgbColor.r;
        g = rgbColor.g;
        b = rgbColor.b;
        yiq = (r * 299 + g * 587 + b * 114) / 1000;
        if (yiq >= 128) {
            return "#444444";
        } else {
            return "#f7f7f7";
        }
    };

}).call(this);
},{}],82:[function(require,module,exports){
// Tests if a string is a valid color
(function() {
    module.exports = function(color) {
        var blackColors, testColor, userBlack;
        color = color + "";
        color = color.replace(RegExp(" ", "g"), "");
        if (color.indexOf("rgb") === 0) {
            color = color.split("(")[1].split(")")[0].split(",").slice(0, 3).join(",");
        }
        if (color.indexOf("hsl") === 0) {
            color = color.split(",")[2].split(")")[0];
        }
        testColor = d3.rgb(color).formatHex();
        blackColors = ["black", "#000", "#000000", "0%", "0,0,0"];
        userBlack = blackColors.indexOf(color) >= 0;
        return testColor !== "#000000" || userBlack;
    };

}).call(this);
},{}],83:[function(require,module,exports){
// Custom styling and behavior for browser console statements
(function() {
    var ie, print, wiki;

    ie = require("../../client/ie.js");

    wiki = require("./wiki.js");

    print = function(type, message, style) {
        style = style || "";
        if (ie || typeof InstallTrigger !== 'undefined') {
            console.log("[ d3po ] " + message);
        } else if (type.indexOf("group") === 0) {
            console[type]("%c[ d3po ]%c " + message, "font-weight: 800;" + "color: #b35c1e;" + "margin-left: 0px;", "font-weight: 400;" + style);
        } else {
            console[type]("%c" + message, style + "font-weight: 400;");
        }
    };

    print.comment = function(message) {
        this("log", message, "color:#aaa;");
    };

    print.error = function(message, url) {
        this("groupCollapsed", "ERROR: " + message, "font-weight:800;color:#D74B03;");
        this.stack();
        this.wiki(url);
        this.groupEnd();
    };

    print.group = function(message) {
        this("group", message, "color:#888;");
    };

    print.groupCollapsed = function(message) {
        this("groupCollapsed", message, "color:#888;");
    };

    print.groupEnd = function() {
        if (!ie) {
            console.groupEnd();
        }
    };

    print.log = function(message) {
        this("log", message, "color:#444444;");
    };

    print.stack = function() {
        var err, line, message, page, splitter, stack, url;
        if (!ie) {
            err = new Error();
            if (err.stack) {
                stack = err.stack.split("\n");
                stack = stack.filter(function(e) {
                    return e.indexOf("Error") !== 0 && e.indexOf("d3po.js:") < 0 && e.indexOf("d3po.min.js:") < 0;
                });
                if (stack.length && stack[0].length) {
                    splitter = window.chrome ? "at " : "@";
                    url = stack[0];
                    if (url.indexOf(splitter) >= 0) {
                        url = url.split(splitter)[1];
                    }
                    stack = url.split(":");
                    if (stack.length === 3) {
                        stack.pop();
                    }
                    line = stack.pop();
                    page = stack.join(":").split("/");
                    page = page[page.length - 1];
                    message = "line " + line + " of " + page + ": " + url;
                    this("log", message, "color:#D74B03;");
                }
            }
        }
    };

    print.time = function(message) {
        if (!ie) {
            console.time(message);
        }
    };

    print.timeEnd = function(message) {
        if (!ie) {
            console.timeEnd(message);
        }
    };

    print.warning = function(message, url) {
        this("groupCollapsed", message, "color:#888;");
        this.stack();
        this.wiki(url);
        this.groupEnd();
    };

    print.wiki = function(url) {
        if (url) {
            if (url in wiki) {
                url = d3po.repo + "wiki/" + wiki[url];
            }
            this("log", "documentation: " + url, "color:#aaa;");
        }
    };

    module.exports = print;

}).call(this);
},{"../../client/ie.js":68,"./wiki.js":84}],84:[function(require,module,exports){
(function() {
    module.exports = {
        active: "Visualizations#active",
        aggs: "Visualizations#aggs",
        alt: "Forms#alt",
        attrs: "Visualizations#attrs",
        axes: "Visualizations#axes",
        background: "Visualizations#background",
        color: "Visualizations#color",
        cols: "Visualizations#cols",
        config: "Visualizations#config",
        container: "Visualizations#container",
        coords: "Visualizations#coords",
        csv: "Visualizations#csv",
        data: "Visualizations#data",
        depth: "Visualizations#depth",
        descs: "Visualizations#descs",
        dev: "Visualizations#dev",
        draw: "Visualizations#draw",
        edges: "Visualizations#edges",
        error: "Visualizations#error",
        focus: "Visualizations#focus",
        font: "Visualizations#font",
        footer: "Visualizations#footer",
        format: "Visualizations#format",
        height: "Visualizations#height",
        history: "Visualizations#history",
        hover: "Forms#hover",
        icon: "Visualizations#icon",
        id: "Visualizations#id",
        keywords: "Forms#keywords",
        labels: "Visualizations#labels",
        legend: "Visualizations#legend",
        links: "Visualizations#links",
        margin: "Visualizations#margin",
        messages: "Visualizations#messages",
        method: "Methods",
        mouse: "Visualizations#mouse",
        nodes: "Visualizations#nodes",
        open: "Forms#open",
        order: "Visualizations#order",
        remove: "Forms#remove",
        search: "Forms#search",
        select: "Forms#select",
        selectAll: "Forms#selectAll",
        shape: "Visualizations#shape",
        size: "Visualizations#size",
        temp: "Visualizations#temp",
        text: "Visualizations#text",
        time: "Visualizations#time",
        timeline: "Visualizations#timeline",
        timing: "Visualizations#timing",
        title: "Visualizations#title",
        tooltip: "Visualizations#tooltip",
        total: "Visualizations#total",
        type: "Visualizations#type",
        ui: "Visualizations#ui",
        width: "Visualizations#width",
        x: "Visualizations#x",
        y: "Visualizations#y",
        zoom: "Visualizations#zoom"
    };

}).call(this);
},{}],85:[function(require,module,exports){
var buckets = require("../../util/buckets.js"),
    fetchValue = require("../fetch/value.js"),
    print = require("../console/print.js")
    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Sets color range of data, if applicable
    //-------------------------------------------------------------------
module.exports = function(vars) {

    if (vars.dev.value) print.time("getting color data range")

    if (vars.color.domain.value) {
        var data_range = vars.color.domain.value;
    } else {
        var data_range = []
        vars.data.pool.forEach(function(d) {
            var val = parseFloat(fetchValue(vars, d, vars.color.value))
            if (typeof val == "number" && !isNaN(val) && data_range.indexOf(val) < 0) data_range.push(val)
        })
    }

    if (vars.dev.value) print.timeEnd("getting color data range")

    if (data_range.length > 1) {

        var data_domain = null

        if (vars.dev.value) print.time("calculating color scale")

        data_range = d3.extent(data_range);

        if (data_range[0] < 0 && data_range[1] > 0) {
            var color_range = vars.color.range
            if (color_range.length == 3) {
                data_range.push(data_range[1])
                data_range[1] = 0
            }
        } else if (data_range[1] > 0 && data_range[0] >= 0) {
            var color_range = vars.color.heatmap
            data_range = buckets(data_range, color_range.length)
        } else {
            var color_range = vars.color.range.slice(0)
            if (data_range[0] < 0) {
                color_range.pop()
            } else {
                color_range.shift()
            }
        }

        vars.color.valueScale = d3.scaleSqrt()
            .domain(data_range)
            .range(color_range)
            .interpolate(d3.interpolateRgb)

        if (vars.dev.value) print.timeEnd("calculating color scale")

    } else {
        vars.color.valueScale = null
    }

}
},{"../../util/buckets.js":239,"../console/print.js":83,"../fetch/value.js":99}],86:[function(require,module,exports){
var fetchValue = require("../fetch/value.js"),
    print = require("../console/print.js"),
    validObject = require("../../object/validate.js")
    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Restricts data based on Solo/Mute filters
    //------------------------------------------------------------------------------
module.exports = function(vars, data) {

    if (vars.dev.value) print.time("filtering data")

    var availableKeys = d3.keys(vars.data.keys || {})

    if ("attrs" in vars) {
        availableKeys = availableKeys.concat(d3.keys(vars.attrs.keys || {}))
    }

    data = data.filter(function(d) {
        var val = fetchValue(vars, d, vars.id.value);
        return val !== null;
    });

    var typeReqs = vars.types[vars.type.value].requirements || [];

    vars.data.filters.forEach(function(key) {

        if (availableKeys.indexOf(vars[key].value) >= 0 &&
            typeReqs.indexOf(key) >= 0) {

            data = data.filter(function(d) {

                var val = fetchValue(vars, d, vars[key].value);

                if (key === "y" && vars.y2.value && val === null) {
                    val = fetchValue(vars, d, vars.y2.value);
                } else if (key === "x" && vars.x2.value && val === null) {
                    val = fetchValue(vars, d, vars.x2.value);
                }

                if (key === "size") {
                    return typeof val === "number"
                } else {
                    return val !== null
                }

            })

        }

    });

    // if "solo", only check against "solo" (disregard "mute")
    var key = vars.data.solo.length ? "solo" : "mute";

    if (vars.data[key].length) {

        vars.data[key].forEach(function(v) {

            function test_value(val) {

                var arr = vars[v][key].value;

                var match = false;
                arr.forEach(function(f) {
                    if (typeof f === "function") {
                        match = f(val);
                    } else if (f === val) {
                        match = true;
                    }

                })

                return key === "solo" ? match : !match;

            }

            function filter_data(d, flat) {
                if (!flat && vars[v].nesting) {
                    var nesting = vars[v].nesting;
                    if (validObject(nesting)) {
                        nesting = d3.values(nesting);
                    }
                    for (var n = 0; n < nesting.length; n++) {
                        var new_data = d.filter(function(dd) {
                            return test_value(fetchValue(vars, dd, nesting[n]));
                        });
                        if (new_data.length) d = new_data;
                    }
                } else {
                    d = d.filter(function(dd) {
                        return test_value(fetchValue(vars, dd, vars[v].value));
                    });
                }
                return d;
            }

            data = filter_data(data);

            if (v === "id") {

                if ("nodes" in vars && vars.nodes.value) {
                    if (vars.dev.value) print.time("filtering nodes")
                    vars.nodes.restricted = filter_data(vars.nodes.value);
                    if (vars.dev.value) print.timeEnd("filtering nodes")
                }

                if ("edges" in vars && vars.edges.value) {
                    if (vars.dev.value) print.time("filtering edges")
                    vars.edges.restricted = vars.edges.value.filter(function(d) {
                        var points = filter_data([d[vars.edges.source], d[vars.edges.target]]);
                        return points.length === 2;
                    })
                    if (vars.dev.value) print.timeEnd("filtering edges")
                }

            }

        })

    } else if ("nodes" in vars) {
        vars.nodes.restricted = undefined;
        vars.edges.restricted = undefined;
    }

    if (vars.dev.value) print.timeEnd("filtering data")

    return data

}
},{"../../object/validate.js":207,"../console/print.js":83,"../fetch/value.js":99}],87:[function(require,module,exports){
var dataNest = require("./nest.js"),
    multiFormat = require("./multiformat.js"),
    fetchValue = require("../fetch/value.js"),
    print = require("../console/print.js"),
    uniques = require("../../util/uniques.js");
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Formats raw data by time and nesting
//------------------------------------------------------------------------------
module.exports = function(vars) {

    var timerString;

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Gets all unique time values
    //----------------------------------------------------------------------------
    vars.data.time = {
        "values": []
    };
    if (vars.time && vars.time.value) {

        if (vars.dev.value) {
            timerString = "analyzing time periods";
            print.time(timerString);
        }

        vars.data.time.values = uniques(vars.data.value, vars.time.value, fetchValue, vars);

        vars.data.time.values.sort(function(a, b) {
            return a - b;
        });

        var step = [];
        vars.data.time.values.forEach(function(y, i) {
            if (i !== 0) {
                var prev = vars.data.time.values[i - 1];
                step.push(y - prev);
                if (i === vars.data.time.values.length - 1) {
                    vars.data.time.total = y - vars.data.time.values[0];
                }
            }
        });

        step = d3.min(step);
        vars.data.time.step = step;

        var periods = ["Milliseconds", "Seconds", "Minutes", "Hours", "Date", "Month", "FullYear"],
            conversions = [1000, 60, 60, 24, 30, 12, 1];

        vars.data.time.periods = periods;

        var getDiff = function(start, end, i) {

            if (!vars.data.time.stepDivider) {
                arr = conversions.slice(0, i);
                if (arr.length) {
                    vars.data.time.stepDivider = arr.reduce(function(a, b) {
                        return a * b;
                    });
                } else {
                    vars.data.time.stepDivider = 1;
                }
            }

            return Math.round(Math.floor(end - start) / vars.data.time.stepDivider);

        };

        var total = vars.data.time.total;
        periods.forEach(function(p, i) {
            var c = p === "Date" ? 28 : conversions[i];
            if (!vars.data.time.stepType && (i === periods.length - 1 || Math.round(step) < c)) {
                vars.data.time.stepType = p;
                var start = vars.data.time.values[0],
                    end = vars.data.time.values[vars.data.time.values.length - 1];
                vars.data.time.stepIntervals = getDiff(start, end, i);
            }

            if (!vars.data.time.totalType && (i === periods.length - 1 || Math.round(total) < c)) {
                vars.data.time.totalType = p;
            }

            step = step / c;
            total = total / c;
        });

        vars.data.time.values.forEach(function(y, i) {
            if (i !== 0) {
                var prev = vars.data.time.values[0];
                vars.data.time.dataSteps.push(getDiff(prev, y, periods.indexOf(vars.data.time.stepType)));
            } else {
                vars.data.time.dataSteps = [0];
            }
        });

        var userFormat = vars.time.format.value,
            locale = vars.format.locale.value,
            functions = [
                function(d) {
                    return d.getMilliseconds();
                },
                function(d) {
                    return d.getSeconds();
                },
                function(d) {
                    return d.getMinutes();
                },
                function(d) {
                    return d.getHours();
                },
                function(d) {
                    return d.getDate() != 1;
                },
                function(d) {
                    return d.getMonth();
                },
                function(d) {
                    return true;
                }
            ];

        vars.data.time.functions = functions;

        var getFormat = function(s, t, small) {

            if (s === t) {
                return small && locale.timeFormat[s + "Small"] ? locale.timeFormat[s + "Small"] : locale.timeFormat[s];
            } else {
                if (periods.indexOf(s) >= 4 || periods.indexOf(t) <= 3) {
                    return locale.timeFormat[t + "-" + s];
                } else {

                    var format;

                    if (t === "Date") {
                        format = locale.timeFormat[t];
                    } else {
                        format = locale.timeFormat[t + "-Date"];
                    }

                    if (s === "Hours") {
                        return format + " " + locale.timeFormat[s];
                    } else {
                        return format + " " + locale.timeFormat["Hours-" + s];
                    }

                }
            }

        };

        vars.data.time.getFormat = getFormat;

        if (userFormat) {

            if (typeof userFormat === "string") {
                vars.data.time.format = d3.timeFormatLocale(locale.format).format(userFormat);
            } else if (typeof userFormat === "function") {
                vars.data.time.format = userFormat;
            } else if (userFormat instanceof Array) {
                vars.data.time.format = multiFormat(d3.timeFormatLocale(locale.format), userFormat);
            }
            vars.data.time.multiFormat = vars.data.time.format;

        } else {

            var stepType = vars.data.time.stepType,
                totalType = vars.data.time.totalType;

            var multi = [];

            for (var p = periods.indexOf(stepType); p <= periods.indexOf(totalType); p++) {
                var prev = p - 1 < periods.indexOf(stepType) ? periods[p] : periods[p - 1];
                var small = periods[p] === prev && stepType !== totalType;
                var format = getFormat(prev, periods[p], small);
                multi.push([format, functions[p]]);
            }

            vars.data.time.format = d3.timeFormatLocale(locale.format).format(getFormat(stepType, totalType));
            if (multi.length > 1) {
                multi[multi.length - 1][1] = function(d) {
                    return true;
                }
                vars.data.time.multiFormat = multiFormat(d3.timeFormatLocale(locale.format), multi);
            } else {
                vars.data.time.multiFormat = vars.data.time.format;
            }

        }

        vars.data.time.ticks = [];
        var min = d3.min(vars.data.time.values);
        var max = d3.max(vars.data.time.values);
        for (var s = 0; s <= vars.data.time.stepIntervals; s++) {
            var m = new Date(min);
            m["set" + vars.data.time.stepType](m["get" + vars.data.time.stepType]() + s);
            if (m <= max) vars.data.time.ticks.push(m);
        }

        if (vars.dev.value) print.timeEnd(timerString);

    }

    if (vars.dev.value) {
        timerString = "nesting data by time and depths";
        print.time(timerString);
    }

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Gets all unique time values
    //----------------------------------------------------------------------------
    vars.data.nested = {};
    if (vars.data.time.values.length === 0) {

        vars.data.nested.all = {};
        vars.id.nesting.forEach(function(depth, i) {

            var nestingDepth = vars.id.nesting.slice(0, i + 1);
            vars.data.nested.all[depth] = dataNest(vars, vars.data.value, nestingDepth);

        });

    } else {

        var timeData = vars.data.value.reduce(function(o, d) {
            var ms = fetchValue(vars, d, vars.time.value).getTime();
            if (!(ms in o)) o[ms] = [];
            o[ms].push(d);
            return o;
        }, {});

        vars.data.time.values.forEach(function(t) {

            var ms = t.getTime();

            vars.data.nested[ms] = {};

            vars.id.nesting.forEach(function(depth, i) {
                var nestingDepth = vars.id.nesting.slice(0, i + 1);
                vars.data.nested[ms][depth] = dataNest(vars, timeData[ms], nestingDepth);
            });

        });

    }

    if (vars.dev.value) print.timeEnd(timerString);

};
},{"../../util/uniques.js":245,"../console/print.js":83,"../fetch/value.js":99,"./multiformat.js":91,"./nest.js":92}],88:[function(require,module,exports){
// Groups data into groups to use with D3 layouts. Helps prevent key name
// mismatches (parent, child, value, etc).
(function() {
    var fetchValue;

    fetchValue = require("../fetch/value.js");

    module.exports = function(vars, data, nesting) {
        var d, groupedData, i, j, k, len, len1, n, strippedData, val;
        groupedData = d3.nest();
        if (vars.id.grouping.value) {
            if (nesting === void 0) {
                nesting = vars.id.nesting;
            }
            for (i = j = 0, len = nesting.length; j < len; i = ++j) {
                n = nesting[i];
                if (i < vars.depth.value) {
                    (function(n) {
                        return groupedData.key(function(d) {
                            return fetchValue(vars, d.d3po, n);
                        });
                    })(n);
                }
            }
        }
        strippedData = [];
        for (k = 0, len1 = data.length; k < len1; k++) {
            d = data[k];
            val = vars.size.value ? fetchValue(vars, d, vars.size.value) : 1;
            if (val && typeof val === "number" && val > 0) {
                delete d.d3po.r;
                delete d.d3po.x;
                delete d.d3po.y;
                strippedData.push({
                    d3po: d,
                    id: d[vars.id.value],
                    value: val
                });
            }
        }
        return groupedData.entries(strippedData);
    };

}).call(this);
},{"../fetch/value.js":99}],89:[function(require,module,exports){
// Get Key Types from Data
(function() {
    var print, validObject,
        indexOf = [].indexOf || function(item) {
            for (var i = 0, l = this.length; i < l; i++) {
                if (i in this && this[i] === item) return i;
            }
            return -1;
        };

    print = require("../console/print.js");

    validObject = require("../../object/validate.js");

    module.exports = function(vars, type) {
        var get_keys, k, kk, lengthMatch, ref, ref1, timerString, v, vv;
        timerString = type + " key analysis";
        if (vars.dev.value) {
            print.time(timerString);
        }
        vars[type].keys = {};
        get_keys = function(arr) {
            var a, i, k, len, results, results1, v;
            if (arr instanceof Array) {
                results = [];
                for (i = 0, len = arr.length; i < len; i++) {
                    a = arr[i];
                    results.push(get_keys(a));
                }
                return results;
            } else if (validObject(arr)) {
                results1 = [];
                for (k in arr) {
                    v = arr[k];
                    if (k.indexOf("d3po") !== 0 && !(indexOf.call(vars[type].keys, k) >= 0) && v !== null) {
                        results1.push(vars[type].keys[k] = typeof v);
                    } else {
                        results1.push(void 0);
                    }
                }
                return results1;
            }
        };
        if (validObject(vars[type].value)) {
            lengthMatch = d3.keys(vars[type].value).length === vars.id.nesting.length;
            ref = vars[type].value;
            for (k in ref) {
                v = ref[k];
                if (lengthMatch && vars.id.nesting.indexOf(k) >= 0 && validObject(v)) {
                    for (kk in v) {
                        vv = v[kk];
                        get_keys(vv);
                    }
                } else {
                    get_keys(v);
                }
            }
        } else {
            ref1 = vars[type].value;
            for (k in ref1) {
                v = ref1[k];
                get_keys(v);
            }
        }
        if (vars.dev.value) {
            return print.time(timerString);
        }
    };

}).call(this);
},{"../../object/validate.js":207,"../console/print.js":83}],90:[function(require,module,exports){
// Load Data using JSON
(function() {
    var filetypes, print, validObject;

    filetypes = require("../../viz/helpers/d3functions/filetypes.js");

    print = require("../console/print.js");

    validObject = require("../../object/validate.js");

    module.exports = function(vars, key, next) {
        var consoleMessage, fileType, parser, url;
        consoleMessage = vars.dev.value;
        if (consoleMessage) {
            print.time("loading " + key);
        }
        url = vars[key].url;
        if (!vars[key].filetype.value) {
            fileType = url.slice(url.length - 5).split(".");
            if (fileType.length > 1) {
                fileType = fileType[1];
            } else {
                fileType = false;
            }
            if (fileType) {
                if (fileType === "txt") {
                    fileType = "text";
                }
                if (vars[key].filetype.accepted.indexOf(fileType) < 0) {
                    fileType = "json";
                }
            } else {
                fileType = "json";
            }
        } else {
            fileType = vars[key].filetype.value;
        }
        if (fileType === "dsv") {
            parser = function(input) {return d3.dsv(vars[key].delimiter.value, input);};
        } else {
            parser = filetypes.fromString(fileType);
        }
        return parser(url)
            .then(function(data) {
                var k, ret;
                if (typeof vars[key].callback === "function") {
                    ret = vars[key].callback(data);
                    if (ret) {
                        if (validObject(ret) && key in ret) {
                            for (k in ret) {
                                if (k in vars) {
                                    vars[k].value = ret[k];
                                }
                            }
                        } else {
                            vars[key].value = ret;
                        }
                    }
                } else {
                    vars[key].value = data;
                }
                if (["json"].indexOf(fileType) < 0) {
                    vars[key].value.forEach(function(d) {
                        var results;
                        results = [];
                        for (k in d) {
                            if (!isNaN(d[k])) {
                                results.push(d[k] = parseFloat(d[k]));
                            } else if (d[k].toLowerCase() === "false") {
                                results.push(d[k] = false);
                            } else if (d[k].toLowerCase() === "true") {
                                results.push(d[k] = true);
                            } else if (d[k].toLowerCase() === "null") {
                                results.push(d[k] = null);
                            } else {
                                if (d[k].toLowerCase() === "undefined") {
                                    results.push(d[k] = void 0);
                                } else {
                                    results.push(void 0);
                                }
                            }
                        }
                        return results;
                    });
                }
                vars[key].changed = true;
                vars[key].loaded = true;
            })
            .catch(function(error) {
                vars.error.internal = "Could not load data from: \"" + url + "\"";
            })
            .then(function(data) {
                if (consoleMessage) {
                    print.timeEnd("loading " + key);
                }
                return next();
            })
        };

}).call(this);
},{"../../object/validate.js":207,"../../viz/helpers/d3functions/filetypes.js":250,"../console/print.js":83}],91:[function(require,module,exports){
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Custom implementation of deprecated d3.time.format.multi() function
//
// See https://github.com/d3/d3-3.x-api-reference/blob/master/Time-Formatting.md#format_multi
// and https://observablehq.com/@severo/custom-time-format-d3-5-x
//------------------------------------------------------------------------------
module.exports = function(timeFormatLocale, formatsArray) {
    function getFormat(date) {
        let i = 0,
        found = false,
        fmt = "%c";
        while (!found && i < formatsArray.length) {
            found = formatsArray[i][1](date);
            if (found) fmt = formatsArray[i][0];
            i++;
        }
        return fmt;
    }
    return function(date) {
        return timeFormatLocale.format(getFormat(date))(date);
    };
};
},{}],92:[function(require,module,exports){
var aggs = require("../../viz/helpers/d3functions/aggs.js"),
    fetchValue = require("../fetch/value.js"),
    validObject = require("../../object/validate.js"),
    uniqueValues = require("../../util/uniques.js");
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Nests and groups the data.
//------------------------------------------------------------------------------
var dataNest = function(vars, flatData, nestingLevels, discrete) {

    if (discrete === undefined) discrete = true;

    var nestedData = d3.nest(),
        groupedData = [],
        segments = "temp" in vars ? ["active", "temp", "total"] : [];

    if (!nestingLevels.length) {
        nestedData.key(function(d) {
            return true;
        });
    } else {

        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        // Loop through each nesting level.
        //----------------------------------------------------------------------------
        nestingLevels.forEach(function(level, i) {

            //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
            // Create a nest key for the current level.
            //--------------------------------------------------------------------------
            nestedData.key(function(d) {
                return fetchValue(vars, d, level);
            });

        });

    }

    if (discrete && vars.axes && vars.axes.discrete && (!vars.time || vars[vars.axes.discrete].value !== vars.time.value)) {
        nestedData.key(function(d) {
            return fetchValue(vars, d, vars[vars.axes.discrete].value);
        });
    }

    var deepest_is_id = nestingLevels.length && vars.id.nesting.indexOf(nestingLevels[nestingLevels.length - 1]) >= 0;
    var i = nestingLevels.length && deepest_is_id ? nestingLevels.length - 1 : 0;
    var depthKey = deepest_is_id ? vars.id.nesting[i] : vars.depth.value;

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // If we're at the deepest level, create the rollup function.
    //----------------------------------------------------------------------------
    nestedData.rollup(function(leaves) {

        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        // If there's only 1 leaf, and it's been processed, return it as-is.
        //--------------------------------------------------------------------------
        if (leaves.length === 1 && ("d3po" in leaves[0])) {
            groupedData.push(leaves[0]);
            return leaves[0];
        }

        leaves = leaves.reduce(function(arr, ll) {
            if (ll.values instanceof Array) {
                return arr.concat(ll.values);
            }
            arr.push(ll);
            return arr;
        }, []);

        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        // Create the "d3po" object for the return variable, starting with
        // just the current depth.
        //--------------------------------------------------------------------------
        var returnObj = {
            "d3po": {
                "data": {},
                "depth": i
            }
        };

        var merged = d3.sum(leaves, function(ll) {
            return "d3po" in ll && ll.d3po.merged ? 1 : 0;
        });

        if (merged === leaves.length) {
            for (var ll = 0; ll < leaves.length; ll++) {
                var l = leaves[ll];
                if (!returnObj.d3po.merged) returnObj.d3po.merged = [];
                returnObj.d3po.merged = returnObj.d3po.merged.concat(l.d3po.merged);
                if (l.d3po.text) returnObj.d3po.text = l.d3po.text;
            }
        }

        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        // Create a reference sum for the 3 different "segment" variables.
        //--------------------------------------------------------------------------
        for (var s = 0; s < segments.length; s++) {

            var c = segments[s];
            var segmentAgg = vars.aggs && vars.aggs.value[key] ? vars.aggs.value[key] : "sum";

            if ("d3po" in leaves[0] && c in leaves[0].d3po) {
                returnObj.d3po[c] = d3.sum(leaves, function(d) {
                    return d.d3po[c];
                });
            } else if (typeof segmentAgg === "function") {
                returnObj.d3po[c] = segmentAgg(leaves);
            } else {

                returnObj.d3po[c] = aggs.fromString(segmentAgg)(leaves, function(d) {

                    var a = c === "total" ? 1 : 0;
                    if (vars[c].value) {
                        a = fetchValue(vars, d, vars[c].value);
                        if (typeof a !== "number") a = a ? 1 : 0;
                    }
                    return a;

                });

            }
        }

        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        // Aggregate all values detected in the data.
        //--------------------------------------------------------------------------
        for (var key in vars.data.keys) {

            if (key in returnObj.d3po.data) {
                returnObj[key] = returnObj.d3po[key];
            } else {

                var agg = vars.aggs && vars.aggs.value[key] ? vars.aggs.value[key] : "sum",
                    aggType = typeof agg,
                    keyType = vars.data.keys[key],
                    idKey = vars.id.nesting.indexOf(key) >= 0,
                    timeKey = "time" in vars && key === vars.time.value;

                if (key in returnObj.d3po.data) {
                    returnObj[key] = returnObj.d3po[key];
                } else if (aggType === "function") {
                    returnObj[key] = vars.aggs.value[key](leaves);
                } else if (timeKey) {
                    returnObj[key] = parseDates(uniqueValues(leaves, key));
                } else if (vars.axes && vars.axes.discrete && vars[vars.axes.discrete].value === key) {
                    returnObj[key] = uniqueValues(leaves, key);
                } else if (keyType === "number" && aggType === "string" && !idKey) {
                    var vals = leaves.map(function(d) {
                        return d[key];
                    });
                    vals = vals.filter(function(d) {
                        return typeof d === keyType;
                    });
                    if (vals.length) returnObj[key] = aggs.fromString(agg)(vals);
                } else {

                    var testVals = checkVal(leaves, key);
                    var keyValues = testVals.length === 1 ? testVals[0][key] :
                        uniqueValues(testVals, key);

                    if (testVals.length === 1) {
                        returnObj[key] = keyValues;
                    } else if (keyValues && keyValues.length) {

                        if (!(keyValues instanceof Array)) {
                            keyValues = [keyValues];
                        }

                        if (idKey && vars.id.nesting.indexOf(key) > i) {
                            // if (idKey && vars.id.nesting.indexOf(key) > i && keyValues.length > 1) {
                            // if (nestingLevels.length == 1 && testVals.length > leaves.length) {
                            //   var newNesting = nestingLevels.concat(key);
                            //   testVals = dataNest(vars,testVals,newNesting);
                            // }
                            returnObj[key] = testVals;
                        } else {

                            returnObj[key] = keyValues;

                        }

                    } else if (idKey) {
                        var endPoint = vars.id.nesting.indexOf(key) - 1;
                        if (endPoint >= i && (!("endPoint" in returnObj.d3po) || returnObj.d3po.endPoint > i)) {
                            returnObj.d3po.endPoint = i;
                        }
                    }

                }

            }

            if (key in returnObj && returnObj[key] instanceof Array && returnObj[key].length === 1) {
                returnObj[key] = returnObj[key][0];
            }

        }

        for (var lll = 0; lll < nestingLevels.length; lll++) {
            var level = nestingLevels[lll];
            if (!(level in returnObj)) {
                returnObj[level] = fetchValue(vars, leaves[0], level);
            }
        }

        groupedData.push(returnObj);

        return returnObj;

    });

    var find_keys = function(obj, depth, keys) {
        if (obj.children) {
            if (vars.data.keys[nestingLevels[depth]] == "number") {
                obj.key = parseFloat(obj.key);
            }
            keys[nestingLevels[depth]] = obj.key;
            delete obj.key;
            for (var k in keys) {
                obj[k] = keys[k];
            }
            depth++;
            obj.children.forEach(function(c) {
                find_keys(c, depth, keys);
            });
        }
    };

    nestedData = nestedData
        .entries(flatData)
        .map(rename_key_value)
        .map(function(obj) {
            find_keys(obj, 0, {});
            return obj;
        });

    return groupedData;

};

var checkVal = function(leaves, key) {

    var returnVals = [];

    function run(obj) {
        if (obj instanceof Array) {
            obj.forEach(run);
        } else if (validObject(obj) && key in obj) {
            if (obj[key] instanceof Array) {
                obj[key].forEach(run);
            } else {
                returnVals.push(obj);
            }
        }
    }

    run(leaves);

    return returnVals;

};

var parseDates = function(dateArray) {

    var dates = [];

    function checkDate(arr) {

        for (var i = 0; i < arr.length; i++) {
            var d = arr[i];
            if (d) {
                if (d.constructor === Array) {
                    checkDate(d);
                } else {
                    dates.push(d);
                }
                // if (d.constructor === Date) dates.push(d);
                // else if (d.constructor === Array) {
                //   checkDate(d);
                // }
                // else {
                //   d = new Date(d.toString());
                //   if (d !== "Invalid Date") {
                //     d.setTime( d.getTime() + d.getTimezoneOffset() * 60 * 1000 );
                //     dates.push(d);
                //   }
                // }
            }
        }

    }

    checkDate(dateArray);

    return uniqueValues(dates);

};

var rename_key_value = function(obj) {
    if (obj.values && obj.values.length) {
        obj.children = obj.values.map(function(obj) {
            return rename_key_value(obj);
        });
        delete obj.values;
        return obj;
    } else if (obj.values) {
        return obj.values;
    } else {
        return obj;
    }
};

module.exports = dataNest;
},{"../../object/validate.js":207,"../../util/uniques.js":245,"../../viz/helpers/d3functions/aggs.js":247,"../fetch/value.js":99}],93:[function(require,module,exports){
var aggs = require("../../viz/helpers/d3functions/aggs.js"),
    arraySort = require("../../array/sort.js"),
    dataNest = require("./nest.js"),
    fetchValue = require("../fetch/value.js"),
    fetchColor = require("../fetch/color.js"),
    fetchText = require("../fetch/text.js");
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Merges data underneath the size threshold
//-------------------------------------------------------------------
module.exports = function(vars, rawData, split) {

    var threshold;
    if (vars.size.threshold.value === false) {
        threshold = 0;
    } else if (typeof vars.size.threshold.value === "number") {
        threshold = vars.size.threshold.value;
    } else if (typeof vars.size.threshold.value === "function") {
        threshold = vars.size.threshold.value(vars);
    } else if (typeof vars.types[vars.type.value].threshold === "number") {
        threshold = vars.types[vars.type.value].threshold;
    } else if (typeof vars.types[vars.type.value].threshold === "function") {
        threshold = vars.types[vars.type.value].threshold(vars);
    } else {
        threshold = 0.02;
    }

    if (typeof threshold == "number" && threshold > 0) {

        var largeEnough = [],
            cutoff = vars.depth.value === 0 ? 0 : {},
            removed = [],
            parents = [],
            labelException = [],
            largest = {};

        var nest = d3.nest();

        if (split) {
            nest
                .key(function(d) {
                    return fetchValue(vars, d, split);
                });
        }

        nest
            .rollup(function(leaves) {
                var total = leaves.length;
                if (vars.aggs.value[vars.size.value]) {
                    if (typeof vars.aggs.value[vars.size.value] == "function") {
                        total = vars.aggs.value[vars.size.value](leaves);
                    } else if (typeof vars.aggs.value[vars.size.value] == "string") {
                        total = aggs.fromString(vars.aggs.value[vars.size.value])(leaves, function(l) {
                            return fetchValue(vars, l, vars.size.value);
                        });
                    }
                } else {
                    total = d3.sum(leaves, function(l) {
                        return fetchValue(vars, l, vars.size.value);
                    });
                }
                var x = split ? fetchValue(vars, leaves[0], split) : "all";
                largest[x] = total;
                return total;
            })
            .entries(rawData);

        rawData.forEach(function(d) {
            var id = fetchValue(vars, d, vars.id.value),
                val = fetchValue(vars, d, vars.size.value),
                x = split ? fetchValue(vars, d, split) : "all",
                allowed = val / largest[x] >= threshold;

            if (allowed && largeEnough.indexOf(id) < 0) {
                largeEnough.push(id);
                if (vars.depth.value) {
                    var p = fetchValue(vars, d, vars.id.nesting[vars.depth.value - 1]);
                    if (parents.indexOf(p) < 0) {
                        parents.push(p);
                    }
                }
            }

        });

        var filteredData = rawData.filter(function(d) {

            var id = fetchValue(vars, d, vars.id.value),
                allowed = largeEnough.indexOf(id) >= 0;

            var p = vars.depth.value ?
                fetchValue(vars, d, vars.id.nesting[vars.depth.value - 1]) :
                null;

            if (p !== null && parents.indexOf(p) < 0 && labelException.indexOf(p) < 0) {
                labelException.push(p);
            }

            if (!allowed) {
                var val = fetchValue(vars, d, vars.size.value);
                if (val > 0) {
                    if (vars.depth.value === 0) {
                        if (val > cutoff) cutoff = val;
                    } else {
                        if (!(p in cutoff)) cutoff[p] = 0;
                        if (val > cutoff[p]) cutoff[p] = val;
                    }
                    removed.push(d);
                }
            }
            return allowed;

        });

        if (removed.length > 1) {

            removed = arraySort(removed, vars.size.value, "desc", [], vars);

            var levels = vars.id.nesting.slice(0, vars.depth.value);
            if (vars.types[vars.type.value].requirements.indexOf(vars.axes.discrete) >= 0) {
                levels.push(vars[vars.axes.discrete].value);
            }
            var merged = dataNest(vars, removed, levels);

            merged.forEach(function(m) {

                var parent = vars.id.nesting[vars.depth.value - 1];
                var p_id = fetchValue(vars, m, parent);
                children = parent ? removed.filter(function(r) {
                    return fetchValue(vars, r, parent) === p_id;
                }) : removed;

                if (children.length > 1) {

                    vars.id.nesting.forEach(function(d, i) {

                        if (vars.depth.value == i) {
                            var prev = m[d];
                            if (typeof prev === "string") {
                                m[d] = "d3po_other_" + prev;
                            } else {
                                m[d] = "d3po_other";
                            }
                        } else if (i > vars.depth.value) {
                            delete m[d];
                        }
                    });

                    if (vars.color.value && vars.color.type === "string") {
                        if (vars.depth.value === 0) {
                            m[vars.color.value] = vars.color.missing;
                        } else {
                            m[vars.color.value] = fetchValue(vars, p_id, vars.color.value, parent);
                        }
                    }

                    if (vars.icon.value) {
                        m[vars.icon.value] = fetchValue(vars, p_id, vars.icon.value, parent);
                    }

                    if (p_id) {
                        m.d3po.depth = vars.depth.value;
                    }

                    var textLabel;
                    if (vars.depth.value === 0) {
                        textLabel = vars.format.value(vars.format.locale.value.ui.values, {
                            "key": "threshold",
                            "vars": vars
                        });
                        textLabel += " < " + vars.format.value(cutoff, {
                            "key": vars.size.value,
                            "vars": vars
                        });
                    } else {
                        textLabel = fetchText(vars, m, vars.depth.value - 1);
                        textLabel = textLabel.length ? textLabel[0].split(" < ")[0] : vars.format.value(vars.format.locale.value.ui.values, {
                            "key": "threshold",
                            "vars": vars
                        });
                        if (p_id, labelException.indexOf(p_id) < 0) {
                            textLabel += " < " + vars.format.value(cutoff[p_id], {
                                "key": vars.size.value,
                                "vars": vars
                            });
                        }
                    }
                    if (p_id, labelException.indexOf(p_id) < 0) {
                        textLabel += " (" + vars.format.value(threshold * 100, {
                            "key": "share",
                            "vars": vars
                        }) + ")";
                    }

                    m.d3po.threshold = cutoff;
                    m.d3po.merged = children;

                    if (vars.text.value) {
                        m[vars.text.value] = textLabel;
                    }
                    m.d3po.text = textLabel;

                }

            });

        } else {
            merged = removed;
        }

        return filteredData.concat(merged);

    }

    return rawData;

};
},{"../../array/sort.js":65,"../../viz/helpers/d3functions/aggs.js":247,"../fetch/color.js":95,"../fetch/text.js":98,"../fetch/value.js":99,"./nest.js":92}],94:[function(require,module,exports){
// Determines visible time markers and formatting
(function() {
    var multiFormat, sizes;

    multiFormat = require("./multiformat.js"),
    sizes = require("../../font/sizes.js");

    module.exports = function(vars, opts) {
        var f, format, func, getFormat, limit, locale, p, periods, pp, prev, render, small, step, style, time, total, vals, values;
        values = opts.values || vars.data.time.ticks;
        style = opts.style || {};
        limit = opts.limit || vars.width.value;
        time = {};
        periods = vars.data.time.periods;
        step = vars.data.time.stepType;
        total = vars.data.time.totalType;
        func = vars.data.time.functions;
        getFormat = vars.data.time.getFormat;
        locale = vars.format.locale.value.format;
        if (vars.time.format.value) {
            time.format = vars.data.time.format;
            time.values = values;
            time.sizes = sizes(values.map(function(v) {
                return time.format(v);
            }), style);
        } else {
            p = periods.indexOf(step);
            while (p <= periods.indexOf(total)) {
                vals = values.filter(function(t) {
                    var match, pp;
                    if (p === periods.indexOf(step)) {
                        return true;
                    }
                    match = true;
                    pp = p - 1;
                    if (p < 0) {
                        return true;
                    }
                    while (pp >= periods.indexOf(step)) {
                        if (!match) {
                            break;
                        }
                        match = !func[pp](t);
                        pp--;
                    }
                    return match;
                });
                if (periods[p] === total) {
                    format = d3.timeFormatLocale(locale).format(getFormat(periods[p], total));
                } else {
                    pp = p;
                    format = [];
                    while (pp <= periods.indexOf(total)) {
                        prev = pp - 1 < periods.indexOf(step) ? pp : pp - 1;
                        prev = periods[prev];
                        small = periods[pp] === prev && step !== total;
                        f = getFormat(prev, periods[pp], small);
                        format.push([f, func[pp]]);
                        pp++;
                    }
                    format[format.length - 1][1] = function() {
                        return true;
                    };
                    format = multiFormat(d3.timeFormatLocale(locale), format);
                }
                render = sizes(vals.map(function(v) {
                    return format(v);
                }), style);
                if (d3.sum(render, function(r) {
                        return r.width;
                    }) < limit || p === periods.indexOf(total)) {
                    time.format = format;
                    time.values = vals;
                    time.sizes = render;
                    break;
                }
                p++;
            }
        }
        return time;
    };

}).call(this);
},{"../../font/sizes.js":136,"./multiformat.js":91}],95:[function(require,module,exports){
// Finds an object's color and returns random if it cannot be found
(function() {
    var fetchValue, getColor, getRandom, randomColor, uniques, validColor, validObject;

    fetchValue = require("./value.js");

    randomColor = require("../../color/random.js");

    validColor = require("../../color/validate.js");

    validObject = require("../../object/validate.js");

    uniques = require("../../util/uniques.js");

    module.exports = function(vars, id, level) {
        var color, colorLevel, colors, i, obj, value;
        obj = validObject(id);
        if (obj && "d3po" in id && "color" in id.d3po) {
            return id.d3po.color;
        }
        if (level === void 0) {
            level = vars.id.value;
        }
        if (typeof level === "number") {
            level = vars.id.nesting[level];
        }
        if (!vars.color.value) {
            return getRandom(vars, id, level);
        } else {
            colors = [];
            i = vars.id.nesting.indexOf(level);
            while (i >= 0) {
                colorLevel = vars.id.nesting[i];
                value = uniques(id, vars.color.value, fetchValue, vars, colorLevel);
                if (value.length === 1) {
                    value = value[0];
                }
                if (!(value instanceof Array) && value !== void 0 && value !== null) {
                    color = getColor(vars, id, value, level);
                    if (colors.indexOf(color) < 0) {
                        colors.push(color);
                    }
                    break;
                }
                i--;
            }
            if (colors.length === 1) {
                return colors[0];
            } else {
                return vars.color.missing;
            }
        }
    };

    getColor = function(vars, id, color, level) {
        if (!color) {
            if (vars.color.value && typeof vars.color.valueScale === "function") {
                return vars.color.valueScale(0);
            }
            return getRandom(vars, id, level);
        } else if (!vars.color.valueScale) {
            if (validColor(color)) {
                return color;
            } else {
                return getRandom(vars, color, level);
            }
        } else {
            return vars.color.valueScale(color);
        }
    };

    getRandom = function(vars, c, level) {
        if (validObject(c)) {
            c = fetchValue(vars, c, level);
        }
        if (c instanceof Array) {
            c = c[0];
        }
        return randomColor(c, vars.color.scale.value);
    };

}).call(this);
},{"../../color/random.js":78,"../../color/validate.js":82,"../../object/validate.js":207,"../../util/uniques.js":245,"./value.js":99}],96:[function(require,module,exports){
var dataFilter = require("../data/filter.js"),
    dataNest = require("../data/nest.js"),
    print = require("../console/print.js"),
    stringFormat = require("../../string/format.js"),
    stringList = require("../../string/list.js");

//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Fetches specific years of data
//-------------------------------------------------------------------
module.exports = function(vars, years, depth) {

    if (!vars.data.value) return [];

    if (depth === undefined) depth = vars.depth.value;
    var nestLevel = vars.id.nesting[depth];

    if (years && !(years instanceof Array)) years = [years];

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // If "years" have not been requested, determine the years using .time()
    // solo and mute
    //----------------------------------------------------------------------------
    if (!years && "time" in vars) {

        years = [];

        var key = vars.time.solo.value.length ? "solo" : "mute",
            filterList = vars.time[key].value;

        if (filterList.length) {

            years = [];
            for (var yi = 0; yi < filterList.length; yi++) {
                var y = filterList[yi];

                if (typeof y === "function") {
                    for (var ti = 0; ti < vars.data.time.values.length; ti++) {
                        var ms = vars.data.time.values[ti].getTime();
                        if (y(ms)) years.push(ms);
                    }
                } else if (y.constructor === Date) {
                    years.push(new Date(y).getTime());
                } else {
                    y += "";
                    if (y.length === 4 && parseInt(y) + "" === y) y = y + "/01/01";
                    var d = new Date(y);
                    if (d !== "Invalid Date") {
                        // d.setTime(d.getTime() + d.getTimezoneOffset() * 60 * 1000);
                        years.push(d.getTime());
                    }
                }

            }

            if (key === "mute") {
                years = vars.data.time.values.filter(function(t) {
                    return years.indexOf(t.getTime()) < 0;
                });
            }

        } else years.push("all");

    } else {
        years = ["all"];
    }

    if (years.indexOf("all") >= 0 && vars.data.time.values.length) {
        years = vars.data.time.values.slice(0);
        for (var i = 0; i < years.length; i++) {
            years[i] = years[i].getTime();
        }
    }

    var cacheID = [vars.type.value, nestLevel, depth]
        .concat(vars.data.filters)
        .concat(years),
        filter = vars.data.solo.length ? "solo" : "mute",
        cacheKeys = d3.keys(vars.data.cache),
        vizFilter = vars.types[vars.type.value].filter || undefined;

    if (vars.data[filter].length) {
        for (var di = 0; di < vars.data[filter].length; di++) {
            var f = vars.data[filter][di];
            var vals = vars[f][filter].value.slice(0);
            vals.unshift(f);
            vals.unshift(filter);
            cacheID = cacheID.concat(vals);
        }
    }

    if (vars.axes && vars.axes.discrete) cacheID.push(vars.axes.discrete);

    cacheID = cacheID.join("_");
    vars.data.cacheID = cacheID;

    var match = false;

    for (var c = 0; c < cacheKeys.length; c++) {

        var matchKey = cacheKeys[c].split("_").slice(1).join("_");

        if (matchKey === cacheID) {
            cacheID = new Date().getTime() + "_" + cacheID;
            vars.data.cache[cacheID] = vars.data.cache[cacheKeys[c]];
            delete vars.data.cache[cacheKeys[c]];
            break;
        }

    }

    var returnData;

    if (vars.data.cache[cacheID]) {

        if (vars.dev.value) print.comment("data already cached");

        returnData = vars.data.cache[cacheID].data;
        if ("nodes" in vars) {
            vars.nodes.restricted = vars.data.cache[cacheID].nodes;
            vars.edges.restricted = vars.data.cache[cacheID].edges;
        }

        if (typeof vizFilter === "function") {
            returnData = vizFilter(vars, returnData);
        }

        return returnData;

    } else {

        var missing = [];
        returnData = [];

        if (vars.data.value && vars.data.value.length) {

            for (var yz = 0; yz < years.length; yz++) {
                var year = years[yz];
                if (vars.data.nested[year]) {
                    returnData = returnData.concat(vars.data.nested[year][nestLevel]);
                } else {
                    missing.push(year);
                }
            }

        }

        if (returnData.length === 0 && missing.length && !vars.error.internal) {

            if (missing.length > 1) {
                missing = d3.extent(missing);
            }

            missing = missing.map(function(m) {
                return vars.data.time.format(new Date(m));
            });
            missing = missing.join(" - ");

            var str = vars.format.locale.value.error.dataYear,
                and = vars.format.locale.value.ui.and;
            missing = stringList(missing, and);
            vars.error.internal = stringFormat(str, missing);
            vars.time.missing = true;

        } else {

            if (vars.time) vars.time.missing = false;

            if (years.length > 1) {

                var separated = false;
                ["x", "y", "x2", "y2"].forEach(function(a) {
                    if (vars[a].value === vars.time.value &&
                        vars[a].scale.value === "discrete") {
                        separated = true;
                    }
                });

                if (!separated) {
                    var nested = vars.id.nesting.slice(0, depth + 1);
                    returnData = dataNest(vars, returnData, nested);
                }

            }

            if (!returnData) {
                returnData = [];
            } else {
                returnData = dataFilter(vars, returnData);
            }

            if (cacheKeys.length === 20) {
                cacheKeys.sort();
                delete vars.data.cache[cacheKeys[0]];
            }

            cacheID = new Date().getTime() + "_" + cacheID;
            vars.data.cache[cacheID] = {
                "data": returnData
            };
            if ("nodes" in vars) {
                vars.data.cache[cacheID].nodes = vars.nodes.restricted;
                vars.data.cache[cacheID].edges = vars.edges.restricted;
            }

            if (typeof vizFilter === "function") {
                returnData = vizFilter(vars, returnData);
            }

            if (vars.dev.value) print.comment("storing data in cache");

        }

        return returnData;

    }

};
},{"../../string/format.js":208,"../../string/list.js":209,"../console/print.js":83,"../data/filter.js":86,"../data/nest.js":92}],97:[function(require,module,exports){
(function() {
    var aggs, fetchColor, fetchText, fetchValue;

    aggs = require("../../viz/helpers/d3functions/aggs.js");

    fetchValue = require("./value.js");

    fetchColor = require("./color.js");

    fetchText = require("./text.js");

    module.exports = function(vars, d, keys, colors, depth) {
        var agg, i, key, len, obj, value;
        if (!(keys instanceof Array)) {
            keys = [keys];
        }
        if (!(colors instanceof Array)) {
            colors = [colors];
        }
        if (vars) {
            if (depth === void 0) {
                depth = vars.id.value;
            } else if (typeof depth !== "number") {
                depth = vars.id.nesting.indexOf(depth);
            }
        }
        obj = {};
        for (i = 0, len = keys.length; i < len; i++) {
            key = keys[i];
            if (vars) {
                if (colors.indexOf(key) >= 0) {
                    value = fetchColor(vars, d, depth);
                } else if (key === vars.text.value) {
                    value = fetchText(vars, d, depth);
                } else if (d3.keys(d).length === 3 && d["d3po"] && d["key"] && d["values"]) {
                    value = fetchValue(vars, d.values.map(function(dd) {
                        return dd.d3po;
                    }), key, depth);
                } else {
                    value = fetchValue(vars, d, key, depth);
                }
            } else {
                value = d[key];
            }
            if ([vars.data.keys[key], vars.attrs.keys[key]].indexOf("number") >= 0) {
                agg = vars.order.agg.value || vars.aggs.value[key] || "sum";
                if (agg.constructor === String) {
                    agg = aggs.fromString(agg);
                }
                if (!(value instanceof Array)) {
                    value = [value];
                }
                value = agg(value);
            } else {
                if (value instanceof Array) {
                    value = value[0];
                }
                value = typeof value === "string" ? value.toLowerCase() : value;
            }
            obj[key] = value;
        }
        return obj;
    };

}).call(this);
},{"../../viz/helpers/d3functions/aggs.js":247,"./color.js":95,"./text.js":98,"./value.js":99}],98:[function(require,module,exports){
var fetchValue = require("./value.js"),
    validObject = require("../../object/validate.js"),
    uniques = require("../../util/uniques.js");

//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Get array of available text values
//------------------------------------------------------------------------------
module.exports = function(vars, obj, depth) {

    if (typeof depth !== "number") depth = vars.depth.value;

    var key = vars.id.nesting[depth],
        textKeys;

    if (vars.text.nesting && validObject(vars.text.nesting)) {
        if (vars.text.nesting[key]) {
            textKeys = vars.text.nesting[key];
        } else {
            textKeys = vars.text.value;
        }
    } else {
        textKeys = [];
        if (vars.text.value && depth === vars.depth.value) textKeys.push(vars.text.value);
        textKeys.push(key);
    }

    if (!(textKeys instanceof Array)) {
        textKeys = [textKeys];
    }

    var names = [];

    if (validObject(obj) && "d3po" in obj && obj.d3po.text) {
        names.push(obj.d3po.text.toString());
        names.push(vars.format.value(obj.d3po.text.toString(), {
            "vars": vars,
            "data": obj
        }));
    } else {

        var formatObj = validObject(obj) ? obj : undefined;

        if (formatObj && obj[vars.id.value] instanceof Array) {
            obj = obj[vars.id.value];
        } else if (!(obj instanceof Array)) {
            obj = [obj];
        }

        textKeys.forEach(function(t) {

            var name = uniques(obj, t, fetchValue, vars, key);

            if (name.length) {
                if (name.length > 1) {
                    name = name.filter(function(n) {
                        return (n instanceof Array) || (typeof n === "string" && n.indexOf(" < ") < 0);
                    });
                }
                name = name.map(function(n) {
                    if (n instanceof Array) {
                        n = n.filter(function(nn) {
                            return nn;
                        });
                        return n.map(function(nn) {
                            return vars.format.value(nn.toString(), {
                                "vars": vars,
                                "data": formatObj,
                                "key": t
                            });
                        });
                    } else if (n) {
                        return vars.format.value(n.toString(), {
                            "vars": vars,
                            "data": formatObj,
                            "key": t
                        });
                    }
                });
                if (name.length === 1) name = name[0];
                names.push(name);
            }

        });

    }

    return names;

};
},{"../../object/validate.js":207,"../../util/uniques.js":245,"./value.js":99}],99:[function(require,module,exports){
// Finds a given variable by searching through the data and attrs
(function() {
    var cacheInit, checkAttrs, checkData, fetch, fetchArray, filterArray, find, uniqueValues, validObject, valueParse;

    validObject = require("../../object/validate.js");

    uniqueValues = require("../../util/uniques.js");

    find = function(vars, node, variable, depth) {
        var cache, nodeObject, returned, val;
        nodeObject = validObject(node);
        if (typeof variable === "function" && nodeObject) {
            return variable(node, vars);
        }
        if (nodeObject) {
            if (variable in node) {
                return node[variable];
            }
            cache = vars.data.cacheID + "_" + depth;
            cacheInit(node, cache, vars);
            if (variable in node.d3po.data[cache]) {
                return node.d3po.data[cache][variable];
            }
            if (depth in node) {
                node = node[depth];
            } else if (vars.id.value in node) {
                node = node[vars.id.value];
                if (depth !== variable) {
                    returned = checkData(vars, node, depth, vars.id.value);
                }
                if (returned === null || returned === void 0) {
                    returned = checkAttrs(vars, node, depth, vars.id.value);
                }
                if (returned === null || returned === void 0) {
                    return null;
                } else if (depth === variable) {
                    return returned;
                }
                node = returned;
            } else {
                return null;
            }
        }
        if (node instanceof Array && !validObject(node[0])) {
            node = uniqueValues(node);
        }
        if (node instanceof Array && validObject(node[0])) {
            val = uniqueValues(node, variable);
            if (val.length) {
                return val;
            }
        }
        val = checkData(vars, node, variable, depth);
        if (val) {
            return val;
        }
        val = checkAttrs(vars, node, variable, depth);
        return val;
    };

    checkData = function(vars, node, variable, depth) {
        var val;
        if (vars.data.viz instanceof Array && variable in vars.data.keys) {
            val = uniqueValues(filterArray(vars.data.viz, node, depth), variable);
        }
        if (val && val.length) {
            return val;
        } else {
            return null;
        }
    };

    checkAttrs = function(vars, node, variable, depth) {
        var attrList, n, val, vals;
        if ("attrs" in vars && vars.attrs.value && variable in vars.attrs.keys) {
            if (validObject(vars.attrs.value) && depth in vars.attrs.value) {
                attrList = vars.attrs.value[depth];
            } else {
                attrList = vars.attrs.value;
            }
            if (attrList instanceof Array) {
                val = uniqueValues(filterArray(attrList, node, depth), variable);
                if (val.length) {
                    return val;
                }
            } else if (node instanceof Array) {
                attrList = [
                    (function() {
                        var j, len, results;
                        if (n in attrList) {
                            results = [];
                            for (j = 0, len = node.length; j < len; j++) {
                                n = node[j];
                                results.push(attrList[n]);
                            }
                            return results;
                        }
                    })()
                ];
                if (attrList.length) {
                    vals = uniqueValues(attrList, variable);
                    if (vals.length) {
                        return vals;
                    }
                }
            } else if (node in attrList) {
                return attrList[node][variable];
            }
        }
        return null;
    };

    filterArray = function(arr, node, depth) {
        if (node instanceof Array) {
            return arr.filter(function(d) {
                return node.indexOf(d[depth]) >= 0;
            });
        } else {
            return arr.filter(function(d) {
                return d[depth] === node;
            });
        }
    };

    cacheInit = function(node, cache, vars) {
        if (!("d3po" in node)) {
            node.d3po = {};
        }
        if (!("data" in node.d3po)) {
            node.d3po.data = {};
        }
        if (vars.data.changed || (vars.attrs && vars.attrs.changed) || !(cache in node.d3po.data)) {
            node.d3po.data[cache] = {};
        }
        return node;
    };

    valueParse = function(vars, node, depth, variable, val) {
        var cache, d, i, j, len, timeVar, v;
        if (val === null) {
            return val;
        }
        timeVar = "time" in vars && vars.time.value === variable;
        if (!(val instanceof Array)) {
            val = [val];
        }
        for (i = j = 0, len = val.length; j < len; i = ++j) {
            v = val[i];
            if (timeVar && v !== null && v.constructor !== Date) {
                v = v + "";
                if (v.length === 4 && parseInt(v) + "" === v) {
                    v += "/01/01";
                }
                d = new Date(v);
                if (d !== "Invalid Date") {
                    val[i] = d;
                }
            }
        }
        if (val.length === 1) {
            val = val[0];
        }
        if (val !== null && validObject(node) && typeof variable === "string" && !(variable in node)) {
            cache = vars.data.cacheID + "_" + depth;
            node.d3po.data[cache][variable] = val;
        }
        return val;
    };

    fetchArray = function(vars, arr, variable, depth) {
        var item, j, len, v, val;
        val = [];
        for (j = 0, len = arr.length; j < len; j++) {
            item = arr[j];
            if (validObject(item)) {
                v = find(vars, item, variable, depth);
                val.push(valueParse(vars, item, depth, variable, v));
            } else {
                val.push(item);
            }
        }
        if (typeof val[0] !== "number") {
            val = uniqueValues(val);
        }
        if (val.length === 1) {
            return val[0];
        } else {
            return val;
        }
    };

    fetch = function(vars, node, variable, depth) {
        var nodeObject, val;
        if (!variable) {
            return null;
        }
        if (typeof variable === "number") {
            return variable;
        }
        nodeObject = validObject(node);
        if (!depth) {
            depth = vars.id.value;
        }
        if (nodeObject && node.values instanceof Array) {
            val = fetchArray(vars, node.values, variable, depth);
        } else if (nodeObject && node[variable] instanceof Array) {
            val = fetchArray(vars, node[variable], variable, depth);
        } else if (node instanceof Array) {
            val = fetchArray(vars, node, variable, depth);
        } else {
            val = find(vars, node, variable, depth);
            val = valueParse(vars, node, depth, variable, val);
        }
        return val;
    };

    module.exports = fetch;

}).call(this);
},{"../../object/validate.js":207,"../../util/uniques.js":245}],100:[function(require,module,exports){
// Creates an invisible test element to populate
(function() {
    module.exports = function(type) {
        var attrs, styles, tester;
        if (["div", "svg"].indexOf(type) < 0) {
            type = "div";
        }
        styles = {
            position: "absolute",
            left: "-9999px",
            top: "-9999px",
            visibility: "hidden",
            display: "block"
        };
        attrs = type === "div" ? {} : {
            position: "absolute"
        };
        tester = d3.select("body").selectAll(type + ".d3po_tester").data([0]).join(type).classed("d3po_tester", true);
        for (var name in styles) tester.style(name, styles[name]);
        for (var name in attrs) tester.attr(name, attrs[name]);
        return tester;
    };

}).call(this);
},{}],101:[function(require,module,exports){
module.exports = {
    "dev": {
        "accepted": "{0} ليس قيمة مقبولة لـ{1}، يرجى إستخدام أحد الإجراءات التالية: {2}.",
        "noChange": "لم يتم تحديث {0} بسبب عدم وجود تغيرات عليه.",
        "noContainer": "الحاوية غير موجودة في الصفحة {0}.",
        "of": "من",
        "oldStyle": "تم دمج الخصائص الشكلية لـ{0} داخل .{1}().",
        "sameEdge": "لا يمكن لحواف الشكل أن تكون متصله بنفسها، سيتم إزالة هذه الحواف تلقائيًا {0}.",
        "set": "تم حفظ {0}.",
        "setLong": "تم حفظ {0} بالقيمة {1}.",
        "setContainer": "يرجى تحديد عنصر الحاوية بإستخدام .container()."
    },
    "error": {
        "accepted": "{0} ليس {1} مقبول للشكل البياني {2}، رجاءً إستخدم أحد هذه الطرق: {3}.",
        "connections": "لا يوجد روابط متصلة مع {0}.",
        "data": "البيانات غير متوفرة.",
        "dataYear": "البيانات غير متوفرة لـ{0}.",
        "lib": "يتطلب رسم الشكل البياني {0} توفر المكتبة البرمجية {1}.",
        "libs": "يتطلب رسم الشكل البياني {0} توفرهذه المكتبات البرمجية: {1}.",
        "method": "يتطلب الرسم البياني {0} وجود الدالة {1}.",
        "methods": "يتطلب الرسم البياني {0} وجود الدوال التالية: {1}."
    },
    "lowercase": [],
    "method": {
        "active": "أجزاء نشطة",
        "color": "لون",
        "depth": "عمق",
        "dev": "مُفصَّل",
        "focus": "تركيز",
        "icon": "أيقونة",
        "id": "معرف",
        "height": "طول",
        "labels": "وسم",
        "legend": "مفسِّر",
        "margin": "هامش",
        "messages": "رسائل الحالة",
        "order": "رتِّب",
        "search": "بحث",
        "shape": "شكل",
        "size": "حجم",
        "style": "نمط",
        "temp": "أجزاء مؤقتة",
        "text": "نص",
        "time": "وقت",
        "timeline": "جدول زمني",
        "total": "مجوع الأجزاء",
        "type": "نوع",
        "width": "عرض",
        "x": "محور سيني",
        "y": "محور صادي",
        "zoom": "زوم",
        "mode": "طريقة",
        "mute": "إخفاء",
        "solo": "منفرد"
    },
    "time": [
        "تاريخ",
        "يوم",
        "شهر",
        "وقت",
        "سنة"
    ],
    "visualization": {
        "bubbles": "فقاعات",
        "chart": "مخطط بياني",
        "geomap": "خريطة جغرافية",
        "line": "مخطط بياني خطّي",
        "network": "شبكة",
        "rings": "خواتم",
        "scatter": "مخطط بياني نقاطي",
        "stacked": "رسم بياني مكدس",
        "treemap": "رسم بياني شجري",
        "bar": "مخطط بياني شريطي",
        "box": "مخطط بياني صنوقي",
        "paths": "مسارات",
        "pie": "مخطط بياني دائري",
        "table": "الجدول"
    },
    "ui": {
        "and": "و",
        "back": "العودة",
        "collapse": "أنقر للإخفاء",
        "error": "خطأ",
        "expand": "أنقر للتفاصيل",
        "loading": "جار التحميل...",
        "more": "{0} أخرى",
        "moreInfo": "أنقر لمزيد من المعلومات",
        "noResults": "لا يوجد نتائج تطابق {0}.",
        "primary": "الروابط الإتصالية الأساسية",
        "share": "شارك",
        "total": "مجموع",
        "values": "القيم",
        "including": "بما فيها",
        "or": "أو",
        "iqr": "مجموعة الشرائح الربعية ل{0}",
        "max": "الحد الأعلى",
        "min": "الحد الأدنى",
        "percentile": "المئين {0}",
        "tukey_bottom": "التوكي الأسفل",
        "tukey_top": "التوكي الأعلى",
        "quartile_first": "الربع الأول",
        "quartile_third": "الربع الثالث",
        "median": "وسيط"
    },
    "message": {
        "data": "البيانات تحت التحليل",
        "draw": "رسم المخطط البياني",
        "initializing": "تهيئة {0}",
        "loading": "تحميل البيانات",
        "tooltipReset": "إعادة تهيئة التفاصيل المنبثقة",
        "ui": "تحديث واجهة المستخدم"
    },
    "uppercase": []
}
},{}],102:[function(require,module,exports){
module.exports = {
    "format": {
        "decimal": ",",
        "thousands": ".",
        "grouping": [3],
        "currency": ["", " €"],
        "dateTime": "%A, der %e. %B %Y, %X",
        "date": "%d.%m.%Y",
        "time": "%H:%M:%S",
        "periods": ["AM", "PM"], // unused
        "days": ["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"],
        "shortDays": ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"],
        "months": ["Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"],
        "shortMonths": ["Jan", "Feb", "Mrz", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez"]
    },
    "error": {
        "accepted": "{0} ist kein gültiger {1} für {2}-Darstellungen. Benutzen Sie bitte: {3}.",
        "connections": "Keine Verbindungen verfügbar für {0}.",
        "data": "Keine Daten verfügbar",
        "dataYear": "Für {0} sind keine Daten verfügbar.",
        "lib": "{0}-Darstellungen erfordern das Laden der Bibliothek {1}.",
        "libs": "{0}-Darstellungen erfordern das Laden folgender Bibliotheken: {1}.",
        "method": "{0}-Darstellungen erfordern die Methode {1}.",
        "methods": "Weitere Einstellungen für folgende Methoden {1} sind bei {0}-Darstellungen erforderlich."
    },
    "lowercase": [
        "ein",
        "ein",
        "und",
        "wie",
        "bei",
        "aber",
        "durch",
        "für",
        "von",
        "wenn",
        "in",
        "in",
        "in der Nähe",
        "noch",
        "von",
        "auf",
        "auf",
        "oder",
        "pro",
        "das",
        "die",
        "zu",
        "mit",
        "über",
        "gegen",
        "gegen."
    ],
    "method": {
        "active": "aktive Segmente",
        "color": "Farbe",
        "depth": "Tiefe",
        "dev": "ausführlich",
        "focus": "Fokus",
        "icon": "Symbol",
        "id": "Kennung",
        "height": "Höhe",
        "labels": "Beschriftungen",
        "legend": "Legende",
        "margin": "Rand",
        "messages": "Statusmeldungen",
        "order": "Reihenfolge",
        "search": "Suche",
        "shape": "Form",
        "size": "Größe",
        "style": "Stil",
        "temp": "temporäre Segmente",
        "text": "Text",
        "time": "Zeit",
        "timeline": "Zeitleiste",
        "total": "Segmente gesamt",
        "type": "Typ",
        "width": "Breite",
        "x": "x-Achse",
        "y": "y-Achse",
        "zoom": "Zoom",
        "mode": "Modus",
        "mute": "ausblenden",
        "solo": "isolieren"
    },
    "time": [
        "Datum",
        "Tag",
        "Monat",
        "Zeit",
        "Jahr"
    ],
    "visualization": {
        "bubbles": "Blasen",
        "chart": "Diagramm",
        "geomap": "Karte",
        "line": "Liniendiagramm",
        "network": "Netzwerk",
        "rings": "Ringe",
        "scatter": "Punktdiagramm",
        "stacked": "Gestapelte Fläche",
        "treemap": "Baumdiagramm",
        "bar": "Balkendiagramm",
        "box": "Boxplot",
        "paths": "Pfade",
        "pie": "Kreisdiagramm",
        "table": "Tabelle"
    },
    "ui": {
        "and": "und",
        "back": "zurück",
        "collapse": "Zum Ausblenden klicken",
        "error": "Fehler",
        "expand": "Zum Einblenden klicken",
        "loading": "Lade...",
        "more": "{0} weitere",
        "moreInfo": "Für zusätzliche Informationen klicken",
        "noResults": "Keine Ergebnisse für {0} gefunden.",
        "primary": "Primäre Verbindungen",
        "share": "verteilung",
        "total": "gesamt",
        "values": "Werte",
        "including": "einschließlich",
        "or": "oder",
        "iqr": "Interquartilsabstände {0}",
        "max": "Maximalwert",
        "min": "Minimalwert",
        "percentile": "Perzentil P{0}",
        "tukey_bottom": "Unterer Ausreißer",
        "tukey_top": "Oberer Ausreißer",
        "quartile_first": "Unteres Quartil Q1",
        "quartile_third": "Oberes Quartil Q3",
        "median": "Medianwert"
    },
    "message": {
        "data": "analysiere Daten",
        "draw": "Darstellung wird gerendert",
        "initializing": "initialisiere {0}",
        "loading": "Daten werden geladen",
        "tooltipReset": "Tooltips zurücksetzen",
        "ui": "aktualisiere Oberfläche"
    },
    "uppercase": [
        "CEO",
        "CEOs",
        "CFO",
        "CFOs",
        "CNC",
        "COO",
        "COOs",
        "CPU",
        "CPUs",
        "BIP",
        "HVAC",
        "ID",
        "IT",
        "FuE",
        "TV",
        "UI"
    ]
}
},{}],103:[function(require,module,exports){
(function() {
    module.exports = {
        dev: {
            accepted: "{0} is not an accepted value for {1}, please use one of the following: {2}.",
            noChange: "{0} was not updated because it did not change.",
            noContainer: "cannot find a container on the page matching {0}.",
            of: "of",
            oldStyle: "style properties for {0} have now been embedded directly into .{1}().",
            sameEdge: "edges cannot link to themselves. automatically removing self-referencing edge {0}.",
            set: "{0} has been set.",
            setLong: "{0} has been set to {1}.",
            setContainer: "please define a container div using .container()"
        },
        error: {
            accepted: "{0} is not an accepted {1} for {2} visualizations, please use one of the following: {3}.",
            connections: "no connections available for {0}.",
            data: "no data available",
            dataYear: "no data available for {0}.",
            lib: "{0} visualizations require loading the {1} library.",
            libs: "{0} visualizations require loading the following libraries: {1}.",
            method: "{0} visualizations require setting the {1} method.",
            methods: "{0} visualizations require setting the following methods: {1}."
        },
        format: {
            decimal: ".",
            thousands: ",",
            grouping: [3],
            currency: ["$", ""],
            dateTime: "%A, %B %-d, %Y %X",
            date: "%-m/%-d/%Y",
            time: "%I:%M:%S %p",
            periods: ["AM", "PM"],
            days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
            shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
            months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
            shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
        },
        lowercase: ["a", "an", "and", "as", "at", "but", "by", "for", "from", "if", "in", "into", "near", "nor", "of", "on", "onto", "or", "per", "that", "the", "to", "with", "via", "vs", "vs."],
        message: {
            data: "analyzing data",
            draw: "drawing visualization",
            initializing: "initializing {0}",
            loading: "loading data",
            tooltipReset: "resetting tooltips",
            ui: "updating ui"
        },
        method: {
            active: "active segments",
            color: "color",
            depth: "depth",
            dev: "verbose",
            focus: "focus",
            icon: "icon",
            id: "id",
            height: "height",
            labels: "labels",
            legend: "legend",
            margin: "margin",
            messages: "status messages",
            mode: "mode",
            mute: "hide",
            order: "order",
            search: "search",
            shape: "shape",
            size: "size",
            solo: "isolate",
            style: "style",
            temp: "temporary segments",
            text: "text",
            time: "time",
            timeline: "timeline",
            total: "total segments",
            type: "type",
            width: "width",
            x: "x axis",
            y: "y axis",
            zoom: "zoom"
        },
        time: ["date", "day", "month", "time", "year"],
        timeFormat: {
            FullYear: "%Y",
            Month: "%B",
            MonthSmall: "%b",
            Date: "%A %-d",
            DateSmall: "%-d",
            Hours: "%I %p",
            Minutes: "%I:%M",
            Seconds: "%Ss",
            Milliseconds: "%Lms",
            "FullYear-Month": "%b %Y",
            "FullYear-Date": "%-m/%-d/%Y",
            "Month-Date": "%b %-d",
            "Hours-Minutes": "%I:%M %p",
            "Hours-Seconds": "%I:%M:%S %p",
            "Hours-Milliseconds": "%H:%M:%S.%L",
            "Minutes-Seconds": "%I:%M:%S %p",
            "Minutes-Milliseconds": "%H:%M:%S.%L",
            "Seconds-Milliseconds": "%H:%M:%S.%L"
        },
        ui: {
            and: "and",
            back: "back",
            collapse: "click to collapse",
            error: "error",
            expand: "click to expand",
            including: "including",
            iqr: "interquartile range for {0}",
            loading: "loading...",
            max: "maximum",
            median: "median",
            min: "minimum",
            more: "{0} more",
            moreInfo: "click for more info",
            or: "or",
            noResults: "no results matching {0}.",
            percentile: "{0} percentile",
            primary: "primary connections",
            quartile_first: "first quartile",
            quartile_third: "third quartile",
            share: "share",
            total: "total",
            tukey_bottom: "bottom tukey",
            tukey_top: "top tukey",
            values: "values"
        },
        uppercase: ["CEO", "CEOs", "CFO", "CFOs", "CNC", "COO", "COOs", "CPU", "CPUs", "ER", "GDP", "HVAC", "ID", "IT", "PCP", "R&D", "TV", "UI"],
        visualization: {
            bar: "Bar Chart",
            box: "Box Plot",
            bubbles: "Bubbles",
            chart: "Chart",
            geomap: "Geo Map",
            line: "Line Plot",
            network: "Network",
            paths: "Paths",
            pie: "Pie Chart",
            rings: "Rings",
            scatter: "Scatter Plot",
            stacked: "Stacked Area",
            table: "Table",
            treemap: "Tree Map"
        }
    };

}).call(this);
},{}],104:[function(require,module,exports){
module.exports = {
    "format": {
        "decimal": ",",
        "thousands": ".",
        "grouping": [3],
        "currency": ["", " €"],
        "dateTime": "%A, %e de %B de %Y, %X",
        "date": "%d/%m/%Y",
        "time": "%H:%M:%S",
        "periods": ["AM", "PM"],
        "days": ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
        "shortDays": ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
        "months": ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre"],
        "shortMonths": ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic"]
    },
    "dev": {
        "accepted": "{0} no es un valor aceptado para {1}, por favor utilice uno de los siguientes: {2}.",
        "noChange": "{0} no se actualiza porque no cambió.",
        "noContainer": "no se puede encontrar un contenedor en la página correspondiente a {0}.",
        "of": "de",
        "oldStyle": "propiedades de estilo para {0} ahora se han incorporado directamente en. {1} ().",
        "sameEdge": "los vínculos no se pueden enlazar con si mismos. eliminando automáticamente el vínculo {0} que se autorreferencia.",
        "set": "{0} se ha establecido.",
        "setLong": "{0} ha sido establecido a {1}.",
        "setContainer": "defina un div contenedor utilizando .container ()"
    },
    "error": {
        "accepted": "{0} no es un {1} aceptado para visualizaciones de {2}, por favor utilice uno de los siguientes: {3}.",
        "connections": "no hay conexiones disponibles para {0}.",
        "data": "No hay datos disponibles",
        "dataYear": "no hay datos disponibles para {0}.",
        "lib": "{0} visualizaciones requieren cargar las siguientes librerías: {1}.",
        "libs": "{0} visualizaciones requieren cargar las siguientes librerías: {1}.",
        "method": "{0} visualizaciones requieren establecer el ​​método {1}.",
        "methods": "{0} visualizaciones requieren establecer los siguientes métodos: {1}."
    },
    "lowercase": [
        "una",
        "y",
        "en",
        "pero",
        "en",
        "de",
        "o",
        "el",
        "la",
        "los",
        "las",
        "para",
        "a",
        "con"
    ],
    "method": {
        "active": "segmentos activos",
        "color": "color",
        "depth": "profundidad",
        "dev": "detallado",
        "focus": "foco",
        "icon": "ícono",
        "id": "id",
        "height": "alto",
        "labels": "rótulo",
        "legend": "leyenda",
        "margin": "margen",
        "messages": "mensajes de estado",
        "order": "orden",
        "search": "búsqueda",
        "shape": "forma",
        "size": "tamaño",
        "style": "estilo",
        "temp": "segmentos temporales",
        "text": "texto",
        "time": "tiempo",
        "timeline": "línea de tiempo",
        "total": "segmentos totales",
        "type": "tipo",
        "width": "anchura",
        "x": "eje x",
        "y": "eje Y",
        "zoom": "zoom",
        "mode": "modo",
        "mute": "ocultar",
        "solo": "aislar"
    },
    "time": [
        "fecha",
        "día",
        "mes",
        "hora",
        "año"
    ],
    "visualization": {
        "bubbles": "Burbujas",
        "chart": "Gráfico",
        "geomap": "Mapa",
        "line": "Gráfico de linea",
        "network": "Red",
        "rings": "Anillos",
        "scatter": "Gráfico De Dispersión",
        "stacked": "Área Apilada",
        "treemap": "Tree Map",
        "bar": "Gráfico De Barras",
        "box": "Diagrama de Cajas",
        "paths": "Caminos",
        "pie": "Gráfico de Pastel",
        "table": "Tabla"
    },
    "ui": {
        "and": "y",
        "back": "atrás",
        "collapse": "click para cerrar",
        "error": "error",
        "expand": "haga clic para ampliar",
        "loading": "Cargando ...",
        "more": "{0} más",
        "moreInfo": "clic para más información",
        "noResults": "no se encontraron resultados para {0}.",
        "primary": "relaciones principales",
        "share": "participación",
        "total": "total",
        "values": "valores",
        "including": "Incluyendo",
        "or": "o",
        "iqr": "rango intercuartil para {0}",
        "max": "máximo",
        "min": "mínimo",
        "percentile": "{0} percentil",
        "tukey_bottom": "Tukey inferior",
        "tukey_top": "la parte superior de Tukey",
        "quartile_first": "primer cuartil",
        "quartile_third": "tercer cuartil",
        "median": "mediana"
    },
    "message": {
        "data": "analizando los datos",
        "draw": "visualizando",
        "initializing": "inicializando {0}",
        "loading": "cargando datos",
        "tooltipReset": "restableciendo las descripciones emergentes",
        "ui": "actualizando la interfaz de usuario"
    },
    "uppercase": [
        "CEO",
        "CEOs",
        "CFO",
        "CFOs",
        "CNC",
        "COO",
        "COOs",
        "CPU",
        "CPUs",
        "PIB",
        "HVAC",
        "ID",
        "TI",
        "I&D",
        "TV",
        "UI"
    ]
}
},{}],105:[function(require,module,exports){
module.exports = {
    "format": {
        "decimal": ",",
        "thousands": ".",
        "grouping": [3],
        "currency": ["", " €"],
        "dateTime": "%A, le %e %B %Y, %X",
        "date": "%d/%m/%Y",
        "time": "%H:%M:%S",
        "periods": ["AM", "PM"], // unused
        "days": ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
        "shortDays": ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
        "months": ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre"],
        "shortMonths": ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc."]
    },
    "dev": {
        "accepted": "{0} n'est pas une option valide pour {1}, les valeurs possibles sont: {2}.",
        "noChange": "{0} n'a pas été mis à jour car inchangé.",
        "noContainer": "impossible de trouver un contenant correspondant à {0}.",
        "of": "de",
        "oldStyle": "les propriétés de {0} ont été imbriquées dans .{1}().",
        "sameEdge": "un arc ne peut pas boucler sur lui même. L'auto-référence est automatiquement éliminée {0}.",
        "set": "{0} a été mis à jour.",
        "setLong": "{0} a été mis à jour à {1}.",
        "setContainer": "merci de choisir un div qui utilise .container()"
    },
    "error": {
        "accepted": "{0} n'est pas correct {1} pour {2} visualisations, merci d'utilisez une des options suivantes: {3}.",
        "connections": "Pas de connections disponibles pour {0}.",
        "data": "Pas de données disponibles",
        "dataYear": "Pas de données disponibles pour {0}.",
        "lib": "La visualisation de {0} nécessite le chargement de la librairie {1}.",
        "libs": "La visualisation de {0} nécessite le chargement des librairies {1}.",
        "method": "La visualisation du {0} exige la définition de {1}.",
        "methods": "La visualisation du {0} exige les définitions de {1}."
    },
    "lowercase": [
        "un",
        "une",
        "de",
        "des",
        "et",
        "mais",
        "les",
        "ou",
        "pour",
        "avec",
        "comme",
        "par",
        "vers",
        "si",
        "dans",
        "près",
        "ni",
        "dessus",
        "que",
        "le",
        "la",
        "via",
        "sinon",
        "alors"
    ],
    "method": {
        "active": "segments actifs",
        "color": "couleur",
        "depth": "profondeur",
        "dev": "verbeux",
        "focus": "focus",
        "icon": "ícone",
        "id": "id",
        "height": "hauteur",
        "labels": "labels",
        "legend": "légende",
        "margin": "marge",
        "messages": "messages",
        "order": "ordre",
        "search": "recherche",
        "shape": "format",
        "size": "taille",
        "style": "style",
        "temp": "segments temporaires",
        "text": "texte",
        "time": "temps",
        "timeline": "ligne temporelle",
        "total": "segments totaux",
        "type": "type",
        "width": "largeur",
        "x": "axe x",
        "y": "axe y",
        "zoom": "zoom",
        "mode": "mode",
        "mute": "cacher",
        "solo": "isoler"
    },
    "time": [
        "année",
        "date",
        "jour",
        "heure",
        "mois"
    ],
    "visualization": {
        "bubbles": "Bulles",
        "chart": "Graphique",
        "geomap": "Carte",
        "line": "Courbes",
        "network": "Réseau",
        "rings": "Anneaux",
        "scatter": "Nuage de points",
        "stacked": "Aires empilées",
        "treemap": "Arbre",
        "bar": "Diagramme en barres",
        "box": "Boîtes à Moustaches",
        "paths": "Chemins",
        "pie": "Camembert",
        "table": "Table"
    },
    "ui": {
        "and": "et",
        "back": "retour",
        "collapse": "clic pour réduire",
        "error": "erreur",
        "expand": "clic pour agrandir",
        "loading": "chargement ...",
        "more": "plus {0}",
        "moreInfo": "clic pour plus d'information",
        "noResults": "pas de résultat correspondant à {0}.",
        "primary": "connections primaires",
        "share": "part",
        "total": "total",
        "values": "valeurs",
        "including": "incluant",
        "or": "ou",
        "iqr": "gamme interquartile pour {0}",
        "max": "maximum",
        "min": "le minimum",
        "percentile": "{0} percentile",
        "tukey_bottom": "tukey bas",
        "tukey_top": "top tukey",
        "quartile_first": "premier quartile",
        "quartile_third": "le troisième quartile",
        "median": "médian"
    },
    "message": {
        "data": "analyse des données",
        "draw": "tracé en cours",
        "initializing": "Initialisation {0}",
        "loading": "chargement",
        "tooltipReset": "réinitialisation des bulles",
        "ui": "rafraichissement de l'interface"
    },
    "uppercase": [
        "CEO",
        "CEOs",
        "CFO",
        "CFOs",
        "CNC",
        "COO",
        "COOs",
        "CPU",
        "CPUs",
        "PIB",
        "HVAC",
        "ID",
        "IT",
        "TV",
        "UI"
    ]
}
},{}],106:[function(require,module,exports){
module.exports = {
    "format": {
        "decimal": ".",
        "thousands": ",",
        "grouping": [3],
        "currency": ["₩", ""],
        "dateTime": "%Y/%m/%d %a %X",
        "date": "%Y/%m/%d",
        "time": "%H:%M:%S",
        "periods": ["오전", "오후"],
        "days": ["일요일", "월요일", "화요일", "수요일", "목요일", "금요일", "토요일"],
        "shortDays": ["일", "월", "화", "수", "목", "금", "토"],
        "months": ["1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월"],
        "shortMonths": ["1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월"]
    },
    "error": {
        "accepted": "{0}하지 허용 {1} {2} 시각화는 다음 중 하나를 사용하십시오에 대해 : {3}.",
        "connections": "{0}에 대한 연결이 없음.",
        "data": "자료 없음",
        "dataYear": "{0}에 대한 자료가 없음.",
        "lib": "{0} 시각화는 {1} 라이브러리를로드 할 필요합니다.",
        "libs": "{0} 시각화는 다음과 같은 라이브러리를로드 할 필요 : {1}.",
        "method": "{0} 시각화를 위해 {1} 메서드를 설정해야 한다.",
        "methods": "{0} 시각화를 위해 다음과 같은 메서드를 설정해야한다: {1}."
    },
    "lowercase": [
        ""
    ],
    "method": {
        "active": "활성 세그먼트",
        "color": "색",
        "depth": "깊이",
        "dev": "풀어서",
        "focus": "집중하다",
        "icon": "상",
        "id": "신분증",
        "height": "높이",
        "labels": "라벨",
        "legend": "범례",
        "margin": "여유",
        "messages": "상태 메시지",
        "order": "주문",
        "search": "수색",
        "shape": "모양",
        "size": "크기",
        "style": "스타일",
        "temp": "임시 세그먼트",
        "text": "본문",
        "time": "시각",
        "timeline": "타임 라인",
        "total": "총 세그먼트",
        "type": "유형",
        "width": "폭",
        "x": "X 축",
        "y": "Y 축",
        "zoom": "줌",
        "mode": "모드",
        "mute": "숨김",
        "solo": "독주"
    },
    "time": [
        "날짜",
        "요일",
        "월",
        "시간",
        "년"
    ],
    "visualization": {
        "bubbles": "버블 차트",
        "chart": "차트",
        "geomap": "지도형",
        "line": "선형 그래프",
        "network": "네트워크 그래프",
        "rings": "반지",
        "scatter": "산포도",
        "stacked": "누적 된 지역",
        "treemap": "트리 맵",
        "bar": "막대 차트",
        "box": "박스 플롯",
        "paths": "경로",
        "pie": "파이 차트",
        "table": "탁자"
    },
    "ui": {
        "and": "과",
        "back": "뒤로",
        "collapse": "축소하려면 클릭",
        "error": "오류",
        "expand": "확장하려면 클릭",
        "loading": "로드 중 ...",
        "more": "{0} 이상",
        "moreInfo": "추가 정보를 위해 클릭하십시오",
        "noResults": "일치하는 결과값이 없음 {0}.",
        "primary": "기본 연결",
        "share": "비중",
        "total": "합계",
        "values": "값",
        "including": "...을 포함하여",
        "or": "또는",
        "iqr": "대한 사 분위 범위 {0}",
        "max": "최고",
        "min": "최저한의",
        "percentile": "{0} 백분위 수",
        "tukey_bottom": "바닥 Tukey에",
        "tukey_top": "상단 Tukey에",
        "quartile_first": "1 분위",
        "quartile_third": "3 분위",
        "median": "중앙값"
    },
    "message": {
        "data": "데이터 분석 중",
        "draw": "데이터 시각화 중",
        "initializing": "초기화 {0}",
        "loading": "데이터 로딩 중",
        "tooltipReset": "툴팁을 재설정",
        "ui": "UI 업데이트 중"
    },
    "uppercase": [
        "CEO",
        "최고 경영자",
        "최고 재무 책임자 (CFO)",
        "CFO는",
        "CNC",
        "COO",
        "구구",
        "CPU",
        "CPU에",
        "GDP",
        "HVAC",
        "ID",
        "IT",
        "R & D",
        "TV",
        "UI"
    ]
}
},{}],107:[function(require,module,exports){
module.exports = {
    "format": {
        "decimal": ",",
        "thousands": ".",
        "grouping": [3],
        "currency": ["", " ден."],
        "dateTime": "%A, %e %B %Y г. %X",
        "date": "%d.%m.%Y",
        "time": "%H:%M:%S",
        "periods": ["AM", "PM"],
        "days": ["недела", "понеделник", "вторник", "среда", "четврток", "петок", "сабота"],
        "shortDays": ["нед", "пон", "вто", "сре", "чет", "пет", "саб"],
        "months": ["јануари", "февруари", "март", "април", "мај", "јуни", "јули", "август", "септември", "октомври", "ноември", "декември"],
        "shortMonths": ["јан", "фев", "мар", "апр", "мај", "јун", "јул", "авг", "сеп", "окт", "ное", "дек"]
    },
    "error": {
        "accepted": "{0} не е прифатлива за {1} {2} визуелизација, ве молиме користете една од следниве: {3}.",
        "connections": "не е достапна за врски {0}.",
        "data": "нема податоци",
        "dataYear": "Не е достапен за податоци {0}.",
        "lib": "{0} визуализации бараат вчитување на библиотеката {1} .",
        "libs": "{0} визуализации бараат вчитување на следниве библиотеки: {1}.",
        "method": "{0} визуализации бара поставување на {1} методот.",
        "methods": "{0} визуализации бараат поставување на следниве методи: {1}."
    },
    "lowercase": [
        "a",
        "и",
        "во",
        "но",
        "на",
        "или",
        "да",
        "се",
        "со"
    ],
    "method": {
        "active": "активни сегменти",
        "color": "боја",
        "depth": "длабочина",
        "dev": "опширно",
        "focus": "фокус",
        "icon": "икона",
        "id": "проект",
        "height": "височина",
        "labels": "етикети",
        "legend": "легенда",
        "margin": "маргина",
        "messages": "пораки за статусот",
        "order": "со цел",
        "search": "барај",
        "shape": "форма",
        "size": "големина",
        "style": "стил",
        "temp": "привремени сегменти",
        "text": "текст",
        "time": "време",
        "timeline": "времеплов",
        "total": "Вкупно сегменти",
        "type": "тип",
        "width": "ширина",
        "x": "x оската",
        "y": "Y оската",
        "zoom": "зум",
        "mode": "режим",
        "mute": "се скрие",
        "solo": "изолирање"
    },
    "time": [
        "датум",
        "ден",
        "месец",
        "време",
        "година"
    ],
    "visualization": {
        "bubbles": "меурчиња",
        "chart": "Графикон",
        "geomap": "Гео мапа",
        "line": "Линиски график",
        "network": "мрежа",
        "rings": "прстени",
        "scatter": "Распрскан график",
        "stacked": "Наредена површина",
        "treemap": "Мапа во вид на дрво",
        "bar": "бар шема",
        "box": "правоаголен дијаграм",
        "paths": "патеки",
        "pie": "пита графикон",
        "table": "Табела"
    },
    "ui": {
        "and": "и",
        "back": "назад",
        "collapse": "кликни за да се собере",
        "error": "грешка",
        "expand": "Кликни за проширување",
        "loading": "Се вчитува ...",
        "more": "{0} повеќе",
        "moreInfo": "кликнете за повеќе информации",
        "noResults": "Не се пронајдени резултати за појавување на {0}.",
        "primary": "основните врски",
        "share": "удел",
        "total": "Вкупниот",
        "values": "вредности",
        "including": "Вклучувајќи",
        "or": "или",
        "iqr": "interquartile опсег за {0}",
        "max": "максималната",
        "min": "минимум",
        "percentile": "{0} перцентил",
        "tukey_bottom": "дното Tukey",
        "tukey_top": "Топ Tukey",
        "quartile_first": "првиот квартал",
        "quartile_third": "третиот квартал",
        "median": "средната"
    },
    "message": {
        "data": "анализа на податоци",
        "draw": "цртање на визуелизација",
        "initializing": "иницијализација {0}",
        "loading": "податоци за товарење",
        "tooltipReset": "ресетирање на објаснувањата",
        "ui": "ажурирање на кориничкиот интерфејс"
    },
    "uppercase": [
        "CEO",
        "CEOs",
        "CFO",
        "CFOs",
        "CNC",
        "COO",
        "COOs",
        "CPU",
        "CPUs",
        "GDP",
        "HVAC",
        "ID",
        "IT",
        "R&D",
        "TV",
        "UI"
    ]
}
},{}],108:[function(require,module,exports){
module.exports = {
    "format": {
        "decimal": ",",
        "thousands": ".",
        "grouping": [3],
        "currency": ["R$", ""],
        "dateTime": "%A, %e de %B de %Y. %X",
        "date": "%d/%m/%Y",
        "time": "%H:%M:%S",
        "periods": ["AM", "PM"],
        "days": ["Domingo", "Segunda", "Terça", "Quarta", "Quinta", "Sexta", "Sábado"],
        "shortDays": ["Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sáb"],
        "months": ["Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"],
        "shortMonths": ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"]
    },
    "dev": {
        "accepted": "{0} não é um valor válido para {1}, por favor use um dos seguintes procedimentos: {2}.",
        "noChange": "{0} não foi atualizado porque ele não mudou.",
        "noContainer": "Não foi possível encontrar um local na página correspondente a {0}.",
        "of": "do",
        "oldStyle": "propriedades de estilo para {0} já foram incorporados diretamente no. {1} ().",
        "sameEdge": "bordas não podem vincular a si mesmos. removendo automaticamente borda de auto-referência {0}.",
        "set": "{0} foi definido.",
        "setLong": "{0} foi definido para {1}.",
        "setContainer": "por favor, defina um div utilizando .container()"
    },
    "error": {
        "accepted": "{0} não é um {1} reconhecido para visualizações {2}, favor usar um dos seguintes procedimentos: {3}.",
        "connections": "Não há conexões disponíveis para {0}.",
        "data": "Não há dados disponíveis",
        "dataYear": "Não há dados disponíveis para {0}.",
        "lib": "A visualização {0} necessita que seja carregado a biblioteca {1}.",
        "libs": "A visualização {0} necessita que seja carregado as bibliotecas {1}.",
        "method": "A visualização {0} exige a definição do método {1}.",
        "methods": "A visualização {0} exige a definição dos métodos {1}."
    },
    "lowercase": [
        "um",
        "uma",
        "e",
        "como",
        "em",
        "no",
        "na",
        "mas",
        "por",
        "para",
        "pelo",
        "pela",
        "de",
        "do",
        "da",
        "se",
        "perto",
        "nem",
        "ou",
        "que",
        "o",
        "a",
        "com",
        "v"
    ],
    "method": {
        "active": "segmentos activos",
        "color": "cor",
        "depth": "profundidade",
        "dev": "verboso",
        "focus": "foco",
        "icon": "ícone",
        "id": "identificador",
        "height": "altura",
        "labels": "etiquetas",
        "legend": "legenda",
        "margin": "margem",
        "messages": "mensagens de status",
        "order": "ordenar",
        "search": "pesquisar",
        "shape": "forma",
        "size": "tamanho",
        "style": "estilo",
        "temp": "segmentos temporários",
        "text": "texto",
        "time": "Tempo",
        "timeline": "cronograma",
        "total": "segmentos totais",
        "type": "digitar",
        "width": "largura",
        "x": "eixo x",
        "y": "eixo y",
        "zoom": "zoom",
        "mode": "modo",
        "mute": "ocultar",
        "solo": "isolar"
    },
    "time": [
        "data",
        "dia",
        "mês",
        "hora",
        "ano"
    ],
    "visualization": {
        "bubbles": "Bolhas",
        "chart": "Gráfico",
        "geomap": "Mapa",
        "line": "Gráfico de Linha",
        "network": "Rede",
        "rings": "Anéis",
        "scatter": "dispersão",
        "stacked": "Evolução",
        "treemap": "Tree Map",
        "bar": "Gráfico de Barras",
        "box": "box Plot",
        "paths": "caminhos",
        "pie": "Carta de torta",
        "table": "Mesa"
    },
    "ui": {
        "and": "e",
        "back": "voltar",
        "collapse": "clique para entrar em colapso",
        "error": "erro",
        "expand": "clique para expandir",
        "loading": "carregando ...",
        "more": "mais {0}",
        "moreInfo": "Clique para mais informações",
        "noResults": "nenhum resultado para {0}.",
        "primary": "conexões primárias",
        "share": "participação",
        "total": "total",
        "values": "valores",
        "including": "Incluindo",
        "or": "ou",
        "iqr": "intervalo interquartil para {0}",
        "max": "máximo",
        "min": "mínimo",
        "percentile": "{0} percentil",
        "tukey_bottom": "tukey bottom",
        "tukey_top": "tukey topo",
        "quartile_first": "primeiro quartil",
        "quartile_third": "terceiro quartil",
        "median": "mediana"
    },
    "message": {
        "data": "analisando dados",
        "draw": "desenhando visualização",
        "initializing": "inicializando {0}",
        "loading": "carregando dados",
        "tooltipReset": "redefinindo as dicas",
        "ui": "atualizando interface"
    },
    "uppercase": [
        "CEO",
        "CEOs",
        "CFO",
        "CFOs",
        "CNC",
        "COO",
        "COOs",
        "CPU",
        "CPUs",
        "PIB",
        "HVAC",
        "ID",
        "TI",
        "P&D",
        "TV",
        "IU"
    ]
}
},{}],109:[function(require,module,exports){
module.exports = {
    "format": {
        "decimal": ",",
        "thousands": ".",
        "grouping": [3],
        "currency": ["€", ""],
        "dateTime": "%A, %e de %B de %Y. %X",
        "date": "%d/%m/%Y",
        "time": "%H:%M:%S",
        "periods": ["AM", "PM"],
        "days": ["Domingo", "Segunda", "Terça", "Quarta", "Quinta", "Sexta", "Sábado"],
        "shortDays": ["Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sáb"],
        "months": ["Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"],
        "shortMonths": ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"]
    },
    "error": {
        "accepted": "{0} não é uma {1} válida para a visualização {2}, por favor escolha uma das seguintes: {3}.",
        "connections": "não existem ligações disponíveis para {0}.",
        "data": "não existem dados disponíveis",
        "dataYear": "não existem dados disponíveis para {0}.",
        "lib": "a visualização {0} necessita que a biblioteca {1} seja carregada.",
        "libs": "a visualização {0} necessita que as seguintes bibliotecas sejam carregadas: {1}.",
        "method": "A visualização {0} exige a definição do método {1}.",
        "methods": "A visualização {0} exige a definição dos seguintes métodos {1}."
    },
    "lowercase": [
        "um",
        "uma",
        "e",
        "como",
        "em",
        "no",
        "na",
        "mas",
        "por",
        "para",
        "pelo",
        "pela",
        "de",
        "do",
        "da",
        "se",
        "perto",
        "nem",
        "ou",
        "que",
        "o",
        "a",
        "com",
        "v"
    ],
    "method": {
        "active": "segmentos activos",
        "color": "cor",
        "depth": "profundidade",
        "dev": "verboso",
        "focus": "foco",
        "icon": "ícone",
        "id": "identificador",
        "height": "altura",
        "labels": "etiquetas",
        "legend": "legenda",
        "margin": "margem",
        "messages": "estado",
        "order": "ordenar",
        "search": "pesquisar",
        "shape": "forma",
        "size": "tamanho",
        "style": "estilo",
        "temp": "segmentos temporários",
        "text": "texto",
        "time": "tempo",
        "timeline": "linha temporal",
        "total": "segmentos totais",
        "type": "digitar",
        "width": "largura",
        "x": "eixo dos xx",
        "y": "eixo dos yy",
        "zoom": "zoom",
        "mode": "modo",
        "mute": "ocultar",
        "solo": "isolar"
    },
    "time": [
        "data",
        "dia",
        "mês",
        "hora",
        "ano"
    ],
    "visualization": {
        "bubbles": "Bolhas",
        "chart": "Diagrama",
        "geomap": "Mapa",
        "line": "Gráfico de Linha",
        "network": "Grafo",
        "rings": "Anéis",
        "scatter": "Gráfico de Dispersão",
        "stacked": "Gráfico de Área",
        "treemap": "Tree Map",
        "bar": "Gráfico de Barras",
        "box": "Diagrama de Caixa e Bigodes",
        "paths": "caminhos",
        "pie": "Gráfico de Setores",
        "table": "Mesa"
    },
    "ui": {
        "and": "e",
        "back": "voltar",
        "collapse": "Clique para colapsar",
        "error": "erro",
        "expand": "clique para expandir",
        "loading": "a carregar ...",
        "more": "mais {0}",
        "moreInfo": "Clique para mais informações",
        "noResults": "nenhum resultado para {0}.",
        "primary": "ligações principais",
        "share": "proporção",
        "total": "total",
        "values": "valores",
        "including": "Incluindo",
        "or": "ou",
        "iqr": "intervalo interquartil para {0}",
        "max": "máximo",
        "min": "mínimo",
        "percentile": "{0} percentil",
        "tukey_bottom": "tukey bottom",
        "tukey_top": "tukey topo",
        "quartile_first": "primeiro quartil",
        "quartile_third": "terceiro quartil",
        "median": "mediana"
    },
    "message": {
        "data": "a analisar os dados",
        "draw": "a desenhar a visualização",
        "initializing": "a inicializar {0}",
        "loading": "a carregar os dados",
        "tooltipReset": "a actualizar as caixas de informação",
        "ui": "a actualizar o interface"
    },
    "uppercase": [
        "CEO",
        "CEOs",
        "CFO",
        "CFOs",
        "CNC",
        "COO",
        "COOs",
        "CPU",
        "CPUs",
        "PIB",
        "HVAC",
        "ID",
        "TI",
        "I&D",
        "TV",
        "IU"
    ]
}
},{}],110:[function(require,module,exports){
module.exports = {
    "format": {
        "decimal": ",",
        "thousands": "\xa0",
        "grouping": [3],
        "currency": ["", " руб."],
        "dateTime": "%A, %e %B %Y г. %X",
        "date": "%d.%m.%Y",
        "time": "%H:%M:%S",
        "periods": ["AM", "PM"],
        "days": ["воскресенье", "понедельник", "вторник", "среда", "четверг", "пятница", "суббота"],
        "shortDays": ["вс", "пн", "вт", "ср", "чт", "пт", "сб"],
        "months": ["января", "февраля", "марта", "апреля", "мая", "июня", "июля", "августа", "сентября", "октября", "ноября", "декабря"],
        "shortMonths": ["янв", "фев", "мар", "апр", "май", "июн", "июл", "авг", "сен", "окт", "ноя", "дек"]
    },
    "error": {
        "accepted": "{0} не является обслуживаемым {1} для {2} визуализаций, пожалуйста, используйте одно из следующих действий: {3}.",
        "connections": "нет соединений, доступных для {0}.",
        "data": "данные недоступны",
        "dataYear": "нет данных для {0}.",
        "lib": "{0} визуализаций требуют загрузки {1} библиотеки.",
        "libs": "{0} визуализаций требует загрузки следующие библиотеки: {1}.",
        "method": "{0} визуализаций требуют установки {1} метод.",
        "methods": "{0} визуализаций требуют установки следующих методов: {1}."
    },
    "lowercase": [
        "и",
        "как",
        "в",
        "но",
        "для",
        "из",
        "если в",
        "в",
        "недалеко",
        "ни",
        "на",
        "на",
        "или",
        "в",
        "что",
        "к",
        "с",
        "с помощью",
        "против",
        "против"
    ],
    "method": {
        "active": "активные сегменты",
        "color": "цвет",
        "depth": "глубина",
        "dev": "подробный",
        "focus": "фокус",
        "icon": "значок",
        "id": "Я бы",
        "height": "высота",
        "labels": "надписи",
        "legend": "легенда",
        "margin": "поле",
        "messages": "сообщения о состоянии",
        "order": "заказ",
        "search": "поиск",
        "shape": "форма",
        "size": "размер",
        "style": "стиль",
        "temp": "временные сегменты",
        "text": "текст",
        "time": "время",
        "timeline": "график",
        "total": "всего сегментов",
        "type": "тип",
        "width": "ширина",
        "x": "ось х",
        "y": "ось Y",
        "zoom": "масштаб",
        "mode": "Режим",
        "mute": "скрывать",
        "solo": "изолировать"
    },
    "time": [
        "дата",
        "день недели",
        "месяц",
        "время",
        "год"
    ],
    "visualization": {
        "bubbles": "Пузыри",
        "chart": "Диаграмма",
        "geomap": "Карта Geo",
        "line": "линия Участок",
        "network": "сеть",
        "rings": "Кольца",
        "scatter": "Scatter Plot",
        "stacked": "Stacked Площадь",
        "treemap": "Дерево Карта",
        "bar": "гистограмма",
        "box": "Box Участок",
        "paths": "пути",
        "pie": "Круговая диаграмма",
        "table": "Таблица"
    },
    "ui": {
        "and": "а также",
        "back": "назад",
        "collapse": "нажмите, чтобы свернуть",
        "error": "ошибка",
        "expand": "нажмите, чтобы развернуть",
        "loading": "загрузка ...",
        "more": "{0} более",
        "moreInfo": "нажмите для получения дополнительной информации",
        "noResults": "нет результатов, соответствующих {0}.",
        "primary": "первичные соединения",
        "share": "доля",
        "total": "Всего",
        "values": "значения",
        "including": "в том числе",
        "or": "или",
        "iqr": "межквартильный диапазон для {0}",
        "max": "максимальная",
        "min": "минимальный",
        "percentile": "{0} процентиль",
        "tukey_bottom": "нижний Тьюки",
        "tukey_top": "сверху Тьюки",
        "quartile_first": "первый квартиль",
        "quartile_third": "третий квартиль",
        "median": "медиана"
    },
    "message": {
        "data": "данные анализа",
        "draw": "рисование визуализация",
        "initializing": "инициализацией {0}",
        "loading": "Загрузка данных",
        "tooltipReset": "сброс всплывающих подсказок",
        "ui": "обновление пользовательского интерфейса"
    },
    "uppercase": [
        "ID"
    ]
}
},{}],111:[function(require,module,exports){
module.exports = {
    "format": {
        "decimal": ",",
        "thousands": ".",
        "grouping": [3],
        "currency": ["₺", ""],
        "dateTime": "%A, %e %B %Y г. %X",
        "date": "%d.%m.%Y",
        "time": "%H:%M:%S",
        "periods": ["", " pm"],
        "days": ["pazar", "pazartesi", "salı", "çarşamba", "perşembe", "cuma", "cumartesi"],
        "shortDays": ["pazar", "pazartesi", "salı", "çarşamba", "perşembe", "cuma", "cumartesi"],
        "months": ["Ocak", "Şubat", "Mart", "Nisan", "Mayıs", "Haziran", "Temmuz", "Ağustos", "Eylül", "Ekim", "Kasım", "Aralık"],
        "shortMonths": ["Ocak", "Şubat", "Mart", "Nisan", "Mayıs", "Haziran", "Temmuz", "Ağustos", "Eylül", "Ekim", "Kasım", "Aralık"]
    },
    "dev": {
        "accepted": "{0} {1}, aşağıdakilerden birini kullanın lütfen için kabul değer değildir: {2}.",
        "noChange": "{0} o değişmedi çünkü güncelleştirildi.",
        "noContainer": "sayfa eşleştirme {0} üzerine bir kap bulamıyorum.",
        "of": "arasında",
        "oldStyle": "{0} şimdi doğrudan gömülü olan stil özellikleri. {1} ().",
        "sameEdge": "kenarları kendilerine bağlayamazsınız. otomatik olarak kendi kendine referans kenarı {0} kaldırılıyor.",
        "set": "{0} kurulmuştur.",
        "setLong": "{0} {1} olarak ayarlandı.",
        "setContainer": ") (.container Kullanarak bir kapsayıcı div tanımlamak lütfen"
    },
    "error": {
        "accepted": "{0} değildir kabul edilen {1} {2} görsel, aşağıdakilerden birini kullanın lütfen için: {3}.",
        "connections": "için hiçbir bağlantı {0}.",
        "data": "uygun veri yoktur",
        "dataYear": "için uygun veri yoktur {0}.",
        "lib": "{0} görselleştirme {1} kitaplığı yüklemesinde gerektirir.",
        "libs": "{0} görsel aşağıdaki kitaplıkları yüklemek gerektirir: {1}.",
        "method": "{0} görselleştirme {1} yöntemini ayarlama gerektirir.",
        "methods": "{0} görsel aşağıdaki yöntemleri ayarı gerektirir: {1}."
    },
    "lowercase": [
        "A",
        "bir",
        "ve benzeri gibi",
        "en ancak tarafından için",
        "IF bölgesi içine yakın",
        "ne",
        "ve",
        "üzerinde",
        "ya da",
        "bu",
        "her üzerine",
        "için olan ile",
        "vs vs."
    ],
    "method": {
        "active": "aktif bölümler",
        "color": "renk",
        "depth": "derinlik",
        "dev": "gereksiz sözlerle dolu",
        "focus": "odak",
        "icon": "ikon",
        "id": "İD",
        "height": "yükseklik",
        "labels": "katmanlar",
        "legend": "lejant",
        "margin": "kenar",
        "messages": "durum iletileri",
        "order": "sipariş",
        "search": "arama",
        "shape": "şekil",
        "size": "boyut",
        "style": "stil",
        "temp": "geçici segmentler",
        "text": "Metin",
        "time": "zaman",
        "timeline": "zaman çizelgesi",
        "total": "toplam segmentler",
        "type": "tip",
        "width": "genişlik",
        "x": "x ekseni",
        "y": "y ekseni",
        "zoom": "yakınlaştırma",
        "mode": "kip",
        "mute": "sakla",
        "solo": "solo"
    },
    "time": [
        "tarih",
        "gün",
        "ay",
        "saat",
        "yıl"
    ],
    "visualization": {
        "bubbles": "baloncuklar",
        "chart": "Grafik",
        "geomap": "coğrafi Harita",
        "line": "çizgi Arsa",
        "network": "Ağ",
        "rings": "halkalar",
        "scatter": "Dağılım grafiği",
        "stacked": "yığılmış Alan",
        "treemap": "ağaç Haritası",
        "bar": "Bar grafik",
        "box": "kutu Grafiği",
        "paths": "yollar",
        "pie": "Pasta grafik",
        "table": "tablo"
    },
    "ui": {
        "and": "ve",
        "back": "geri",
        "collapse": "daraltmak için tıklayın",
        "error": "hata",
        "expand": "Genişletmek için tıklayın",
        "loading": "Yükleniyor...",
        "more": "{0} tane daha",
        "moreInfo": "Daha fazla bilgi için tıklayın",
        "noResults": "Eşleşen sonuç yok {0}.",
        "primary": "öncelikli bağlantılar",
        "share": "paylaş",
        "total": "Genel Toplam",
        "values": "değerler",
        "including": "dahil olmak üzere",
        "or": "veya",
        "iqr": "için çeyrekler arası aralık {0}",
        "max": "maksimum",
        "min": "asgari",
        "percentile": "{0} yüzdelik",
        "tukey_bottom": "alt tukey",
        "tukey_top": "üst tukey",
        "quartile_first": "ilk çeyrek",
        "quartile_third": "üçüncü çeyrek",
        "median": "medyan"
    },
    "message": {
        "data": "analiz verisi",
        "draw": "çizim görselleştirme",
        "initializing": "başlatılıyor {0}",
        "loading": "veri yükleniyor",
        "tooltipReset": "ipuçları sıfırlama",
        "ui": "güncelleme ui"
    },
    "uppercase": [
        "CEO",
        "CEO'lar",
        "CFO",
        "CFO",
        "CNC",
        "COO",
        "COO",
        "CPU",
        "CPU",
        "GSYİH",
        "HVAC",
        "kimlik",
        "bilişim",
        "Ar-Ge",
        "TV",
        "UI"
    ]
}
},{}],112:[function(require,module,exports){
module.exports = {
    "format": {
        "decimal": ".",
        "thousands": ",",
        "grouping": [3],
        "currency": ["¥", ""],
        "dateTime": "%A %B %e %Y %X",
        "date": "%Y/%-m/%-d",
        "time": "%H:%M:%S",
        "periods": ["上午", "下午"],
        "days": ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
        "shortDays": ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
        "months": ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
        "shortMonths": ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"]
    },
    "error": {
        "accepted": "{0}对于{2}的可视化效果并不是一个可接受的{1}, 请使用如下的一个：{3}.",
        "connections": "没有对{0}可用的连接。",
        "data": "无可用数据",
        "dataYear": "没有数据对{0}可用。",
        "lib": "{0}的可视化要求装载{1}库。",
        "libs": "{0}的可视化需要加载以下库：{1}。",
        "method": "{0}的可视化要求设置{1}方法。",
        "methods": "{0}的可视化要求设置以下方法：{1}。"
    },
    "lowercase": [
        "一个",
        "和",
        "在",
        "但是",
        "在...里",
        "的",
        "或者",
        "这",
        "向",
        "与...一起"
    ],
    "method": {
        "active": "活跃段",
        "color": "颜色",
        "depth": "深度",
        "dev": "详细",
        "focus": "焦点",
        "icon": "图标",
        "id": "身份认证",
        "height": "高度",
        "labels": "标签",
        "legend": "图例注释",
        "margin": "外边距",
        "messages": "状态消息",
        "order": "规则",
        "search": "搜索",
        "shape": "形状",
        "size": "大小",
        "style": "样式",
        "temp": "暂时性区段",
        "text": "文本",
        "time": "时间",
        "timeline": "时间轴",
        "total": "总段",
        "type": "类型",
        "width": "宽度",
        "x": "X轴",
        "y": "Y轴",
        "zoom": "缩放",
        "mode": "模式",
        "mute": "隐藏",
        "solo": "隔离"
    },
    "time": [
        "日",
        "星期",
        "月",
        "时间",
        "年"
    ],
    "visualization": {
        "bubbles": "气泡",
        "chart": "图表",
        "geomap": "地理地图",
        "line": "线图",
        "network": "网络",
        "rings": "特性",
        "scatter": "散点图",
        "stacked": "堆积面积图",
        "treemap": "树图",
        "bar": "条图",
        "box": "箱形图",
        "paths": "路径",
        "pie": "饼形图",
        "table": "表"
    },
    "ui": {
        "and": "和",
        "back": "后面",
        "collapse": "点击合并",
        "error": "错误",
        "expand": "单击以展开",
        "loading": "载入中...",
        "more": "{0}更多",
        "moreInfo": "点击了解更多信息",
        "noResults": "没有结果匹配{0}。",
        "primary": "主要连接",
        "share": "共享",
        "total": "总",
        "values": "值",
        "including": "包括",
        "or": "要么",
        "iqr": "间距范围为{0}",
        "max": "最大值",
        "min": "最低限度",
        "percentile": "{0}百分",
        "tukey_bottom": "底部杜克",
        "tukey_top": "顶部杜克",
        "quartile_first": "第一个四分位数",
        "quartile_third": "第三个四分位数",
        "median": "中位数"
    },
    "message": {
        "data": "分析数据",
        "draw": "绘制可视化",
        "initializing": "初始化{0}",
        "loading": "加载数据",
        "tooltipReset": "重置工具提示",
        "ui": "更新UI"
    },
    "uppercase": [
        "CEO",
        "CEOs",
        "CFO",
        "CFOs",
        "CNC",
        "COO",
        "COOs",
        "CPU",
        "CPUs",
        "GDP",
        "HVAC",
        "ID",
        "电视",
        "用户界面",
        "研发"
    ]
}
},{}],113:[function(require,module,exports){
(function() {
    module.exports = {
        ar_SA: require("./languages/ar_SA.js"),
        de_DE: require("./languages/de_DE.js"),
        en_US: require("./languages/en_US.js"),
        es_ES: require("./languages/es_ES.js"),
        fr_FR: require("./languages/fr_FR.js"),
        ko_KR: require("./languages/ko_KR.js"),
        mk_MK: require("./languages/mk_MK.js"),
        pt_BR: require("./languages/pt_BR.js"),
        pt_PT: require("./languages/pt_PT.js"),
        ru_RU: require("./languages/ru_RU.js"),
        zh_CN: require("./languages/tr_TR.js"),
        zh_CN: require("./languages/zh_CN.js")
    };

}).call(this);
},{"./languages/ar_SA.js":101,"./languages/de_DE.js":102,"./languages/en_US.js":103,"./languages/es_ES.js":104,"./languages/fr_FR.js":105,"./languages/ko_KR.js":106,"./languages/mk_MK.js":107,"./languages/pt_BR.js":108,"./languages/pt_PT.js":109,"./languages/ru_RU.js":110,"./languages/tr_TR.js":111,"./languages/zh_CN.js":112}],114:[function(require,module,exports){
(function() {
    var checkObject, copy, createFunction, initialize, print, process, setMethod, stringFormat, validObject;

    copy = require("../../util/copy.js");

    print = require("../console/print.js");

    process = require("./process/detect.js");

    setMethod = require("./set.js");

    stringFormat = require("../../string/format.js");

    validObject = require("../../object/validate.js");

    module.exports = function(vars, methods) {
        var method, obj, results;
        results = [];
        for (method in methods) {
            obj = methods[method];
            vars[method] = copy(obj);
            vars[method].initialized = initialize(vars, vars[method], method);
            results.push(vars.self[method] = createFunction(vars, method));
        }
        return results;
    };

    initialize = function(vars, obj, method, p) {
        var o;
        obj.previous = false;
        obj.changed = false;
        obj.initialized = false;
        obj.callback = false;
        if ("init" in obj && (!("value" in obj))) {
            obj.value = obj.init(vars);
            delete obj.init;
        }
        if ("process" in obj) {
            obj.value = process(vars, obj, obj.value);
        }
        for (o in obj) {
            if (o === "global") {
                if (!(method in vars)) {
                    vars[method] = [];
                }
            } else if (o !== "value") {
                if (validObject(obj[o])) {
                    initialize(vars, obj[o], o, method);
                }
            }
        }
        return true;
    };

    createFunction = function(vars, key) {
        return function(user, callback) {
            var accepted, checkFont, checkValue, fontAttr, fontAttrValue, s, starting, str;
            accepted = "accepted" in vars[key] ? vars[key].accepted : null;
            if (typeof accepted === "function") {
                accepted = accepted(vars);
            }
            if (!(accepted instanceof Array)) {
                accepted = [accepted];
            }
            if (user === Object) {
                return vars[key];
            } else if (!arguments.length && accepted.indexOf(void 0) < 0) {
                if ("value" in vars[key]) {
                    return vars[key].value;
                } else {
                    return vars[key];
                }
            }
            if (key === "style" && typeof user === "object") {
                str = vars.format.locale.value.dev.oldStyle;
                for (s in user) {
                    print.warning(stringFormat(str, "\"" + s + "\"", s), s);
                    vars.self[s](user[s]);
                }
            }
            if (key === "font") {
                if (typeof user === "string") {
                    user = {
                        family: user
                    };
                }
                starting = true;
                checkValue = function(o, a, m, v) {
                    if (validObject(o[m]) && a in o[m]) {
                        if (validObject(o[m][a])) {
                            if (o[m][a].process) {
                                o[m][a].value = o[m][a].process(v);
                            } else {
                                o[m][a].value = v;
                            }
                        } else {
                            o[m][a] = v;
                        }
                    }
                };
                checkFont = function(o, a, v) {
                    var m;
                    if (validObject(o)) {
                        if (starting) {
                            for (m in o) {
                                checkValue(o, a, m, v);
                            }
                        } else if ("font" in o) {
                            checkValue(o, a, "font", v);
                        }
                        starting = false;
                        for (m in o) {
                            checkFont(o[m], a, v);
                        }
                    }
                };
                for (fontAttr in user) {
                    fontAttrValue = user[fontAttr];
                    if (fontAttr !== "secondary") {
                        if (validObject(fontAttrValue)) {
                            fontAttrValue = fontAttrValue.value;
                        }
                        if (fontAttrValue) {
                            checkFont(vars, fontAttr, fontAttrValue);
                        }
                    }
                }
            }
            checkObject(vars, key, vars, key, user);
            if (typeof callback === "function") {
                vars[key].callback = callback;
            }
            if (vars[key].chainable === false) {
                return vars[key].value;
            } else {
                return vars.self;
            }
        };
    };

    checkObject = function(vars, method, object, key, value) {
        var approvedObject, d, objectOnly, passingObject;
        if (["accepted", "changed", "initialized", "previous", "process"].indexOf(key) < 0) {
            passingObject = validObject(value);
            objectOnly = validObject(object[key]) && "objectAccess" in object[key] && object[key]["objectAccess"] === false;
            approvedObject = passingObject && (objectOnly || ((!("value" in value)) && ((!validObject(object[key])) || (!(d3.keys(value)[0] in object[key])))));
            if (value === null || !passingObject || approvedObject) {
                setMethod(vars, method, object, key, value);
            } else if (passingObject) {
                for (d in value) {
                    checkObject(vars, method, object[key], d, value[d]);
                }
            }
        }
    };

}).call(this);
},{"../../object/validate.js":207,"../../string/format.js":208,"../../util/copy.js":242,"../console/print.js":83,"./process/detect.js":122,"./set.js":128}],115:[function(require,module,exports){
(function() {
    module.exports = function(g) {
        if (!g) {
            g = false;
        }
        return {
            accepted: [false, Array, Function, Number, Object, String],
            callback: {
                accepted: [false, Function],
                value: false
            },
            global: g,
            process: Array,
            value: []
        };
    };

}).call(this);
},{}],116:[function(require,module,exports){
(function() {
    var rtl;

    rtl = require("../../../client/rtl.js");

    module.exports = function(align) {
        var accepted;
        accepted = ["left", "center", "right"];
        if (align === false) {
            accepted.unshift(false);
        }
        if (accepted.indexOf(align) < 0) {
            align = "left";
        }
        return {
            accepted: accepted,
            process: function(value) {
                if (rtl) {
                    if (value === "left") {
                        return "right";
                    } else {
                        if (value === "right") {
                            return "left";
                        } else {
                            return value;
                        }
                    }
                } else {
                    return value;
                }
            },
            value: align
        };
    };

}).call(this);
},{"../../../client/rtl.js":71}],117:[function(require,module,exports){
(function() {
    module.exports = function(decoration) {
        var accepted;
        accepted = ["line-through", "none", "overline", "underline"];
        if (decoration === false) {
            accepted.unshift(false);
        }
        if (accepted.indexOf(decoration) < 0) {
            decoration = "none";
        }
        return {
            accepted: accepted,
            value: decoration
        };
    };

}).call(this);
},{}],118:[function(require,module,exports){
// Constructs font family property using the validate function
(function() {
    var fira, validate;

    validate = require("../../../font/validate.js");

    fira = ["Fira Sans", "sans-serif"];

    module.exports = function(family) {
        if (family === void 0) {
            family = fira;
        }
        return {
            process: validate,
            value: family
        };
    };

}).call(this);
},{"../../../font/validate.js":137}],119:[function(require,module,exports){
(function() {
    module.exports = function(position) {
        var accepted;
        accepted = ["top", "middle", "bottom"];
        if (position === false) {
            accepted.unshift(false);
        }
        if (accepted.indexOf(position) < 0) {
            position = "bottom";
        }
        return {
            accepted: accepted,
            mapping: {
                top: "0ex",
                middle: "0.5ex",
                bottom: "1ex"
            },
            process: function(value) {
                this.text = value;
                return this.mapping[value];
            },
            value: position
        };
    };

}).call(this);
},{}],120:[function(require,module,exports){
(function() {
    module.exports = function(transform) {
        var accepted;
        accepted = ["capitalize", "lowercase", "none", "uppercase"];
        if (transform === false) {
            accepted.unshift(false);
        }
        if (accepted.indexOf(transform) < 0) {
            transform = "none";
        }
        return {
            accepted: accepted,
            value: transform
        };
    };

}).call(this);
},{}],121:[function(require,module,exports){
// Function to process data by url or element
(function() {
    module.exports = function(value, vars, method) {
        var elem;
        if (vars.history) {
            vars.history.reset();
        }
        if (value.constructor === String) {
            if (value.indexOf("/") >= 0) {
                method.url = value;
                return [];
            }
            elem = d3.selectAll(value);
            if (elem.size()) {
                return elem;
            }
            if (value.indexOf(".") >= 0) {
                method.url = value;
            }
            return [];
        } else {
            return value;
        }
    };

}).call(this);
},{}],122:[function(require,module,exports){
// Process object's value
(function() {
    var copy, update;

    copy = require("../../../util/copy.js");

    update = require("../../../array/update.js");

    module.exports = function(vars, object, value) {
        if (object.process === Array) {
            return update(copy(object.value), value);
        } else if (typeof object.process === "object" && typeof value === "string") {
            return object.process[value];
        } else if (typeof object.process === "function") {
            return object.process(value, vars, object);
        } else {
            return value;
        }
    };

}).call(this);
},{"../../../array/update.js":66,"../../../util/copy.js":242}],123:[function(require,module,exports){
(function() {
    var stylesheet;

    stylesheet = require("../../../client/css.js");

    module.exports = function(value, vars, method) {
        if (value === false || value.indexOf("fa-") < 0 || (value.indexOf("fa-") === 0 && stylesheet("font-awesome"))) {
            return value;
        } else {
            return method.fallback;
        }
    };

}).call(this);
},{"../../../client/css.js":67}],124:[function(require,module,exports){
(function() {
    module.exports = function(value, self) {
        var i, j, k, l, len, len1, len2, len3, m, results, side, sides, v;
        if (typeof value === "string") {
            value = value.split(" ");
            for (i = j = 0, len = value.length; j < len; i = ++j) {
                v = value[i];
                value[i] = parseFloat(v, 10);
            }
            if (value.length === 1) {
                value = value[0];
            } else if (value.length === 2) {
                value = {
                    top: value[0],
                    right: value[1],
                    bottom: value[0],
                    left: value[1]
                };
            } else if (value.length === 3) {
                value = {
                    top: value[0],
                    right: value[1],
                    bottom: value[2],
                    left: value[1]
                };
            } else if (value.length === 4) {
                value = {
                    top: value[0],
                    right: value[1],
                    bottom: value[2],
                    left: value[3]
                };
            } else {
                value = 0;
            }
        }
        sides = ["top", "right", "bottom", "left"];
        if (typeof value === "number") {
            for (k = 0, len1 = sides.length; k < len1; k++) {
                side = sides[k];
                self[side] = value;
            }
        } else {
            for (l = 0, len2 = sides.length; l < len2; l++) {
                side = sides[l];
                self[side] = value[side];
            }
        }
        self.css = "";
        results = [];
        for (i = m = 0, len3 = sides.length; m < len3; i = ++m) {
            side = sides[i];
            if (i) {
                self.css += " ";
            }
            results.push(self.css += self[side] + "px");
        }
        return results;
    };

}).call(this);
},{}],125:[function(require,module,exports){
(function() {
    var contains, format, list, print;

    contains = require("../../array/contains.js");

    format = require("../../string/format.js");

    list = require("../../string/list.js");

    print = require("../console/print.js");

    module.exports = function(vars, accepted, value, method, text) {
        var a, allowed, app, i, len, recs, str, val;
        if (typeof accepted === "function") {
            accepted = accepted(vars);
        }
        if (!(accepted instanceof Array)) {
            accepted = [accepted];
        }
        allowed = contains(accepted, value);
        if (allowed === false && value !== void 0) {
            recs = [];
            val = JSON.stringify(value);
            if (typeof value !== "string") {
                val = "\"" + val + "\"";
            }
            for (i = 0, len = accepted.length; i < len; i++) {
                a = accepted[i];
                if (typeof a === "string") {
                    recs.push("\"" + a + "\"");
                } else if (typeof a === "function") {
                    recs.push(a.toString().split("()")[0].substring(9));
                } else if (a === void 0) {
                    recs.push("undefined");
                } else {
                    recs.push(JSON.stringify(a));
                }
            }
            recs = list(recs, vars.format.locale.value.ui.or);
            if (vars.type && ["mode", "shape"].indexOf(method) >= 0) {
                str = vars.format.locale.value.error.accepted;
                app = vars.format.locale.value.visualization[vars.type.value] || vars.type.value;
                print.warning(format(str, val, method, app, recs), method);
            } else {
                str = vars.format.locale.value.dev.accepted;
                print.warning(format(str, val, text, recs), method);
            }
        }
        return !allowed;
    };

}).call(this);
},{"../../array/contains.js":64,"../../string/format.js":208,"../../string/list.js":209,"../console/print.js":83}],126:[function(require,module,exports){
(function() {
    module.exports = function(rendering) {
        var accepted;
        accepted = ["auto", "optimizeSpeed", "crispEdges", "geometricPrecision"];
        if (!(accepted.indexOf(rendering) >= 0)) {
            rendering = "crispEdges";
        }
        return {
            accepted: accepted,
            value: rendering
        };
    };

}).call(this);
},{}],127:[function(require,module,exports){
// Resets certain keys in global variables
(function() {
    var reset, validObject;

    validObject = require("../../object/validate.js");

    reset = function(obj, method) {
        var o;
        if (obj.changed) {
            obj.changed = false;
        }
        if (method === "draw") {
            obj.frozen = false;
            obj.update = true;
            obj.first = false;
        }
        for (o in obj) {
            if (o.indexOf("d3po") < 0 && validObject(obj[o])) {
                reset(obj[o], o);
            }
        }
    };

    module.exports = reset;

}).call(this);
},{"../../object/validate.js":207}],128:[function(require,module,exports){
// Sets a method's value
(function() {
    var copy, d3selection, mergeObject, print, process, rejected, stringFormat, updateArray, validObject;

    copy = require("../../util/copy.js");

    d3selection = require("../../util/d3selection.js");

    validObject = require("../../object/validate.js");

    mergeObject = require("../../object/merge.js");

    print = require("../console/print.js");

    process = require("./process/detect.js");

    rejected = require("./rejected.js");

    stringFormat = require("../../string/format.js");

    updateArray = require("../../array/update.js");

    module.exports = function(vars, method, object, key, value) {
        var accepted, c, callback, d3object, hasValue, id, k, longArray, n, parentKey, str, text, typeFunction, valString;
        if (key === "value" || !key || key === method) {
            text = "." + method + "()";
        } else {
            text = "\"" + key + "\" " + vars.format.locale.value.dev.of + " ." + method + "()";
        }
        if (key === "value" && "accepted" in object) {
            accepted = object.accepted;
        } else if (validObject(object[key]) && "accepted" in object[key]) {
            accepted = object[key].accepted;
        } else {
            accepted = [value];
        }
        if (!rejected(vars, accepted, value, method, text)) {
            if (validObject(object[key]) && "value" in object[key]) {
                parentKey = key;
                object = object[key];
                key = "value";
            }
            if (key === "value" && "process" in object) {
                value = process(vars, object, value);
            }
            if ((!(object[key] instanceof Array)) && object[key] === value && value !== void 0) {
                str = vars.format.locale.value.dev.noChange;
                if (vars.dev.value) {
                    print.comment(stringFormat(str, text));
                }
            } else {
                object.changed = true;
                if (object.loaded) {
                    object.loaded = false;
                }
                if ("history" in vars && method !== "draw") {
                    c = copy(object);
                    c.method = method;
                    vars.history.chain.push(c);
                }
                object.previous = object[key];
                if ("id" in vars && key === "value" && "nesting" in object) {
                    if (method !== "id") {
                        if (typeof object.nesting !== "object") {
                            object.nesting = {};
                        }
                        if (validObject(value)) {
                            for (id in value) {
                                if (typeof value[id] === "string") {
                                    value[id] = [value[id]];
                                }
                            }
                            object.nesting = mergeObject(object.nesting, value);
                            if (!(vars.id.value in object.nesting)) {
                                object.nesting[vars.id.value] = value[d3.keys(value)[0]];
                            }
                        } else if (value instanceof Array) {
                            object.nesting[vars.id.value] = value;
                        } else {
                            object.nesting[vars.id.value] = [value];
                        }
                        object[key] = object.nesting[vars.id.value][0];
                    } else {
                        if (value instanceof Array) {
                            object.nesting = value;
                            if ("depth" in vars && vars.depth.value < value.length) {
                                object[key] = value[vars.depth.value];
                            } else {
                                object[key] = value[0];
                                if ("depth" in vars) {
                                    vars.depth.value = 0;
                                }
                            }
                        } else {
                            object[key] = value;
                            object.nesting = [value];
                            if ("depth" in vars) {
                                vars.depth.value = 0;
                            }
                        }
                    }
                } else if (method === "depth") {
                    if (value >= vars.id.nesting.length) {
                        vars.depth.value = vars.id.nesting.length - 1;
                    } else if (value < 0) {
                        vars.depth.value = 0;
                    } else {
                        vars.depth.value = value;
                    }
                    vars.id.value = vars.id.nesting[vars.depth.value];
                    if (typeof vars.text.nesting === "object") {
                        n = vars.text.nesting[vars.id.value];
                        if (n) {
                            vars.text.nesting[vars.id.value] = typeof n === "string" ? [n] : n;
                            vars.text.value = (n instanceof Array ? n[0] : n);
                        }
                    }
                } else if (validObject(object[key]) && validObject(value)) {
                    object[key] = mergeObject(object[key], value);
                } else {
                    object[key] = value;
                }
                if (key === "value" && object.global) {
                    hasValue = object[key].length > 0;
                    k = parentKey || key;
                    if (k in vars && ((hasValue && vars.data[k].indexOf(method) < 0) || (!hasValue && vars.data[k].indexOf(method) >= 0))) {
                        vars.data[k] = updateArray(vars.data[k], method);
                    }
                }
                if (key === "value" && object.dataFilter && vars.data && vars.data.filters.indexOf(method) < 0) {
                    vars.data.filters.push(method);
                }
                if (vars.dev.value && object.changed && object[key] !== void 0) {
                    longArray = object[key] instanceof Array && object[key].length > 10;
                    d3object = d3selection(object[key]);
                    typeFunction = typeof object[key] === "function";
                    valString = (!longArray && !d3object && !typeFunction ? (typeof object[key] === "string" ? object[key] : JSON.stringify(object[key])) : null);
                    if (valString !== null && valString.length < 260) {
                        str = vars.format.locale.value.dev.setLong;
                        print.log(stringFormat(str, text, "\"" + valString + "\""));
                    } else {
                        str = vars.format.locale.value.dev.set;
                        print.log(stringFormat(str, text));
                    }
                }
            }
            if (key === "value" && object.callback && !object.url) {
                callback = typeof object.callback === "function" ? object.callback : object.callback.value;
                if (callback) {
                    callback(value, vars.self);
                }
            }
        }
    };

}).call(this);
},{"../../array/update.js":66,"../../object/merge.js":206,"../../object/validate.js":207,"../../string/format.js":208,"../../util/copy.js":242,"../../util/d3selection.js":243,"../console/print.js":83,"./process/detect.js":122,"./rejected.js":125}],129:[function(require,module,exports){
var print = require("../console/print.js"),
    stringFormat = require("../../string/format.js")

//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Cleans edges list and populates nodes list if needed
//-------------------------------------------------------------------
module.exports = function(vars) {

    if (vars.dev.value) {
        var timerString = "analyzing edges list"
        print.time(timerString)
    }

    var appReqs = vars.types[vars.type.value].requirements
    if (!(appReqs instanceof Array)) appReqs = [appReqs]
    var createNodes = appReqs.indexOf("nodes") >= 0 && !vars.nodes.value

    if (createNodes) {
        vars.nodes.value = []
        var placed = []
        vars.nodes.changed = true
    }

    vars.edges.value.forEach(function(e) {

        ["source", "target"].forEach(function(dir) {

            var dirType = typeof e[vars.edges[dir]];

            if (dirType !== "object") {
                if (dirType === "number" && !createNodes && vars.data.keys[vars.id.value] !== "number") {
                    e[vars.edges[dir]] = vars.nodes.value[e[vars.edges[dir]]];
                } else {
                    if (createNodes && placed.indexOf(e[vars.edges[dir]]) >= 0) {
                        e[vars.edges[dir]] = vars.nodes.value.filter(function(n) {
                            return n[vars.id.value] === e[vars.edges[dir]];
                        })[0];
                    } else {
                        var obj = {};
                        obj[vars.id.value] = e[vars.edges[dir]];
                        e[vars.edges[dir]] = obj;
                    }
                }
            }

            var newNode = e[vars.edges[dir]];
            if (createNodes) {
                if (placed.indexOf(newNode[vars.id.value]) < 0) {
                    placed.push(newNode[vars.id.value]);
                    vars.nodes.value.push(newNode);
                }
            }
        });

        if (!("keys" in vars.data)) {
            vars.data.keys = {};
        }

        if (!(vars.id.value in vars.data.keys)) {
            vars.data.keys[vars.id.value] = typeof e[vars.edges.source][vars.id.value];
        }

    });

    vars.edges.value = vars.edges.value.filter(function(e) {

        var source = e[vars.edges.source][vars.id.value],
            target = e[vars.edges.target][vars.id.value]

        if (source === target) {
            var str = vars.format.locale.value.dev.sameEdge
            print.warning(stringFormat(str, "\"" + source + "\""), "edges")
            return false
        } else {
            return true
        }

    })

    vars.edges.linked = true

    if (vars.dev.value) print.timeEnd(timerString)

}
},{"../../string/format.js":208,"../console/print.js":83}],130:[function(require,module,exports){
var hideElement = require("./hideelement.js");

// Parses an HTML element for data
module.exports = function(vars) {

    var attributes = [vars.color.value, vars.icon.value, vars.keywords.value, vars.alt.value, "style"]

    if (!vars.text.value) {
        vars.self.text("text")
    }

    attributes = attributes.concat(vars.id.nesting)

    function get_attributes(obj, elem) {
        [].forEach.call(elem.attributes, function(attr) {
            if (/^data-/.test(attr.name)) {
                var camelCaseName = attr.name.substr(5).replace(/-(.)/g, function($0, $1) {
                    return $1.toUpperCase();
                });
                obj[camelCaseName] = attr.value;
            }
        })

        attributes.forEach(function(a) {

            if (elem.getAttribute(a) !== null) {
                obj[a] = elem.getAttribute(a)
            }

        })

    }

    vars.self.data({
        "element": vars.data.value
    })

    var elementTag = vars.data.element.value.node().tagName.toLowerCase(),
        elementType = vars.data.element.value.attr("type"),
        elementData = []

    if (elementTag === "select") {

        var elementID = vars.data.element.value.node().id
        if (elementID) {
            vars.self.container({
                "id": elementID
            })
        }

        vars.data.element.value.selectAll("option")
            .each(function(o, i) {

                var data_obj = {}

                data_obj.text = d3.select(this).text();

                get_attributes(data_obj, this)

                elementData.push(data_obj)

                if (this.selected) {
                    for (var i = vars.id.nesting.length - 1; i >= 0; i--) {
                        var level = vars.id.nesting[i]
                        if (level in data_obj) {
                            vars.self.focus(data_obj[level])
                            break
                        }
                    }
                }

            })

    } else if (elementTag === "input" && elementType === "radio") {

        var elementName = vars.data.element.value.node().getAttribute("name")
        if (elementName) {
            vars.self.container({
                "id": elementName
            })
        }

        vars.data.element.value
            .each(function(o, i) {

                var data_obj = {}

                get_attributes(data_obj, this)

                var id = data_obj[vars.id.value] || this.id || false

                if (id && isNaN(parseFloat(id))) {

                    var label = d3.select("label[for=" + id + "]")

                    if (!label.empty()) {
                        data_obj.text = label.html()
                        label.call(hideElement)
                    }

                }

                elementData.push(data_obj)

                if (this.checked) {
                    vars.self.focus(data_obj[vars.id.value])
                }

            })

    }

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Get focus from data, if it hasn't been found or set.
    //----------------------------------------------------------------------------
    if (!vars.focus.value.length && elementData.length) {

        vars.data.element.value.node().selectedIndex = 0
        vars.self.focus(elementData[0][vars.id.value])

    }

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // If a <legend> element exists, use it as the title.
    //----------------------------------------------------------------------------
    var elementLegend = d3.select("legend[for=" + vars.container.id + "]")
    if (!elementLegend.empty()) {

        vars.self.title(elementLegend.html())
        elementLegend.call(hideElement)

    }

    var containerTag = vars.container.value ?
        vars.container.value.node().tagName.toLowerCase() : false

    if (vars.container.value === false || containerTag === "body") {
        vars.container.value = d3.select(vars.data.element.value.node().parentNode)
    }

    vars.data.element.value.call(hideElement)

    return elementData

};
},{"./hideelement.js":131}],131:[function(require,module,exports){
module.exports = function(elem) {

    elem
        .style("position", "absolute", "important")
        .style("clip", "rect(1px 1px 1px 1px)", "important")
        .style("clip", "rect(1px, 1px, 1px, 1px)", "important")
        .style("width", "1px", "important")
        .style("height", "1px", "important")
        .style("margin", "-1px", "important")
        .style("padding", "0", "important")
        .style("border", "0", "important")
        .style("overflow", "hidden", "important");

}
},{}],132:[function(require,module,exports){
var print = require("../console/print.js");

// Calculates node positions, if needed for network.
module.exports = function(vars) {

    if (vars.type.value === "network") {

        if (vars.dev.value) {
            var timerString = "analyzing node positions";
            print.time(timerString);
        }

        var set = vars.nodes.value.filter(function(n) {
            return typeof n.x === "number" && typeof n.y === "number";
        }).length;

        if (set === vars.nodes.value.length) {
            vars.nodes.positions = true;
        } else {

            var forceLink = d3.forceLink(vars.edges.value);
            var strength = vars.edges.strength.value;
            if (strength) {
                if (typeof strength === "string") {
                    forceLink.strength(function(e) {
                        return e[strength];
                    });
                } else {
                    forceLink.strength(strength);
                }
            }

            var force = d3.forceSimulation(vars.nodes.value)
                .force("center", d3.forceCenter([vars.width.viz / 2, vars.height.viz / 2]))
                .force("links", forceLink);

            var iterations = 50,
                threshold = 0.01;

            for (var i = iterations; i > 0; --i) {
                force.tick();
                if (force.alpha() < threshold) {
                    break;
                }
            }
            force.stop();

            vars.nodes.positions = true;

        }

        if (vars.dev.value) print.timeEnd(timerString);

    }

}
},{"../console/print.js":83}],133:[function(require,module,exports){
// Finds the best regression model that fits the data using Bayesian Information Criteria
(function() {
    var numeric;

    numeric = require('numeric');

    module.exports = function(data, options) {
        var N, X, Xfulltr, Xtr, bestResult, beta_hat, bic, degree, degrees, i, j, k, l, loglike, m, point, prevBIC, q, ref, ref1, residual, sigma2, sse, y, y_hat;
        if (options == null) {
            options = {};
        }
        if (options.maxDegree == null) {
            options.maxDegree = 5;
        }
        N = data.length;
        prevBIC = Number.MAX_VALUE;
        bestResult = null;
        Xfulltr = (function() {
            var l, ref, results;
            results = [];
            for (degree = l = 1, ref = options.maxDegree + 1; 1 <= ref ? l < ref : l > ref; degree = 1 <= ref ? ++l : --l) {
                results.push((function() {
                    var len, m, results1;
                    results1 = [];
                    for (m = 0, len = data.length; m < len; m++) {
                        point = data[m];
                        results1.push(Math.pow(point[0], degree));
                    }
                    return results1;
                })());
            }
            return results;
        })();
        y = (function() {
            var l, len, results;
            results = [];
            for (l = 0, len = data.length; l < len; l++) {
                point = data[l];
                results.push(point[1]);
            }
            return results;
        })();
        for (i = l = 0, ref = 1 << options.maxDegree; 0 <= ref ? l < ref : l > ref; i = 0 <= ref ? ++l : --l) {
            Xtr = [
                (function() {
                    var m, ref1, results;
                    results = [];
                    for (q = m = 0, ref1 = N; 0 <= ref1 ? m < ref1 : m > ref1; q = 0 <= ref1 ? ++m : --m) {
                        results.push(1);
                    }
                    return results;
                })()
            ];
            degrees = [0];
            for (j = m = 0, ref1 = options.maxDegree; 0 <= ref1 ? m < ref1 : m > ref1; j = 0 <= ref1 ? ++m : --m) {
                if ((i & 1 << j) > 0) {
                    Xtr.push(Xfulltr[j]);
                    degrees.push(j + 1);
                }
            }
            X = numeric.transpose(Xtr);
            k = degrees.length;
            beta_hat = numeric.dot(numeric.dot(numeric.inv(numeric.dot(Xtr, X)), Xtr), y);
            y_hat = numeric.dot(X, beta_hat);
            residual = numeric.sub(y, y_hat);
            sse = numeric.dot(residual, residual);
            sigma2 = sse / (N - k);
            loglike = -0.5 * N * Math.log(2 * Math.PI) - 0.5 * N * Math.log(sigma2) - sse / (2 * sigma2);
            bic = -2 * loglike + k * (Math.log(N) - Math.log(2 * Math.PI));
            if (bic < prevBIC) {
                prevBIC = bic;
                bestResult = [degrees, beta_hat, y_hat];
            }
        }
        return bestResult;
    };

}).call(this);
},{"numeric":53}],134:[function(require,module,exports){
// Finds outliers in n-dim data using the Local Outlier Factor algorithm
(function() {
    var kdtree;

    kdtree = require('static-kdtree');

    module.exports = function(points, K) {
        var avg_lrd, i, j, kdists, ldr, ldrs, neighbors, p, reachDist, result, sqDist, tree;
        if (K == null) {
            K = 10;
        }
        tree = kdtree(points);
        neighbors = (function() {
            var k, len, results;
            results = [];
            for (k = 0, len = points.length; k < len; k++) {
                p = points[k];
                results.push(tree.knn(p, K + 1).slice(1));
            }
            return results;
        })();
        sqDist = function(i, j) {
            var A, B, delta, dist, k, ref;
            A = points[i];
            B = points[j];
            dist = 0;
            for (i = k = 0, ref = A.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
                delta = A[i] - B[i];
                dist += delta * delta;
            }
            return dist;
        };
        kdists = (function() {
            var k, ref, results;
            results = [];
            for (i = k = 0, ref = points.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
                results.push(sqDist(i, neighbors[i][K - 1]));
            }
            return results;
        })();
        reachDist = function(i, j) {
            return Math.max(sqDist(i, j), kdists[j]);
        };
        ldr = function(i) {
            var j, k, len, rDist, ref;
            rDist = 0;
            ref = neighbors[i];
            for (k = 0, len = ref.length; k < len; k++) {
                j = ref[k];
                rDist += reachDist(i, j);
            }
            return K / rDist;
        };
        ldrs = (function() {
            var k, ref, results;
            results = [];
            for (i = k = 0, ref = points.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
                results.push(ldr(i));
            }
            return results;
        })();
        result = (function() {
            var k, l, len, ref, ref1, results;
            results = [];
            for (i = k = 0, ref = points.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
                avg_lrd = 0;
                ref1 = neighbors[i];
                for (l = 0, len = ref1.length; l < len; l++) {
                    j = ref1[l];
                    avg_lrd += ldrs[j];
                }
                avg_lrd /= K;
                results.push([i, avg_lrd / ldrs[i]]);
            }
            return results;
        })();
        return result.sort(function(a, b) {
            return b[1] - a[1];
        });
    };

}).call(this);
},{"static-kdtree":55}],135:[function(require,module,exports){
// Finds outliers in 1-dim data by computing the median absolute deviation for each point
(function() {
    module.exports = function(points) {
        var mad, median, result;
        median = d3.median(points);
        mad = d3.median(points.map(function(p) {
            return Math.abs(p - median);
        }));
        result = points.map(function(p, i) {
            return [i, Math.abs(p - median) / mad];
        });
        return result.sort(function(a, b) {
            return b[1] - a[1];
        });
    };

}).call(this);
},{}],136:[function(require,module,exports){
(function() {
    var fontTester;

    fontTester = require("../core/font/tester.js");

    module.exports = function(words, style, opts) {
        var attr, getHeight, getWidth, sizes, spacing, tester, tspans;
        if (!opts) {
            opts = {};
        }
        style = style || {};
        tester = opts.parent || fontTester("svg").append("text");
        sizes = [];
        if (!(words instanceof Array)) {
            words = [words];
        }
        tspans = tester.selectAll("tspan").data(words);
        attr = {
            left: "0px",
            position: "absolute",
            top: "0px",
            x: 0,
            y: 0
        };
        spacing = 0;
        if ("letter-spacing" in style) {
            spacing = parseFloat(style["letter-spacing"]);
            delete style["letter-spacing"];
        }
        getWidth = function(elem) {
            var add;
            add = 0;
            if (spacing) {
                add = (d3.select(elem).text().length - 1) * spacing;
            }
            return elem.getComputedTextLength() + add;
        };
        getHeight = function(elem) {
            return elem.parentNode.getBBox().height || elem.getBoundingClientRect().height;
        };
        var tsp = tspans.enter().append("tspan").text(String)
        for (var name in styles) tsp.style(name, style[name]);
        for (var name in attrs) tsp.attr(name, attr[name]);
        tsp.each(function(d) {
            if (typeof opts.mod === "function") {
                return opts.mod(this);
            }
        }).each(function(d) {
            var children, height, width;
            children = d3.select(this).selectAll("tspan");
            if (children.size()) {
                width = [];
                children.each(function() {
                    return width.push(getWidth(this));
                });
                width = d3.max(width);
            } else {
                width = getWidth(this);
            }
            height = getHeight(this);
            return sizes.push({
                height: height,
                text: d,
                width: width
            });
        });
        tspans.remove();
        if (!opts.parent) {
            tester.remove();
        }
        return sizes;
    };

}).call(this);
},{"../core/font/tester.js":100}],137:[function(require,module,exports){
// Given a single font or a list of font, determines which can be rendered
(function() {
    var fontTester, validate;

    fontTester = require("../core/font/tester.js");

    validate = function(fontList) {
        var completed, family, font, fontString, i, j, len, len1, monospace, proportional, testElement, testWidth, tester, valid;
        if (!(fontList instanceof Array)) {
            fontList = fontList.split(",");
        }
        for (i = 0, len = fontList.length; i < len; i++) {
            font = fontList[i];
            font.trim();
        }
        fontString = fontList.join(", ");
        completed = validate.complete;
        if (fontString in completed) {
            return completed[fontString];
        }
        testElement = function(font) {
            return tester.append("span").style("font-family", font).style("font-size", "32px").style("padding", "0px").style("margin", "0px").text("abcdefghiABCDEFGHI_!@#$%^&*()_+1234567890");
        };
        testWidth = function(font, control) {
            var elem, width1, width2;
            elem = testElement(font);
            width1 = elem.node().offsetWidth;
            width2 = control.node().offsetWidth;
            elem.remove();
            return width1 !== width2;
        };
        tester = fontTester("div");
        monospace = testElement("monospace");
        proportional = testElement("sans-serif");
        for (j = 0, len1 = fontList.length; j < len1; j++) {
            family = fontList[j];
            valid = testWidth(family + ",monospace", monospace);
            if (!valid) {
                valid = testWidth(family + ",sans-serif", proportional);
            }
            if (valid) {
                valid = family;
                break;
            }
        }
        if (!valid) {
            valid = "sans-serif";
        }
        monospace.remove();
        proportional.remove();
        completed[fontString] = valid;
        return valid;
    };

    validate.complete = {};

    module.exports = validate;

}).call(this);
},{"../core/font/tester.js":100}],138:[function(require,module,exports){
var arraySort = require("../array/sort.js"),
    attach = require("../core/methods/attach.js"),
    dataFormat = require("../core/data/format.js"),
    dataKeys = require("../core/data/keys.js"),
    dataLoad = require("../core/data/load.js"),
    fetchData = require("../core/fetch/data.js"),
    ie = require("../client/ie.js"),
    methodReset = require("../core/methods/reset.js"),
    print = require("../core/console/print.js");
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Form Element shell
//------------------------------------------------------------------------------
module.exports = function() {

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Initialize the global variable object.
    //----------------------------------------------------------------------------
    var vars = {
        "types": {
            "auto": require("./types/auto.js"),
            "button": require("./types/button/button.js"),
            "drop": require("./types/drop/drop.js"),
            "toggle": require("./types/toggle.js")
        }
    };

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Create the main drawing function.
    //----------------------------------------------------------------------------
    vars.self = function(selection) {

        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        // Set timing to 0 if it's the first time running this function or if the
        // data length is longer than the "large" limit
        //--------------------------------------------------------------------------
        var large = vars.data.value instanceof Array && vars.data.value.length > vars.data.large;

        vars.draw.timing = vars.draw.first || large || ie ? 0 : vars.timing.ui;

        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        // Create/update the UI element
        //--------------------------------------------------------------------------
        if (vars.data.value instanceof Array) {

            if (vars.dev.value) print.group("drawing \"" + vars.type.value + "\"");

            //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
            // Analyze new data, if changed.
            //------------------------------------------------------------------------
            if (vars.data.changed) {
                vars.data.cache = {};
                dataKeys(vars, "data");
                dataFormat(vars);
            }

            vars.data.viz = fetchData(vars);

            //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
            // Sort the data, if needed.
            //------------------------------------------------------------------------
            if (vars.data.sort.value && (vars.data.changed || vars.order.changed || vars.order.sort.changed)) {
                arraySort(vars.data.viz, vars.order.value || vars.text.value,
                    vars.order.sort.value, vars.color.value, vars);
            }

            //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
            // Set first element in data as focus if there is no focus set.
            //------------------------------------------------------------------------
            if (vars.focus.value === false && ["auto", "button"].indexOf(vars.type.value) < 0) {

                var element = vars.data.element.value;

                if (element && element.node().tagName.toLowerCase() === "select") {
                    var i = element.property("selectedIndex");
                    i = i < 0 ? 0 : i;
                    var option = element.selectAll("option")[0][i],
                        val = option.getAttribute("data-" + vars.id.value) || option.getAttribute(vars.id.value);
                    if (val) vars.focus.value = val;
                }

                if (vars.focus.value === false && vars.data.viz.length) {
                    vars.focus.value = vars.data.viz[0][vars.id.value];
                }

                if (vars.dev.value && vars.focus.value !== false) print.log("\"value\" set to \"" + vars.focus.value + "\"");

            }

            var getLevel = function(d, depth) {

                depth = typeof depth !== "number" ? vars.id.nesting.length === 1 ? 0 : vars.id.nesting.length - 1 : depth;
                var level = vars.id.nesting[depth];

                if (depth > 0 && (!(level in d) || d[level] instanceof Array)) {
                    return getLevel(d, depth - 1);
                } else {
                    return level;
                }

            };

            //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
            // Run these things if the data has changed.
            //------------------------------------------------------------------------
            if (vars.data.changed) {

                //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                // Determine if search box is needed.
                //----------------------------------------------------------------------
                if (vars.search.value === "auto") {

                    if (vars.data.viz.length > 10) {
                        vars.search.enabled = true;
                        if (vars.dev.value) print.log("Search enabled.");
                    } else {
                        vars.search.enabled = false;
                        if (vars.dev.value) print.log("Search disabled.");
                    }

                } else {

                    vars.search.enabled = vars.search.value;

                }

                //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                // Update OPTION elements with the new data.
                //----------------------------------------------------------------------
                var elementTag = vars.data.element.value ? vars.data.element.value.node().tagName.toLowerCase() : "";
                if (vars.data.element.value && elementTag === "select") {

                    var optionData = [];
                    for (var level in vars.data.nested.all) {
                        optionData = optionData.concat(vars.data.nested.all[level]);
                    }

                    options = vars.data.element.value.selectAll("option")
                        .data(optionData, function(d) {
                            var level = d ? getLevel(d) : false;
                            return d && level in d ? d[level] : false;
                        });

                    options.exit().remove();

                    options.enter().append("option");

                    options
                        .each(function(d) {

                            var level = getLevel(d),
                                textKey = level === vars.id.value ? vars.text.value || vars.id.value :
                                vars.text.nesting !== true && level in vars.text.nesting ? vars.text.nesting[level] : level;

                            for (var k in d) {

                                if (typeof d[k] !== "object") {

                                    if (k === textKey) {
                                        d3.select(this).html(d[k]);
                                    }

                                    if (["alt", "value"].indexOf(k) >= 0) {
                                        d3.select(this).attr(k, d[k]);
                                    } else {
                                        d3.select(this).attr("data-" + k, d[k]);
                                    }

                                }

                            }

                            if (d[level] === vars.focus.value) {
                                this.selected = true;
                            } else {
                                this.selected = false;
                            }

                        });

                }

            } else if (vars.focus.changed && vars.data.element.value) {
                var tag = vars.data.element.value.node().tagName.toLowerCase();
                if (tag === "select") {
                    vars.data.element.value.selectAll("option")
                        .each(function(d) {
                            if (d[getLevel(d)] === vars.focus.value) {
                                this.selected = true;
                            } else {
                                this.selected = false;
                            }
                        });
                } else {
                    var tag = vars.data.element.value.attr("type").toLowerCase();
                    if (tag === "radio") {
                        vars.data.element.value
                            .each(function(d) {
                                if (this.value === vars.focus.value) {
                                    this.checked = true;
                                } else {
                                    this.checked = false;
                                }
                            })
                    }
                }
            }

            if (vars.type.value !== "auto") {

                if (!vars.container.ui) {

                    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    // Select container DIV for UI element
                    //----------------------------------------------------------------------
                    vars.container.ui = vars.container.value
                        .selectAll("div#d3po_" + vars.type.value + "_" + vars.container.id)
                        .data(["container"]);

                    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                    // Create container DIV for UI element
                    //----------------------------------------------------------------------
                    var before = vars.data.element.value ? vars.data.element.value[0][0] : null;

                    if (before) {

                        if (before.id) {
                            before = "#" + before.id;
                        } else {

                            var id = before.getAttribute(vars.id.value) ? vars.id.value : "data-" + vars.id.value;

                            if (before.getAttribute(id)) {
                                before = "[" + id + "=" + before.getAttribute(id) + "]";
                            } else {
                                before = null;
                            }

                        }

                    }

                    vars.container.ui.enter()
                        .insert("div", before)
                        .attr("id", "d3po_" + vars.type.value + "_" + vars.container.id)
                        .style("position", "relative")
                        .style("overflow", "visible")
                        .style("vertical-align", "top");

                }

                //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                // Update Container
                //------------------------------------------------------------------------
                vars.container.ui
                    .style("display", vars.ui.display.value);

                vars.container.ui.transition().duration(vars.draw.timing)
                    .style("margin", vars.ui.margin.css);

                //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                // Create title, if available.
                //------------------------------------------------------------------------
                var title = vars.container.ui.selectAll("div.d3po_title")
                    .data(vars.title.value ? [vars.title.value] : []);

                title.enter().insert("div", "#d3po_" + vars.type.value + "_" + vars.container.id)
                    .attr("class", "d3po_title")
                    .style("display", "inline-block");

                title
                    .style("color", vars.font.color)
                    .style("font-family", vars.font.family.value)
                    .style("font-size", vars.font.size + "px")
                    .style("font-weight", vars.font.weight)
                    .style("padding", vars.ui.padding.css)
                    .style("border-color", "transparent")
                    .style("border-style", "solid")
                    .style("border-width", vars.ui.border + "px")
                    .text(String)
                    .each(function(d) {
                        vars.margin.left = this.offsetWidth;
                    });

            }

            //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
            // Call specific UI element type, if there is data.
            //------------------------------------------------------------------------
            if (vars.data.value.length) {

                var app = vars.format.locale.value.visualization[vars.type.value];
                if (vars.dev.value) print.time("drawing " + app);
                vars.types[vars.type.value](vars);
                if (vars.dev.value) print.timeEnd("drawing " + app);

            } else if (vars.data.url && (!vars.data.loaded || vars.data.stream)) {

                dataLoad(vars, "data", vars.self.draw);

            }

            //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
            // Initialization complete
            //------------------------------------------------------------------------
            if (vars.dev.value) print.timeEnd("total draw time");
            methodReset(vars);

        }

    };

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Define methods and expose public variables.
    //----------------------------------------------------------------------------
    attach(vars, {
        "active": require("./methods/active.js"),
        "alt": require("./methods/alt.js"),
        "color": require("./methods/color.js"),
        "config": require("./methods/config.js"),
        "container": require("./methods/container.js"),
        "data": require("./methods/data.js"),
        "depth": require("./methods/depth.js"),
        "dev": require("./methods/dev.js"),
        "draw": require("./methods/draw.js"),
        "focus": require("./methods/focus.js"),
        "font": require("./methods/font.js"),
        "format": require("./methods/format.js"),
        "height": require("./methods/height.js"),
        "history": require("./methods/history.js"),
        "hover": require("./methods/hover.js"),
        "icon": require("./methods/icon.js"),
        "id": require("./methods/id.js"),
        "keywords": require("./methods/keywords.js"),
        "margin": require("./methods/margin.js"),
        "open": require("./methods/open.js"),
        "order": require("./methods/order.js"),
        "remove": require("./methods/remove.js"),
        "search": require("./methods/search.js"),
        "select": require("./methods/select.js"),
        "selectAll": require("./methods/selectall.js"),
        "text": require("./methods/text.js"),
        "timing": require("./methods/timing.js"),
        "title": require("./methods/title.js"),
        "type": require("./methods/type.js"),
        "ui": require("./methods/ui.js"),
        "width": require("./methods/width.js")
    });

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Finally, return the main UI function to the user
    //----------------------------------------------------------------------------
    return vars.self;

};
},{"../array/sort.js":65,"../client/ie.js":68,"../core/console/print.js":83,"../core/data/format.js":87,"../core/data/keys.js":89,"../core/data/load.js":90,"../core/fetch/data.js":96,"../core/methods/attach.js":114,"../core/methods/reset.js":127,"./methods/active.js":139,"./methods/alt.js":140,"./methods/color.js":141,"./methods/config.js":142,"./methods/container.js":143,"./methods/data.js":144,"./methods/depth.js":145,"./methods/dev.js":146,"./methods/draw.js":147,"./methods/focus.js":148,"./methods/font.js":149,"./methods/format.js":150,"./methods/height.js":151,"./methods/history.js":152,"./methods/hover.js":153,"./methods/icon.js":154,"./methods/id.js":155,"./methods/keywords.js":156,"./methods/margin.js":157,"./methods/open.js":158,"./methods/order.js":159,"./methods/remove.js":160,"./methods/search.js":161,"./methods/select.js":162,"./methods/selectall.js":163,"./methods/text.js":164,"./methods/timing.js":165,"./methods/title.js":166,"./methods/type.js":167,"./methods/ui.js":168,"./methods/width.js":169,"./types/auto.js":170,"./types/button/button.js":171,"./types/drop/drop.js":176,"./types/toggle.js":193}],139:[function(require,module,exports){
(function() {
    var filter;

    filter = require("../../core/methods/filter.js");

    module.exports = {
        accepted: [false, Array, Function, Number, String],
        value: false
    };

}).call(this);
},{"../../core/methods/filter.js":115}],140:[function(require,module,exports){
(function() {
    var filter;

    filter = require("../../core/methods/filter.js");

    module.exports = {
        accepted: [false, Array, Function, Object, String],
        mute: filter(true),
        solo: filter(true),
        value: "alt"
    };

}).call(this);
},{"../../core/methods/filter.js":115}],141:[function(require,module,exports){
(function() {
    module.exports = {
        accepted: [String],
        value: "color"
    };

}).call(this);
},{}],142:[function(require,module,exports){
(function() {
    module.exports = {
        accepted: [Object],
        objectAccess: false,
        process: function(value, vars) {
            var method, setting;
            for (method in value) {
                setting = value[method];
                if (method in vars.self) {
                    vars.self[method](setting);
                }
            }
            return value;
        },
        value: {}
    };

}).call(this);
},{}],143:[function(require,module,exports){
(function() {
    var d3selection;

    d3selection = require("../../util/d3selection.js");

    module.exports = {
        accepted: [false, Array, Object, String],
        element: false,
        id: "default",
        process: function(value) {
            if (value === false) {
                return d3.select("body");
            } else if (d3selection(value)) {
                return value;
            } else if (value instanceof Array) {
                return d3.select(value[0][0]);
            } else {
                this.selector = value;
                return d3.select(value);
            }
        },
        value: d3.select("body")
    };

}).call(this);
},{"../../util/d3selection.js":243}],144:[function(require,module,exports){
var d3selection = require("../../util/d3selection.js"),
    process = require("../../core/methods/process/data.js");

module.exports = {
    "accepted": [false, Array, Function, String],
    "delimiter": {
        "accepted": [String],
        "value": "|"
    },
    "element": {
        "process": function(value, vars) {

            var element = false;

            if (d3selection(value)) {
                element = value;
            } else if (typeof value === "string" && !d3.select(value).empty()) {
                element = d3.select(value);
            }

            if (element) {
                vars.self.container(d3.select(element.node().parentNode));
            }

            return element;

        },
        "value": false
    },
    "filetype": {
        "accepted": [false, "json", "xml", "html", "csv", "dsv", "tsv", "txt"],
        "value": false
    },
    "filters": [],
    "large": 400,
    "mute": [],
    "process": function(value, vars) {

        if (vars.container.id === "default" && value.length) {
            vars.self.container({
                "id": "default" + value.length
            });
        }

        return process(value, vars, this);
    },
    "solo": [],
    "sort": {
        "accepted": [Boolean],
        "value": false
    },
    "value": false
};
},{"../../core/methods/process/data.js":121,"../../util/d3selection.js":243}],145:[function(require,module,exports){
(function() {
    module.exports = {
        accepted: [Number],
        value: 0
    };

}).call(this);
},{}],146:[function(require,module,exports){
(function() {
    module.exports = {
        accepted: [Boolean],
        value: false
    };

}).call(this);
},{}],147:[function(require,module,exports){
var d3selection = require("../../util/d3selection.js"),
    hideElement = require("../../core/parse/hideelement.js"),
    parseElement = require("../../core/parse/element.js"),
    print = require("../../core/console/print.js"),
    stringFormat = require("../../string/format.js")

module.exports = {
    "accepted": [undefined, Function],
    "first": true,
    "frozen": false,
    "process": function(value, vars) {

        if (this.initialized === false) {
            this.initialized = true
            return value
        }

        if (vars.data.value && (!(vars.data.value instanceof Array) || d3selection(vars.data.value))) {
            vars.data.value = parseElement(vars)
        } else if (vars.data.element.value) {
            vars.data.element.value.call(hideElement);
        }

        if (value === undefined && typeof this.value === "function") {
            value = this.value
        }

        if (vars.container.value === false) {

            var str = vars.format.locale.value.dev.setContainer
            print.warning(str, "container")

        } else if (vars.container.value.empty()) {

            var str = vars.format.locale.value.dev.noContainer
            var selector = vars.container.selector || "";
            print.warning(stringFormat(str, "\"" + selector + "\""), "container")

        } else {

            if (vars.dev.value) print.time("total draw time");

            vars.container.value.call(vars.self);

        }

        if (typeof value === "function" && vars.history.chain.length) {

            var changesObject = {}
            vars.history.chain.forEach(function(c) {
                var method = c.method
                delete c.method
                changesObject[method] = c
            })

            value(changesObject)

            vars.history.chain = []

        }

        return value

    },
    "update": true,
    "value": undefined
}
},{"../../core/console/print.js":83,"../../core/parse/element.js":130,"../../core/parse/hideelement.js":131,"../../string/format.js":208,"../../util/d3selection.js":243}],148:[function(require,module,exports){
(function() {
    module.exports = {
        accepted: [false, Number, String],
        process: function(value, vars) {
            var d, element, elementTag, elementType, i, j, k, len, len1, ref;
            element = vars.data.element.value;
            if (element && ["string", "number"].indexOf(typeof value) >= 0) {
                elementTag = element.node().tagName.toLowerCase();
                elementType = element.attr("type");
                if (elementTag === "select") {
                    ref = element.selectAll("option");
                    for (i = j = 0, len = ref.length; j < len; i = ++j) {
                        d = ref[i];
                        if (d && d[vars.id.value] === value) {
                            element.node().selectedIndex = i;
                        }
                    }
                } else if (elementTag === "input" && elementType === "radio") {
                    for (k = 0, len1 = element.length; k < len1; k++) {
                        d = element[k];
                        this.checked = d && d[vars.id.value] === value;
                    }
                }
            }
            return value;
        },
        value: false
    };

}).call(this);
},{}],149:[function(require,module,exports){
(function() {
    var align, decoration, family, transform;

    family = require("../../core/methods/font/family.js");

    align = require("../../core/methods/font/align.js");

    decoration = require("../../core/methods/font/decoration.js");

    transform = require("../../core/methods/font/transform.js");

    module.exports = {
        align: align(),
        color: "#444444",
        decoration: decoration(),
        family: family(),
        secondary: {
            align: align(),
            color: "#444444",
            decoration: decoration(),
            family: family(),
            size: 12,
            spacing: 0,
            transform: transform(),
            weight: 200
        },
        size: 12,
        spacing: 0,
        transform: transform(),
        weight: 200
    };

}).call(this);
},{"../../core/methods/font/align.js":116,"../../core/methods/font/decoration.js":117,"../../core/methods/font/family.js":118,"../../core/methods/font/transform.js":120}],150:[function(require,module,exports){
(function() {
    var formatNumber, locale, mergeObject, titleCase;

    formatNumber = require("../../number/format.js");

    locale = require("../../core/locale/locale.js");

    mergeObject = require("../../object/merge.js");

    titleCase = require("../../string/title.js");

    module.exports = {
        accepted: [Function, String],
        affixes: {
            accepted: [Object],
            objectAccess: false,
            value: {}
        },
        locale: {
            accepted: function() {
                return d3.keys(locale);
            },
            process: function(value) {
                var defaultLocale, returnObject;
                defaultLocale = "en_US";
                returnObject = locale[defaultLocale];
                if (value !== defaultLocale) {
                    returnObject = mergeObject(returnObject, locale[value]);
                }
                this.language = value;
                return returnObject;
            },
            value: "en_US"
        },
        number: {
            accepted: [false, Function],
            value: false
        },
        process: function(value, vars) {
            if (typeof value === "string") {
                vars.self.format({
                    locale: value
                });
            } else {
                if (typeof value === "function") {
                    return value;
                }
            }
            return this.value;
        },
        text: {
            accepted: [false, Function],
            value: false
        },
        value: function(value, opts) {
            var f, v, vars;
            if (!opts) {
                opts = {};
            }
            vars = opts.vars || {};
            if (vars.time && vars.time.value && opts.key === vars.time.value) {
                v = value.constructor === Date ? value : new Date(value);
                return vars.data.time.format(v);
            } else if (typeof value === "number") {
                f = this.number.value || formatNumber;
                return f(value, opts);
            } else if (typeof value === "string") {
                f = this.text.value || titleCase;
                return f(value, opts);
            } else {
                return JSON.stringify(value);
            }
        }
    };

}).call(this);
},{"../../core/locale/locale.js":113,"../../number/format.js":205,"../../object/merge.js":206,"../../string/title.js":211}],151:[function(require,module,exports){
(function() {
    module.exports = {
        accepted: [false, Number],
        max: 600,
        secondary: false,
        value: false
    };

}).call(this);
},{}],152:[function(require,module,exports){
(function() {
    module.exports = {
        back: function() {
            if (this.states.length) {
                return this.states.pop()();
            }
        },
        chain: [],
        reset: function() {
            var results;
            results = [];
            while (this.states.length) {
                results.push(this.states.pop()());
            }
            return results;
        },
        states: []
    };

}).call(this);
},{}],153:[function(require,module,exports){
(function() {
    module.exports = {
        accepted: [Boolean, Number, String],
        value: false
    };

}).call(this);
},{}],154:[function(require,module,exports){
(function() {
    var process;

    process = require("../../core/methods/process/icon.js");

    module.exports = {
        accepted: [false, Array, Function, Object, String],
        back: {
            accepted: [false, String],
            fallback: "&#x276e;",
            opacity: 1,
            process: process,
            rotate: 0,
            value: "fa-angle-left"
        },
        button: {
            accepted: [false, String],
            fallback: false,
            opacity: 1,
            process: process,
            rotate: 0,
            value: false
        },
        drop: {
            accepted: [false, String],
            fallback: "&#x276f;",
            opacity: 1,
            process: process,
            rotate: 0,
            value: "fa-angle-down"
        },
        next: {
            accepted: [false, String],
            fallback: "&#x276f;",
            opacity: 1,
            process: process,
            rotate: 0,
            value: "fa-angle-right"
        },
        select: {
            accepted: [false, String],
            fallback: "&#x2713;",
            opacity: 1,
            process: process,
            rotate: 0,
            value: "fa-check"
        },
        style: {
            accepted: [Object, String],
            value: "default"
        },
        value: "icon"
    };

}).call(this);
},{"../../core/methods/process/icon.js":123}],155:[function(require,module,exports){
(function() {
    var filter;

    filter = require("../../core/methods/filter.js");

    module.exports = {
        accepted: [Array, String],
        dataFilter: true,
        mute: filter(true),
        nesting: ["value"],
        solo: filter(true),
        value: "value"
    };

}).call(this);
},{"../../core/methods/filter.js":115}],156:[function(require,module,exports){
(function() {
    var filter;

    filter = require("../../core/methods/filter.js");

    module.exports = {
        accepted: [false, Array, Function, Object, String],
        mute: filter(true),
        solo: filter(true),
        value: "keywords"
    };

}).call(this);
},{"../../core/methods/filter.js":115}],157:[function(require,module,exports){
(function() {
    var process;

    process = require("../../core/methods/process/margin.js");

    module.exports = {
        accepted: [Number, Object, String],
        process: function(value) {
            var userValue;
            if (value === void 0) {
                value = this.value;
            }
            userValue = value;
            process(value, this);
            return userValue;
        },
        value: 0
    };

}).call(this);
},{"../../core/methods/process/margin.js":124}],158:[function(require,module,exports){
(function() {
    module.exports = {
        accepted: [Boolean],
        flipped: {
            accepted: [Boolean],
            value: false
        },
        value: false
    };

}).call(this);
},{}],159:[function(require,module,exports){
(function() {
    module.exports = {
        accepted: [false, Function, String],
        sort: {
            accepted: ["asc", "desc"],
            value: "asc"
        },
        value: false
    };

}).call(this);
},{}],160:[function(require,module,exports){
(function() {
    module.exports = {
        accepted: [void 0, Function],
        process: function(value, vars) {
            if (this.initialized) {
                vars.container.ui.remove();
            }
            delete vars.container.ui;
        },
        value: void 0
    };

}).call(this);
},{}],161:[function(require,module,exports){
(function() {
    module.exports = {
        accepted: ["auto", Boolean],
        process: function(value) {
            if (typeof value === "Boolean") {
                this.enabled = value;
            }
            return value;
        },
        term: "",
        value: "auto"
    };

}).call(this);
},{}],162:[function(require,module,exports){
(function() {
    module.exports = {
        accepted: [String],
        chainable: false,
        process: function(value, vars) {
            var container;
            container = vars.container.value;
            if (container && value) {
                return container.select(value);
            } else {
                return value;
            }
        },
        value: void 0
    };

}).call(this);
},{}],163:[function(require,module,exports){
(function() {
    module.exports = {
        accepted: [String],
        chainable: false,
        process: function(value, vars) {
            var container;
            container = vars.container.value;
            if (container && value) {
                return container.selectAll(value);
            } else {
                return value;
            }
        },
        value: void 0
    };

}).call(this);
},{}],164:[function(require,module,exports){
(function() {
    var filter;

    filter = require("../../core/methods/filter.js");

    module.exports = {
        accepted: [false, String],
        nesting: true,
        mute: filter(true),
        solo: filter(true),
        secondary: {
            accepted: [false, String],
            nesting: true,
            value: false
        },
        value: false
    };

}).call(this);
},{"../../core/methods/filter.js":115}],165:[function(require,module,exports){
(function() {
    module.exports = {
        mouseevents: 60,
        ui: 200
    };

}).call(this);
},{}],166:[function(require,module,exports){
(function() {
    var decoration, family, stringStrip, transform;

    decoration = require("../../core/methods/font/decoration.js");

    family = require("../../core/methods/font/family.js");

    transform = require("../../core/methods/font/transform.js");

    stringStrip = require("../../string/strip.js");

    module.exports = {
        accepted: [false, Function, String],
        font: {
            align: "center",
            color: "#444444",
            decoration: decoration(),
            family: family(),
            size: 16,
            transform: transform(),
            weight: 400
        },
        link: false,
        process: function(value, vars) {
            var id;
            if (vars.container.id.indexOf("default") === 0 && value) {
                id = stringStrip(value).toLowerCase();
                vars.self.container({
                    id: id
                });
            }
            return value;
        },
        value: false
    };

}).call(this);
},{"../../core/methods/font/decoration.js":117,"../../core/methods/font/family.js":118,"../../core/methods/font/transform.js":120,"../../string/strip.js":210}],167:[function(require,module,exports){
(function() {
    module.exports = {
        accepted: function(vars) {
            return d3.keys(vars.types);
        },
        value: "auto"
    };

}).call(this);
},{}],168:[function(require,module,exports){
(function() {
    var align, decoration, family, margin, transform;

    family = require("../../core/methods/font/family.js");

    align = require("../../core/methods/font/align.js");

    decoration = require("../../core/methods/font/decoration.js");

    margin = require("../../core/methods/process/margin.js");

    transform = require("../../core/methods/font/transform.js");

    module.exports = {
        align: align("center"),
        border: 1,
        color: {
            primary: {
                process: function(value, vars) {
                    var primary;
                    primary = this.value;
                    if (!vars.ui.color.secondary.value) {
                        vars.ui.color.secondary.value = d3.rgb(primary).darker(0.75).formatHex();
                    }
                    return value;
                },
                value: "#ffffff"
            },
            secondary: {
                value: false
            }
        },
        display: {
            acceped: ["block", "inline-block"],
            value: "inline-block"
        },
        font: {
            align: align("center"),
            color: "#444",
            decoration: decoration(),
            family: family(),
            size: 11,
            transform: transform(),
            weight: 200
        },
        margin: {
            process: function(value) {
                var userValue;
                if (value === void 0) {
                    value = this.value;
                }
                userValue = value;
                margin(value, this);
                return userValue;
            },
            value: 5
        },
        padding: {
            process: function(value) {
                var userValue;
                if (value === void 0) {
                    value = this.value;
                }
                userValue = value;
                margin(value, this);
                return userValue;
            },
            value: 5
        }
    };

}).call(this);
},{"../../core/methods/font/align.js":116,"../../core/methods/font/decoration.js":117,"../../core/methods/font/family.js":118,"../../core/methods/font/transform.js":120,"../../core/methods/process/margin.js":124}],169:[function(require,module,exports){
(function() {
    module.exports = {
        accepted: [false, Number],
        secondary: false,
        value: false
    };

}).call(this);
},{}],170:[function(require,module,exports){
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Determines form type based on data length.
//------------------------------------------------------------------------------
module.exports = function(vars) {

    var dataLength = vars.data.value.length

    if (dataLength === 1) {
        vars.self.type("button").draw()
    } else if (dataLength < 5) {
        vars.self.type("toggle").draw()
    } else {
        vars.self.type("drop").draw()
    }

}
},{}],171:[function(require,module,exports){
(function() {
    module.exports = function(vars) {
        var button, checks, color, icons, mouseevents, print, style, updatedButtons;
        print = require("../../../core/console/print.js");
        color = require("./functions/color.js");
        icons = require("./functions/icons.js");
        mouseevents = require("./functions/mouseevents.js");
        style = require("./functions/style.js");
        button = vars.container.ui.selectAll('div.d3po_node').data(vars.data.viz, function(d) {
            return d[vars.id.value];
        });
        if (vars.dev.value) {
            print.time("enter");
        }
        button.enter().append("div").attr("class", "d3po_node").call(color, vars).call(style, vars).call(icons, vars).call(mouseevents, vars);
        if (vars.dev.value) {
            print.timeEnd("enter");
        }
        if (vars.draw.update || vars.draw.timing) {
            if (vars.dev.value) {
                print.time("ordering");
            }
            button.order();
            if (vars.dev.value) {
                print.timeEnd("ordering");
            }
            updatedButtons = button;
        } else {
            checks = [vars.focus.previous, vars.focus.value, vars.hover.previous, vars.hover.value].filter(function(c) {
                return c;
            });
            updatedButtons = button.filter(function(b) {
                return checks.indexOf(b[vars.id.value]) >= 0;
            });
        }
        if (vars.dev.value) {
            print.time("update");
        }
        updatedButtons.classed("d3po_button_active", function(d) {
            return vars.focus.value === d[vars.id.value];
        });
        if (vars.draw.timing) {
            updatedButtons.transition().duration(vars.draw.timing).call(color, vars).call(style, vars);
        } else {
            updatedButtons.call(color, vars).call(style, vars);
        }
        updatedButtons.call(icons, vars).call(mouseevents, vars);
        if (vars.dev.value) {
            print.timeEnd("update");
        }
        return button.exit().remove();
    };

}).call(this);
},{"../../../core/console/print.js":83,"./functions/color.js":172,"./functions/icons.js":173,"./functions/mouseevents.js":174,"./functions/style.js":175}],172:[function(require,module,exports){
// Defines button color
(function() {
    module.exports = function(elem, vars) {
        var legible, lighter, textColor;
        legible = require("../../../../color/legible.js");
        lighter = require("../../../../color/lighter.js");
        textColor = require("../../../../color/text.js");
        return elem.style("background-color", function(d) {
            var color;
            if (vars.focus.value === d[vars.id.value]) {
                color = vars.ui.color.secondary.value;
            } else {
                color = vars.ui.color.primary.value;
            }
            if (vars.hover.value === d[vars.id.value]) {
                color = d3.rgb(color).darker(0.15).formatHex();
            }
            return color;
        }).style("color", function(d) {
            var bg, color, image, opacity;
            if (vars.focus.value === d[vars.id.value]) {
                opacity = 0.75;
            } else {
                opacity = 1;
            }
            image = d[vars.icon.value] && vars.data.viz.length < vars.data.large;
            if (!image && d[vars.color.value]) {
                color = legible(d[vars.color.value]);
            } else {
                if (vars.focus.value === d[vars.id.value]) {
                    bg = vars.ui.color.secondary.value;
                } else {
                    bg = vars.ui.color.primary.value;
                }
                if (vars.hover.value === d[vars.id.value]) {
                    bg = d3.rgb(bg).darker(0.15).formatHex();
                }
                color = textColor(bg);
            }
            color = d3.rgb(color);
            return "rgba(" + color.r + "," + color.g + "," + color.b + "," + opacity + ")";
        }).style('border-color', vars.ui.color.secondary.value);
    };

}).call(this);
},{"../../../../color/legible.js":75,"../../../../color/lighter.js":76,"../../../../color/text.js":81}],173:[function(require,module,exports){
var prefix = require("../../../../client/prefix.js"),
    rtl = require("../../../../client/rtl.js")

module.exports = function(elem, vars) {

    var reversed = (vars.font.align.value === "right" && !rtl) ||
        (rtl && vars.font.align.value === "right")

    elem
        .each(function(d, i) {

            var children = ["label"]

            if (d[vars.icon.value] && vars.data.viz.length <= vars.data.large) {
                children.push("icon")
            }

            var iconGraphic = vars.icon.button.value
            if (d[vars.id.value] === vars.focus.value && vars.icon.select.value) {
                iconGraphic = vars.icon.select.value
                children.push("selected")
            } else if (iconGraphic && d.d3po.icon !== false) {
                children.push("selected")
            }

            var buffer = 0

            var items = d3.select(this).selectAll("div.d3po_button_element")
                .data(children, function(c) {
                    return c
                })

            items.enter().append("div")
                .style("display", function(c) {
                    return c === "label" ? "block" : "absolute"
                })

            items.order()
                .attr("class", function(c) {
                    var extra = ""
                    if (c === "selected" && iconGraphic.indexOf("fa-") === 0) {
                        extra = " fa " + iconGraphic
                    }
                    return "d3po_button_element d3po_button_" + c + extra
                })
                .html(function(c) {
                    if (c === "label") {
                        var k = vars.text.value && vars.text.value in d && !(d[vars.text.value] instanceof Array) ?
                            vars.text.value : vars.id.value
                        return vars.format.value(d[k])
                    }
                    return c === "selected" && iconGraphic.indexOf("fa-") < 0 ?
                        iconGraphic : ""
                })
                .style("background-image", function(c) {
                    if (c === "icon") {
                        return "url('" + d[vars.icon.value] + "')"
                    }
                    return "none"
                })
                .style("background-color", function(c) {
                    if (c === "icon" && d.style === "knockout") {
                        return d[vars.color.value] || vars.ui.color.primary.value
                    }
                    return "transparent"
                })
                .style("background-size", "100%")
                .style("text-align", function(c) {
                    return c === "label" ? vars.font.align.value : "center"
                })
                .style("position", function(c) {
                    return c == "label" ? "static" : "absolute"
                })
                .style("width", function(c) {

                    if (c === "label") {
                        return "auto"
                    }

                    if (vars.height.value) {
                        buffer = (vars.height.value - (vars.ui.padding.top + vars.ui.padding.bottom) - (vars.ui.border * 2));
                    } else {
                        buffer = vars.font.size + vars.ui.border;
                    }
                    return buffer + "px"
                })
                .style("height", function(c) {
                    if (c === "icon") {
                        return buffer + "px"
                    }
                    return "auto"
                })
                .style("margin-top", function(c) {
                    if (c === "label") {
                        return "0px"
                    }
                    if (this.offsetHeight || this.getBoundingClientRect().height) {
                        var h = this.offsetHeight || this.getBoundingClientRect().height
                    } else if (c === "selected") {
                        var h = vars.font.size
                    } else {
                        var h = buffer
                    }
                    return -h / 2 + "px"
                })
                .style("top", function(c) {
                    return c === "label" ? "auto" : "50%"
                })
                .style("left", function(c) {
                    if ((c === "icon" && !reversed) || (c === "selected" && reversed)) {
                        return vars.ui.padding.left + "px"
                    }
                    return "auto"
                })
                .style("right", function(c) {
                    if ((c === "icon" && reversed) || (c === "selected" && !reversed)) {
                        return vars.ui.padding.right + "px"
                    }
                    return "auto"
                })
                .style(prefix() + "transition", function(c) {
                    return c === "selected" ? (vars.draw.timing / 1000) + "s" : "none"
                })
                .style(prefix() + "transform", function(c) {
                    var degree = c === "selected" ? vars.icon.select.rotate : "none"
                    return typeof degree === "string" ? degree : "rotate(" + degree + "deg)"
                })
                .style("opacity", function(c) {
                    return c === "selected" ? vars.icon.select.opacity : 1
                })

            items.exit().remove()

            var text = d3.select(this).selectAll(".d3po_button_label")

            if (buffer > 0) {

                var p = vars.ui.padding;

                if (children.length === 3) {
                    p = p.top + "px " + (p.right * 2 + buffer) + "px " + p.bottom + "px " + (p.left * 2 + buffer) + "px";
                } else if ((children.indexOf("icon") >= 0 && !rtl) || (children.indexOf("selected") >= 0 && rtl)) {
                    p = p.top + "px " + p.right + "px " + p.bottom + "px " + (p.left * 2 + buffer) + "px";
                } else {
                    p = p.top + "px " + (p.right * 2 + buffer) + "px " + p.bottom + "px " + p.left + "px";
                }

                text.style("padding", p)

            } else {
                text.style("padding", vars.ui.padding.css)
            }

            if (typeof vars.width.value === "number") {
                var width = vars.width.value
                width -= parseFloat(text.style("padding-left"), 10)
                width -= parseFloat(text.style("padding-right"), 10)
                width -= vars.ui.border * 2
                width += "px"
            } else {
                var width = "auto"
            }

            text.style("width", width)

        })

}
},{"../../../../client/prefix.js":70,"../../../../client/rtl.js":71}],174:[function(require,module,exports){
(function() {
    module.exports = function(elem, vars, color) {
        var events, ie;
        color = require("./color.js");
        events = require("../../../../client/pointer.js");
        ie = require("../../../../client/ie.js");
        return elem.on(events.over, function(d, i) {
            vars.self.hover(d[vars.id.value]);
            if (ie || !vars.draw.timing) {
                return d3.select(this).style("cursor", "pointer").call(color, vars);
            } else {
                return d3.select(this).style("cursor", "pointer").transition().duration(vars.timing.mouseevents).call(color, vars);
            }
        }).on(events.out, function(d) {
            vars.self.hover(false);
            if (ie || !vars.draw.timing) {
                return d3.select(this).style("cursor", "auto").call(color, vars);
            } else {
                return d3.select(this).style("cursor", "auto").transition().duration(vars.timing.mouseevents).call(color, vars);
            }
        }).on(events.click, function(d) {
            if (vars.focus.value !== false) {
                return vars.self.focus(d[vars.id.value]).draw();
            } else if (vars.focus.callback) {
                return vars.focus.callback(d, vars.self);
            }
        });
    };

}).call(this);
},{"../../../../client/ie.js":68,"../../../../client/pointer.js":69,"./color.js":172}],175:[function(require,module,exports){
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//
//------------------------------------------------------------------------------
module.exports = function(elem, vars) {

    elem
        .style("position", "relative")
        .style("margin", vars.ui.margin.css)
        .style("display", vars.ui.display.value)
        .style("border-style", "solid")
        .style("border-width", vars.ui.border + "px")
        .style("font-family", vars.font.family.value)
        .style("font-size", vars.font.size + "px")
        .style("font-weight", vars.font.weight)
        .style("letter-spacing", vars.font.spacing + "px")

}
},{}],176:[function(require,module,exports){
// Creates Dropdown Menu
(function() {
    module.exports = function(vars) {
        var button, data, element, keyboard, list, search, selector, title, update, width, windowevent;
        element = require("./functions/element.js");
        keyboard = require("./functions/keyboard.js");
        windowevent = require("./functions/window.js");
        width = require("./functions/width.js");
        button = require("./functions/button.js");
        selector = require("./functions/selector.js");
        title = require("./functions/title.js");
        search = require("./functions/search.js");
        list = require("./functions/list.js");
        data = require("./functions/data.js");
        update = require("./functions/update.js");
        vars.margin.top = 0;
        vars.margin.title = 0;
        element(vars);
        keyboard(vars);
        windowevent(vars);
        width(vars);
        button(vars);
        selector(vars);
        title(vars);
        search(vars);
        list(vars);
        data(vars);
        return update(vars);
    };

}).call(this);
},{"./functions/button.js":179,"./functions/data.js":180,"./functions/element.js":181,"./functions/keyboard.js":184,"./functions/list.js":185,"./functions/search.js":187,"./functions/selector.js":188,"./functions/title.js":189,"./functions/update.js":190,"./functions/width.js":191,"./functions/window.js":192}],177:[function(require,module,exports){
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Checks to see if a given variable is allowed to be selected.
//------------------------------------------------------------------------------
module.exports = function(vars, value, active) {

    var ret = [],
        active = active || vars.active.value

    if (active instanceof Array) {

        for (var i = 0; i < active.length; i++) {
            ret.push(this(vars, value, active[i]))
        }

    } else {

        var t = typeof active

        if (t === "number") {
            ret.push(vars.depth.value === active)
        } else if (t === "function") {
            ret.push(active(value))
        } else {
            ret.push(value === active)
        }

    }

    return ret.indexOf(true) >= 0

}
},{}],178:[function(require,module,exports){
var print = require("../../../../core/console/print.js")
    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Toggles the state of the dropdown menu.
    //------------------------------------------------------------------------------
module.exports = function(vars) {

    if (vars.dev.value) print.time("rotating arrow")

    var offset = vars.icon.drop.value === "&#x276f;" ? 90 : 0

    if (vars.open.value != vars.open.flipped.value) {
        var rotate = 180 + offset
    } else {
        var rotate = offset
    }

    vars.container.button
        .icon({
            "select": {
                "opacity": vars.open.value ? 0.5 : 1,
                "rotate": rotate
            }
        })
        .draw()

    if (vars.dev.value) print.timeEnd("rotating arrow")

}
},{"../../../../core/console/print.js":83}],179:[function(require,module,exports){
var copy = require("../../../../util/copy.js"),
    events = require("../../../../client/pointer.js"),
    form = require("../../../form.js"),
    print = require("../../../../core/console/print.js")

//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Creates and styles the main drop button.
//------------------------------------------------------------------------------
module.exports = function(vars) {

    if (!("button" in vars.container)) {

        if (vars.dev.value) print.time("creating main button")

        vars.container.button = form()
            .container(vars.container.ui)
            .type("button")
            .ui({
                "margin": 0
            })

        if (vars.dev.value) print.timeEnd("creating main button")

    }

    if (vars.focus.changed || vars.data.changed || vars.depth.changed) {

        var depth = vars.depth.value

        var buttonData = copy(vars.data.value.filter(function(d) {
            var match = false
            for (var i = 0; i < vars.id.nesting.length; i++) {
                var level = vars.id.nesting[i]
                match = level in d && d[level] === vars.focus.value
                if (match) {
                    depth = i
                    break
                }
            }
            return match
        })[0])

        if (!buttonData) {
            buttonData = vars.container.button.data()[0] || vars.data.viz[0]
        }

        vars.container.button
            .data([buttonData])
            .id(vars.id.nesting)
            .depth(depth)

    }

    var hover = vars.hover.value === true ? vars.focus.value : false;

    vars.container.button
        .draw({
            "update": vars.draw.update
        })
        .focus("")
        .font(vars.font)
        .format(vars.format)
        .hover(hover)
        .icon({
            "button": vars.icon.drop.value,
            "select": vars.icon.drop.value,
            "value": vars.icon.value
        })
        .text(vars.text.value)
        .timing({
            "ui": vars.draw.timing
        })
        .ui({
            "border": vars.ui.border,
            "color": vars.ui.color,
            "padding": vars.ui.padding.css
        })
        .width(vars.width.value)
        .draw()

    var button = vars.container.button.container(Object).ui

    vars.margin.top += button.node().offsetHeight || button.node().getBoundingClientRect().height

    button.on(events.click, function() {
        vars.self.open(!vars.open.value).draw()
    })

}
},{"../../../../client/pointer.js":69,"../../../../core/console/print.js":83,"../../../../util/copy.js":242,"../../../form.js":138}],180:[function(require,module,exports){
var stringFormat = require("../../../../string/format.js"),
    stringStrip = require("../../../../string/strip.js");

//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Creates and populates the dropdown list of items.
//------------------------------------------------------------------------------
module.exports = function(vars) {

    if (vars.data.url && !vars.data.loaded) {
        var loadingObject = {};
        loadingObject[vars.text.value || vars.id.value] = vars.format.value(vars.format.locale.value.ui.loading);
        vars.data.filtered = [loadingObject];
        vars.data.changed = vars.data.lastFilter !== "loading";
        vars.data.lastFilter = "loading";
    } else if (vars.open.value) {

        if (!vars.search.term) {
            vars.data.filtered = vars.data.viz;
            vars.data.changed = vars.data.lastFilter !== "viz";
            vars.data.lastFilter = "viz";
            if (vars.id.nesting.length > 1 && vars.depth.value < vars.id.nesting.length - 1) {
                vars.data.filtered = vars.data.filtered.filter(function(d) {
                    if ("endPoint" in d.d3po && d.d3po.endPoint === vars.depth.value) {
                        d.d3po.icon = false;
                    }
                    return true;
                });
                vars.data.changed = vars.data.lastFilter !== "depth";
                vars.data.lastFilter = "depth";
            }
        } else {

            var searchWords = stringStrip(vars.search.term).split("_"),
                searchKeys = [vars.id.value, vars.text.value, vars.alt.value, vars.keywords.value];

            searchKeys = searchKeys.filter(function(t) {
                return t;
            });
            searchWords = searchWords.filter(function(t) {
                return t !== "";
            });

            var startMatches = [],
                exactMatches = [],
                softMatches = [],
                searchData = [];

            vars.id.nesting.forEach(function(n) {
                searchData = searchData.concat(vars.data.nested.all[n]);
            });

            searchData.forEach(function(d) {

                var match = false;

                searchKeys.forEach(function(key) {

                    if (!match && key in d && typeof d[key] === "string") {

                        var text = d[key].toLowerCase();

                        if ([vars.text.value, vars.id.value].indexOf(key) >= 0 && text.indexOf(vars.search.term) === 0) {
                            startMatches.push(d);
                            match = true;
                        } else if (text.indexOf(vars.search.term) >= 0) {
                            exactMatches.push(d);
                            match = true;
                        } else {

                            var texts = stringStrip(text).split("_");

                            for (var t in texts) {

                                if (!match) {

                                    for (var s in searchWords) {
                                        if (texts[t].indexOf(searchWords[s]) === 0) {
                                            softMatches.push(d);
                                            match = true;
                                            break;
                                        }
                                    }

                                } else {
                                    break;
                                }

                            }

                        }
                    }

                });

            });

            vars.data.filtered = d3.merge([startMatches, exactMatches, softMatches]);

            vars.data.filtered.forEach(function(d, i) {
                d.d3po_order = i;
            });

            vars.data.changed = true;
            vars.data.lastFilter = "search";

            if (vars.data.filtered.length === 0) {

                var noData = {},
                    str = vars.format.value(vars.format.locale.value.ui.noResults);
                noData[vars.text.value || vars.id.value] = stringFormat(str, "\"" + vars.search.term + "\"");
                vars.data.filtered = [noData];

            }

        }

    } else {
        vars.data.filtered = [];
    }

};
},{"../../../../string/format.js":208,"../../../../string/strip.js":210}],181:[function(require,module,exports){
// Overrides keyboard behavior of the original input element
(function() {
    module.exports = function(vars) {
        if (vars.data.element.value) {
            vars.data.element.value.on("focus." + vars.container.id, function() {
                return vars.self.hover(true).draw();
            });
            vars.data.element.value.on("blur." + vars.container.id, function() {
                var search;
                if (vars.search.enabled) {
                    search = d3.event.relatedTarget !== vars.container.value.select('input').node();
                } else {
                    search = true;
                }
                if (search) {
                    return vars.self.open(false).hover(false).draw();
                }
            });
            vars.data.element.value.on("change." + vars.container.id, function() {
                return vars.self.focus(this.value).draw();
            });
            return vars.data.element.value.on("keydown.cancel_" + vars.container.id, function() {
                if (d3.event.keyCode !== 9) {
                    return d3.event.preventDefault();
                }
            });
        }
    };

}).call(this);
},{}],182:[function(require,module,exports){
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Calculates the height and orientation of the dropdown list, based on
// available screen space.
//------------------------------------------------------------------------------
module.exports = function(vars) {

    var height = vars.height.secondary,
        button = vars.container.button.container().node().getBoundingClientRect(),
        available = window.innerHeight - button.bottom - vars.ui.border * 2 -
        vars.ui.margin.top - vars.ui.margin.bottom -
        vars.ui.padding.top - vars.ui.padding.bottom;

    if (available < button.height * 3) {
        available = button.top - 10;
        vars.self.open({
            "flipped": true
        });
    }
    // else {
    //   vars.self.open({"flipped": false});
    // }

    if (typeof height !== "number") {
        height = available;
    }

    if (height > vars.height.max) {
        height = vars.height.max;
    }

    vars.self.height({
        "secondary": height
    });

};
},{}],183:[function(require,module,exports){
// Populates item list based on filtered data
(function() {
    var active, copy, form, print;

    active = require("./active.js");

    copy = require("../../../../util/copy.js");

    form = require("../../../form.js");

    print = require("../../../../core/console/print.js");

    module.exports = function(vars) {
        var deepest, large, order;
        if (vars.open.value) {
            if (vars.dev.value) {
                print.time("updating list items");
            }
            if (!("items" in vars.container)) {
                vars.container.items = form().container(vars.container.list).type("button").ui({
                    border: 0,
                    display: "block",
                    margin: 0
                }).width(false);
            }
            large = vars.draw.timing ? vars.data.large : 1;
            order = copy(vars.order);
            order.value = vars.search.term.length ? "d3po_order" : vars.order.value;
            deepest = vars.depth.value === vars.id.nesting.length - 1;
            if (vars.focus.changed || vars.container.items.focus() === false) {
                vars.container.items.focus(vars.focus.value, function(value) {
                    var change, data, depth, solo;
                    data = vars.data.filtered.filter(function(f) {
                        return f[vars.id.value] === value;
                    })[0];
                    if (vars.depth.value < vars.id.nesting.length - 1 && vars.id.nesting[vars.depth.value + 1] in data) {
                        depth = vars.depth.value;
                        solo = vars.id.solo.value;
                        vars.history.states.push(function() {
                            return vars.self.depth(depth).id({
                                solo: solo
                            }).draw();
                        });
                        vars.self.depth(vars.depth.value + 1).id({
                            solo: [value]
                        }).draw();
                    } else {
                        if (!vars.depth.changed) {
                            vars.self.open(false);
                        }
                        change = value !== vars.focus.value;
                        if (change && vars.active.value) {
                            change = active(vars, value);
                        }
                        if (change) {
                            vars.self.focus(value).draw();
                        }
                    }
                });
            }
            vars.container.items.active(vars.active.value).data({
                large: large,
                sort: vars.data.sort.value,
                value: vars.data.filtered
            }).draw({
                update: vars.draw.update
            }).font(vars.font.secondary).format(vars.format).hover(vars.hover.value).id(vars.id.value).icon({
                button: (deepest ? false : vars.icon.next),
                select: (deepest ? vars.icon.select : false),
                value: vars.icon.value
            }).order(order).text(vars.text.secondary.value || vars.text.value).timing({
                ui: vars.draw.timing
            }).ui({
                color: {
                    primary: (vars.id.nesting.length === 1 ? vars.ui.color.primary.value : vars.ui.color.secondary.value),
                    secondary: vars.ui.color.secondary.value
                },
                padding: vars.ui.padding.css
            }).draw();
            if (vars.dev.value) {
                print.timeEnd("updating list items");
            }
        }
    };

}).call(this);
},{"../../../../core/console/print.js":83,"../../../../util/copy.js":242,"../../../form.js":138,"./active.js":177}],184:[function(require,module,exports){
// Assigns behavior to the user's keyboard for navigation
(function() {
    module.exports = function(vars) {
        return d3.select(window).on("keydown." + vars.container.id, function() {
            var d, data, depth, hist, hover, i, index, j, key, len, matchKey, ref, solo;
            key = d3.event.keyCode;
            if (vars.open.value || vars.hover.value === true) {
                matchKey = vars.hover.value === true ? "focus" : "hover";
                index = false;
                ref = vars.data.filtered;
                for (i = j = 0, len = ref.length; j < len; i = ++j) {
                    d = ref[i];
                    if (d[vars.id.value] === vars[matchKey].value) {
                        index = i;
                        break;
                    }
                }
                if (key === 9 && vars.open.value && (!vars.search.enabled || (vars.search.enabled && !d3.event.shiftKey))) {
                    return vars.self.open(false).hover(false).draw();
                } else if ([38, 40].indexOf(key) >= 0) {
                    if (index === false) {
                        index = 0;
                    } else if (key === 38) {
                        if (vars.open.value) {
                            if (index <= 0) {
                                index = vars.data.filtered.length - 1;
                            } else {
                                index -= 1;
                            }
                        }
                    } else if (key === 40) {
                        if (vars.open.value) {
                            if (index >= vars.data.filtered.length - 1) {
                                index = 0;
                            } else {
                                index += 1;
                            }
                        }
                    }
                    if (typeof vars.hover.value !== "boolean") {
                        hover = vars.data.filtered[index][vars.id.value];
                    } else {
                        hover = vars.focus.value;
                    }
                    return vars.self.hover(hover).open(true).draw();
                } else if (key === 13) {
                    if (typeof vars.hover.value !== "boolean") {
                        data = vars.data.filtered.filter(function(f) {
                            return f[vars.id.value] === vars.hover.value;
                        })[0];
                        depth = vars.depth.value;
                        if (depth < vars.id.nesting.length - 1 && vars.id.nesting[depth + 1] in data) {
                            solo = vars.id.solo.value;
                            hist = function() {
                                return vars.self.depth(depth).id({
                                    solo: solo
                                }).draw();
                            };
                            vars.history.states.push(hist);
                            return vars.self.depth(vars.depth.value + 1).id({
                                solo: [vars.hover.value]
                            }).draw();
                        } else {
                            return vars.self.focus(vars.hover.value).hover(true).draw();
                        }
                    } else {
                        return vars.self.hover(vars.focus.value).open(true).draw();
                    }
                } else if (key === 27) {
                    if (vars.open.value) {
                        return vars.self.open(false).hover(true).draw();
                    } else if (vars.hover.value === true) {
                        return vars.self.hover(false).draw();
                    }
                }
            }
        });
    };

}).call(this);
},{}],185:[function(require,module,exports){
var print = require("../../../../core/console/print.js")
    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Creates and populates the dropdown list of items.
    //------------------------------------------------------------------------------
module.exports = function(vars) {

    if (vars.dev.value) print.time("populating list")

    vars.container.list = vars.container.selector.selectAll("div.d3po_drop_list")
        .data(["list"])

    vars.container.list.enter().append("div")
        .attr("class", "d3po_drop_list")
        .attr("id", "d3po_drop_list_" + vars.container.id)
        .style("overflow-y", "auto")
        .style("overflow-x", "hidden")

    if (vars.dev.value) print.timeEnd("populating list")

}
},{"../../../../core/console/print.js":83}],186:[function(require,module,exports){
var print = require("../../../../core/console/print.js")
    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Calculates scroll position of list.
    //------------------------------------------------------------------------------
module.exports = function(vars) {

    if (vars.open.value) {

        if (vars.dev.value) print.time("calculating height")

        var hidden = false
        if (vars.container.selector.style("display") == "none") {
            var hidden = true
        }

        if (hidden) vars.container.selector.style("display", "block")

        var old_height = vars.container.selector.style("height"),
            old_scroll = vars.container.selector.property("scrollTop"),
            list_height = vars.container.list.style("max-height"),
            list_scroll = vars.container.list.property("scrollTop")

        vars.container.selector.style("height", "auto")
        vars.container.list.style("max-height", "200000px")

        vars.container.listHeight = parseFloat(vars.container.selector.style("height"), 10)

        vars.container.list
            .style("max-height", list_height)
            .property("scrollTop", list_scroll)

        vars.container.selector
            .style("height", old_height)
            .property("scrollTop", old_scroll)

        var scrolling = false
        if (vars.container.listHeight > vars.height.secondary) {
            vars.container.listHeight = vars.height.secondary
            scrolling = true
        }

        if (hidden) vars.container.selector.style("display", "none")

        if (vars.dev.value) print.timeEnd("calculating height")

        if (scrolling) {

            if (vars.dev.value) print.time("calculating scroll position")

            var options = vars.container.list.select("div").selectAll("div.d3po_node")
            var option = options[0][0]
            var matchID = typeof vars.hover.value !== "boolean" ? vars.hover.value : vars.focus.value;
            options.each(function(d, i) {
                if (d[vars.id.value] === matchID) {
                    option = this
                }
            })

            var hidden = false
            if (vars.container.selector.style("display") === "none") {
                hidden = true
                vars.container.selector.style("display", "block")
            }

            var button_top = option.offsetTop,
                button_height = option.offsetHeight || option.getBoundingClientRect().height,
                list_top = vars.container.list.property("scrollTop")

            if (hidden) vars.container.selector.style("display", "none")

            if (hidden || vars.data.changed || vars.depth.changed) {

                vars.container.listScroll = button_top

            } else {

                vars.container.listScroll = list_top;

                if (button_top < list_top) {
                    vars.container.listScroll = button_top
                } else if (button_top + button_height > list_top + vars.height.secondary - vars.search.height) {
                    vars.container.listScroll = button_top - (vars.height.secondary - button_height - vars.search.height)
                }

            }

            if (vars.dev.value) print.timeEnd("calculating scroll position")

        } else {
            vars.container.listScroll = 0
        }

    } else {
        vars.container.listScroll = vars.container.list.property("scrollTop")
        vars.container.listHeight = 0
    }

}
},{"../../../../core/console/print.js":83}],187:[function(require,module,exports){
var prefix = require("../../../../client/prefix.js"),
    print = require("../../../../core/console/print.js")
    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Creates and styles the search box, if enabled.
    //------------------------------------------------------------------------------
module.exports = function(vars) {

    if (vars.dev.value) print.time("creating search")

    var data = require("./data.js"),
        items = require("./items.js"),
        update = require("./update.js")

    vars.container.search = vars.container.selector.selectAll("div.d3po_drop_search")
        .data(vars.search.enabled ? ["search"] : [])

    function searchStyle(elem) {

        elem
            .style("padding", vars.ui.padding.css)
            .style("display", "block")
            .style("background-color", d3.rgb(vars.ui.color.primary.value).darker(0.15).formatHex())

    }

    function inputStyle(elem) {

        var width = vars.width.secondary - vars.ui.padding.left * 2 - vars.ui.padding.right * 2 + vars.ui.border * 2

        elem
            .style("padding", vars.ui.padding.left / 2 + vars.ui.padding.right / 2 + "px")
            .style("width", width + "px")
            .style("border-width", "0px")
            .style("font-family", vars.font.secondary.family.value)
            .style("font-size", vars.font.secondary.size + "px")
            .style("font-weight", vars.font.secondary.weight)
            .style("text-align", vars.font.secondary.align)
            .style("outline", "none")
            .style(prefix() + "border-radius", "0")
            .attr("placeholder", vars.format.value(vars.format.locale.value.method.search))

    }

    if (vars.draw.timing) {

        vars.container.search.transition().duration(vars.draw.timing)
            .call(searchStyle)

        vars.container.search.select("input").transition().duration(vars.draw.timing)
            .call(inputStyle)

    } else {

        vars.container.search
            .call(searchStyle)

        vars.container.search.select("input")
            .call(inputStyle)

    }

    vars.container.search.enter()
        .insert("div", "#d3po_drop_list_" + vars.container.id)
        .attr("class", "d3po_drop_search")
        .attr("id", "d3po_drop_search_" + vars.container.id)
        .call(searchStyle)
        .append("input")
        .attr("id", "d3po_drop_input_" + vars.container.id)
        .style("-webkit-appearance", "none")
        .call(inputStyle)

    vars.container.search.select("input").on("keyup." + vars.container.id, function(d) {
        var term = this.value;
        if (vars.search.term !== term) {
            vars.search.term = term;
            data(vars);
            items(vars);
            update(vars);
        }
    });

    vars.container.search.exit().remove()

    var oldDisplay = vars.container.selector.style("display")
    vars.container.selector.style("display", "block")
    vars.search.height = vars.search.enabled ? vars.container.search.node().offsetHeight ||
        vars.container.search.node().getBoundingClientRect().height : 0;
    vars.container.selector.style("display", oldDisplay)

    if (vars.search.enabled) {
        vars.margin.title += vars.search.height
    }

    if (vars.dev.value) print.timeEnd("creating search")

}
},{"../../../../client/prefix.js":70,"../../../../core/console/print.js":83,"./data.js":180,"./items.js":183,"./update.js":190}],188:[function(require,module,exports){
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Creates and styles the div that holds the search box and item list.
//------------------------------------------------------------------------------
module.exports = function(vars) {

    vars.container.selector = vars.container.ui
        .selectAll("div.d3po_drop_selector")
        .data(["selector"])

    vars.container.selector.enter().append("div")
        .attr("class", "d3po_drop_selector")
        .style("position", "absolute")
        .style("top", "0px")
        .style("z-index", "-1")
        .style("overflow", "hidden")

    vars.container.selector
        .style("padding", vars.ui.border + "px")

}
},{}],189:[function(require,module,exports){
var events = require("../../../../client/pointer.js"),
    lighter = require("../../../../color/lighter.js"),
    print = require("../../../../core/console/print.js"),
    textColor = require("../../../../color/text.js")

//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Creates and styles the title and back button.
//------------------------------------------------------------------------------
module.exports = function(vars) {

    if (vars.open.value) {

        if (vars.dev.value) print.time("creating title and back button")

        var self = this,
            enabled = vars.id.solo.value.length === 1 && vars.depth.value > 0,
            title = enabled,
            focus = vars.container.button.data(Object).viz[0]

        title = true
        for (var i = 0; i < vars.id.nesting.length; i++) {
            var level = vars.id.nesting[i]
            if (level in focus && focus[level] === vars.focus.value) {
                title = false
                break;
            }
        }

        vars.container.title = vars.container.selector.selectAll("div.d3po_drop_title")
            .data(enabled ? ["title"] : [])

        function boxStyle(elem) {

            elem
                .style("padding", vars.ui.padding.css)
                .style("display", "block")
                .style("background-color", vars.ui.color.secondary.value)
                .style("font-family", vars.font.secondary.family.value)
                .style("font-size", vars.font.secondary.size + "px")
                .style("font-weight", vars.font.secondary.weight)
                .style("text-align", vars.font.secondary.align)
                .style("color", textColor(vars.ui.color.secondary.value))

        }

        function backStyle(elem) {

            if (!elem.empty()) {

                var className = vars.icon.back.value.indexOf("fa-") === 0 ? " fa " + vars.icon.back.value : ""
                className = "d3po_drop_back" + className

                var text = vars.icon.back.value.indexOf("fa-") === 0 ? "" : vars.icon.back.value

                elem
                    .style("position", "absolute")
                    .attr("class", className)
                    .style("top", vars.ui.padding.top + (vars.font.secondary.size / 2) / 2.5 + "px")
                    .html(text)

            }

        }

        function titleStyle(elem) {

            var text = title ? vars.focus.value : vars.format.locale.value.ui.back

            elem
                .text(vars.format.value(text))
                .style("padding", "0px " + (vars.ui.padding.left + vars.ui.padding.right) + "px")

        }

        if (vars.draw.timing) {

            vars.container.title.transition().duration(vars.draw.timing)
                .call(boxStyle)

            vars.container.title.select("div.d3po_drop_title_text")
                .transition().duration(vars.draw.timing)
                .call(titleStyle)

        } else {

            vars.container.title
                .call(boxStyle)

            vars.container.title.select("div.d3po_drop_title_text")
                .call(titleStyle)

        }

        vars.container.title.select("span.d3po_drop_back")
            .call(backStyle)

        var enter = vars.container.title.enter()
            .insert("div", "#d3po_drop_list_" + vars.container.id)
            .attr("class", "d3po_drop_title")
            .attr("id", "d3po_drop_title_" + vars.container.id)
            .call(boxStyle)

        enter.append("span")
            .attr("id", "d3po_drop_back_" + vars.container.id)
            .attr("class", "d3po_drop_back")
            .call(backStyle)

        enter.append("div")
            .attr("id", "d3po_drop_title_text_" + vars.container.id)
            .attr("class", "d3po_drop_title_text")
            .call(titleStyle)

        vars.container.title
            .on(events.over, function(d, i) {

                var color = lighter(vars.ui.color.secondary.value)

                d3.select(this).style("cursor", "pointer")
                    .transition().duration(vars.timing.mouseevents)
                    .style("background-color", color)
                    .style("color", textColor(color))

            })
            .on(events.out, function(d) {

                var color = vars.ui.color.secondary.value

                d3.select(this).style("cursor", "auto")
                    .transition().duration(vars.timing.mouseevents)
                    .style("background-color", color)
                    .style("color", textColor(color))

            })
            .on(events.click, function(d) {
                vars.history.back()
            })

        vars.container.title.exit().remove()

        if (enabled) {
            vars.margin.title += vars.container.title.node().offsetHeight || vars.container.title.node().getBoundingClientRect().height
        }

        if (vars.dev.value) print.timeEnd("creating title and back button")

    }

}
},{"../../../../client/pointer.js":69,"../../../../color/lighter.js":76,"../../../../color/text.js":81,"../../../../core/console/print.js":83}],190:[function(require,module,exports){
var items = require("./items.js"),
    height = require("./height.js"),
    print = require("../../../../core/console/print.js"),
    scrolllist = require("./scroll.js"),
    arrow = require("./arrow.js")

//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Redraws only the drop down list.
//------------------------------------------------------------------------------
module.exports = function(vars) {

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // If the menu is open, set the container element's z-index to '9999'.
    //----------------------------------------------------------------------------
    if (vars.draw.timing) {

        vars.container.ui.transition().duration(vars.draw.timing)
            .each("start", function() {
                if (vars.open.value) {
                    d3.select(this).style("z-index", 9999)
                }
            })
            .style("margin", vars.ui.margin.css)
            .each("end", function() {
                if (!vars.open.value) {
                    d3.select(this).style("z-index", "auto")
                }
            })

    } else {

        vars.container.ui
            .style("margin", vars.ui.margin.css)
            .style("z-index", function() {
                if (vars.open.value) {
                    return 9999
                } else {
                    return "auto"
                }
            })

    }

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Update list items based on filtered data.
    //----------------------------------------------------------------------------
    items(vars)

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Calculate the height and orientation of the dropdown list.
    //----------------------------------------------------------------------------
    height(vars)

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Calculate scroll position of dropdown menu.
    //----------------------------------------------------------------------------
    scrolllist(vars)

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Rotate the dropdown button arrow appropriately.
    //----------------------------------------------------------------------------
    arrow(vars)

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Update List
    //----------------------------------------------------------------------------
    if (vars.dev.value) print.time("drawing list")

    function position(elem) {
        var flipped = vars.open.flipped.value
        elem
            .style("top", function() {
                return flipped ? "auto" : vars.margin.top - vars.ui.border + "px";
            })
            .style("bottom", function() {
                return flipped ? vars.margin.top + vars.ui.border + "px" : "auto";
            });
    }

    function update(elem) {

        elem
            .style("left", function() {
                if (vars.font.align.value === "left") {
                    return vars.margin.left + "px";
                } else if (vars.font.align.value === "center") {
                    return vars.margin.left - ((vars.width.secondary - vars.width.value) / 2) + "px";
                } else {
                    return "auto";
                }
            })
            .style("right", function() {
                return vars.font.align.value === "right" ? "0px" : "auto";
            })
            .style("height", vars.container.listHeight + "px")
            .style("padding", vars.ui.border + "px")
            .style("background-color", vars.ui.color.secondary.value)
            .style("z-index", function() {
                return vars.open.value ? "9999" : "-1";
            })
            .style("width", (vars.width.secondary - (vars.ui.border * 2)) + "px")
            .style("opacity", vars.open.value ? 1 : 0)
            .call(position);

    }

    function finish(elem) {

        elem.style("display", vars.open.value ? null : "none")
            .call(position);


        if (vars.search.enabled && vars.open.value) {
            vars.container.selector.select("div.d3po_drop_search input").node().focus()
        }

    }

    var max_height = vars.open.value ? vars.height.secondary - vars.margin.title : 0;

    if (!vars.draw.timing) {

        vars.container.selector.call(update).call(finish)

        vars.container.list
            .style("width", vars.width.secondary - vars.ui.border * 2 + "px")
            .style("max-height", max_height + "px")
            .property("scrollTop", vars.container.listScroll);

    } else {
        vars.container.selector.transition().duration(vars.draw.timing)
            .each("start", function() {
                d3.select(this)
                    .style("display", vars.open.value ? "block" : null)
            })
            .call(update)
            .each("end", function() {

                d3.select(this).transition().duration(vars.draw.timing)
                    .call(finish)

            })

        function scrollTopTween(scrollTop) {
            return function() {
                var i = d3.interpolateNumber(this.scrollTop, scrollTop);
                return function(t) {
                    this.scrollTop = i(t);
                };
            };
        }

        vars.container.list.transition().duration(vars.draw.timing)
            .style("width", vars.width.secondary - vars.ui.border * 2 + "px")
            .style("max-height", max_height + "px")
            .tween("scroll", scrollTopTween(vars.container.listScroll))
    }

    if (vars.dev.value) print.timeEnd("drawing list")

}
},{"../../../../core/console/print.js":83,"./arrow.js":178,"./height.js":182,"./items.js":183,"./scroll.js":186}],191:[function(require,module,exports){
var copy = require("../../../../util/copy.js"),
    fontTester = require("../../../../core/font/tester.js"),
    form = require("../../../form.js"),
    print = require("../../../../core/console/print.js"),
    validObject = require("../../../../object/validate.js")
    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // If no widths are defined, then this calculates the width needed to fit the
    // longest entry in the list.
    //------------------------------------------------------------------------------
module.exports = function(vars) {

    var data = [],
        buffer = 0
    for (var level in vars.data.nested.all) {
        var newData = vars.data.nested.all[level],
            key = validObject(vars.text.nesting) && level in vars.text.nesting ?
            vars.text.nesting[level][0] : level

        if ([vars.id.value, vars.text.value].indexOf(key) < 0) {
            newData = copy(newData)
            newData.forEach(function(d) {
                d[vars.text.value || vars.id.value] = d[key]
            })
        }
        data = data.concat(newData)
    }

    function getWidth(type) {

        var key = type === "primary" ? "value" : type,
            icon = key === "value" ? vars.icon.drop.value :
            vars.icon.select.value || vars.icon.drop.value,
            text = key === "value" ? vars.text.value :
            vars.text.secondary.value || vars.text.value,
            font = key === "value" ? vars.font : vars.font.secondary

        if (vars.dev.value) print.time("calculating " + type + " width")

        var button = form()
            .container(fontTester())
            .data({
                "large": 9999,
                "value": data
            })
            .draw({
                "update": false
            })
            .font(font)
            .format(vars.format)
            .icon({
                "button": icon,
                "value": vars.icon.value
            })
            .id(vars.id.value)
            .timing({
                "ui": 0
            })
            .text(text || vars.id.value)
            .type("button")
            .ui({
                "border": type === "primary" ? vars.ui.border : 0,
                "display": "inline-block",
                "margin": 0,
                "padding": vars.ui.padding.css
            })
            .width(false)
            .draw()

        var w = []
        button.selectAll("div.d3po_node").each(function(o) {
            w.push(this.offsetWidth + 1)
        }).remove()

        var dropWidth = {}
        dropWidth[key] = d3.max(w)

        vars.self.width(dropWidth)

        if (vars.dev.value) print.timeEnd("calculating " + type + " width")

    }

    if (typeof vars.width.value !== "number") {

        getWidth("primary")

    }

    if (typeof vars.width.secondary !== "number") {

        if (!vars.text.secondary.value || vars.text.value === vars.text.secondary.value) {
            vars.self.width({
                "secondary": vars.width.value
            })
        } else {
            getWidth("secondary")
        }

    }

}
},{"../../../../core/console/print.js":83,"../../../../core/font/tester.js":100,"../../../../object/validate.js":207,"../../../../util/copy.js":242,"../../../form.js":138}],192:[function(require,module,exports){
var child = require("../../../../util/child.js")

//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Recursive function that applies a click event to all parent windows that
// will close the dropdown if it is open.
//------------------------------------------------------------------------------
var windowEvents = function(vars, elem) {

    if (elem === undefined) {
        var elem = window
    }

    d3.select(elem).on("click." + vars.container.id, function() {

        var element = d3.event.target || d3.event.toElement,
            parent = element.parentNode

        if (parent && ["d3po_node", "d3po_drop_title"].indexOf(parent.className) >= 0) {
            element = parent.parentNode
        }

        if (element && parent && !child(vars.container.ui, element) && (vars.open.value || vars.hover.value)) {
            vars.self.open(false).hover(false).draw()
        }

    })

    try {
        var same_origin = window.parent.location.host === window.location.host;
    } catch (e) {
        var same_origin = false
    }

    if (same_origin) {
        if (elem.self !== window.top) {
            windowEvents(vars, elem.parent)
        }
    }

}

module.exports = windowEvents
},{"../../../../util/child.js":240}],193:[function(require,module,exports){
var form = require("../form.js")

//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Creates a set of Toggle Buttons
//------------------------------------------------------------------------------
module.exports = function(vars) {

    if (!("buttons" in vars.container)) {

        vars.container.buttons = form()
            .container(vars.container.ui)
            .type("button")

    }

    var dataLength = vars.data.viz.length,
        buttonWidth = vars.width.value ?
        vars.width.value / dataLength :
        false

    var toggles = vars.container.ui.selectAll("div.d3po_toggle")
        .data(vars.data.viz, function(d) {
            return d[vars.id.value];
        })

    toggles.exit().remove();

    toggles.enter().append("div")
        .attr("class", "d3po_toggle")
        .style("display", "inline-block")
        .style("vertical-align", "top")

    toggles.order()
        .each(function(d) {

            if (!("form" in d.d3po)) {
                d.d3po.form = form().container(d3.select(this))
            }

            var id = vars.id.nesting.length > vars.depth.value ? vars.id.nesting[vars.depth.value + 1] : vars.id.value

            if (d[id] instanceof Array) {
                d.d3po.form
                    .container({
                        "id": vars.container.id + "_" + d[vars.id.value]
                    })
                    .data(d[id])
                    .id(vars.id.nesting.slice(1))
                    .type("drop")
            } else {
                d.d3po.form
                    .data([d])
                    .id(vars.id.value)
                    .type("button")
            }

            d.d3po.form
                .color(vars.color)
                .focus(vars.focus.value, function(value) {

                    if (value !== vars.focus.value) {
                        vars.self.focus(value).draw()
                    }

                })
                .hover(vars.hover.value)
                .icon({
                    "select": false,
                    "value": vars.icon.value
                })
                .font(vars.font)
                .format(vars.format)
                .order(vars.order)
                .text(vars.text.value)
                .ui({
                    "border": vars.ui.border,
                    "color": vars.ui.color,
                    "display": "inline-block",
                    "margin": 0,
                    "padding": vars.ui.padding.css
                })
                .width(buttonWidth)
                .draw()

        })

    if (vars.data.element.value) {
        vars.data.element.value
            .on("focus." + vars.container.id, function() {
                vars.self.focus(this.value).hover(this.value).draw();
            })
            .on("blur." + vars.container.id, function() {
                vars.self.hover(false).draw();
            })
    }

}
},{"../form.js":138}],194:[function(require,module,exports){
// Finds the maximum area rectangle that fits inside a polygon
(function() {
    var intersectPoints, lineIntersection, pointInPoly, pointInSegmentBox, polyInsidePoly, rayIntersectsSegment, rotatePoint, rotatePoly, segmentsIntersect, simplify, squaredDist;

    simplify = require("simplify-js");

    module.exports = function(poly, options) {
        var aRatio, aRatios, angle, angleRad, angleStep, angles, area, aspectRatioStep, aspectRatios, bBox, boxHeight, boxWidth, centroid, events, height, i, insidePoly, j, k, l, left, len, len1, len2, len3, m, maxArea, maxAspectRatio, maxHeight, maxRect, maxWidth, maxx, maxy, minAspectRatio, minSqDistH, minSqDistW, minx, miny, modifOrigins, origOrigin, origin, origins, p, p1H, p1W, p2H, p2W, rectPoly, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, right, rndPoint, rndX, rndY, tempPoly, tolerance, width, widthStep, x0, y0;
        if (poly.length < 3) {
            return null;
        }
        events = [];
        aspectRatioStep = 0.5;
        angleStep = 5;
        if (options == null) {
            options = {};
        }
        if (options.maxAspectRatio == null) {
            options.maxAspectRatio = 15;
        }
        if (options.minWidth == null) {
            options.minWidth = 0;
        }
        if (options.minHeight == null) {
            options.minHeight = 0;
        }
        if (options.tolerance == null) {
            options.tolerance = 0.02;
        }
        if (options.nTries == null) {
            options.nTries = 20;
        }
        if (options.angle != null) {
            if (options.angle instanceof Array) {
                angles = options.angle;
            } else if (typeof options.angle === 'number') {
                angles = [options.angle];
            } else if (typeof options.angle === 'string' && !isNaN(options.angle)) {
                angles = [Number(options.angle)];
            }
        }
        if (angles == null) {
            angles = d3.range(-90, 90 + angleStep, angleStep);
        }
        if (options.aspectRatio != null) {
            if (options.aspectRatio instanceof Array) {
                aspectRatios = options.aspectRatio;
            } else if (typeof options.aspectRatio === 'number') {
                aspectRatios = [options.aspectRatio];
            } else if (typeof options.aspectRatio === 'string' && !isNaN(options.aspectRatio)) {
                aspectRatios = [Number(options.aspectRatio)];
            }
        }
        if (options.origin != null) {
            if (options.origin instanceof Array) {
                if (options.origin[0] instanceof Array) {
                    origins = options.origin;
                } else {
                    origins = [options.origin];
                }
            }
        }
        area = Math.abs(d3.polygonArea(poly));
        if (area === 0) {
            return null;
        }
        ref = d3.extent(poly, function(d) {
            return d[0];
        }), minx = ref[0], maxx = ref[1];
        ref1 = d3.extent(poly, function(d) {
            return d[1];
        }), miny = ref1[0], maxy = ref1[1];
        tolerance = Math.min(maxx - minx, maxy - miny) * options.tolerance;
        tempPoly = (function() {
            var j, len, results;
            results = [];
            for (j = 0, len = poly.length; j < len; j++) {
                p = poly[j];
                results.push({
                    x: p[0],
                    y: p[1]
                });
            }
            return results;
        })();
        if (tolerance > 0) {
            tempPoly = simplify(tempPoly, tolerance);
            poly = (function() {
                var j, len, results;
                results = [];
                for (j = 0, len = tempPoly.length; j < len; j++) {
                    p = tempPoly[j];
                    results.push([p.x, p.y]);
                }
                return results;
            })();
        }
        if (options.vdebug) {
            events.push({
                type: 'simplify',
                poly: poly
            });
        }
        ref2 = d3.extent(poly, function(d) {
            return d[0];
        }), minx = ref2[0], maxx = ref2[1];
        ref3 = d3.extent(poly, function(d) {
            return d[1];
        }), miny = ref3[0], maxy = ref3[1];
        bBox = [
            [minx, miny],
            [maxx, miny],
            [maxx, maxy],
            [minx, maxy]
        ];
        ref4 = [maxx - minx, maxy - miny], boxWidth = ref4[0], boxHeight = ref4[1];
        widthStep = Math.min(boxWidth, boxHeight) / 50;
        if (origins == null) {
            origins = [];
            centroid = d3.polygonCentroid(poly);
            if (pointInPoly(centroid, poly)) {
                origins.push(centroid);
            }
            while (origins.length < options.nTries) {
                rndX = Math.random() * boxWidth + minx;
                rndY = Math.random() * boxHeight + miny;
                rndPoint = [rndX, rndY];
                if (pointInPoly(rndPoint, poly)) {
                    origins.push(rndPoint);
                }
            }
        }
        if (options.vdebug) {
            events.push({
                type: 'origins',
                points: origins
            });
        }
        maxArea = 0;
        maxRect = null;
        for (j = 0, len = angles.length; j < len; j++) {
            angle = angles[j];
            angleRad = -angle * Math.PI / 180;
            if (options.vdebug) {
                events.push({
                    type: 'angle',
                    angle: angle
                });
            }
            for (i = k = 0, len1 = origins.length; k < len1; i = ++k) {
                origOrigin = origins[i];
                ref5 = intersectPoints(poly, origOrigin, angleRad), p1W = ref5[0], p2W = ref5[1];
                ref6 = intersectPoints(poly, origOrigin, angleRad + Math.PI / 2), p1H = ref6[0], p2H = ref6[1];
                modifOrigins = [];
                if ((p1W != null) && (p2W != null)) {
                    modifOrigins.push([(p1W[0] + p2W[0]) / 2, (p1W[1] + p2W[1]) / 2]);
                }
                if ((p1H != null) && (p2H != null)) {
                    modifOrigins.push([(p1H[0] + p2H[0]) / 2, (p1H[1] + p2H[1]) / 2]);
                }
                if (options.vdebug) {
                    events.push({
                        type: 'modifOrigin',
                        idx: i,
                        p1W: p1W,
                        p2W: p2W,
                        p1H: p1H,
                        p2H: p2H,
                        modifOrigins: modifOrigins
                    });
                }
                for (l = 0, len2 = modifOrigins.length; l < len2; l++) {
                    origin = modifOrigins[l];
                    if (options.vdebug) {
                        events.push({
                            type: 'origin',
                            cx: origin[0],
                            cy: origin[1]
                        });
                    }
                    ref7 = intersectPoints(poly, origin, angleRad), p1W = ref7[0], p2W = ref7[1];
                    if (p1W === null || p2W === null) {
                        continue;
                    }
                    minSqDistW = Math.min(squaredDist(origin, p1W), squaredDist(origin, p2W));
                    maxWidth = 2 * Math.sqrt(minSqDistW);
                    ref8 = intersectPoints(poly, origin, angleRad + Math.PI / 2), p1H = ref8[0], p2H = ref8[1];
                    if (p1H === null || p2H === null) {
                        continue;
                    }
                    minSqDistH = Math.min(squaredDist(origin, p1H), squaredDist(origin, p2H));
                    maxHeight = 2 * Math.sqrt(minSqDistH);
                    if (maxWidth * maxHeight < maxArea) {
                        continue;
                    }
                    if (aspectRatios != null) {
                        aRatios = aspectRatios;
                    } else {
                        minAspectRatio = Math.max(1, options.minWidth / maxHeight, maxArea / (maxHeight * maxHeight));
                        maxAspectRatio = Math.min(options.maxAspectRatio, maxWidth / options.minHeight, (maxWidth * maxWidth) / maxArea);
                        aRatios = d3.range(minAspectRatio, maxAspectRatio + aspectRatioStep, aspectRatioStep);
                    }
                    for (m = 0, len3 = aRatios.length; m < len3; m++) {
                        aRatio = aRatios[m];
                        left = Math.max(options.minWidth, Math.sqrt(maxArea * aRatio));
                        right = Math.min(maxWidth, maxHeight * aRatio);
                        if (right * maxHeight < maxArea) {
                            continue;
                        }
                        if ((right - left) >= widthStep) {
                            if (options.vdebug) {
                                events.push({
                                    type: 'aRatio',
                                    aRatio: aRatio
                                });
                            }
                        }
                        while ((right - left) >= widthStep) {
                            width = (left + right) / 2;
                            height = width / aRatio;
                            x0 = origin[0], y0 = origin[1];
                            rectPoly = [
                                [x0 - width / 2, y0 - height / 2],
                                [x0 + width / 2, y0 - height / 2],
                                [x0 + width / 2, y0 + height / 2],
                                [x0 - width / 2, y0 + height / 2]
                            ];
                            rectPoly = rotatePoly(rectPoly, angleRad, origin);
                            if (polyInsidePoly(rectPoly, poly)) {
                                insidePoly = true;
                                maxArea = width * height;
                                maxRect = {
                                    cx: x0,
                                    cy: y0,
                                    width: width,
                                    height: height,
                                    angle: angle
                                };
                                left = width;
                            } else {
                                insidePoly = false;
                                right = width;
                            }
                            if (options.vdebug) {
                                events.push({
                                    type: 'rectangle',
                                    cx: x0,
                                    cy: y0,
                                    width: width,
                                    height: height,
                                    areaFraction: (width * height) / area,
                                    angle: angle,
                                    insidePoly: insidePoly
                                });
                            }
                        }
                    }
                }
            }
        }
        return [maxRect, maxArea, events];
    };

    squaredDist = function(a, b) {
        var deltax, deltay;
        deltax = b[0] - a[0];
        deltay = b[1] - a[1];
        return deltax * deltax + deltay * deltay;
    };

    rayIntersectsSegment = function(p, p1, p2) {
        var a, b, mAB, mAP, ref;
        ref = p1[1] < p2[1] ? [p1, p2] : [p2, p1], a = ref[0], b = ref[1];
        if (p[1] === b[1] || p[1] === a[1]) {
            p[1] += Number.MIN_VALUE;
        }
        if (p[1] > b[1] || p[1] < a[1]) {
            return false;
        } else if (p[0] > a[0] && p[0] > b[0]) {
            return false;
        } else if (p[0] < a[0] && p[0] < b[0]) {
            return true;
        } else {
            mAB = (b[1] - a[1]) / (b[0] - a[0]);
            mAP = (p[1] - a[1]) / (p[0] - a[0]);
            return mAP > mAB;
        }
    };

    pointInPoly = function(p, poly) {
        var a, b, c, i, n;
        i = -1;
        n = poly.length;
        b = poly[n - 1];
        c = 0;
        while (++i < n) {
            a = b;
            b = poly[i];
            if (rayIntersectsSegment(p, a, b)) {
                c++;
            }
        }
        return c % 2 !== 0;
    };

    pointInSegmentBox = function(p, p1, q1) {
        var eps, px, py;
        eps = 1e-9;
        px = p[0], py = p[1];
        if (px < Math.min(p1[0], q1[0]) - eps || px > Math.max(p1[0], q1[0]) + eps || py < Math.min(p1[1], q1[1]) - eps || py > Math.max(p1[1], q1[1]) + eps) {
            return false;
        }
        return true;
    };

    lineIntersection = function(p1, q1, p2, q2) {
        var cross1, cross2, denom, dx1, dx2, dy1, dy2, eps, px, py;
        eps = 1e-9;
        dx1 = p1[0] - q1[0];
        dy1 = p1[1] - q1[1];
        dx2 = p2[0] - q2[0];
        dy2 = p2[1] - q2[1];
        denom = dx1 * dy2 - dy1 * dx2;
        if (Math.abs(denom) < eps) {
            return null;
        }
        cross1 = p1[0] * q1[1] - p1[1] * q1[0];
        cross2 = p2[0] * q2[1] - p2[1] * q2[0];
        px = (cross1 * dx2 - cross2 * dx1) / denom;
        py = (cross1 * dy2 - cross2 * dy1) / denom;
        return [px, py];
    };

    segmentsIntersect = function(p1, q1, p2, q2) {
        var p;
        p = lineIntersection(p1, q1, p2, q2);
        if (p == null) {
            return false;
        }
        return pointInSegmentBox(p, p1, q1) && pointInSegmentBox(p, p2, q2);
    };

    polyInsidePoly = function(polyA, polyB) {
        var aA, aB, bA, bB, iA, iB, nA, nB;
        iA = -1;
        nA = polyA.length;
        nB = polyB.length;
        bA = polyA[nA - 1];
        while (++iA < nA) {
            aA = bA;
            bA = polyA[iA];
            iB = -1;
            bB = polyB[nB - 1];
            while (++iB < nB) {
                aB = bB;
                bB = polyB[iB];
                if (segmentsIntersect(aA, bA, aB, bB)) {
                    return false;
                }
            }
        }
        return pointInPoly(polyA[0], polyB);
    };

    rotatePoint = function(p, alpha, origin) {
        var cosAlpha, sinAlpha, xshifted, yshifted;
        if (origin == null) {
            origin = [0, 0];
        }
        xshifted = p[0] - origin[0];
        yshifted = p[1] - origin[1];
        cosAlpha = Math.cos(alpha);
        sinAlpha = Math.sin(alpha);
        return [cosAlpha * xshifted - sinAlpha * yshifted + origin[0], sinAlpha * xshifted + cosAlpha * yshifted + origin[1]];
    };

    rotatePoly = function(poly, alpha, origin) {
        var j, len, point, results;
        results = [];
        for (j = 0, len = poly.length; j < len; j++) {
            point = poly[j];
            results.push(rotatePoint(point, alpha, origin));
        }
        return results;
    };

    intersectPoints = function(poly, origin, alpha) {
        var a, b, closestPointLeft, closestPointRight, eps, i, idx, minSqDistLeft, minSqDistRight, n, p, shiftedOrigin, sqDist, x0, y0;
        eps = 1e-9;
        origin = [origin[0] + eps * Math.cos(alpha), origin[1] + eps * Math.sin(alpha)];
        x0 = origin[0], y0 = origin[1];
        shiftedOrigin = [x0 + Math.cos(alpha), y0 + Math.sin(alpha)];
        idx = 0;
        if (Math.abs(shiftedOrigin[0] - x0) < eps) {
            idx = 1;
        }
        i = -1;
        n = poly.length;
        b = poly[n - 1];
        minSqDistLeft = Number.MAX_VALUE;
        minSqDistRight = Number.MAX_VALUE;
        closestPointLeft = null;
        closestPointRight = null;
        while (++i < n) {
            a = b;
            b = poly[i];
            p = lineIntersection(origin, shiftedOrigin, a, b);
            if ((p != null) && pointInSegmentBox(p, a, b)) {
                sqDist = squaredDist(origin, p);
                if (p[idx] < origin[idx]) {
                    if (sqDist < minSqDistLeft) {
                        minSqDistLeft = sqDist;
                        closestPointLeft = p;
                    }
                } else if (p[idx] > origin[idx]) {
                    if (sqDist < minSqDistRight) {
                        minSqDistRight = sqDist;
                        closestPointRight = p;
                    }
                }
            }
        }
        return [closestPointLeft, closestPointRight];
    };

}).call(this);
},{"simplify-js":54}],195:[function(require,module,exports){
// Gives X and Y offset based off angle and shape
(function() {
    module.exports = function(radians, distance, shape) {
        var adjacentLegLength, coords, diagonal, oppositeLegLength;
        coords = {
            x: 0,
            y: 0
        };
        if (radians < 0) {
            radians = Math.PI * 2 + radians;
        }
        if (shape === "square") {
            diagonal = 45 * (Math.PI / 180);
            if (radians <= Math.PI) {
                if (radians < (Math.PI / 2)) {
                    if (radians < diagonal) {
                        coords.x += distance;
                        oppositeLegLength = Math.tan(radians) * distance;
                        coords.y += oppositeLegLength;
                    } else {
                        coords.y += distance;
                        adjacentLegLength = distance / Math.tan(radians);
                        coords.x += adjacentLegLength;
                    }
                } else {
                    if (radians < (Math.PI - diagonal)) {
                        coords.y += distance;
                        adjacentLegLength = distance / Math.tan(Math.PI - radians);
                        coords.x -= adjacentLegLength;
                    } else {
                        coords.x -= distance;
                        oppositeLegLength = Math.tan(Math.PI - radians) * distance;
                        coords.y += oppositeLegLength;
                    }
                }
            } else {
                if (radians < (3 * Math.PI / 2)) {
                    if (radians < (diagonal + Math.PI)) {
                        coords.x -= distance;
                        oppositeLegLength = Math.tan(radians - Math.PI) * distance;
                        coords.y -= oppositeLegLength;
                    } else {
                        coords.y -= distance;
                        adjacentLegLength = distance / Math.tan(radians - Math.PI);
                        coords.x -= adjacentLegLength;
                    }
                } else {
                    if (radians < (2 * Math.PI - diagonal)) {
                        coords.y -= distance;
                        adjacentLegLength = distance / Math.tan(2 * Math.PI - radians);
                        coords.x += adjacentLegLength;
                    } else {
                        coords.x += distance;
                        oppositeLegLength = Math.tan(2 * Math.PI - radians) * distance;
                        coords.y -= oppositeLegLength;
                    }
                }
            }
        } else {
            coords.x += distance * Math.cos(radians);
            coords.y += distance * Math.sin(radians);
        }
        return coords;
    };

}).call(this);
},{}],196:[function(require,module,exports){
(function() {
    var offset;

    offset = require("../geom/offset.js");

    module.exports = function(path) {
        var angle, i, j, last, len, length, o, obtuse, p, poly, prev, radius, segments, start, step, width;
        if (!path) {
            return [];
        }
        path = path.slice(1).slice(0, -1).split(/L|A/);
        poly = [];
        for (j = 0, len = path.length; j < len; j++) {
            p = path[j];
            p = p.split(" ");
            if (p.length === 1) {
                poly.push(p[0].split(",").map(function(d) {
                    return parseFloat(d);
                }));
            } else {
                prev = poly[poly.length - 1];
                last = p.pop().split(",").map(function(d) {
                    return parseFloat(d);
                });
                radius = parseFloat(p.shift().split(",")[0]);
                width = Math.sqrt(Math.pow(last[0] - prev[0], 2) + Math.pow(last[1] - prev[1], 2));
                angle = Math.acos((radius * radius + radius * radius - width * width) / (2 * radius * radius));
                obtuse = p[1].split(",")[0] === "1";
                if (obtuse) {
                    angle = Math.PI * 2 - angle;
                }
                length = angle / (Math.PI * 2) * (radius * Math.PI * 2);
                segments = length / 5;
                start = Math.atan2(-prev[1], -prev[0]) - Math.PI;
                step = angle / segments;
                i = step;
                while (i < angle) {
                    o = offset(start + i, radius);
                    poly.push([o.x, o.y]);
                    i += step;
                }
                poly.push(last);
            }
        }
        return poly;
    };

}).call(this);
},{"../geom/offset.js":195}],197:[function(require,module,exports){
/**
 * @class d3po
 */

(function() {
    var d3po, message, stylesheet;

    d3po = {};


    /**
     * The current version of **d3po** you are using. Returns a string in
     * [semantic versioning](http://semver.org/) format.
     * @property d3po.version
     * @for d3po
     * @type String
     * @static
     */

    d3po.version = "0.1.0";


    /**
     * The URL for the repo, used internally for certain error messages.
     * @property d3po.repo
     * @for d3po
     * @type String
     * @static
     */

    d3po.repo = "https://github.com/pachamaltese/d3po/";


    /**
     * Utilities related to modifying arrays.
     * @class d3po.array
     * @for d3po
     * @static
     */

    d3po.array = {
        comparator: require("./array/comparator.js"),
        contains: require("./array/contains.js"),
        sort: require("./array/sort.js"),
        update: require("./array/update.js")
    };


    /**
     * Utilities related to the client's browser.
     * @class d3po.client
     * @for d3po
     * @static
     */

    d3po.client = {
        css: require("./client/css.js"),
        ie: require("./client/ie.js"),
        pointer: require("./client/pointer.js"),
        prefix: require("./client/prefix.js"),
        rtl: require("./client/rtl.js"),
        scroll: require("./client/scroll.js"),
        scrollbar: require("./client/scrollbar.js"),
        touch: require("./client/touch.js")
    };


    /**
     * Utilities related to color manipulation.
     * @class d3po.color
     * @for d3po
     * @static
     */

    d3po.color = {
        legible: require("./color/legible.js"),
        lighter: require("./color/lighter.js"),
        mix: require("./color/mix.js"),
        random: require("./color/random.js"),
        scale: require("./color/scale.js"),
        sort: require("./color/sort.js"),
        text: require("./color/text.js"),
        validate: require("./color/validate.js")
    };


    /**
     * Utilities related to manipulating data.
     * @class d3po.data
     * @for d3po
     * @static
     */

    d3po.data = {
        bestRegress: require("./data/bestregression.js"),
        lof: require("./data/lof.js"),
        mad: require("./data/mad.js")
    };


    /**
     * Utilities related to fonts.
     * @class d3po.font
     * @for d3po
     * @static
     */

    d3po.font = {
        sizes: require("./font/sizes.js"),
        validate: require("./font/validate.js")
    };


    /**
     * d3po Forms
     * @class d3po.form
     * @for d3po
     */

    d3po.form = require("./form/form.js");


    /**
     * Utilities related to geometric algorithms.
     * @class d3po.geom
     * @for d3po
     * @static
     */

    d3po.geom = {
        largestRect: require("./geom/largestrectangle.js"),
        offset: require("./geom/offset.js"),
        path2poly: require("./geom/path2poly.js")
    };


    /**
     * Utilities related to network graphs.
     * @class d3po.network
     * @for d3po
     * @static
     */

    d3po.network = {
        cluster: require("./network/cluster.js"),
        distance: require("./network/distance.js"),
        normalize: require("./network/normalize.js"),
        shortestPath: require("./network/shortestpath.js"),
        smallestGap: require("./network/smallestgap.js"),
        subgraph: require("./network/subgraph.js")
    };


    /**
     * Utilities that process numbers.
     * @class d3po.number
     * @for d3po
     * @static
     */

    d3po.number = {
        format: require("./number/format.js")
    };


    /**
     * d3po features a set of methods that relate to various object properties. These methods may be used outside of the normal constraints of the visualizations.
     * @class d3po.object
     * @for d3po
     * @static
     */

    d3po.object = {
        merge: require("./object/merge.js"),
        validate: require("./object/validate.js")
    };


    /**
     * Utilities that process strings.
     * @class d3po.string
     * @for d3po
     * @static
     */

    d3po.string = {
        format: require("./string/format.js"),
        list: require("./string/list.js"),
        strip: require("./string/strip.js"),
        title: require("./string/title.js")
    };


    /**
     * d3po SVG Textwrapping
     * @class d3po.textwrap
     * @for d3po
     */

    d3po.textwrap = require("./textwrap/textwrap.js");


    /**
     * d3po Tooltips
     * @class d3po.tooltip
     * @for d3po
     */

    d3po.tooltip = {
        create: require("./tooltip/create.js"),
        move: require("./tooltip/move.js"),
        remove: require("./tooltip/remove.js")
    };


    /**
     * d3po features Utilities that can be used to help with some common javascript processes.
     * @class d3po.util
     * @for d3po
     * @static
     */

    d3po.util = {
        buckets: require("./util/buckets.js"),
        child: require("./util/child.js"),
        closest: require("./util/closest.js"),
        copy: require("./util/copy.js"),
        d3selection: require("./util/d3selection.js"),
        dataurl: require("./util/dataurl.js"),
        uniques: require("./util/uniques.js")
    };


    /**
     * d3po Visualizations
     * @class d3po.viz
     * @for d3po
     */

    d3po.viz = require("./viz/viz.js");

    stylesheet = require("./client/css.js");

    message = require("./core/console/print.js");

    if (typeof window !== "undefined") {
        window.d3po = d3po;
    }

    module.exports = d3po;

}).call(this);
},{"./array/comparator.js":63,"./array/contains.js":64,"./array/sort.js":65,"./array/update.js":66,"./client/css.js":67,"./client/ie.js":68,"./client/pointer.js":69,"./client/prefix.js":70,"./client/rtl.js":71,"./client/scroll.js":72,"./client/scrollbar.js":73,"./client/touch.js":74,"./color/legible.js":75,"./color/lighter.js":76,"./color/mix.js":77,"./color/random.js":78,"./color/scale.js":79,"./color/sort.js":80,"./color/text.js":81,"./color/validate.js":82,"./core/console/print.js":83,"./data/bestregression.js":133,"./data/lof.js":134,"./data/mad.js":135,"./font/sizes.js":136,"./font/validate.js":137,"./form/form.js":138,"./geom/largestrectangle.js":194,"./geom/offset.js":195,"./geom/path2poly.js":196,"./network/cluster.js":199,"./network/distance.js":200,"./network/normalize.js":201,"./network/shortestpath.js":202,"./network/smallestgap.js":203,"./network/subgraph.js":204,"./number/format.js":205,"./object/merge.js":206,"./object/validate.js":207,"./string/format.js":208,"./string/list.js":209,"./string/strip.js":210,"./string/title.js":211,"./textwrap/textwrap.js":235,"./tooltip/create.js":236,"./tooltip/move.js":237,"./tooltip/remove.js":238,"./util/buckets.js":239,"./util/child.js":240,"./util/closest.js":241,"./util/copy.js":242,"./util/d3selection.js":243,"./util/dataurl.js":244,"./util/uniques.js":245,"./viz/viz.js":374}],198:[function(require,module,exports){
(function() {
    window.d3 = require("d3");

    window.topojson = require("topojson");

}).call(this);
},{"d3":38,"topojson":57}],199:[function(require,module,exports){
// Community detection algorithm (graph clustering/partitioning)
// Based on the paper:
// Finding community structure in very large networks, A Clauset, MEJ Newman, C Moore - Physical review E, 2004

(function() {
    var normalize;

    normalize = require("./normalize.js");

    module.exports = function(edges, options) {
        var Q, a, b, cid, commSize, commSizes, communities, community, deltaQ, distance, edge, endpoint, events, i, id, iter, j, k, len, len1, linksMap, m, maxa, maxb, node, nodeid, nodes, nodesMap, ref, ref1, result, startpoint;
        events = [];
        if (options == null) {
            options = {};
        }
        if ((options.nodes == null) || typeof options.nodes !== 'object') {
            ref = normalize(edges, options), edges = ref[0], options = ref[1];
            if (options === null) {
                return null;
            }
        }
        distance = options.distance, nodeid = options.nodeid, startpoint = options.startpoint, endpoint = options.endpoint, nodes = options.nodes;
        nodesMap = {};
        for (id in nodes) {
            nodesMap[id] = {
                node: nodes[id].node,
                degree: 0
            };
        }
        m = 0;
        linksMap = {};
        for (i = 0, len = edges.length; i < len; i++) {
            edge = edges[i];
            a = nodeid(startpoint(edge));
            b = nodeid(endpoint(edge));
            if (!(a in linksMap)) {
                linksMap[a] = {};
            }
            if (!(b in linksMap)) {
                linksMap[b] = {};
            }
            if (!(b in linksMap[a])) {
                linksMap[a][b] = 0;
                linksMap[b][a] = 0;
                m++;
                nodesMap[a].degree += 1;
                nodesMap[b].degree += 1;
            }
        }
        communities = {};
        Q = 0;
        for (id in nodesMap) {
            node = nodesMap[id];
            communities[id] = {
                score: node.degree / (2.0 * m),
                nodes: [id]
            };
        }
        for (a in linksMap) {
            for (b in linksMap[a]) {
                linksMap[a][b] = 1.0 / (2 * m) - (nodesMap[a].degree * nodesMap[b].degree) / (4.0 * m * m);
            }
        }
        iter = 0;
        while (iter < 1000) {
            deltaQ = -1;
            maxa = void 0;
            maxb = void 0;
            for (a in linksMap) {
                for (b in linksMap[a]) {
                    if (linksMap[a][b] > deltaQ) {
                        deltaQ = linksMap[a][b];
                        maxa = a;
                        maxb = b;
                    }
                }
            }
            if (deltaQ < 0) {
                break;
            }
            for (k in linksMap[maxa]) {
                if (k !== maxb) {
                    if (k in linksMap[maxb]) {
                        linksMap[maxb][k] += linksMap[maxa][k];
                    } else {
                        linksMap[maxb][k] = linksMap[maxa][k] - 2 * communities[maxb].score * communities[k].score;
                    }
                    linksMap[k][maxb] = linksMap[maxb][k];
                }
                delete linksMap[k][maxa];
            }
            for (k in linksMap[maxb]) {
                if (!(k in linksMap[maxa]) && k !== maxb) {
                    linksMap[maxb][k] -= 2 * communities[maxa].score * communities[k].score;
                    linksMap[k][maxb] = linksMap[maxb][k];
                }
            }
            ref1 = communities[maxa].nodes;
            for (j = 0, len1 = ref1.length; j < len1; j++) {
                node = ref1[j];
                communities[maxb].nodes.push(node);
            }
            communities[maxb].score += communities[maxa].score;
            if (options.vdebug) {
                events.push({
                    type: 'merge',
                    father: maxb,
                    child: maxa,
                    nodes: communities[maxb].nodes
                });
            }
            delete communities[maxa];
            delete linksMap[maxa];
            Q += deltaQ;
            iter++;
        }
        commSizes = (function() {
            var results;
            results = [];
            for (cid in communities) {
                community = communities[cid];
                results.push([cid, community.nodes.length]);
            }
            return results;
        })();
        commSizes.sort(function(a, b) {
            return b[1] - a[1];
        });
        result = (function() {
            var l, len2, results;
            results = [];
            for (l = 0, len2 = commSizes.length; l < len2; l++) {
                commSize = commSizes[l];
                results.push(communities[commSize[0]].nodes);
            }
            return results;
        })();
        return [result, events];
    };

}).call(this);
},{"./normalize.js":201}],200:[function(require,module,exports){
(function() {
    module.exports = function(n1, n2) {
        var xx, yy;
        if (!(n1 instanceof Array)) {
            n1 = [n1.x, n1.y];
        }
        if (!(n2 instanceof Array)) {
            n2 = [n2.x, n2.y];
        }
        xx = Math.abs(n1[0] - n2[0]);
        yy = Math.abs(n1[1] - n2[1]);
        return Math.sqrt((xx * xx) + (yy * yy));
    };

}).call(this);
},{}],201:[function(require,module,exports){
// Normalizes the graph input and checks if it is valid
(function() {
    var print;

    print = require("../core/console/print.js");

    module.exports = function(edges, options) {
        var K, a, b, directed, distance, edge, edge2distance, endpoint, errormsg, i, id, id1, idA, idB, j, k, l, len, len1, len2, node, nodeA, nodeB, nodeid, nodes, ref, ref1, source, startpoint, target, vdebug;
        source = options.source, target = options.target, directed = options.directed, distance = options.distance, nodeid = options.nodeid, startpoint = options.startpoint, endpoint = options.endpoint, K = options.K, vdebug = options.vdebug;
        if (!directed) {
            directed = false;
        }
        if (K == null) {
            K = 1;
        }
        if (nodeid == null) {
            nodeid = function(node) {
                return node;
            };
        } else if (typeof nodeid === 'string') {
            nodeid = (function(nodeid) {
                return function(node) {
                    return node[nodeid];
                };
            })(nodeid);
        }
        if ((source != null) && typeof source === 'object') {
            source = nodeid(source);
        }
        if ((target != null) && typeof target === 'object') {
            target = nodeid(target);
        }
        if (startpoint == null) {
            startpoint = function(edge) {
                return edge.source;
            };
        } else if (typeof startpoint === 'string') {
            startpoint = (function(startpoint) {
                return function(edge) {
                    return edge[startpoint];
                };
            })(startpoint);
        }
        if (endpoint == null) {
            endpoint = function(edge) {
                return edge.target;
            };
        } else if (typeof endpoint === 'string') {
            endpoint = (function(endpoint) {
                return function(edge) {
                    return edge[endpoint];
                };
            })(endpoint);
        }
        if (distance == null) {
            distance = function(edge) {
                return 1;
            };
        } else if (typeof distance === 'number') {
            distance = (function(distance) {
                return function(edge) {
                    return distance;
                };
            })(distance);
        } else if (typeof distance === 'string') {
            distance = (function(distance) {
                return function(edge) {
                    return edge[distance];
                };
            })(distance);
        } else if (distance instanceof Array) {
            edge2distance = {};
            for (i = j = 0, len = edges.length; j < len; i = ++j) {
                edge = edges[i];
                a = nodeid(startpoint(edge));
                b = nodeid(endpoint(edge));
                edge2distance[a + '_' + b] = distance[i];
            }
            distance = function(edge) {
                a = nodeid(startpoint(edge));
                b = nodeid(endpoint(edge));
                return edge2distance[a + '_' + b];
            };
        }
        nodes = {};
        for (k = 0, len1 = edges.length; k < len1; k++) {
            edge = edges[k];
            nodeA = startpoint(edge);
            nodeB = endpoint(edge);
            idA = nodeid(nodeA);
            idB = nodeid(nodeB);
            ref = [nodeA, nodeB];
            for (l = 0, len2 = ref.length; l < len2; l++) {
                node = ref[l];
                id = nodeid(node);
                if (!(id in nodes)) {
                    nodes[id] = {
                        node: node,
                        outedges: []
                    };
                }
            }
            nodes[idA].outedges.push(edge);
            if (!directed) {
                nodes[idB].outedges.push(edge);
            }
        }
        errormsg = null;
        if (edges.length === 0) {
            errormsg = 'The length of edges is 0';
        } else if (K < 0) {
            errormsg = 'K can not have negative value';
        } else if (distance(edges[0]) == null) {
            errormsg = 'Check the distance function/attribute';
        } else if (startpoint(edges[0]) == null) {
            errormsg = 'Check the startpoint function/attribute';
        } else if (endpoint(edges[0]) == null) {
            errormsg = 'Check the endpoint function/attribute';
        } else {
            id1 = nodeid(startpoint(edges[0]));
            if ((id1 == null) || ((ref1 = typeof id1) !== 'string' && ref1 !== 'number')) {
                errormsg = 'Check the nodeid function/attribute';
            } else if ((source != null) && !(source in nodes)) {
                errormsg = 'The source is not in the graph';
            } else if ((target != null) && !(target in nodes)) {
                errormsg = 'The target is not in the graph';
            }
        }
        if (errormsg != null) {
            print.error(errormsg);
            return null;
        }
        return [
            edges, {
                source: source,
                target: target,
                directed: directed,
                distance: distance,
                nodeid: nodeid,
                startpoint: startpoint,
                endpoint: endpoint,
                K: K,
                nodes: nodes,
                vdebug: vdebug
            }
        ];
    };

}).call(this);
},{"../core/console/print.js":83}],202:[function(require,module,exports){
// Finds the shortest paths in the graph
(function() {
    var Heap, normalize;

    Heap = require('heap');

    normalize = require("./normalize.js");

    module.exports = function(edges, source, options) {
        var K, a, alt, b, directed, distance, edge, endpoint, getPath, heap, i, id, j, len, len1, maxsize, node, nodeid, nodes, path, ref, ref1, ref2, res, result, startpoint, target, u, visited;
        if (options == null) {
            options = {};
        }
        options.source = source;
        if ((options.nodes == null) || typeof options.nodes !== 'object') {
            ref = normalize(edges, options), edges = ref[0], options = ref[1];
            if (options === null) {
                return null;
            }
        }
        source = options.source, target = options.target, directed = options.directed, distance = options.distance, nodeid = options.nodeid, startpoint = options.startpoint, endpoint = options.endpoint, K = options.K, nodes = options.nodes;
        for (id in nodes) {
            node = nodes[id];
            node.count = 0;
        }
        heap = new Heap(function(a, b) {
            return a.distance - b.distance;
        });
        visited = {};
        if (target == null) {
            visited[source] = true;
        }
        heap.push({
            edge: null,
            target: source,
            distance: 0
        });
        maxsize = 0;
        result = [];
        while (!heap.empty()) {
            maxsize = Math.max(maxsize, heap.size());
            path = heap.pop();
            u = path.target;
            nodes[u].count++;
            if (target == null) {
                result.push(path);
            } else if (u === target) {
                result.push(path);
            }
            if (result.length === K) {
                break;
            }
            if (nodes[u].count <= K) {
                ref1 = nodes[u].outedges;
                for (i = 0, len = ref1.length; i < len; i++) {
                    edge = ref1[i];
                    a = nodeid(startpoint(edge));
                    b = nodeid(endpoint(edge));
                    if (!directed && b === u) {
                        ref2 = [b, a], a = ref2[0], b = ref2[1];
                    }
                    if (target == null) {
                        if (visited[b]) {
                            continue;
                        }
                        visited[b] = true;
                    }
                    alt = path.distance + distance(edge);
                    heap.push({
                        edge: edge,
                        previous: path,
                        target: b,
                        distance: alt
                    });
                }
            }
        }
        getPath = function(path) {
            edges = [];
            while (path.edge != null) {
                edges.push(path.edge);
                path = path.previous;
            }
            return edges.reverse();
        };
        for (j = 0, len1 = result.length; j < len1; j++) {
            res = result[j];
            if (target != null) {
                delete res.target;
                res.edges = getPath(res);
            }
            delete res.edge;
            delete res.previous;
        }
        return result;
    };

}).call(this);
},{"./normalize.js":201,"heap":40}],203:[function(require,module,exports){
// Returns distances of all objects in array
(function() {
    var distance;

    distance = require("./distance.js");

    module.exports = function(arr, opts) {
        var distances, quad;
        if (!opts) {
            opts = {};
        }
        distances = [];
        quad = d3.quadtree().x(function(d) {
            if (opts.accessor) {
                return opts.accessor(d)[0];
            } else {
                return d[0];
            }
        }).y(function(d) {
            if (opts.accessor) {
                return opts.accessor(d)[1];
            } else {
                return d[1];
            }
        });
        quad.addData(arr).visit(function(node) {
            var i, j, len, len1, n1, n2, ref, ref1;
            if (!node.leaf) {
                ref = node.nodes;
                for (i = 0, len = ref.length; i < len; i++) {
                    n1 = ref[i];
                    if (n1 && n1.point) {
                        if (opts.origin) {
                            distances.push(distance(n1, opts));
                        } else {
                            ref1 = node.nodes;
                            for (j = 0, len1 = ref1.length; j < len1; j++) {
                                n2 = ref1[j];
                                if (n2 && n2.point && n2.point !== n1.point) {
                                    distances.push(distance(n1, n2));
                                }
                            }
                        }
                    }
                }
            }
            return false;
        });
        if (opts.all) {
            return distances.sort(function(aa, bb) {
                return aa - bb;
            });
        } else {
            return d3.min(distances);
        }
    };

}).call(this);
},{"./distance.js":200}],204:[function(require,module,exports){
// Returns a subgraph of distance K away from the source node
(function() {
    var normalize;

    normalize = require("./normalize.js");

    module.exports = function(edges, source, options) {
        var K, dfs, directed, distance, edge, endpoint, id, nodeid, nodes, ref, startpoint, visited;
        if (options == null) {
            options = {};
        }
        options.source = source;
        if ((options.nodes == null) || typeof options.nodes !== 'object') {
            ref = normalize(edges, options), edges = ref[0], options = ref[1];
            if (options === null) {
                return null;
            }
        }
        source = options.source, directed = options.directed, distance = options.distance, nodeid = options.nodeid, startpoint = options.startpoint, endpoint = options.endpoint, K = options.K, nodes = options.nodes;
        visited = {};
        visited[source] = true;
        dfs = function(origin, curr_distance) {
            var a, b, edge, i, len, new_distance, ref1, ref2, results;
            ref1 = nodes[origin].outedges;
            results = [];
            for (i = 0, len = ref1.length; i < len; i++) {
                edge = ref1[i];
                a = nodeid(startpoint(edge));
                b = nodeid(endpoint(edge));
                if (!directed && b === origin) {
                    ref2 = [b, a], a = ref2[0], b = ref2[1];
                }
                if (!(b in visited)) {
                    new_distance = curr_distance + distance(edge);
                    if (new_distance <= K) {
                        visited[b] = true;
                        results.push(dfs(b, new_distance));
                    } else {
                        results.push(void 0);
                    }
                } else {
                    results.push(void 0);
                }
            }
            return results;
        };
        dfs(source, 0);
        return {
            nodes: (function() {
                var results;
                results = [];
                for (id in visited) {
                    results.push(nodes[id].node);
                }
                return results;
            })(),
            edges: (function() {
                var i, len, results;
                results = [];
                for (i = 0, len = edges.length; i < len; i++) {
                    edge = edges[i];
                    if (nodeid(startpoint(edge)) in visited && nodeid(endpoint(edge)) in visited) {
                        results.push(edge);
                    }
                }
                return results;
            })()
        };
    };

}).call(this);
},{"./normalize.js":201}],205:[function(require,module,exports){
// Formats numbers to look "pretty"
(function() {
    var defaultLocale;

    defaultLocale = require("../core/locale/languages/en_US.js");

    module.exports = function(number, opts) {
        var affixes, format, key, labels, length, locale, ret, sigs, symbol, time, vars, zeros;
        if (number === void 0 || number === null || number === false) {
            return "";
        }
        if (!opts) {
            opts = {};
        }
        if ("locale" in opts) {
            locale = opts.locale;
        } else {
            locale = defaultLocale;
        }
        time = locale.time.slice();
        format = d3.formatLocale(locale.format);
        if (!opts) {
            opts = {};
        }
        vars = opts.vars || {};
        key = opts.key;
        labels = "labels" in opts ? opts.labels : true;
        length = number.toString().split(".")[0].length;
        if (vars.time && vars.time.value) {
            time.push(vars.time.value);
        }
        if (typeof key === "string" && time.indexOf(key.toLowerCase()) >= 0) {
            ret = number;
        } else if (key === "share") {
            if (number === 0) {
                ret = 0;
            } else if (number >= 100) {
                ret = format.format(",f")(number);
            } else if (number > 99) {
                ret = format.format(".3g")(number);
            } else {
                ret = format.format(".2g")(number);
            }
            ret += "%";
        } else if (number < 10 && number > -10) {
            length = number.toString().split(".");
            sigs = 1;
            if (length.length > 1) {
                sigs = d3.min([parseFloat(length[1]).toString().length, 2]);
                if (!((-1 < number && number < 1))) {
                    zeros = length[1].length - parseFloat(length[1]).toString().length;
                    sigs += 1 + zeros;
                }
            }
            ret = format.format("." + sigs + "g")(number);
        } else if (length > 3) {
            ret = format.formatPrefix(".3g", number)(number).replace("G", "B");
        } else if (length === 3) {
            ret = format.format(",f")(number);
        } else if (number === 0) {
            ret = 0;
        } else {
            if (number === parseInt(number, 10)) {
                ret = format.format(".2")(number);
            } else {
                ret = format.format(".3g")(number);
            }
        }
        if (ret.length > 2 && "" + ret.indexOf(".0") === ret.length - 2) {
            ret = ret.slice(0, ret.length - 2);
        }
        if (labels && key && "format" in vars && key in vars.format.affixes.value) {
            affixes = vars.format.affixes.value[key];
            return affixes[0] + ret + affixes[1];
        } else {
            return ret;
        }
    };

}).call(this);
},{"../core/locale/languages/en_US.js":103}],206:[function(require,module,exports){
// Given any two objects, this method will merge the two objects together, returning a new third object. The values of the second object always overwrite the first
(function() {
    var d3selection, validate;

    d3selection = require("../util/d3selection.js");

    validate = require("./validate.js");

    /**
     * @method d3po.object.merge
     * @for d3po.object
     * @param obj1 {Object} The primary object.
     * @param obj2 {Object} The secondary object to merge into the first.
     * @return {Object}
     */

    module.exports = function(obj1, obj2) {
        var copyObject, obj3;
        copyObject = function(obj, ret, shallow) {
            var k, results, v;
            results = [];
            for (k in obj) {
                v = obj[k];
                if (typeof v !== "undefined") {
                    if (!shallow && validate(v)) {
                        if (typeof ret[k] !== "object") {
                            ret[k] = {};
                        }
                        results.push(copyObject(v, ret[k], k.indexOf("d3po") === 0));
                    } else if (!d3selection(v) && v instanceof Array) {
                        results.push(ret[k] = v.slice(0));
                    } else {
                        results.push(ret[k] = v);
                    }
                } else {
                    results.push(void 0);
                }
            }
            return results;
        };
        obj3 = {};
        if (obj1) {
            copyObject(obj1, obj3);
        }
        if (obj2) {
            copyObject(obj2, obj3);
        }
        return obj3;
    };

}).call(this);
},{"../util/d3selection.js":243,"./validate.js":207}],207:[function(require,module,exports){
/**
 * This function returns true if the variable passed is a literal javascript keyed Object.
 * It's a small, simple function, but it catches some edge-cases that can throw off your
 * code (such as Arrays and `null`).
 * @method d3po.object.validate
 * @for d3po.object
 * @param obj {Object} The object to validate.
 * @return {Boolean}
 */

(function() {
    module.exports = function(obj) {
        return obj && obj.constructor === Object;
    };

}).call(this);
},{}],208:[function(require,module,exports){
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Formats a string similar to Python's "format"
//------------------------------------------------------------------------------
module.exports = function() {

    var args = Array.prototype.slice.call(arguments),
        str = args.shift()

    str.unkeyed_index = 0;
    return str.replace(/\{(\w*)\}/g, function(match, key) {
        if (key === '') {
            key = str.unkeyed_index;
            str.unkeyed_index++
        }
        if (key == +key) {
            return args[key] !== 'undefined' ?
                args[key] :
                match;
        } else {
            for (var i = 0; i < args.length; i++) {
                if (typeof args[i] === 'object' && typeof args[i][key] !== 'undefined') {
                    return args[i][key];
                }
            }
            return match;
        }
    }.bind(str));

}
},{}],209:[function(require,module,exports){
// Converts an array of strings into a string list using commas and "and"
(function() {
    var format, locale;

    format = require("./format.js");

    locale = require("../core/locale/languages/en_US.js").ui;

    module.exports = function(list, andText, max, moreText) {
        var amount;
        if (!(list instanceof Array)) {
            return list;
        } else {
            list = list.slice(0);
        }
        if (!andText) {
            andText = locale.and;
        }
        if (!moreText) {
            moreText = locale.moreText;
        }
        if (list.length === 2) {
            return list.join(" " + andText + " ");
        } else {
            if (max && list.length > max) {
                amount = list.length - max + 1;
                list = list.slice(0, max - 1);
                list[max - 1] = format(moreText, amount);
            }
            if (list.length > 1) {
                list[list.length - 1] = andText + " " + list[list.length - 1];
            }
            return list.join(", ");
        }
    };

}).call(this);
},{"../core/locale/languages/en_US.js":103,"./format.js":208}],210:[function(require,module,exports){
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Removes all non ASCII characters
//------------------------------------------------------------------------------
module.exports = function(value) {

    // great unicode list: http://asecuritysite.com/coding/asc2
    var diacritics = [
        [/[\300-\305]/g, "A"],
        [/[\340-\345]/g, "a"],
        [/[\306]/g, "AE"],
        [/[\346]/g, "ae"],
        [/[\337]/g, "B"],
        [/[\307]/g, "C"],
        [/[\347]/g, "c"],
        [/[\320\336\376]/g, "D"],
        [/[\360]/g, "d"],
        [/[\310-\313]/g, "E"],
        [/[\350-\353]/g, "e"],
        [/[\314-\317]/g, "I"],
        [/[\354-\357]/g, "i"],
        [/[\321]/g, "N"],
        [/[\361]/g, "n"],
        [/[\322-\326\330]/g, "O"],
        [/[\362-\366\370]/g, "o"],
        [/[\331-\334]/g, "U"],
        [/[\371-\374]/g, "u"],
        [/[\327]/g, "x"],
        [/[\335]/g, "Y"],
        [/[\375\377]/g, "y"]
    ];

    return "" + value.toString().replace(/[^A-Za-z0-9\-_]/g, function(char) {

        if (char === " ") return "-";

        var ret = false;
        for (var d = 0; d < diacritics.length; d++) {
            if (new RegExp(diacritics[d][0]).test(char)) {
                ret = diacritics[d][1];
                break;
            }
        }

        return ret || "";

    });

};
},{}],211:[function(require,module,exports){
(function() {
    var defaultLocale;

    defaultLocale = require("../core/locale/languages/en_US.js");

    module.exports = function(text, opts) {
        var biglow, bigs, key, locale, smalls;
        if (!text) {
            return "";
        }
        if (!opts) {
            opts = {};
        }
        key = opts.key;
        if (text.charAt(text.length - 1) === ".") {
            return text.charAt(0).toUpperCase() + text.substr(1);
        }
        locale = "locale" in this ? this.locale.value : defaultLocale;
        smalls = locale.lowercase.map(function(b) {
            return b.toLowerCase();
        });
        bigs = locale.uppercase;
        bigs = bigs.concat(bigs.map(function(b) {
            return b + "s";
        }));
        biglow = bigs.map(function(b) {
            return b.toLowerCase();
        });
        return text.replace(/[^\s!-#%&(-\x2A,-:;\x3F@\x5B-\x5D_\x7B}\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u0AF0\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E3B\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]*/g, function(txt, i) {
            var bigindex, new_txt;
            if (txt) {
                bigindex = biglow.indexOf(txt.toLowerCase());
                if (bigindex >= 0) {
                    return new_txt = bigs[bigindex];
                } else if (smalls.indexOf(txt.toLowerCase()) >= 0 && i !== 0 && i !== text.length - 1) {
                    return new_txt = txt.toLowerCase();
                } else {
                    return new_txt = txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
                }
            } else {
                return "";
            }
        });
    };

}).call(this);
},{"../core/locale/languages/en_US.js":103}],212:[function(require,module,exports){
// Flows the text into the container
(function() {
    var foreign, tspan;

    foreign = require("./foreign.js");

    tspan = require("./tspan.js");

    module.exports = function(vars) {
        if (vars.text.html.value) {
            foreign(vars);
        } else {
            tspan(vars);
        }
    };

}).call(this);
},{"./foreign.js":213,"./tspan.js":216}],213:[function(require,module,exports){
// Flows the text as a foreign element
(function() {
    module.exports = function(vars) {
        var anchor, color, family, opacity, text;
        text = vars.container.value;
        family = text.attr("font-family") || text.style("font-family");
        anchor = vars.align.value || text.attr("text-anchor") || text.style("text-anchor");
        color = text.attr("fill") || text.style("fill");
        opacity = text.attr("opacity") || text.style("opacity");
        anchor = anchor === "end" ? "right" : (anchor === "middle" ? "center" : "left");
        d3.select(text.node().parentNode).append("foreignObject").attr("width", vars.width.value + "px").attr("height", vars.height.value + "px").attr("x", "0px").attr("y", "0px").append("xhtml:div").style("font-family", family).style("font-size", vars.size.value[1] + "px").style("color", color).style("text-align", anchor).style("opacity", opacity).text(vars.text.current);
    };

}).call(this);
},{}],214:[function(require,module,exports){
(function() {
    module.exports = function(vars) {
        var diff, elem, height, prev, radius, shape, size, width, x, y;
        elem = vars.container.value;
        prev = elem.node().previousElementSibling;
        shape = prev ? prev.tagName.toLowerCase() : "";
        if (prev) {
            prev = d3.select(prev);
        }
        vars.container.x = vars.x.value || parseFloat(elem.attr("x"), 10);
        vars.container.y = vars.y.value || parseFloat(elem.attr("y"), 10);
        if (prev) {
            if (vars.shape.accepted.indexOf(shape) >= 0) {
                vars.self.shape(shape);
            }
            if (shape === "rect") {
                x = parseFloat(prev.attr("x"), 10) || 0;
                y = parseFloat(prev.attr("y"), 10) || 0;
                if (vars.padding.value === false) {
                    diff = Math.abs(x - vars.container.x);
                    if (diff) {
                        vars.self.padding(diff);
                    }
                }
                if (!vars.container.x) {
                    vars.container.x = x + vars.padding.value;
                }
                if (!vars.container.y) {
                    vars.container.y = y + vars.padding.value;
                }
                if (!vars.width.value) {
                    width = parseFloat(prev.attr("width" || prev.style("width", 10)));
                    vars.self.width(width);
                }
                if (!vars.height.value) {
                    height = parseFloat(prev.attr("height" || prev.style("height", 10)));
                    vars.self.height(height);
                }
            } else if (shape === "circle") {
                radius = parseFloat(prev.attr("r"), 10);
                x = parseFloat(prev.attr("cx"), 10) || 0;
                x -= radius;
                y = parseFloat(prev.attr("cy"), 10) || 0;
                y -= radius;
                if (vars.padding.value === false) {
                    diff = Math.abs(x - vars.container.x);
                    if (diff) {
                        vars.self.padding(diff);
                    }
                }
                if (!vars.container.x) {
                    vars.container.x = x + vars.padding.value;
                }
                if (!vars.container.y) {
                    vars.container.y = y + vars.padding.value;
                }
                if (!vars.width.value) {
                    vars.self.width(radius * 2, 10);
                }
                if (!vars.height.value) {
                    vars.self.height(radius * 2, 10);
                }
            } else {
                if (!vars.width.value) {
                    vars.self.width(500);
                }
                if (!vars.height.value) {
                    vars.self.height(500);
                }
            }
        }
        if (!vars.container.x) {
            vars.container.x = 0;
        }
        if (!vars.container.y) {
            vars.container.y = 0;
        }
        vars.width.inner = vars.width.value - vars.padding.value * 2;
        vars.height.inner = vars.height.value - vars.padding.value * 2;
        size = elem.attr("font-size") || elem.style("font-size");
        size = parseFloat(size, 10);
        vars.container.fontSize = size;
        vars.container.dy = parseFloat(elem.attr("dy"), 10);
        if (!vars.size.value) {
            if (vars.resize.value) {
                return vars.self.size([4, 80]);
            } else {
                return vars.self.size([size / 2, size]);
            }
        }
    };

}).call(this);
},{}],215:[function(require,module,exports){
// Fetches text if not specified, and formats text to array
(function() {
    module.exports = function(vars) {
        var text;
        if (!vars.text.value) {
            text = vars.container.value.text();
            if (text) {
                if (text.indexOf("tspan") >= 0) {
                    text.replace(/\<\/tspan\>\<tspan\>/g, " ");
                    text.replace(/\<\/tspan\>/g, "");
                    text.replace(/\<tspan\>/g, "");
                }
                text = text.replace(/(\r\n|\n|\r)/gm, "");
                text = text.replace(/^\s+|\s+$/g, "");
                vars.self.text(text);
            }
        }
        if (vars.text.value instanceof Array) {
            vars.text.phrases = vars.text.value.filter(function(t) {
                return ["string", "number"].indexOf(typeof t) >= 0;
            });
        } else {
            vars.text.phrases = [vars.text.value + ""];
        }
        if (!vars.align.value) {
            return vars.container.align = vars.container.value.style("text-anchor") || vars.container.value.attr("text-anchor");
        }
    };

}).call(this);
},{}],216:[function(require,module,exports){
// Flows the text into tspans
(function() {
    var rtl;

    rtl = require("../../client/rtl.js");

    module.exports = function(vars) {
        var anchor, dy, ellipsis, fontSize, h, height, line, lineWidth, lines, mirror, newLine, placeWord, progress, reverse, rmod, rotate, rx, ry, space, start, textBox, translate, truncate, valign, width, words, wrap, x, xOffset, y, yOffset;
        newLine = function(first) {
            var tspan;
            if (!reverse || first) {
                tspan = vars.container.value.append("tspan");
            } else {
                tspan = vars.container.value.insert("tspan", "tspan");
            }
            return tspan.attr("x", x + "px").attr("dy", dy + "px").style("baseline-shift", "0%").attr("dominant-baseline", "alphabetic");
        };
        mirror = vars.rotate.value === -90 || vars.rotate.value === 90;
        width = mirror ? vars.height.inner : vars.width.inner;
        height = mirror ? vars.width.inner : vars.height.inner;
        if (vars.shape.value === "circle") {
            anchor = "middle";
        } else {
            anchor = vars.align.value || vars.container.align || "start";
        }
        if (anchor === "end" || (anchor === "start" && rtl)) {
            xOffset = width;
        } else if (anchor === "middle") {
            xOffset = width / 2;
        } else {
            xOffset = 0;
        }
        valign = vars.valign.value || "top";
        x = vars.container.x + xOffset;
        fontSize = vars.resize.value ? vars.size.value[1] : vars.container.fontSize || vars.size.value[0];
        dy = vars.container.dy || fontSize * 1.1;
        textBox = null;
        progress = null;
        words = null;
        reverse = false;
        yOffset = 0;
        if (vars.shape.value === "circle") {
            if (valign === "middle") {
                yOffset = ((height / dy % 1) * dy) / 2;
            } else if (valign === "end") {
                yOffset = (height / dy % 1) * dy;
            }
        }
        vars.container.value.attr("text-anchor", anchor).attr("font-size", fontSize + "px").style("font-size", fontSize + "px").attr("x", vars.container.x).attr("y", vars.container.y);
        truncate = function() {
            textBox.remove();
            if (reverse) {
                line++;
                textBox = vars.container.value.select("tspan");
            } else {
                line--;
                textBox = d3.select(vars.container.value.node().lastChild);
            }
            if (!textBox.empty()) {
                words = textBox.text().match(/[^\s-]+-?/g);
                return ellipsis();
            }
        };
        lineWidth = function() {
            var b;
            if (vars.shape.value === "circle") {
                b = ((line - 1) * dy) + yOffset;
                if (b > height / 2) {
                    b += dy;
                }
                return 2 * Math.sqrt(b * ((2 * (width / 2)) - b));
            } else {
                return width;
            }
        };
        ellipsis = function() {
            var lastChar, lastWord;
            if (words && words.length) {
                lastWord = words.pop();
                lastChar = lastWord.charAt(lastWord.length - 1);
                if (lastWord.length === 1 && vars.text.split.value.indexOf(lastWord) >= 0) {
                    return ellipsis();
                } else {
                    if (vars.text.split.value.indexOf(lastChar) >= 0) {
                        lastWord = lastWord.substr(0, lastWord.length - 1);
                    }
                    textBox.text(words.join(" ") + " " + lastWord + "...");
                    if (textBox.node().getComputedTextLength() > lineWidth()) {
                        return ellipsis();
                    }
                }
            } else {
                return truncate();
            }
        };
        placeWord = function(word) {
            var current, i, joiner, next_char;
            current = textBox.text();
            next_char = "";
            if (reverse) {
                next_char = vars.text.current.charAt(vars.text.current.length - progress.length - 1);
                if (next_char === " ") {
                    joiner = "";
                    i = 2;
                    while (next_char === " ") {
                        joiner += " ";
                        next_char = vars.text.current.charAt(vars.text.current.length - progress.length - i);
                        i++;
                    }
                } else {
                    joiner = "";
                }
                progress = word + joiner + progress;
                textBox.text(word + joiner + current);
            } else {
                next_char = vars.text.current.charAt(progress.length);
                if (next_char === " ") {
                    joiner = "";
                    i = 1;
                    while (next_char === " ") {
                        joiner += " ";
                        next_char = vars.text.current.charAt(progress.length + i);
                        i++;
                    }
                } else {
                    joiner = "";
                }
                progress += joiner + word;
                textBox.text(current + joiner + word);
            }
            if (Math.floor(textBox.node().getComputedTextLength()) > lineWidth() || next_char === "\n") {
                textBox.text(current);
                if (current.length) {
                    textBox = newLine();
                }
                textBox.text(word);
                if (reverse) {
                    return line--;
                } else {
                    return line++;
                }
            }
        };
        start = 1;
        line = null;
        lines = null;
        wrap = function() {
            var i, j, len, next_char, unsafe, word;
            vars.container.value.text("").html("");
            words = vars.text.words.slice();
            if (reverse) {
                words.reverse();
            }
            progress = "";
            textBox = newLine(true);
            line = start;
            for (j = 0, len = words.length; j < len; j++) {
                word = words[j];
                if (line * dy > height) {
                    truncate();
                    break;
                }
                placeWord(word);
                unsafe = true;
                while (unsafe) {
                    next_char = vars.text.current.charAt(progress.length);
                    i = 1;
                    while (next_char === " ") {
                        next_char = vars.text.current.charAt(progress.length + i);
                        i++;
                    }
                    unsafe = vars.text.split.value.indexOf(next_char) >= 0;
                    if (unsafe) {
                        placeWord(next_char);
                    }
                }
            }
            if (line * dy > height) {
                truncate();
            }
            return lines = Math.abs(line - start) + 1;
        };
        wrap();
        lines = 0;
        vars.container.value.selectAll("tspan").each(function() {
            if (d3.select(this).text().length) {
                return lines++;
            }
        });
        if (vars.shape.value === "circle") {
            space = height - lines * dy;
            if (space > dy) {
                if (valign === "middle") {
                    start = (space / dy / 2 >> 0) + 1;
                    wrap();
                } else if (valign === "bottom") {
                    reverse = true;
                    start = height / dy >> 0;
                    wrap();
                }
            }
        }
        lines = 0;
        vars.container.value.selectAll("tspan").each(function() {
            if (d3.select(this).text().length) {
                return lines++;
            }
        });
        if (valign === "top") {
            y = 0;
        } else {
            h = lines * dy;
            y = valign === "middle" ? height / 2 - h / 2 : height - h;
        }
        y -= dy * 0.2;
        translate = "translate(0," + y + ")";
        if (vars.rotate.value === 180 || vars.rotate.value === -180) {
            rx = vars.container.x + width / 2;
            ry = vars.container.y + height / 2;
        } else {
            rmod = vars.rotate.value < 0 ? width : height;
            rx = vars.container.x + rmod / 2;
            ry = vars.container.y + rmod / 2;
        }
        rotate = "rotate(" + vars.rotate.value + ", " + rx + ", " + ry + ")";
        return vars.container.value.attr("transform", rotate + translate);
    };

}).call(this);
},{"../../client/rtl.js":71}],217:[function(require,module,exports){
// Flows the text into the container
(function() {
    var flow, fontSizes, resize, wrap;

    flow = require("./flow.js");

    fontSizes = require("../../font/sizes.js");

    wrap = function(vars) {
        var firstChar;
        if (vars.text.phrases.length) {
            vars.text.current = vars.text.phrases.shift() + "";
            vars.text.words = vars.text.current.match(vars.text.split["break"]);
            firstChar = vars.text.current.charAt(0);
            if (firstChar !== vars.text.words[0].charAt(0)) {
                vars.text.words[0] = firstChar + vars.text.words[0];
            }
            vars.container.value.html("");
            if (vars.resize.value) {
                resize(vars);
            } else {
                flow(vars);
            }
        }
    };

    module.exports = wrap;

    resize = function(vars) {
        var addon, areaMod, areaRatio, boxArea, height, heightMax, i, lineWidth, maxWidth, mirror, sizeMax, sizeRatio, sizes, textArea, width, widthRatio, words;
        words = [];
        i = 0;
        while (i < vars.text.words.length) {
            addon = (i === vars.text.words.length - 1 ? "" : " ");
            words.push(vars.text.words[i] + addon);
            i++;
        }
        mirror = vars.rotate.value === -90 || vars.rotate.value === 90;
        width = mirror ? vars.height.inner : vars.width.inner;
        height = mirror ? vars.width.inner : vars.height.inner;
        sizeMax = Math.floor(vars.size.value[1]);
        lineWidth = vars.shape.value === "circle" ? width * 0.75 : width;
        sizes = fontSizes(words, {
            "font-size": sizeMax + "px"
        }, {
            parent: vars.container.value
        });
        maxWidth = d3.max(sizes, function(d) {
            return d.width;
        });
        areaMod = 1.165 + (width / height * 0.11);
        textArea = d3.sum(sizes, function(d) {
            var h;
            h = vars.container.dy || sizeMax * 1.2;
            return d.width * h;
        }) * areaMod;
        if (vars.shape.value === "circle") {
            boxArea = Math.PI * Math.pow(width / 2, 2);
        } else {
            boxArea = lineWidth * height;
        }
        if (maxWidth > lineWidth || textArea > boxArea) {
            areaRatio = Math.sqrt(boxArea / textArea);
            widthRatio = lineWidth / maxWidth;
            sizeRatio = d3.min([areaRatio, widthRatio]);
            sizeMax = d3.max([vars.size.value[0], Math.floor(sizeMax * sizeRatio)]);
        }
        heightMax = Math.floor(height * 0.8);
        if (sizeMax > heightMax) {
            sizeMax = heightMax;
        }
        if (maxWidth * (sizeMax / vars.size.value[1]) <= lineWidth) {
            if (sizeMax !== vars.size.value[1]) {
                vars.self.size([vars.size.value[0], sizeMax]);
            }
            flow(vars);
        } else {
            wrap(vars);
        }
    };

}).call(this);
},{"../../font/sizes.js":136,"./flow.js":212}],218:[function(require,module,exports){
(function() {
    module.exports = {
        accepted: [false, "start", "middle", "end", "left", "center", "right"],
        process: function(value) {
            var css;
            css = ["left", "center", "right"].indexOf(value);
            if (css >= 0) {
                value = this.accepted[css + 1];
            }
            return value;
        },
        value: false
    };

}).call(this);
},{}],219:[function(require,module,exports){
arguments[4][142][0].apply(exports,arguments)
},{"dup":142}],220:[function(require,module,exports){
(function() {
    var d3selection;

    d3selection = require("../../util/d3selection.js");

    module.exports = {
        accepted: [false, Array, Object, String],
        element: false,
        id: "default",
        process: function(value) {
            if (value === false) {
                return false;
            } else if (d3selection(value)) {
                return value;
            } else if (value instanceof Array) {
                return d3.select(value[0][0]);
            } else {
                this.selector = value;
                return d3.select(value);
            }
        },
        value: false
    };

}).call(this);
},{"../../util/d3selection.js":243}],221:[function(require,module,exports){
arguments[4][146][0].apply(exports,arguments)
},{"dup":146}],222:[function(require,module,exports){
(function() {
    var print, stringFormat;

    print = require("../../core/console/print.js");

    stringFormat = require("../../string/format.js");

    module.exports = {
        accepted: [void 0],
        process: function(value, vars) {
            var selector, str;
            if (this.initialized === false) {
                return value;
            }
            if (vars.container.value === false) {
                str = vars.format.locale.value.dev.setContainer;
                print.warning(str, "container");
            } else if (vars.container.value.empty()) {
                str = vars.format.locale.value.dev.noContainer;
                selector = vars.container.selector || "";
                print.warning(stringFormat(str, "\"" + selector + "\""), "container");
            } else {
                if (vars.dev.value) {
                    print.time("total draw time");
                }
                vars.container.value.call(vars.self);
            }
            return value;
        },
        value: void 0
    };

}).call(this);
},{"../../core/console/print.js":83,"../../string/format.js":208}],223:[function(require,module,exports){
(function() {
    var locale, mergeObject;

    locale = require("../../core/locale/locale.js");

    mergeObject = require("../../object/merge.js");

    module.exports = {
        accepted: [Function, String],
        locale: {
            accepted: function() {
                return d3.keys(locale);
            },
            process: function(value) {
                var defaultLocale, returnObject;
                defaultLocale = "en_US";
                returnObject = locale[defaultLocale];
                if (value !== defaultLocale) {
                    returnObject = mergeObject(returnObject, locale[value]);
                }
                this.language = value;
                return returnObject;
            },
            value: "en_US"
        },
        process: function(value, vars) {
            if (this.initialized && typeof value === "string") {
                vars.self.format({
                    locale: value
                });
            } else {
                if (typeof value === "function") {
                    return value;
                }
            }
            return this.value;
        },
        value: "en_US"
    };

}).call(this);
},{"../../core/locale/locale.js":113,"../../object/merge.js":206}],224:[function(require,module,exports){
(function() {
    module.exports = {
        accepted: [false, Number],
        value: false
    };

}).call(this);
},{}],225:[function(require,module,exports){
arguments[4][224][0].apply(exports,arguments)
},{"dup":224}],226:[function(require,module,exports){
arguments[4][146][0].apply(exports,arguments)
},{"dup":146}],227:[function(require,module,exports){
(function() {
    module.exports = {
        accepted: [-180, -90, 0, 90, 180],
        value: 0
    };

}).call(this);
},{}],228:[function(require,module,exports){
(function() {
    module.exports = {
        accepted: ["circle", "square"],
        value: false
    };

}).call(this);
},{}],229:[function(require,module,exports){
(function() {
    module.exports = {
        accepted: [Array, false],
        value: false
    };

}).call(this);
},{}],230:[function(require,module,exports){
(function() {
    module.exports = {
        accepted: [false, Array, Number, String],
        html: {
            accepted: [Boolean],
            value: false
        },
        init: function(vars) {
            var s;
            s = this.split.value;
            this.split["break"] = new RegExp("[^\\s\\" + s.join("\\") + "]+\\" + s.join("?\\") + "?", "g");
            return false;
        },
        split: {
            accepted: [Array],
            process: function(s) {
                this["break"] = new RegExp("[^\\s\\" + s.join("\\") + "]+\\" + s.join("?\\") + "?", "g");
                return s;
            },
            value: ["-", "/", ";", ":", "&"]
        }
    };

}).call(this);
},{}],231:[function(require,module,exports){
(function() {
    module.exports = {
        accepted: [false, "top", "middle", "bottom"],
        value: false
    };

}).call(this);
},{}],232:[function(require,module,exports){
arguments[4][224][0].apply(exports,arguments)
},{"dup":224}],233:[function(require,module,exports){
arguments[4][224][0].apply(exports,arguments)
},{"dup":224}],234:[function(require,module,exports){
arguments[4][224][0].apply(exports,arguments)
},{"dup":224}],235:[function(require,module,exports){
// Word wraps SVG text
(function() {
    var attach, print, sizes, text, wrap;

    attach = require("../core/methods/attach.js");

    sizes = require("./helpers/parsesize.js");

    print = require("../core/console/print.js");

    text = require("./helpers/parsetext.js");

    wrap = require("./helpers/wrap.js");

    module.exports = function() {
        var vars;
        vars = {
            self: function(selection) {
                selection.each(function() {
                    sizes(vars);
                    if (vars.size.value[0] <= vars.height.inner) {
                        text(vars);
                        wrap(vars);
                    } else {
                        vars.container.value.html("");
                    }
                    if (vars.dev.value) {
                        print.timeEnd("total draw time");
                    }
                });
                return vars.self;
            }
        };
        attach(vars, {
            align: require("./methods/align.js"),
            config: require("./methods/config.js"),
            container: require("./methods/container.js"),
            dev: require("./methods/dev.js"),
            draw: require("./methods/draw.js"),
            format: require("./methods/format.js"),
            height: require("./methods/height.js"),
            padding: require("./methods/padding.js"),
            resize: require("./methods/resize.js"),
            rotate: require("./methods/rotate.js"),
            text: require("./methods/text.js"),
            shape: require("./methods/shape.js"),
            size: require("./methods/size.js"),
            valign: require("./methods/valign.js"),
            width: require("./methods/width.js"),
            x: require("./methods/x.js"),
            y: require("./methods/y.js")
        });
        return vars.self;
    };

}).call(this);
},{"../core/console/print.js":83,"../core/methods/attach.js":114,"./helpers/parsesize.js":214,"./helpers/parsetext.js":215,"./helpers/wrap.js":217,"./methods/align.js":218,"./methods/config.js":219,"./methods/container.js":220,"./methods/dev.js":221,"./methods/draw.js":222,"./methods/format.js":223,"./methods/height.js":224,"./methods/padding.js":225,"./methods/resize.js":226,"./methods/rotate.js":227,"./methods/shape.js":228,"./methods/size.js":229,"./methods/text.js":230,"./methods/valign.js":231,"./methods/width.js":232,"./methods/x.js":233,"./methods/y.js":234}],236:[function(require,module,exports){
var defaultLocale = require("../core/locale/languages/en_US.js"),
    events = require("../client/pointer.js"),
    legible = require("../color/legible.js"),
    move = require("./move.js"),
    prefix = require("../client/prefix.js"),
    rtl = require("../client/rtl.js"),
    removeTooltip = require("./remove.js"),
    scroll = require("../client/scroll.js"),
    scrollBar = require("../client/scrollbar.js"),
    stringList = require("../string/list.js"),
    textColor = require("../color/text.js")

//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Create a Tooltip
//-------------------------------------------------------------------
module.exports = function(params) {

    var default_width = params.fullscreen ? 250 : 200,
        vendor = prefix()
    params.width = params.width || default_width
    params.max_width = params.max_width || 386
    params.id = params.id || "default"
    params.size = params.fullscreen || params.html ? "large" : "small"
    params.offset = params.offset || 0
    params.arrow_offset = params.arrow ? 8 : 0
    params.x = params.x || 0
    params.y = params.y || 0
    params.parent = params.parent || d3.select("body")
    params.curtain = params.curtain || "#fff"
    params.curtainopacity = params.curtainopacity || 0.8
    params.background = params.background || "#fff"
    params.fontcolor = params.fontcolor || "#444"
    params.fontfamily = params.fontfamily || "sans-serif"
    params.fontweight = params.fontweight || "normal"
    params.fontsize = params.fontsize || "12px"
    params.style = params.style || "default"
    params.zindex = params.size == "small" ? 2000 : 500
    params.locale = params.locale || defaultLocale
    params.stacked = params.stacked || false;


    var parentHeight = params.parent ? params.parent.node().offsetHeight ||
        params.parent.node().getBoundingClientRect().height : 0

    if (!params.iconsize) {
        params.iconsize = params.size == "small" ? 22 : 50
    }

    if (params.parent.node() === document.body) {
        params.limit = [window.innerWidth + scroll.x(), window.innerHeight + scroll.y()];
        var sb = scrollBar();
        if (document.body.scrollHeight > window.innerHeight) params.limit[0] -= sb;
    } else {
        params.limit = [
            parseFloat(params.parent.style("width"), 10),
            parseFloat(params.parent.style("height"), 10)
        ];
    }

    if (params.title instanceof Array) {

        var and = params.locale.ui.and,
            more = params.locale.ui.more

        params.title = stringList(params.title, and, 3, more)

    }

    removeTooltip(params.id)

    params.anchor = {}
    if (params.fullscreen) {
        params.anchor.x = "center"
        params.anchor.y = "center"
        params.x = params.parent ? params.parent.node().offsetWidth / 2 : window.innerWidth / 2
        params.y = params.parent ? parentHeight / 2 : window.innerHeight / 2
    } else if (params.align) {
        var a = params.align.split(" ")
        params.anchor.y = a[0]
        if (a[1]) params.anchor.x = a[1]
        else params.anchor.x = "center"
    } else {
        params.anchor.x = "center"
        params.anchor.y = "top"
    }

    var title_width = params.width - 30

    if (params.fullscreen) {
        var curtain = params.parent.append("div")
            .attr("id", "d3po_tooltip_curtain_" + params.id)
            .attr("class", "d3po_tooltip_curtain")
            .style("background-color", params.curtain)
            .style("opacity", params.curtainopacity)
            .style("position", "absolute")
            .style("z-index", 499)
            .style("top", "0px")
            .style("right", "0px")
            .style("bottom", "0px")
            .style("left", "0px")
            .on(events.click, function() {
                removeTooltip(params.id)
            })
    }

    var tooltip = params.parent.append("div")
        .datum(params)
        .attr("id", "d3po_tooltip_id_" + params.id)
        .attr("class", "d3po_tooltip d3po_tooltip_" + params.size)
        .style("color", params.fontcolor)
        .style("font-family", params.fontfamily)
        .style("font-weight", params.fontweight)
        .style("font-size", params.fontsize + "px")
        .style(vendor + "box-shadow", "0px 1px 3px rgba(0, 0, 0, 0.25)")
        .style("position", "absolute")
        // .style("z-index",params.zindex)
        .on(events.out, close_descriptions)

    if (params.max_height) {
        tooltip.style("max-height", params.max_height + "px")
    }

    if (params.fixed) {
        tooltip.style("z-index", 500)
        params.mouseevents = true
    } else {
        tooltip.style("z-index", 2000)
    }

    var container = tooltip.append("div")
        .datum(params)
        .attr("class", "d3po_tooltip_container")
        .style("background-color", params.background)
        .style("padding", "6px")

    if (params.fullscreen && params.html && !params.stacked) {

        w = params.parent ? params.parent.node().offsetWidth * 0.75 : window.innerWidth * 0.75
        h = params.parent ? parentHeight * 0.75 : window.innerHeight * 0.75

        container
            .style("width", w + "px")
            .style("height", h + "px")

        var body = container.append("div")
            .attr("class", "d3po_tooltip_body")
            .style("padding-right", "6px")
            .style("display", "inline-block")
            .style("z-index", 1)
            .style("width", params.width + "px")

    } else {

        if (params.width == "auto") {
            var w = "auto"
            container.style("max-width", params.max_width + "px")
        } else var w = params.width - 14 + "px"

        var body = container
            .style("width", w)

    }

    if (params.title || params.icon) {
        var header = body.append("div")
            .attr("class", "d3po_tooltip_header")
            .style("position", "relative")
            .style("z-index", 1)
    }

    if (params.fullscreen) {
        var close = tooltip.append("div")
            .attr("class", "d3po_tooltip_close")
            .style("background-color", params.color)
            .style("color", textColor(params.color))
            .style("position", "absolute")
            .style(vendor + "box-shadow", "0 1px 3px rgba(0, 0, 0, 0.25)")
            .style("font-size", "20px")
            .style("height", "18px")
            .style("line-height", "14px")
            .style("text-align", "center")
            .style("right", "16px")
            .style("top", "-10px")
            .style("width", "18px")
            .style("z-index", 10)
            .html("\&times;")
            .on(events.over, function() {
                d3.select(this)
                    .style("cursor", "pointer")
                    .style(vendor + "box-shadow", "0 1px 3px rgba(0, 0, 0, 0.5)")
            })
            .on(events.out, function() {
                d3.select(this)
                    .style("cursor", "auto")
                    .style(vendor + "box-shadow", "0 1px 3px rgba(0, 0, 0, 0.25)")
            })
            .on(events.click, function() {
                removeTooltip(params.id)
            })

        d3.select("body").on("keydown.esc_" + params.id, function() {
            if (d3.event.keyCode === 27) {
                removeTooltip(params.id);
                d3.select("body").on("keydown.esc_" + params.id, null);
            }
        })

    }

    if (!params.mouseevents) {
        tooltip.style("pointer-events", "none")
    } else if (params.mouseevents !== true) {

        var oldout = d3.select(params.mouseevents).on(events.out)

        var newout = function() {

            var target = d3.event.toElement || d3.event.relatedTarget
            if (target) {
                var c = typeof target.className == "string" ? target.className : target.className.baseVal
                var istooltip = c.indexOf("d3po_tooltip") == 0
            } else {
                var istooltip = false
            }
            if (!target || (!ischild(tooltip.node(), target) && !ischild(params.mouseevents, target) && !istooltip)) {
                oldout(d3.select(params.mouseevents).datum())
                close_descriptions()
                d3.select(params.mouseevents).on(events.out, oldout)
            }
        }

        var ischild = function(parent, child) {
            var node = child.parentNode;
            while (node !== null) {
                if (node == parent) {
                    return true;
                }
                node = node.parentNode;
            }
            return false;
        }

        d3.select(params.mouseevents).on(events.out, newout)
        tooltip.on(events.out, newout)

        var move_event = d3.select(params.mouseevents).on(events.move)
        if (move_event) {
            tooltip.on(events.move, move_event)
        }

    }

    if (params.arrow) {
        var arrow = tooltip.append("div")
            .attr("class", "d3po_tooltip_arrow")
            .style("background-color", params.background)
            .style(vendor + "box-shadow", "0px 1px 3px rgba(0, 0, 0, 0.25)")
            .style("position", "absolute")
            .style("bottom", "-5px")
            .style("height", "10px")
            .style("left", "50%")
            .style("margin-left", "-5px")
            .style("width", "10px")
            .style(vendor + "transform", "rotate(45deg)")
            .style("z-index", -1)
    }

    if (params.icon) {

        var title_icon = header.append("div")
            .attr("class", "d3po_tooltip_icon")
            .style("width", params.iconsize + "px")
            .style("height", params.iconsize + "px")
            .style("z-index", 1)
            .style("background-position", "50%")
            .style("background-size", "100%")
            .style("background-image", "url(" + params.icon + ")")
            .style("display", "inline-block")
            .style("margin", "0px 3px 3px 0px")

        if (params.style == "knockout") {
            title_icon.style("background-color", params.color)
        }

        title_width -= title_icon.node().offsetWidth
    }

    if (params.title) {
        var mw = params.max_width - 6
        if (params.icon) mw -= (params.iconsize + 6)
        mw += "px"

        var title = header.append("div")
            .attr("class", "d3po_tooltip_title")
            .style("max-width", mw)
            .style("color", !params.icon ? legible(params.color) : params.fontcolor)
            .style("vertical-align", "top")
            .style("width", title_width + "px")
            .style("display", "inline-block")
            .style("overflow", "hidden")
            .style("text-overflow", "ellipsis")
            .style("word-wrap", "break-word")
            .style("z-index", 1)
            .style("font-size", params.size === "large" ? "18px" : "16px")
            .style("line-height", params.size === "large" ? "20px" : "17px")
            .style("padding", params.size === "large" ? "3px 6px" : "3px")
            .text(params.title)
    }

    if (params.description) {
        var description = body.append("div")
            .attr("class", "d3po_tooltip_description")
            .style("font-size", "12px")
            .style("padding", "6px")
            .text(params.description)
    }

    if (params.data || params.html && !params.fullscreen) {

        var data_container = body.append("div")
            .attr("class", "d3po_tooltip_data_container")
            .style("overflow-y", "auto")
            .style("z-index", -1)
    }

    if (params.data) {

        var val_width = 0,
            val_heights = {}

        var last_group = null
        params.data.forEach(function(d, i) {

            if (d.group) {
                if (last_group != d.group) {
                    last_group = d.group
                    data_container.append("div")
                        .attr("class", "d3po_tooltip_data_title")
                        .style("font-size", "12px")
                        .style("font-weight", "bold")
                        .style("padding", "6px 3px 0px 3px")
                        .text(d.group)
                }
            }

            var block = data_container.append("div")
                .attr("class", "d3po_tooltip_data_block")
                .style("font-size", "12px")
                .style("padding", "3px 6px")
                .style("position", "relative")
                .datum(d)

            if (d.highlight === true) {
                block.style("color", legible(params.color))
            } else if (d.allColors || d.highlight !== params.color) {
                block.style("color", legible(d.highlight))
            }

            var name = block.append("div")
                .attr("class", "d3po_tooltip_data_name")
                .style("display", "inline-block")
                .html(d.name)
                .on(events.out, function() {
                    d3.event.stopPropagation()
                })

            if (d.link) {
                name
                    .style("cursor", "pointer")
                    .on(events.click, d.link)
            }

            if (d.value instanceof Array) {

                var and = params.locale.ui.and,
                    more = params.locale.ui.more

                d.value = list(d.value, and, 3, more)

            }

            var val = block.append("div")
                .attr("class", "d3po_tooltip_data_value")
                .style("display", "block")
                .style("position", "absolute")
                .style("text-align", "right")
                .style("top", "3px")
                .html(d.value)
                .on(events.out, function() {
                    d3.event.stopPropagation()
                })

            if (rtl) {
                val.style("left", "6px")
            } else {
                val.style("right", "6px")
            }

            if (params.mouseevents && d.desc) {
                var desc = block.append("div")
                    .attr("class", "d3po_tooltip_data_desc")
                    .style("color", "#888")
                    .style("overflow", "hidden")
                    .style(vendor + "transition", "height 0.5s")
                    .style("width", "85%")
                    .text(d.desc)
                    .on(events.out, function() {
                        d3.event.stopPropagation()
                    })

                var dh = desc.node().offsetHeight || desc.node().getBoundingClientRect().height

                desc.style("height", "0px")

                var help = name.append("div")
                    .attr("class", "d3po_tooltip_data_help")
                    .style("background-color", "#ccc")
                    .style(vendor + "border-radius", "5px")
                    .style("color", "#fff")
                    .style("cursor", "pointer")
                    .style("display", "inline-block")
                    .style("font-size", "8px")
                    .style("font-weight", "bold")
                    .style("height", "10px")
                    .style("margin", "3px 0px 0px 3px")
                    .style("padding-right", "1px")
                    .style("text-align", "center")
                    .style("width", "10px")
                    .style("vertical-align", "top")
                    .style(prefix + "transition", "background-color 0.5s")
                    .text("?")
                    .on(events.over, function() {
                        var c = d3.select(this.parentNode.parentNode).style("color")
                        d3.select(this).style("background-color", c)
                        desc.style("height", dh + "px")
                    })
                    .on(events.out, function() {
                        d3.event.stopPropagation()
                    })

                name
                    .style("cursor", "pointer")
                    .on(events.over, function() {
                        close_descriptions()
                        var c = d3.select(this.parentNode).style("color")
                        help.style("background-color", c)
                        desc.style("height", dh + "px")
                    })

                block.on(events.out, function() {
                    d3.event.stopPropagation()
                    close_descriptions()
                })
            }

            var w = parseFloat(val.style("width"), 10)
            if (w > params.width / 2) w = params.width / 2
            if (w > val_width) val_width = w

            if (i != params.data.length - 1) {
                if ((d.group && d.group == params.data[i + 1].group) || !d.group && !params.data[i + 1].group)
                    data_container.append("div")
                    .attr("class", "d3po_tooltip_data_seperator")
                    .style("background-color", "#ddd")
                    .style("display", "block")
                    .style("height", "1px")
                    .style("margin", "0px 3px")
            }

        })

        data_container.selectAll(".d3po_tooltip_data_name")
            .style("width", function() {
                var w = parseFloat(d3.select(this.parentNode).style("width"), 10)
                return (w - val_width - 30) + "px"
            })

        data_container.selectAll(".d3po_tooltip_data_value")
            .style("width", val_width + "px")
            .each(function(d) {
                var h = parseFloat(d3.select(this).style("height"), 10)
                val_heights[d.name] = h
            })

        data_container.selectAll(".d3po_tooltip_data_name")
            .style("min-height", function(d) {
                return val_heights[d.name] + "px"
            })

    }

    if (params.html && (!params.fullscreen || params.stacked)) {
        data_container.append("div")
            .html(params.html)
        if (params.js) {
            params.js(container)
        }
    }

    var footer = body.append("div")
        .attr("class", "d3po_tooltip_footer")
        .style("font-size", "10px")
        .style("position", "relative")
        .style("text-align", "center")

    if (params.footer) {
        footer.html(params.footer)
    }

    params.height = tooltip.node().offsetHeight || tooltip.node().getBoundingClientRect().height

    if (params.html && params.fullscreen && !params.stacked) {
        var h = params.height - 12
        var w = tooltip.node().offsetWidth - params.width - 44
        container.append("div")
            .attr("class", "d3po_tooltip_html")
            .style("width", w + "px")
            .style("height", h + "px")
            .style("display", "inline-block")
            .style("vertical-align", "top")
            .style("overflow-y", "auto")
            .style("padding", "0px 12px")
            .style("position", "absolute")
            .html(params.html)
        if (params.js) {
            params.js(container)
        }
    }

    params.width = tooltip.node().offsetWidth

    if (params.anchor.y != "center") params.height += params.arrow_offset
    else params.width += params.arrow_offset

    if (params.data || ((!params.fullscreen || params.stacked) && params.html)) {

        if (!params.fullscreen || params.stacked) {
            var limit = params.fixed ? parentHeight - params.y - 10 : parentHeight - 10
            var h = params.height < limit ? params.height : limit
        } else {
            var h = params.height
        }
        h -= parseFloat(container.style("padding-top"), 10)
        h -= parseFloat(container.style("padding-bottom"), 10)
        if (header) {
            h -= header.node().offsetHeight || header.node().getBoundingClientRect().height
            h -= parseFloat(header.style("padding-top"), 10)
            h -= parseFloat(header.style("padding-bottom"), 10)
        }
        if (footer) {
            h -= footer.node().offsetHeight || footer.node().getBoundingClientRect().height
            h -= parseFloat(footer.style("padding-top"), 10)
            h -= parseFloat(footer.style("padding-bottom"), 10)
        }

        data_container
            .style("max-height", h + "px")
    }

    params.height = tooltip.node().offsetHeight || tooltip.node().getBoundingClientRect().height

    move(params.x, params.y, params.id);

}



//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Function that closes ALL Descriptions
//-------------------------------------------------------------------
function close_descriptions() {
    d3.selectAll("div.d3po_tooltip_data_desc").style("height", "0px");
    d3.selectAll("div.d3po_tooltip_data_help").style("background-color", "#ccc");
}
},{"../client/pointer.js":69,"../client/prefix.js":70,"../client/rtl.js":71,"../client/scroll.js":72,"../client/scrollbar.js":73,"../color/legible.js":75,"../color/text.js":81,"../core/locale/languages/en_US.js":103,"../string/list.js":209,"./move.js":237,"./remove.js":238}],237:[function(require,module,exports){
(function() {
    var arrowStyle, scroll;

    scroll = require("../client/scroll.js");

    module.exports = function(x, y, id) {
        var d, mins, tooltip;
        if (!id) {
            id = "default";
        }
        tooltip = d3.select("div#d3po_tooltip_id_" + id);
        if (tooltip.node()) {
            d = tooltip.datum();
            d.cx = x;
            d.cy = y;
            if (!d.fixed) {
                if (d.parent.node().tagName.toLowerCase() === "body") {
                    mins = [scroll.x(), scroll.y()];
                } else {
                    mins = [0, 0];
                }
                if (d.anchor.y !== "center") {
                    if (d.anchor.x === "right") {
                        d.x = d.cx - d.arrow_offset - 4;
                    } else if (d.anchor.x === "center") {
                        d.x = d.cx - d.width / 2;
                    } else {
                        if (d.anchor.x === "left") {
                            d.x = d.cx - d.width + d.arrow_offset + 2;
                        }
                    }
                    if (d.anchor.y === "bottom") {
                        d.flip = d.cy + d.height + d.offset <= d.limit[1];
                    } else {
                        if (d.anchor.y === "top") {
                            d.flip = d.cy - d.height - d.offset < mins[1];
                        }
                    }
                    if (d.flip) {
                        d.y = d.cy + d.offset + d.arrow_offset;
                    } else {
                        d.y = d.cy - d.height - d.offset - d.arrow_offset;
                    }
                } else {
                    d.y = d.cy - d.height / 2;
                    if (d.anchor.x === "right") {
                        d.flip = d.cx + d.width + d.offset <= d.limit[0];
                    } else {
                        if (d.anchor.x === "left") {
                            d.flip = d.cx - d.width - d.offset < mins[0];
                        }
                    }
                    if (d.anchor.x === "center") {
                        d.flip = false;
                        d.x = d.cx - d.width / 2;
                    } else if (d.flip) {
                        d.x = d.cx + d.offset + d.arrow_offset;
                    } else {
                        d.x = d.cx - d.width - d.offset;
                    }
                }
                if (d.x < mins[0]) {
                    d.x = mins[0];
                } else {
                    if (d.x + d.width > d.limit[0]) {
                        d.x = d.limit[0] - d.width;
                    }
                }
                if (d.y < mins[1]) {
                    d.y = mins[1];
                } else {
                    if (d.y + d.height > d.limit[1]) {
                        d.y = d.limit[1] - d.height;
                    }
                }
            }
            tooltip.style("top", d.y + "px").style("left", d.x + "px");
            if (d.arrow) {
                tooltip.selectAll(".d3po_tooltip_arrow").call(arrowStyle);
            }
        }
        return tooltip;
    };

    arrowStyle = function(arrow) {
        return arrow.style("bottom", function(d) {
            if (d.anchor.y !== "center" && !d.flip) {
                return "-5px";
            } else {
                return "auto";
            }
        }).style("right", function(d) {
            if (d.anchor.y === "center" && !d.flip) {
                return "-5px";
            } else {
                return "auto";
            }
        }).style("top", function(d) {
            if (d.anchor.y !== "center" && d.flip) {
                return "-5px";
            } else if (d.anchor.y === "center") {
                return "50%";
            } else {
                return "auto";
            }
        }).style("left", function(d) {
            if (d.anchor.y === "center" && d.flip) {
                return "-5px";
            } else if (d.anchor.y !== "center") {
                return "50%";
            } else {
                return "auto";
            }
        }).style("margin-left", function(d) {
            var arrow_x;
            if (d.anchor.y === "center") {
                return "auto";
            } else {
                if (d.anchor.x === "right") {
                    arrow_x = -d.width / 2 + d.arrow_offset / 2;
                } else if (d.anchor.x === "left") {
                    arrow_x = d.width / 2 - d.arrow_offset * 2 - 5;
                } else {
                    arrow_x = -5;
                }
                if (d.cx - d.width / 2 - 5 < arrow_x) {
                    arrow_x = d.cx - d.width / 2 - 5;
                    if (arrow_x < 2 - d.width / 2) {
                        arrow_x = 2 - d.width / 2;
                    }
                } else if (-(d.limit[0] - d.cx - d.width / 2 + 5) > arrow_x) {
                    arrow_x = -(d.limit[0] - d.cx - d.width / 2 + 5);
                    if (arrow_x > d.width / 2 - 11) {
                        arrow_x = d.width / 2 - 11;
                    }
                }
                return arrow_x + "px";
            }
        }).style("margin-top", function(d) {
            var arrow_y;
            if (d.anchor.y !== "center") {
                return "auto";
            } else {
                if (d.anchor.y === "bottom") {
                    arrow_y = -d.height / 2 + d.arrow_offset / 2 - 1;
                } else if (d.anchor.y === "top") {
                    arrow_y = d.height / 2 - d.arrow_offset * 2 - 2;
                } else {
                    arrow_y = -9;
                }
                if (d.cy - d.height / 2 - d.arrow_offset < arrow_y) {
                    arrow_y = d.cy - d.height / 2 - d.arrow_offset;
                    if (arrow_y < 4 - d.height / 2) {
                        arrow_y = 4 - d.height / 2;
                    }
                } else if (-(d.limit[1] - d.cy - d.height / 2 + d.arrow_offset) > arrow_y) {
                    arrow_y = -(d.limit[1] - d.cy - d.height / 2 + d.arrow_offset);
                    if (arrow_y > d.height / 2 - 22) {
                        arrow_y = d.height / 2 - 22;
                    }
                }
                return arrow_y + "px";
            }
        });
    };

}).call(this);
},{"../client/scroll.js":72}],238:[function(require,module,exports){
// Destroy Tooltips
(function() {
    module.exports = function(id) {
        if (id) {
            d3.selectAll("div#d3po_tooltip_curtain_" + id).remove();
            return d3.selectAll("div#d3po_tooltip_id_" + id).remove();
        } else {
            d3.selectAll("div.d3po_tooltip_curtain").remove();
            return d3.selectAll("div.d3po_tooltip").remove();
        }
    };

}).call(this);
},{}],239:[function(require,module,exports){
// Expands a min/max into a specified number of buckets
(function() {
    module.exports = function(arr, n) {
        var buckets, step;
        buckets = [];
        step = 1 / (n - 1) * (arr[1] - arr[0]);
        return d3.range(arr[0], arr[1] + step, step);
    };

}).call(this);
},{}],240:[function(require,module,exports){
// Checks to see if element is inside of another element
(function() {
    var d3selection;

    d3selection = require("./d3selection.js");

    module.exports = function(parent, child) {
        var node;
        if (!parent || !child) {
            return false;
        }
        if (d3selection(parent)) {
            parent = parent.node();
        }
        if (d3selection(parent)) {
            child = child.node();
        }
        node = child.parentNode;
        while (node !== null) {
            if (node === parent) {
                return true;
            }
            node = node.parentNode;
        }
        return false;
    };

}).call(this);
},{"./d3selection.js":243}],241:[function(require,module,exports){
// Finds closest value in array
(function() {
    module.exports = function(arr, value) {
        var closest, i;
        if (value.constructor === String) {
            i = arr.indexOf(value);
            if (i > -1) {
                return arr[i];
            } else {
                return arr[0];
            }
        }
        closest = arr[0];
        arr.forEach(function(p) {
            if (Math.abs(value - p) < Math.abs(value - closest)) {
                return closest = p;
            }
        });
        return closest;
    };

}).call(this);
},{}],242:[function(require,module,exports){
(function() {
    var copy, objectMerge, objectValidate;

    objectMerge = require("../object/merge.js");

    objectValidate = require("../object/validate.js");

    copy = function(variable) {
        var ret;
        if (objectValidate(variable)) {
            return objectMerge(variable);
        } else if (variable instanceof Array) {
            ret = [];
            variable.forEach(function(o) {
                return ret.push(copy(o));
            });
            return ret;
        } else {
            return variable;
        }
    };

    module.exports = copy;

}).call(this);
},{"../object/merge.js":206,"../object/validate.js":207}],243:[function(require,module,exports){
// Cross-browser detect for D3 element
(function() {
    var ie;

    ie = require("../client/ie.js");

    module.exports = function(elem) {
        if (ie) {
            return typeof elem === "object" && elem instanceof Array && "size" in elem && "select" in elem;
        } else {
            return elem instanceof d3.selection;
        }
    };

}).call(this);
},{"../client/ie.js":68}],244:[function(require,module,exports){
// Creates a Base-64 Data URL from and Image URL
(function() {
    module.exports = function(url, callback) {
        var img;
        img = new Image();
        img.src = url;
        img.crossOrigin = "Anonymous";
        img.onload = function() {
            var canvas, context;
            canvas = document.createElement("canvas");
            canvas.width = this.width;
            canvas.height = this.height;
            context = canvas.getContext("2d");
            context.drawImage(this, 0, 0);
            callback.call(this, canvas.toDataURL("image/png"));
            canvas = null;
        };
    };

}).call(this);
},{}],245:[function(require,module,exports){
// Returns list of unique values
(function() {
    var objectValidate, uniques;

    objectValidate = require("../object/validate.js");

    uniques = function(data, value, fetch, vars, depth, sorted) {
        var check, d, i, j, k, len, len1, len2, len3, lookups, m, v, val, vals;
        if (data === void 0) {
            return [];
        }
        if (vars && depth === void 0) {
            depth = vars.id.value;
        }
        sorted = (true === sorted && sorted === void 0);
        if (!(data instanceof Array)) {
            data = [data];
        }
        lookups = [];
        if (value === void 0) {
            return data.reduce(function(p, c) {
                var lookup;
                lookup = JSON.stringify(c);
                if (lookups.indexOf(lookup) < 0) {
                    if (p.indexOf(c) < 0) {
                        p.push(c);
                    }
                    lookups.push(lookup);
                }
                return p;
            }, []);
        }
        vals = [];
        check = function(v) {
            var l;
            if (v !== void 0 && v !== null) {
                l = JSON.stringify(v);
                if (lookups.indexOf(l) < 0) {
                    vals.push(v);
                    return lookups.push(l);
                }
            }
        };
        if (typeof fetch === "function" && vars) {
            for (i = 0, len = data.length; i < len; i++) {
                d = data[i];
                val = uniques(fetch(vars, d, value, depth));
                for (j = 0, len1 = val.length; j < len1; j++) {
                    v = val[j];
                    check(v);
                }
            }
        } else if (typeof value === "function") {
            for (k = 0, len2 = data.length; k < len2; k++) {
                d = data[k];
                val = value(d);
                check(val);
            }
        } else {
            for (m = 0, len3 = data.length; m < len3; m++) {
                d = data[m];
                if (objectValidate(d)) {
                    val = d[value];
                    check(val);
                }
            }
        }
        if (sorted) {
            return vals.sort(function(a, b) {
                return a - b;
            });
        } else {
            return vals;
        }
    };

    module.exports = uniques;

}).call(this);
},{"../object/validate.js":207}],246:[function(require,module,exports){
// # If placing into a new container, remove it's contents
// and check text direction.
// Also initialized app width and height.
(function() {
    module.exports = function(vars) {
        var checkParent, i, len, ref, s;
        vars.container.value.style("position", function() {
            var current, remain;
            current = d3.select(this).style("position");
            remain = ["absolute", "fixed"].indexOf(current) >= 0;
            if (remain) {
                return current;
            } else {
                return "relative";
            }
        });
        if (vars.container.changed) {
            vars.container.value.html("");
        }
        ref = ["width", "height"];
        for (i = 0, len = ref.length; i < len; i++) {
            s = ref[i];
            if (!vars[s].value) {
                checkParent = function(element) {
                    var elem, val;
                    if (element.tagName === void 0 || ["BODY", "HTML"].indexOf(element.tagName) >= 0) {
                        val = window["inner" + s.charAt(0).toUpperCase() + s.slice(1)];
                        elem = document !== element ? d3.select(element) : false;
                        if (elem) {
                            if (s === "width") {
                                val -= parseFloat(elem.style("margin-left"), 10);
                                val -= parseFloat(elem.style("margin-right"), 10);
                                val -= parseFloat(elem.style("padding-left"), 10);
                                val -= parseFloat(elem.style("padding-right"), 10);
                            } else {
                                val -= parseFloat(elem.style("margin-top"), 10);
                                val -= parseFloat(elem.style("margin-bottom"), 10);
                                val -= parseFloat(elem.style("padding-top"), 10);
                                val -= parseFloat(elem.style("padding-bottom"), 10);
                            }
                        }
                        return vars[s].value = val <= 20 ? vars[s].small : val;
                    } else {
                        val = parseFloat(d3.select(element).style(s), 10);
                        if (typeof val === "number" && val > 0) {
                            return vars[s].value = val;
                        } else if (element.tagName !== "BODY") {
                            return checkParent(element.parentNode);
                        }
                    }
                };
                checkParent(vars.container.value.node());
                if (d3.selectAll("body > *:not(script)").size() === 1) {
                    d3.select("body").style("overflow", "hidden");
                }
            }
        }
        vars.container.value.style("width", vars.width.value + "px").style("height", vars.height.value + "px");
    };

}).call(this);
},{}],247:[function(require,module,exports){
// Corresponds d3 3.x aggregation functions to d3 5.x ones
(function() {

    var aggs = {},
        dict = {
            "sum": d3.sum,
            "min": d3.min,
            "max": d3.max,
            "mean": d3.mean,
            "median": d3.median
        };

    aggs.defaultString = "sum";

    aggs.allowedStrings = Object.keys(dict)

    aggs.fromString = function(string) {
        return dict[string] || dict[aggs.defaultString];
    };

    module.exports = aggs;

}).call(this);
},{}],248:[function(require,module,exports){
// Corresponds d3 3.x color schemes to d3 5.x ones
(function() {

    var colorscales = {},
        dict = {
            "category10": d3.schemeCategory10,
            "accent": d3.schemeAccent,
            "dark2": d3.schemeDark2,
            "paired": d3.schemePaired,
            "pastel1": d3.schemePastel1,
            "pastel2": d3.schemePastel2,
            "set1": d3.schemeSet1,
            "set2": d3.schemeSet2,
            "set3": d3.schemeSet3,
            "tableau10": d3.schemeTableau10
        };

    colorscales.defaultString = "category10";

    colorscales.allowedStrings = Object.keys(dict)

    colorscales.fromString = function(string) {
        return dict[string] || dict[colorscales.defaultString];
    };

    module.exports = colorscales;

}).call(this);
},{}],249:[function(require,module,exports){
// Corresponds d3 3.x interpolation modes to d3 5.x curves
(function() {

    var curves = {},
        dict = {
            "basis": d3.curveBasis,
            "basis-open": d3.curveBasisOpen,
            "cardinal": d3.curveCardinal,
            "cardinal-open": d3.curveCardinalOpen,
            "linear": d3.curveLinear,
            "monotone": d3.curveMonotoneY,
            "step": d3.curveStep,
            "step-before": d3.curveStepBefore,
            "step-after": d3.curveStepAfter
        };

    curves.defaultString = "linear";

    curves.allowedStrings = Object.keys(dict)

    curves.fromString = function(string) {
        return dict[string] || dict[curves.defaultString];
    };

    module.exports = curves;

}).call(this);
},{}],250:[function(require,module,exports){
// Corresponds d3 3.x file fetching functions to d3 5.x ones
(function() {

    var filetypes = {},
        dict = {
            "json": d3.json,
            "xml": d3.xml,
            "html": d3.html,
            "csv": d3.csv,
            "dsv": d3.dsv,
            "tsv": d3.tsv,
            "txt": d3.text,
            "text": d3.text
        };

    filetypes.defaultString = "json";

    filetypes.allowedStrings = Object.keys(dict)

    filetypes.fromString = function(string) {
        return dict[string] || dict[filetypes.defaultString];
    };

    module.exports = filetypes;

}).call(this);
},{}],251:[function(require,module,exports){
// Corresponds d3 3.x projection to d3 5.x
(function() {

    var projections = {},
        dict = {
            "albers": d3.geoAlbers,
            "albersUsa": d3.geoAlbersUsa,
            "azimuthalEqualArea": d3.geoAzimuthalEqualArea,
            "azimuthalEquidistant": d3.geoAzimuthalEquidistant,
            "conicConformal": d3.geoConicConformal,
            "conicEqualArea": d3.geoConicEqualArea,
            "conicEquidistant": d3.geoConicEquidistant,
            "equirectangular": d3.geoEquirectangular,
            "gnomonic": d3.geoGnomonic,
            "mercator": d3.geoMercator,
            "orthographic": d3.geoOrthographic,
            "stereographic": d3.geoStereographic,
            "transverseMercator": d3.geoTransverseMercator
        };

    projections.defaultString = "mercator";

    projections.allowedStrings = Object.keys(dict)

    projections.fromString = function(value) {
        return dict[value] || dict[projections.defaultString];
    };

    module.exports = projections;

}).call(this);
},{}],252:[function(require,module,exports){
// Corresponds d3 3.x scales to d3 5.x ones
(function() {

    var scales = {},
        dict = {
            "linear": d3.scaleLinear,
            "sqrt": d3.scaleSqrt,
            "pow": d3.scalePow,
            "log": d3.scaleLog,
            "quantize": d3.scaleQuantize,
            "threshold": d3.scaleThreshold,
            "quantile": d3.scaleQuantile,
            "identity": d3.scaleIdentity,
            "ordinal": d3.scaleOrdinal
        };

    scales.defaultString = "linear";

    scales.allowedStrings = Object.keys(dict)

    scales.fromString = function(string) {
        return dict[string] || dict[scales.defaultString];
    };

    module.exports = scales;

}).call(this);
},{}],253:[function(require,module,exports){
var dataFormat = require("../../core/data/format.js"),
    dataColor = require("../../core/data/color.js"),
    dataKeys = require("../../core/data/keys.js"),
    dataLoad = require("../../core/data/load.js"),
    drawDrawer = require("./ui/drawer.js"),
    drawLegend = require("./ui/legend.js"),
    drawTimeline = require("./ui/timeline.js"),
    errorCheck = require("./errorCheck.js"),
    fetchData = require("../../core/fetch/data.js"),
    finish = require("./finish.js"),
    focusTooltip = require("./focus/tooltip.js"),
    history = require("./ui/history.js"),
    parseEdges = require("../../core/parse/edges.js"),
    parseNodes = require("../../core/parse/nodes.js"),
    print = require("../../core/console/print.js"),
    removeTooltip = require("../../tooltip/remove.js"),
    runType = require("./types/run.js"),
    shapes = require("./shapes/draw.js"),
    stringFormat = require("../../string/format.js"),
    svgSetup = require("./svg/enter.js"),
    svgUpdate = require("./svg/update.js"),
    titles = require("./ui/titles.js"),
    validObject = require("../../object/validate.js")
    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Calculate steps needed to redraw the visualization
    //------------------------------------------------------------------------------
module.exports = function(vars) {

    var steps = [],
        appType = vars.type.value,
        locale = vars.format.locale.value,
        uiMessage = locale.message.ui,
        drawMessage = locale.message.draw

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Check to see if any data needs to be loaded with JSON
    //----------------------------------------------------------------------------
    var urlLoads = ["data", "attrs", "coords", "nodes", "edges"]
    urlLoads.forEach(function(u) {

        if (!vars.error.value && !vars[u].loaded && vars[u].url) {

            steps.push({
                "function": function(vars, next) {
                    dataLoad(vars, u, next)
                },
                "message": locale.message.loading,
                "wait": true
            })

        }

    })

    if (vars.draw.update) {

        var appName = locale.visualization[appType] || appType,
            appSetup = vars.types[appType].setup || false,
            appReqs = vars.types[appType].requirements || [],
            appMessage = stringFormat(locale.message.initializing, appName),
            dataMessage = locale.message.data

        if (!(appReqs instanceof Array)) appReqs = [appReqs]
        appName = appName.toLowerCase()

        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        // If it has one, run the current app's setup function.
        //--------------------------------------------------------------------------
        if (!vars.error.value && typeof appSetup === "function") {

            steps.push({
                "function": function(vars) {

                    if (vars.dev.value) {
                        var timerString = "running " + appName + " setup"
                        print.time(timerString)
                    }

                    appSetup(vars)

                    if (vars.dev.value) print.timeEnd(timerString)

                },
                "message": appMessage
            })

        }

        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        // Create SVG group elements if the container is new or has changed
        //--------------------------------------------------------------------------
        if (vars.container.changed) {

            steps.push({
                "function": svgSetup,
                "message": appMessage
            })

        }

        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        // Create group for current app, if it doesn't exist.
        //--------------------------------------------------------------------------
        if (!(appType in vars.g.apps)) {

            steps.push({
                "function": function(vars) {

                    if (vars.dev.value) {
                        var timerString = "creating " + appName + " group"
                        print.time(timerString)
                    }

                    vars.g.apps[appType] = vars.g.app.append("g")
                        .attr("id", appType)
                        .attr("opacity", 0);

                    if (vars.dev.value) print.timeEnd(timerString)

                },
                "message": appMessage
            })

        }

        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        // If new data is detected, analyze and reset it.
        //--------------------------------------------------------------------------
        if (vars.data.changed) {

            steps.push({
                "function": function(vars) {
                    vars.data.cache = {}
                    delete vars.nodes.restricted
                    delete vars.edges.restricted
                    dataKeys(vars, "data")
                },
                "message": dataMessage
            })

        }

        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        // If new attributes are detected, analyze them.
        //--------------------------------------------------------------------------
        if (vars.attrs.changed) {

            steps.push({
                "function": function(vars) {
                    dataKeys(vars, "attrs")
                },
                "message": dataMessage
            })

        }

        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        // Determine color type
        //--------------------------------------------------------------------------
        steps.push({
            "function": function(vars) {

                if (!vars.color.type || vars.color.changed || vars.data.changed ||
                    vars.attrs.changed || vars.id.changed || vars.depth.changed ||
                    vars.id.solo.changed ||
                    (!vars.time.fixed.value && (vars.time.solo.changed || vars.time.mute.changed))) {

                    vars.color.valueScale = false;

                    if (vars.dev.value) {
                        var timerString = "checking color type";
                        print.time(timerString);
                    }

                    vars.color.type = false;

                    if (vars.color.value) {

                        var colorKey = vars.color.value;

                        if (validObject(colorKey)) {
                            if (colorKey[vars.id.value]) {
                                colorKey = colorKey[vars.id.value];
                            } else {
                                colorKey = colorKey[d3.keys(colorKey)[0]];
                            }
                        }

                        if (vars.data.keys && colorKey in vars.data.keys) {
                            vars.color.type = vars.data.keys[colorKey];
                        } else if (vars.attrs.keys && colorKey in vars.attrs.keys) {
                            vars.color.type = vars.attrs.keys[colorKey];
                        }

                    } else if (vars.data.keys) {
                        vars.color.type = vars.data.keys[vars.id.value];
                    }

                    if (vars.dev.value) print.timeEnd(timerString);

                }

            },
            "message": dataMessage
        })

        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        // Format nodes/edges if needed
        //--------------------------------------------------------------------------
        if ((appReqs.indexOf("edges") >= 0 && vars.edges.value &&
                (!vars.edges.linked || vars.edges.changed)) ||
            (appReqs.indexOf("nodes") >= 0 && !vars.nodes.value && vars.edges.value)) {
            steps.push({
                "function": parseEdges,
                "message": dataMessage
            })
        }

        if (appReqs.indexOf("nodes") >= 0 && vars.edges.value &&
            (!vars.nodes.positions || vars.nodes.changed || vars.type.changed)) {
            steps.push({
                "function": parseNodes,
                "message": dataMessage
            })
        }

        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        // Groups data by time and nesting.
        //--------------------------------------------------------------------------
        if (vars.data.changed || vars.time.changed || vars.time.format.changed || vars.type.changed || vars.id.changed || (vars.x.scale.changed && [vars.x.scale.value, vars.x.scale.previous].indexOf("discrete") >= 0) || (vars.y.scale.changed && [vars.y.scale.value, vars.y.scale.previous].indexOf("discrete") >= 0)) {
            steps.push({
                "function": dataFormat,
                "message": dataMessage
            })
        }

        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        // Fetches data for app and "pool"
        //--------------------------------------------------------------------------
        if (!vars.error.value) {
            steps.push({
                "function": function(vars) {

                    var year = vars.time.fixed.value ? ["all"] : null
                    if (vars.dev.value) {
                        var timerString = year ? "fetching pool data" : "fetching data"
                        print.time(timerString)
                    }
                    vars.data.pool = fetchData(vars, year)
                    if (vars.dev.value) print.timeEnd(timerString)
                    if (!year) {
                        vars.data.viz = vars.data.pool
                    } else {
                        if (vars.dev.value) print.time("fetching data for current year")
                        vars.data.viz = fetchData(vars)
                        if (vars.dev.value) print.timeEnd("fetching data for current year")
                    }

                    vars.draw.timing = vars.data.viz.length < vars.data.large ?
                        vars.timing.transitions : 0;

                },
                "message": dataMessage
            })
        }

        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        // Calculate color scale if type is number
        //--------------------------------------------------------------------------
        if (!vars.error.value) {
            steps.push({
                "check": function(vars) {

                    return vars.color.value && vars.color.type === "number" &&
                        vars.color.valueScale === false

                },
                "function": dataColor,
                "message": dataMessage
            })

        }
    }

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Remove any lingering tooltips.
    //----------------------------------------------------------------------------
    steps.push({
        "function": function(vars) {
            if (vars.dev.value) {
                var str = vars.format.locale.value.message.tooltipReset
                print.time(str)
            }
            if (vars.type.previous && appType !== vars.type.previous) {
                removeTooltip(vars.type.previous)
            }
            removeTooltip(appType)
            if (vars.dev.value) print.timeEnd(str)
        },
        "message": uiMessage
    })

    if (!vars.error.value) {
        steps.push({
            "function": errorCheck,
            "message": uiMessage
        })
    }

    steps.push({
        "function": function(vars) {

            vars.margin.process()
            titles(vars)

            if (!vars.error.value) {
                if (vars.draw.update) {

                    drawDrawer(vars)
                    drawTimeline(vars)
                    drawLegend(vars)

                } else {

                    if (vars.dev.value) print.time("calculating margins")

                    var drawer = vars.container.value.select("div#d3po_drawer").node().offsetHeight ||
                        vars.container.value.select("div#d3po_drawer").node().getBoundingClientRect().height

                    var timeline = vars.g.timeline.node().getBBox()
                    timeline = vars.timeline.value ? timeline.height + vars.ui.padding : 0

                    var legend = vars.g.legend.node().getBBox()
                    legend = vars.legend.value ? legend.height + vars.ui.padding : 0

                    vars.margin.bottom += drawer + timeline + legend

                    if (vars.dev.value) print.timeEnd("calculating margins")

                }
            }

            history(vars)
            vars.height.viz -= (vars.margin.top + vars.margin.bottom)
            vars.width.viz -= (vars.margin.left + vars.margin.right)

        },
        "message": uiMessage
    })

    if (!vars.error.value) {
        steps.push({
            "function": focusTooltip,
            "message": uiMessage
        })
    }

    steps.push({
        "function": svgUpdate,
        "message": drawMessage
    })

    if (!vars.error.value && vars.draw.update) {
        steps.push({
            "function": [runType, shapes],
            "message": drawMessage
        })
    }

    steps.push({
        "function": finish,
        "message": drawMessage
    })

    return steps

}
},{"../../core/console/print.js":83,"../../core/data/color.js":85,"../../core/data/format.js":87,"../../core/data/keys.js":89,"../../core/data/load.js":90,"../../core/fetch/data.js":96,"../../core/parse/edges.js":129,"../../core/parse/nodes.js":132,"../../object/validate.js":207,"../../string/format.js":208,"../../tooltip/remove.js":238,"./errorCheck.js":254,"./finish.js":255,"./focus/tooltip.js":256,"./shapes/draw.js":266,"./svg/enter.js":279,"./svg/update.js":280,"./types/run.js":283,"./ui/drawer.js":284,"./ui/history.js":285,"./ui/legend.js":286,"./ui/timeline.js":288,"./ui/titles.js":289}],254:[function(require,module,exports){
var fetchText = require("../../core/fetch/text.js"),
    print = require("../../core/console/print.js"),
    rejected = require("../../core/methods/rejected.js"),
    stringFormat = require("../../string/format.js"),
    stringList = require("../../string/list.js")

//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Miscellaneous Error Checks
//------------------------------------------------------------------------------
module.exports = function(vars) {

    if (vars.dev.value) print.time("checking for errors")

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Check to see if we have all required variables set
    //----------------------------------------------------------------------------
    var reqs = ["id"],
        app_reqs = vars.types[vars.type.value].requirements
    if (app_reqs) {
        if (!(app_reqs instanceof Array)) reqs.push(app_reqs)
        else reqs = reqs.concat(vars.types[vars.type.value].requirements)
    }

    var missing = []
    reqs.forEach(function(r) {
        if (typeof r === "string") {
            if (!vars[r].value || !vars[r].value.length) missing.push("\"" + r + "\"")
        } else if (typeof r === "function") {
            var reqReturn = r(vars)
            if (!reqReturn.status && reqReturn.text) {
                missing.push("\"" + reqReturn.text + "\"")
            }
        }
    })

    if (missing.length > 1) {
        var str = vars.format.locale.value.error.methods,
            app = vars.format.locale.value.visualization[vars.type.value] || vars.type.value,
            and = vars.format.locale.value.ui.and
        missing = stringList(missing, and)
        vars.error.internal = stringFormat(str, app, missing)
    } else if (missing.length === 1) {
        var str = vars.format.locale.value.error.method,
            app = vars.format.locale.value.visualization[vars.type.value] || vars.type.value
        vars.error.internal = stringFormat(str, app, missing[0])
    }

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Check to see if we have focus connections, if needed
    //----------------------------------------------------------------------------
    if (!vars.error.internal && reqs.indexOf("edges") >= 0 && reqs.indexOf("focus") >= 0) {
        var connections = vars.edges.connections(vars.focus.value[0], vars.id.value)
        if (connections.length == 0) {
            var name = fetchText(vars, vars.focus.value[0], vars.depth.value),
                str = vars.format.locale.value.error.connections
            vars.error.internal = stringFormat(str, "\"" + name + "\"")
        }
    }

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Check to see if we have all required libraries
    //----------------------------------------------------------------------------
    var reqs = ["d3"]
    if (vars.types[vars.type.value].libs) {
        reqs = reqs.concat(vars.types[vars.type.value].libs)
    }
    var missing = []
    reqs.forEach(function(r) {
        if (!window[r]) missing.push("\"" + r + "\"")
    })

    if (missing.length > 1) {
        var str = vars.format.locale.value.error.libs,
            app = vars.format.locale.value.visualization[vars.type.value],
            and = vars.format.locale.value.ui.and
        missing = stringList(missing, and)
        vars.error.internal = stringFormat(str, app, missing)
    } else if (missing.length === 1) {
        var str = vars.format.locale.value.error.lib,
            app = vars.format.locale.value.visualization[vars.type.value]
        vars.error.internal = stringFormat(str, app, missing[0])
    }

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Check to see if the requested app supports the set shape
    //----------------------------------------------------------------------------
    var shapes = vars.shape.accepted(vars);
    if (!(shapes instanceof Array)) shapes = [shapes]
    var shape = vars.shape.value;

    if (!shape || rejected(vars, shapes, shape, "shape")) {
        vars.self.shape(shapes[0]);
    }

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Check to see if the requested app supports the set "mode"
    //----------------------------------------------------------------------------
    if ("modes" in vars.types[vars.type.value]) {

        var modes = vars.types[vars.type.value].modes
        if (!(modes instanceof Array)) modes = [modes]
        var mode = vars.type.mode.value

        if (!mode || rejected(vars, modes, mode, "mode")) {
            vars.self.type({
                "mode": modes[0]
            })
        }

    }

    if (vars.dev.value) print.timeEnd("checking for errors")

}
},{"../../core/console/print.js":83,"../../core/fetch/text.js":98,"../../core/methods/rejected.js":125,"../../string/format.js":208,"../../string/list.js":209}],255:[function(require,module,exports){
var edges = require("./shapes/edges.js"),
    paths = require("./shapes/paths.js"),
    flash = require("./ui/message.js"),
    focusViz = require("./focus/viz.js"),
    methodReset = require("../../core/methods/reset.js"),
    print = require("../../core/console/print.js"),
    shapeLabels = require("./shapes/labels.js"),
    titleCase = require("../../string/title.js")

var bounds = require("./zoom/bounds.js")
var labels = require("./zoom/labels.js")
var mouse = require("./zoom/mouse.js")

//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Finalize Visualization
//------------------------------------------------------------------------------
module.exports = function(vars) {

    // Highlight focus nodes/edges
    if (vars.draw.first) {
        setTimeout(function() {
            focusViz(vars);
        }, vars.draw.timing);
    } else {
        focusViz(vars);
    }

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Zoom to fit bounds, if applicable
    //----------------------------------------------------------------------------
    if (!vars.error.value) {

        var zoom = vars.zoom.viewport || vars.zoom.bounds
        if (vars.types[vars.type.value].zoom && vars.zoom.value && zoom) {

            if (vars.dev.value) print.time("calculating zoom")

            if (vars.draw.first || vars.zoom.reset) {
                bounds(vars, zoom, 0);
            } else if (vars.type.changed || vars.focus.changed || vars.height.changed || vars.width.changed || vars.nodes.changed || vars.legend.changed || vars.timeline.changed || vars.ui.changed) {
                bounds(vars, zoom);
            }

            if (vars.dev.value) print.timeEnd("calculating zoom")

        } else {
            vars.zoom.bounds = [
                [0, 0],
                [vars.width.viz, vars.height.viz]
            ]
            vars.zoom.scale = 1
            bounds(vars)
        }

    }

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Resize/Reposition Overlay Rect for Mouse events
    //----------------------------------------------------------------------------
    var w = vars.zoom.size ? vars.zoom.size.width : vars.width.viz,
        h = vars.zoom.size ? vars.zoom.size.height : vars.height.viz,
        x = vars.zoom.bounds ? vars.zoom.bounds[0][0] : 0,
        y = vars.zoom.bounds ? vars.zoom.bounds[0][1] : 0

    vars.g.overlay
        .attr("width", w)
        .attr("height", h)
        .attr("x", x)
        .attr("y", y)

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Create labels
    //----------------------------------------------------------------------------
    if (!vars.error.value) {
        if (vars.draw.update) {
            if (vars.edges.path) {
                paths(vars);
            } else {
                edges(vars);
            }
            // if (vars.draw.timing || (!vars.types[vars.type.value].zoom && !vars.draw.timing)) {
            shapeLabels(vars, "data");
            if (vars.edges.label && !vars.edges.path) {
                setTimeout(function() {
                    shapeLabels(vars, "edges");
                }, vars.draw.timing + 200);
            }
            // }
        } else if ((vars.labels.value || vars.labels.changed) && vars.types[vars.type.value].zoom && vars.zoom.value && vars.draw.timing) {
            setTimeout(function() {
                labels(vars)
            }, vars.draw.timing)
        }
    }

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Check for Errors
    //----------------------------------------------------------------------------
    if (!vars.error.value) {
        var reqs = vars.types[vars.type.value].requirements || []
        if (!(reqs instanceof Array)) reqs = [reqs]
        var data_req = reqs.indexOf("data") >= 0
        if (!vars.error.internal) {
            if ((!vars.data.viz || !vars.returned.nodes.length) && data_req) {
                vars.error.internal = vars.format.locale.value.error.data
            }
        }
    }

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Hide the previous app, if applicable
    //----------------------------------------------------------------------------
    var prev = vars.type.previous
    if (prev && vars.type.value != prev && vars.g.apps[prev]) {
        if (vars.dev.value) print.time("hiding \"" + prev + "\"")
        if (vars.draw.timing) {
            vars.g.apps[prev].transition().duration(vars.draw.timing)
                .attr("opacity", 0)
        } else {
            vars.g.apps[prev].attr("opacity", 0)
        }
        if (vars.dev.value) print.timeEnd()
    }

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Show the current app, data, and edges groups
    //----------------------------------------------------------------------------
    if (!vars.error.value) {
        var new_opacity = (data_req && vars.data.viz.length === 0) ||
            vars.error.internal || vars.error.value ? 0 : vars.focus.value.length &&
            vars.types[vars.type.value].zoom && vars.zoom.value ?
            1 - vars.tooltip.curtain.opacity : 1;

        var timing = vars.draw.timing;

        vars.group.transition().duration(timing)
            .attr("opacity", new_opacity);

        vars.g.data.transition().duration(timing)
            .attr("opacity", new_opacity);

        vars.g.edges.transition().duration(timing)
            .attr("opacity", new_opacity);

    }

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Display and reset internal_error, if applicable
    //----------------------------------------------------------------------------
    if (vars.error.value) {
        flash(vars, vars.error.value);
    } else if (vars.error.internal) {
        vars.error.internal = titleCase(vars.error.internal);
        print.warning(vars.error.internal);
        flash(vars, vars.error.internal);
        vars.error.internal = null;
    } else {
        flash(vars);
    }

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Unfreeze controls and apply zoom behavior, if applicable
    //----------------------------------------------------------------------------
    setTimeout(function() {

        methodReset(vars)

        if (vars.types[vars.type.value].zoom && vars.zoom.value) {
            vars.g.zoom
                .datum(vars)
                .call(vars.zoom.behavior.on("zoom", mouse))
            if (!vars.zoom.scroll.value) {
                vars.g.zoom
                    .on("mousewheel.zoom", null)
                    .on("MozMousePixelScroll.zoom", null)
                    .on("wheel.zoom", null)
            }
            if (!vars.zoom.click.value) {
                vars.g.zoom.on("dblclick.zoom", null)
            }
            if (!vars.zoom.pan.value) {
                vars.g.zoom
                    .on("mousedown.zoom", null)
                    .on("mousemove.zoom", null)
            }
        } else {
            vars.g.zoom
                .call(vars.zoom.behavior.on("zoom", null))
                .on("dblclick.zoom", null)
                .on("mousedown.zoom", null)
                .on("mousemove.zoom", null)
                .on("mousewheel.zoom", null)
                .on("MozMousePixelScroll.zoom", null)
                .on("touchstart.zoom", null)
                .on("wheel.zoom", null)
        }

    }, vars.draw.timing)

}
},{"../../core/console/print.js":83,"../../core/methods/reset.js":127,"../../string/title.js":211,"./focus/viz.js":257,"./shapes/edges.js":267,"./shapes/labels.js":269,"./shapes/paths.js":271,"./ui/message.js":287,"./zoom/bounds.js":290,"./zoom/labels.js":292,"./zoom/mouse.js":293}],256:[function(require,module,exports){
// Creates focus tooltip, if applicable
(function() {
    var createTooltip, fetchValue, print, removeTooltip;

    createTooltip = require("../tooltip/create.js");

    fetchValue = require("../../../core/fetch/value.js");

    print = require("../../../core/console/print.js");

    removeTooltip = require("../../../tooltip/remove.js");

    module.exports = function(vars) {
        var data, focus, offset;
        focus = vars.focus;
        if (!vars.error.internal && focus.value.length === 1 && focus.value.length && !vars.small && focus.tooltip.value) {
            if (vars.dev.value) {
                print.time("drawing focus tooltip");
            }
            data = vars.data.pool.filter(function(d) {
                return fetchValue(vars, d, vars.id.value) === focus.value[0];
            });
            if (data.length >= 1) {
                data = data[0];
            } else {
                data = {};
                data[vars.id.value] = focus.value[0];
            }
            offset = vars.labels.padding;
            createTooltip({
                anchor: "top left",
                arrow: false,
                data: data,
                fullscreen: false,
                id: "visualization_focus",
                length: "long",
                maxheight: vars.height.viz - offset * 2,
                mouseevents: true,
                offset: 0,
                vars: vars,
                width: vars.tooltip.large,
                x: vars.width.value - vars.margin.right - offset,
                y: vars.margin.top + offset
            });
            vars.width.viz -= vars.tooltip.large + offset * 2;
            if (vars.dev.value) {
                print.timeEnd("drawing focus tooltip");
            }
        } else {
            removeTooltip("visualization_focus");
        }
    };

}).call(this);
},{"../../../core/console/print.js":83,"../../../core/fetch/value.js":99,"../../../tooltip/remove.js":238,"../tooltip/create.js":281}],257:[function(require,module,exports){
var events = require("../../../client/pointer.js"),
    ie = require("../../../client/ie.js"),
    fetchValue = require("../../../core/fetch/value.js"),
    print = require("../../../core/console/print.js"),
    uniqueValues = require("../../../util/uniques.js")

//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Creates focus elements, if available
//------------------------------------------------------------------------------
module.exports = function(vars) {

    vars.g.edge_focus
        .selectAll("g")
        .remove()

    vars.g.data_focus
        .selectAll("g")
        .remove()

    if (vars.focus.value.length && vars.types[vars.type.value].zoom && vars.zoom.value) {

        if (vars.dev.value) print.time("drawing focus elements")

        var edges = vars.g.edges.selectAll("g")

        if (edges.size() > 0) {

            edges.each(function(l) {

                var source = l[vars.edges.source][vars.id.value],
                    target = l[vars.edges.target][vars.id.value]

                if (source == vars.focus.value[0] || target == vars.focus.value[0]) {
                    var elem = vars.g.edge_focus.node().appendChild(this.cloneNode(true))
                    d3.select(elem).datum(l).attr("opacity", 1)
                        .selectAll("line, path").datum(l)
                }

            })


            var marker = vars.edges.arrows.value

            vars.g.edge_focus.selectAll("line, path")
                .attr("vector-effect", "non-scaling-stroke")
                .style("stroke", vars.color.focus)
                .style("stroke-width", function() {
                    if (ie && vars.types[vars.type.value].zoom) return 0;
                    return vars.edges.size.value ? d3.select(this).style("stroke-width") :
                        vars.data.stroke.width * 2
                })
                .attr("marker-start", function(e) {

                    var direction = vars.edges.arrows.direction.value

                    if ("bucket" in e.d3po) {
                        var d = "_" + e.d3po.bucket
                    } else {
                        var d = ""
                    }

                    return direction == "source" && marker ?
                        "url(#d3po_edge_marker_focus" + d + ")" : "none"

                })
                .attr("marker-end", function(e) {

                    var direction = vars.edges.arrows.direction.value

                    if ("bucket" in e.d3po) {
                        var d = "_" + e.d3po.bucket
                    } else {
                        var d = ""
                    }

                    return direction == "target" && marker ?
                        "url(#d3po_edge_marker_focus" + d + ")" : "none"

                })

            vars.g.edge_focus.selectAll("text")
                .style("fill", vars.color.focus)

        }

        var focii = uniqueValues(vars.edges.connections(vars.focus.value[0], vars.id.value, true), vars.id.value, fetchValue, vars)
        focii.push(vars.focus.value[0])

        var x_bounds = [],
            y_bounds = [],
            x_buffer = [0],
            y_buffer = [0]

        var groups = vars.g.data.selectAll("g")
            .each(function(d) {
                if (focii.indexOf(d[vars.id.value]) >= 0) {
                    var elem = vars.g.data_focus.node().appendChild(this.cloneNode(true))
                    var elem = d3.select(elem).datum(d).attr("opacity", 1)

                    if (vars.shape.value == "coordinates") {

                        vars.zoom.viewport = vars.path.bounds(vars.zoom.coords[d.d3po.id])

                    } else if ("d3po" in d) {
                        if ("x" in d.d3po) {
                            x_bounds.push(d.d3po.x)
                        }
                        if ("y" in d.d3po) {
                            y_bounds.push(d.d3po.y)
                        }
                        if ("r" in d.d3po) {
                            x_buffer.push(d.d3po.r)
                            y_buffer.push(d.d3po.r)
                        } else {
                            if ("width" in d.d3po) {
                                x_buffer.push(d.d3po.width / 2)
                            }
                            if ("height" in d.d3po) {
                                y_buffer.push(d.d3po.height / 2)
                            }
                        }
                    }

                    for (e in events) {
                        var evt = d3.select(this).on(events[e])
                        if (evt) {
                            elem.on(events[e], evt)
                        }
                    }

                }
            })

        if (x_bounds.length && y_bounds.length) {

            var xcoords = d3.extent(x_bounds),
                ycoords = d3.extent(y_bounds),
                xmax = d3.max(x_buffer),
                ymax = d3.max(y_buffer)

            vars.zoom.viewport = [
                [xcoords[0] - xmax, ycoords[0] - ymax],
                [xcoords[1] + xmax, ycoords[1] + ymax]
            ]

        }

        vars.g.data_focus.selectAll("path")
            .style("stroke-width", ie && vars.types[vars.type.value].zoom ?
                0 : vars.data.stroke.width * 2);

        if (vars.dev.value) print.timeEnd("drawing focus elements")

    } else {
        vars.zoom.viewport = false
    }

}
},{"../../../client/ie.js":68,"../../../client/pointer.js":69,"../../../core/console/print.js":83,"../../../core/fetch/value.js":99,"../../../util/uniques.js":245}],258:[function(require,module,exports){
(function() {
    var angles, largestRect, path2poly, shapeStyle;

    shapeStyle = require("./style.js");

    largestRect = require("../../../geom/largestrectangle.js");

    path2poly = require("../../../geom/path2poly.js");

    angles = {
        start: {},
        end: {}
    };

    module.exports = function(vars, selection, enter, exit) {
        var arc, arcTween, data, newarc;
        arc = d3.arc().innerRadius(function(d) {
            return d.d3po.r_inner;
        }).outerRadius(function(d) {
            return d.d3po.r_outer;
        }).startAngle(function(d) {
            return d.d3po.startAngle;
        }).endAngle(function(d) {
            return d.d3po.endAngle;
        });
        data = function(d) {
            var poly, rect;
            if (vars.labels.value) {
                if (d.d3po.label) {
                    d.d3po_label = d.d3po.label;
                } else if (d.d3po.endAngle - d.d3po.startAngle >= 0.1) {
                    poly = path2poly(arc(d));
                    rect = largestRect(poly, {
                        angle: 0
                    });
                    if (rect[0]) {
                        d.d3po_label = {
                            w: rect[0].width,
                            h: rect[0].height,
                            x: rect[0].cx,
                            y: rect[0].cy
                        };
                    } else {
                        delete d.d3po_label;
                    }
                } else {
                    delete d.d3po_label;
                }
            }
            return [d];
        };
        if (vars.draw.timing) {
            newarc = d3.arc().innerRadius(function(d) {
                return d.d3po.r_inner;
            }).outerRadius(function(d) {
                return d.d3po.r_outer;
            }).startAngle(function(d) {
                if (angles.start[d.d3po.id] === void 0) {
                    angles.start[d.d3po.id] = 0;
                }
                if (isNaN(angles.start[d.d3po.id])) {
                    angles.start[d.d3po.id] = d.d3po.startAngle;
                }
                return angles.start[d.d3po.id];
            }).endAngle(function(d) {
                if (angles.end[d.d3po.id] === void 0) {
                    angles.end[d.d3po.id] = 0;
                }
                if (isNaN(angles.end[d.d3po.id])) {
                    angles.end[d.d3po.id] = d.d3po.endAngle;
                }
                return angles.end[d.d3po.id];
            });
            arcTween = function(arcs, newAngle) {
                return arcs.attrTween("d", function(d) {
                    var e, interpolateE, interpolateS, s;
                    if (newAngle === void 0) {
                        s = d.d3po.startAngle;
                        e = d.d3po.endAngle;
                    } else if (newAngle === 0) {
                        s = 0;
                        e = 0;
                    }
                    interpolateS = d3.interpolate(angles.start[d.d3po.id], s);
                    interpolateE = d3.interpolate(angles.end[d.d3po.id], e);
                    return function(t) {
                        angles.start[d.d3po.id] = interpolateS(t);
                        angles.end[d.d3po.id] = interpolateE(t);
                        return newarc(d);
                    };
                });
            };
            enter.append("path").attr("class", "d3po_data").call(shapeStyle, vars).attr("d", newarc);
            selection.selectAll("path.d3po_data").data(data).transition().duration(vars.draw.timing).call(shapeStyle, vars).call(arcTween);
            exit.selectAll("path.d3po_data").transition().duration(vars.draw.timing).call(arcTween, 0);
        } else {
            enter.append("path").attr("class", "d3po_data");
            selection.selectAll("path.d3po_data").data(data).call(shapeStyle, vars).attr("d", arc);
        }
    };

}).call(this);
},{"../../../geom/largestrectangle.js":194,"../../../geom/path2poly.js":196,"./style.js":275}],259:[function(require,module,exports){
var fetchText = require("../../../core/fetch/text.js"),
    fontSizes = require("../../../font/sizes.js"),
    largestRect = require("../../../geom/largestrectangle.js"),
    curves = require("../d3functions/curves.js"),
    shapeStyle = require("./style.js");
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Draws "square" and "circle" shapes using svg:rect
//------------------------------------------------------------------------------
module.exports = function(vars, selection, enter, exit) {

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // D3 area definition
    //----------------------------------------------------------------------------
    var area = d3.area()
        .x(function(d) {
            return d.d3po.x;
        })
        .y0(function(d) {
            return d.d3po.y0;
        })
        .y1(function(d) {
            return d.d3po.y;
        })
        .curve(curves.fromString(vars.shape.interpolate.value));

    var startArea = d3.area()
        .x(function(d) {
            return d.d3po.x;
        })
        .y0(function(d) {
            return d.d3po.y0;
        })
        .y1(function(d) {
            return d.d3po.y0;
        })
        .curve(curves.fromString(vars.shape.interpolate.value));

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // "paths" Enter
    //----------------------------------------------------------------------------
    enter.append("path").attr("class", "d3po_data")
        .attr("d", function(d) {
            return startArea(d.values);
        })
        .call(shapeStyle, vars);

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // "paths" Update
    //----------------------------------------------------------------------------

    var style = {
        "font-weight": vars.labels.font.weight,
        "font-family": vars.labels.font.family.value
    };

    selection.selectAll("path.d3po_data")
        .data(function(d) {

            if (vars.labels.value && d.values.length > 1) {

                var max = d3.max(d.values, function(v) {
                        return v.d3po.y0 - v.d3po.y;
                    }),
                    lr = false;

                if (max > vars.labels.font.size) {

                    var tops = [],
                        bottoms = [],
                        names = fetchText(vars, d);

                    d.values.forEach(function(v) {
                        tops.push([v.d3po.x, v.d3po.y]);
                        bottoms.push([v.d3po.x, v.d3po.y0]);
                    });
                    tops = tops.concat(bottoms.reverse());

                    var ratio = null;
                    if (names.length) {
                        var size = fontSizes(names[0], style);
                        ratio = size[0].width / size[0].height;
                    }

                    lr = largestRect(tops, {
                        "angle": d3.range(-70, 71, 1),
                        "aspectRatio": ratio,
                        "tolerance": 0
                    });

                }

                if (lr && lr[0]) {

                    var label = {
                        "w": ~~(lr[0].width),
                        "h": ~~(lr[0].height),
                        "x": ~~(lr[0].cx),
                        "y": ~~(lr[0].cy),
                        "angle": lr[0].angle * -1,
                        "padding": 2,
                        "names": names
                    }

                    if (lr[0].angle !== 0) {
                        label.translate = {
                            "x": label.x,
                            "y": label.y
                        }
                    } else {
                        label.translate = false
                    }

                    if (label.w >= 10 && label.h >= 10) {
                        d.d3po_label = label
                    }

                }

            }

            return [d];
        })

    if (vars.draw.timing) {
        selection.selectAll("path.d3po_data")
            .transition().duration(vars.draw.timing)
            .attr("d", function(d) {
                return area(d.values)
            })
            .call(shapeStyle, vars)
    } else {
        selection.selectAll("path.d3po_data")
            .attr("d", function(d) {
                return area(d.values)
            })
            .call(shapeStyle, vars)
    }

}
},{"../../../core/fetch/text.js":98,"../../../font/sizes.js":136,"../../../geom/largestrectangle.js":194,"../d3functions/curves.js":249,"./style.js":275}],260:[function(require,module,exports){
var fetchText = require("../../../core/fetch/text.js"),
    largestRect = require("../../../geom/largestrectangle.js"),
    shapeStyle = require("./style.js")
    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Draws "square" and "circle" shapes using svg:rect
    //------------------------------------------------------------------------------
module.exports = function(vars, selection, enter, exit) {

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Initialize check scale on enter and exit.
    //----------------------------------------------------------------------------
    function init(paths) {
        paths.attr("transform", "scale(1)")
    }

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Change scale of check on update.
    //---------------------------------------------------------------------------
    function update(paths) {
        paths.attr("transform", function(d) {
            var smaller_dim = Math.min(d.d3po.width, d.d3po.height);
            var scale = Math.floor(smaller_dim / 16);
            return "scale(" + scale + ")";
        })
    }

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // "paths" Enter
    //----------------------------------------------------------------------------
    enter.append("path").attr("class", "d3po_data")
        .attr("d", "M5-6.844L3.594-5.407L-2,0.188l-1.594-1.594L-5-2.844L-7.844,0l1.438,1.406l3,3L-2,5.843l1.406-1.438l7-7L7.844-4L5-6.844z")
        .call(init)
        .call(shapeStyle, vars)

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // "paths" Update
    //----------------------------------------------------------------------------
    selection.selectAll("path.d3po_data")
        .data(function(d) {
            return [d];
        })

    if (vars.draw.timing) {
        selection.selectAll("path.d3po_data")
            .transition().duration(vars.draw.timing)
            .call(update)
            .call(shapeStyle, vars)
    } else {
        selection.selectAll("path.d3po_data")
            .call(update)
            .call(shapeStyle, vars)
    }

}
},{"../../../core/fetch/text.js":98,"../../../geom/largestrectangle.js":194,"./style.js":275}],261:[function(require,module,exports){
// Returns the correct fill color for a node
(function() {
    var fetchColor, fetchValue, lighter, segments;

    fetchValue = require("../../../core/fetch/value.js");

    fetchColor = require("../../../core/fetch/color.js");

    lighter = require("../../../color/lighter.js");

    segments = require("./segments.js");

    module.exports = function(d, vars, stroke) {
        var active, shape, temp, total;
        shape = d.d3po.shape || vars.shape.value;
        if (vars.shape.value === "line" && shape !== "circle") {
            return "none";
        } else if (vars.shape.value === "area" || shape === "active" || vars.shape.value === "line") {
            return fetchColor(vars, d);
        } else if (shape === "temp") {
            if (stroke) {
                return fetchColor(vars, d);
            } else {
                return "url(#d3po_hatch_" + d.d3po.id + ")";
            }
        } else if (d.d3po["static"]) {
            return lighter(fetchColor(vars, d), .75);
        }
        active = segments(vars, d, "active");
        temp = segments(vars, d, "temp");
        total = segments(vars, d, "total");
        if ((!vars.active.value && !vars.temp.value) || active === true || (active && total && active >= total && !temp) || (active && !total)) {
            return fetchColor(vars, d);
        } else if (vars.active.spotlight.value) {
            return vars.color.missing;
        } else {
            return lighter(fetchColor(vars, d), .75);
        }
    };

}).call(this);
},{"../../../color/lighter.js":76,"../../../core/fetch/color.js":95,"../../../core/fetch/value.js":99,"./segments.js":274}],262:[function(require,module,exports){
(function() {
    var copy, distance, fetchText, fontSizes, labels, largestRect, path2poly, getProjection, shapeStyle;

    copy = require("../../../util/copy.js");

    distance = require("../../../network/distance.js");

    fetchText = require("../../../core/fetch/text.js");

    fontSizes = require("../../../font/sizes.js");

    largestRect = require("../../../geom/largestrectangle.js");

    path2poly = require("../../../geom/path2poly.js");

    projections = require("../d3functions/projections.js");

    shapeStyle = require("./style.js");

    labels = {};

    module.exports = function(vars, selection, enter, exit) {
        var projection, size_change;
        projection = (typeof vars.coords.projection.value === "function")?
            vars.coords.projection.value:
            projections.fromString(vars.coords.projection.value)();
        if (projection.center) {
            projection.center(vars.coords.center);
        }
        if (!vars.zoom.scale) {
            vars.zoom.scale = 1;
        }
        vars.zoom.area = 1 / vars.zoom.scale / vars.zoom.scale;
        vars.path = d3.geoPath().projection(projection);
        if (vars.draw.timing) {
            selection.selectAll("path.d3po_data").attr("d", vars.path).transition().duration(vars.draw.timing).call(shapeStyle, vars);
        } else {
            selection.selectAll("path.d3po_data").attr("d", vars.path).call(shapeStyle, vars);
        }
        enter.append("path").attr("id", function(d) {
            return d.id;
        }).attr("class", "d3po_data").attr("d", vars.path).call(shapeStyle, vars);
        size_change = vars.old_height !== vars.height.viz || vars.height.changed || vars.old_width !== vars.width.viz || vars.width.changed;
        vars.old_height = vars.height.viz;
        vars.old_width = vars.width.viz;
        if (vars.coords.changed || size_change || vars.coords.mute.changed || vars.coords.solo.changed || vars.type.changed || vars.text.changed || vars.coords.projection.changed || vars.labels.changed) {
            vars.zoom.bounds = null;
            vars.zoom.reset = true;
            vars.zoom.coords = {};
            return selection.each(function(d) {
                var areaM, areas, b, c, center, coords, dist_cutoff, dist_values, distances, i, j, largest, len, names, path, ratio, rect, reduced, ref, size, style;
                if (vars.coords.simplify.value && d.geometry.coordinates.length > 1) {
                    distances = [];
                    areas = [];
                    areaM = 0;
                    largest = copy(d);
                    reduced = copy(d);
                    d.geometry.coordinates = d.geometry.coordinates.filter(function(c, i) {
                        var a;
                        reduced.geometry.coordinates = [c];
                        a = vars.path.area(reduced);
                        if (a > 0) {
                            areas.push(a);
                            if (a > areaM) {
                                largest.geometry.coordinates = [c];
                                areaM = a;
                            }
                            return true;
                        } else {
                            return false;
                        }
                    });
                    center = vars.path.centroid(largest);
                    ref = d.geometry.coordinates;
                    for (i = j = 0, len = ref.length; j < len; i = ++j) {
                        c = ref[i];
                        reduced.geometry.coordinates = [c];
                        distances.push(distance(vars.path.centroid(reduced), center));
                    }
                    dist_values = distances.reduce(function(arr, dist, i) {
                        if (dist) {
                            arr.push(areas[i] / dist);
                        }
                        return arr;
                    }, []);
                    dist_cutoff = d3.quantile(dist_values, vars.coords.threshold.value);
                    reduced.geometry.coordinates = d.geometry.coordinates.filter(function(c, i) {
                        var a, dist;
                        dist = distances[i];
                        a = areas[i];
                        return dist === 0 || a / dist >= dist_cutoff;
                    });
                    coords = largest.geometry.coordinates[0];
                    if (coords && largest.geometry.type === "MultiPolygon") {
                        coords = coords[0];
                        largest.geometry.coordinates[0] = coords;
                        largest.geometry.type = "Polygon";
                    }
                } else {
                    reduced = d;
                    largest = d;
                    coords = d.geometry.coordinates[0];
                }
                vars.zoom.coords[d.d3po.id] = reduced;
                delete d.d3po_label;
                if (vars.labels.value) {
                    names = fetchText(vars, d);
                    if (coords && names.length) {
                        path = path2poly(vars.path(largest));
                        style = {
                            "font-weight": vars.labels.font.weight,
                            "font-family": vars.labels.font.family.value
                        };
                        ratio = null;
                        if (names[0].split(" ").length === 1) {
                            size = fontSizes(names[0], style)[0];
                            ratio = size.width / size.height;
                        }
                        rect = largestRect(path, {
                            angle: 0,
                            aspectRatio: ratio
                        });
                        if (rect) {
                            rect = rect[0];
                            d.d3po_label = {
                                anchor: "middle",
                                valign: "center",
                                h: rect.height,
                                w: rect.width,
                                x: rect.cx,
                                y: rect.cy,
                                names: names
                            };
                        }
                    }
                }
                labels[d.id] = d.d3po_label;
                b = vars.path.bounds(reduced);
                if (!vars.zoom.bounds) {
                    return vars.zoom.bounds = b;
                } else {
                    if (vars.zoom.bounds[0][0] > b[0][0]) {
                        vars.zoom.bounds[0][0] = b[0][0];
                    }
                    if (vars.zoom.bounds[0][1] > b[0][1]) {
                        vars.zoom.bounds[0][1] = b[0][1];
                    }
                    if (vars.zoom.bounds[1][0] < b[1][0]) {
                        vars.zoom.bounds[1][0] = b[1][0];
                    }
                    if (vars.zoom.bounds[1][1] < b[1][1]) {
                        return vars.zoom.bounds[1][1] = b[1][1];
                    }
                }
            });
        } else if (!vars.focus.value.length) {
            vars.zoom.viewport = false;
            return selection.each(function(d) {
                return d.d3po_label = labels[d.id];
            });
        }
    };

}).call(this);
},{"../../../core/fetch/text.js":98,"../../../font/sizes.js":136,"../../../geom/largestrectangle.js":194,"../../../geom/path2poly.js":196,"../../../network/distance.js":200,"../../../util/copy.js":242,"../d3functions/projections.js":251,"./style.js":275}],263:[function(require,module,exports){
var shapeStyle = require("./style.js")
    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Draws "square" and "circle" shapes using svg:rect
    //------------------------------------------------------------------------------
module.exports = function(vars, selection, enter, exit) {

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Initialize check scale on enter and exit.
    //----------------------------------------------------------------------------
    function init(paths) {
        paths.attr("d", d3.symbol().type(d3.symbolCross).size(10))
    }

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Change scale of check on update.
    //---------------------------------------------------------------------------
    function update(paths) {
        paths.attr("d", d3.symbol().type(d3.symbolCross).size(function(d) {
            var smaller_dim = Math.min(d.d3po.width, d.d3po.height);
            return d3.scalePow().exponent(2)(smaller_dim / 2);
        }))
    }

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // "paths" Enter
    //----------------------------------------------------------------------------
    enter.append("path").attr("class", "d3po_data")
        .call(init)
        .call(shapeStyle, vars)

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // "paths" Update
    //----------------------------------------------------------------------------
    selection.selectAll("path.d3po_data")
        .data(function(d) {
            return [d];
        })

    if (vars.draw.timing) {
        selection.selectAll("path.d3po_data")
            .transition().duration(vars.draw.timing)
            .call(update)
            .call(shapeStyle, vars)
    } else {
        selection.selectAll("path.d3po_data")
            .call(update)
            .call(shapeStyle, vars)
    }

}
},{"./style.js":275}],264:[function(require,module,exports){
var shapeStyle = require("./style.js")
    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Draws "square" and "circle" shapes using svg:rect
    //------------------------------------------------------------------------------
module.exports = function(vars, selection, enter, exit) {

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Initialize check scale on enter and exit.
    //----------------------------------------------------------------------------
    function init(paths) {
        paths.attr("d", d3.symbol().type(d3.symbolDiamond).size(10))
    }

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Change scale of check on update.
    //---------------------------------------------------------------------------
    function update(paths) {
        paths.attr("d", d3.symbol().type(d3.symbolDiamond).size(function(d) {
            var smaller_dim = Math.min(d.d3po.width, d.d3po.height);
            return d3.scalePow().exponent(2)(smaller_dim / 2);
        }))
    }

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // "paths" Enter
    //----------------------------------------------------------------------------
    enter.append("path").attr("class", "d3po_data")
        .call(init)
        .call(shapeStyle, vars)

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // "paths" Update
    //----------------------------------------------------------------------------
    selection.selectAll("path.d3po_data")
        .data(function(d) {
            return [d];
        })

    if (vars.draw.timing) {
        selection.selectAll("path.d3po_data")
            .transition().duration(vars.draw.timing)
            .call(update)
            .call(shapeStyle, vars)
    } else {
        selection.selectAll("path.d3po_data")
            .call(update)
            .call(shapeStyle, vars)
    }

}
},{"./style.js":275}],265:[function(require,module,exports){
var shapeStyle = require("./style.js")
    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Draws "donut" shapes using svg:path with arcs
    //------------------------------------------------------------------------------
module.exports = function(vars, selection, enter, exit) {

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // In order to correctly animate each donut's size and arcs, we need to store
    // it's previous values in a lookup object that does not get destroyed when
    // redrawing the visualization.
    //----------------------------------------------------------------------------
    if (!vars.arcs) {
        vars.arcs = {
            "donut": {},
            "active": {},
            "temp": {}
        }
    }

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // This is the main arc function that determines what values to use for each
    // arc angle and radius.
    //----------------------------------------------------------------------------
    var arc = d3.arc()
        .startAngle(0)
        .endAngle(function(d) {
            var a = vars.arcs[d.d3po.shape][d.d3po.id].a;
            return a > Math.PI * 2 ? Math.PI * 2 : a;
        })
        .innerRadius(function(d) {
            if (d.d3po.static) return 0;
            var r = vars.arcs[d.d3po.shape][d.d3po.id].r;
            return r * vars.data.donut.size;
        })
        .outerRadius(function(d) {
            return vars.arcs[d.d3po.shape][d.d3po.id].r;
        })

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // This is the main "arcTween" function where all of the animation happens
    // for each arc.
    //----------------------------------------------------------------------------
    function size(path, mod, rad, ang) {
        if (!mod) var mod = 0
        if (typeof rad != "number") var rad = undefined
        if (typeof ang != "number") var ang = undefined
        path.attrTween("d", function(d) {
            if (rad == undefined) var r = d.d3po.r ? d.d3po.r : d3.max([d.d3po.width, d.d3po.height])
            else var r = rad
            if (ang == undefined) var a = d.d3po.segments[d.d3po.shape]
            else var a = ang
            if (!vars.arcs[d.d3po.shape][d.d3po.id]) {
                vars.arcs[d.d3po.shape][d.d3po.id] = {
                    "r": 0
                }
                vars.arcs[d.d3po.shape][d.d3po.id].a = Math.PI * 2
            }
            var radius = d3.interpolate(vars.arcs[d.d3po.shape][d.d3po.id].r, r + mod),
                angle = d3.interpolate(vars.arcs[d.d3po.shape][d.d3po.id].a, a)
            return function(t) {
                vars.arcs[d.d3po.shape][d.d3po.id].r = radius(t)
                vars.arcs[d.d3po.shape][d.d3po.id].a = angle(t)
                return arc(d)
            }
        })
    }

    function data(d) {

        if (d.d3po.label) {
            d.d3po_label = d.d3po.label;
        } else {
            delete d.d3po_label;
        }

        return [d];
    }

    if (vars.draw.timing) {

        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        // "paths" Exit
        //----------------------------------------------------------------------------
        exit.selectAll("path.d3po_data").transition().duration(vars.draw.timing)
            .call(size, 0, 0)
            .each("end", function(d) {
                delete vars.arcs[d.d3po.shape][d.d3po.id];
            });

        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        // "paths" Update
        //----------------------------------------------------------------------------
        selection.selectAll("path.d3po_data")
            .data(data)
            .transition().duration(vars.draw.timing)
            .call(size)
            .call(shapeStyle, vars);

        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        // "paths" Enter
        //----------------------------------------------------------------------------
        enter.append("path")
            .attr("class", "d3po_data")
            .transition().duration(0)
            .call(size, 0, 0)
            .call(shapeStyle, vars)
            .transition().duration(vars.draw.timing)
            .call(size)
            .call(shapeStyle, vars);

    } else {

        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        // "paths" Exit
        //----------------------------------------------------------------------------
        exit.selectAll("path.d3po_data")
            .each(function(d) {
                delete vars.arcs[d.d3po.shape][d.d3po.id];
            });

        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        // "paths" Enter
        //----------------------------------------------------------------------------
        enter.append("path")
            .attr("class", "d3po_data");

        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        // "paths" Update
        //----------------------------------------------------------------------------
        selection.selectAll("path.d3po_data")
            .data(data)
            .call(size)
            .call(shapeStyle, vars);
    }

};
},{"./style.js":275}],266:[function(require,module,exports){
var child = require("../../../util/child.js"),
    closest = require("../../../util/closest.js"),
    createTooltip = require("../tooltip/create.js"),
    events = require("../../../client/pointer.js"),
    fetchValue = require("../../../core/fetch/value.js"),
    fetchColor = require("../../../core/fetch/color.js"),
    fetchText = require("../../../core/fetch/text.js"),
    legible = require("../../../color/legible.js"),
    print = require("../../../core/console/print.js"),
    removeTooltip = require("../../../tooltip/remove.js"),
    segments = require("./segments.js"),
    shapeFill = require("./fill.js"),
    stringStrip = require("../../../string/strip.js"),
    touch = require("../../../client/touch.js"),
    touchEvent = require("../zoom/propagation.js"),
    uniqueValues = require("../../../util/uniques.js"),
    validObject = require("../../../object/validate.js"),
    zoomDirection = require("../zoom/direction.js");

var drawShape = {
    "arc": require("./arc.js"),
    "area": require("./area.js"),
    "check": require("./check.js"),
    "coordinates": require("./coordinates.js"),
    "cross": require("./cross.js"),
    "diamond": require("./diamond.js"),
    "donut": require("./donut.js"),
    "line": require("./line.js"),
    "radial": require("./radial.js"),
    "rect": require("./rect.js"),
    "triangle_down": require("./triangle_down.js"),
    "triangle_up": require("./triangle_up.js"),
    "whisker": require("./whisker.js")
};

//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Draws the appropriate shape based on the data
//------------------------------------------------------------------------------
module.exports = function(vars) {

    var data = vars.returned.nodes || [],
        edges = vars.returned.edges || [];

    vars.draw.timing = data.length < vars.data.large &&
        edges.length < vars.edges.large ?
        vars.timing.transitions : 0;

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Match vars.shape types to their respective d3po.shape functions. For
    // example, both "square", and "circle" shapes use "rect" as their drawing
    // class.
    //----------------------------------------------------------------------------
    var shapeLookup = {
        "arc": "arc",
        "area": "area",
        "check": "check",
        "circle": "rect",
        "coordinates": "coordinates",
        "cross": "cross",
        "donut": "donut",
        "diamond": "diamond",
        "line": "line",
        "plus": "cross",
        "radial": "radial",
        "rect": "rect",
        "square": "rect",
        "triangle_down": "triangle_down",
        "triangle": "triangle_up",
        "triangle_up": "triangle_up",
        "whisker": "whisker"
    };

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Split the data by each shape type in the data.
    //----------------------------------------------------------------------------
    var shapes = {};
    data.forEach(function(d) {
        var s = d.d3po && d.d3po.shape ? d.d3po.shape : vars.shape.value;
        if (s in shapeLookup) {
            if (d.d3po) d.d3po.shape = s
            s = shapeLookup[s]
            if (!shapes[s]) shapes[s] = []
            shapes[s].push(d)
        }
    })

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Resets the "id" of each data point to use with matching.
    //----------------------------------------------------------------------------
    function id(d) {

        if (!d.d3po.id) {
            d.d3po.id = "";
            for (var i = 0; i <= vars.depth.value; i++) {
                d.d3po.id += fetchValue(vars, d, vars.id.nesting[i]) + "_"
            }

            d.d3po.id += shape;

            ["x", "y", "x2", "y2"].forEach(function(axis) {
                if (vars[axis].scale.value == "discrete") {
                    var val = fetchValue(vars, d, vars[axis].value)
                    if (val.constructor === Date) val = val.getTime()
                    d.d3po.id += "_" + val
                }
            })

            if (d.d3po.suffix) {
                d.d3po.id += "_" + d.d3po.suffix;
            }

            d.d3po.id = stringStrip(d.d3po.id)
        }

        return d
    }

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Transforms the positions and scale of each group.
    //----------------------------------------------------------------------------
    function transform(g, grow) {

        var scales = vars.types[vars.type.value].scale,
            scale = 1;
        if (scales) {
            if (validObject[scales] && vars.shape.value in scales) {
                scale = scales[vars.shape.value];
            } else if (typeof scales == "function") {
                scale = scales(vars, vars.shape.value);
            } else if (typeof scales == "number") {
                scale = scales;
            }
        }

        scale = grow ? scale : 1;
        g.attr("transform", function(d) {

            if (["line", "area", "coordinates"].indexOf(shape) < 0) {
                var x = d.d3po.x || 0,
                    y = d.d3po.y || 0;
                return "translate(" + x + "," + y + ")scale(" + scale + ")";
            } else {
                return "scale(" + scale + ")";
            }

        });

    }

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Sets the class name for a group
    //----------------------------------------------------------------------------
    function className(g) {
        g
            .attr("id", function(d) {
                return "d3po_group_" + d.d3po.id;
            })
            .attr("class", function(d) {
                var c = vars.class.value ? " " + fetchValue(vars, d, vars.class.value) : "";
                return "d3po_" + shape + c;
            });
    }

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Remove old groups
    //----------------------------------------------------------------------------
    for (var s in shapeLookup) {
        if (!(shapeLookup[s] in shapes) || d3.keys(shapes).length === 0) {
            var oldShapes = vars.g.data.selectAll("g.d3po_" + shapeLookup[s]);
            if (vars.draw.timing) {
                oldShapes
                    .transition().duration(vars.draw.timing)
                    .attr("opacity", 0)
                    .remove();
            } else {
                oldShapes
                    .remove();
            }
        }
    }

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Initialize arrays for labels and sizes
    //----------------------------------------------------------------------------
    var labels = [],
        shares = [];

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Create groups by shape, apply data, and call specific shape drawing class.
    //----------------------------------------------------------------------------
    for (var shape in shapes) {

        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        // Bind Data to Groups
        //--------------------------------------------------------------------------
        var selection = vars.g.data.selectAll("g.d3po_" + shape)
            .data(shapes[shape], function(d) {

                if (!d.d3po) d.d3po = {}

                if (shape === "coordinates") {
                    d.d3po.id = d.id
                    return d.id
                }

                if (!d.d3po.id) {

                    if (d.values) {

                        d.values.forEach(function(v) {
                            v = id(v)
                            v.d3po.shape = "circle"
                        })
                        d.d3po.id = d.key

                    } else {

                        d = id(d)

                        if (!d.d3po.segments) {

                            d.d3po.segments = {
                                "donut": Math.PI * 2
                            }
                            var active = segments(vars, d, "active"),
                                temp = segments(vars, d, "temp"),
                                total = segments(vars, d, "total");

                            if (total) {
                                if (active) {
                                    d.d3po.segments.active = (active / total) * (Math.PI * 2)
                                } else {
                                    d.d3po.segments.active = 0
                                }
                                if (temp) {
                                    d.d3po.segments.temp = ((temp / total) * (Math.PI * 2)) + d.d3po.segments.active
                                } else {
                                    d.d3po.segments.temp = 0
                                }
                            }

                        }

                    }

                }

                return d.d3po ? d.d3po.id : false;

            })

        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        // Groups Exit
        //--------------------------------------------------------------------------
        if (vars.draw.timing) {
            var exit = selection.exit()
                .transition().duration(vars.draw.timing)
                .attr("opacity", 0)
                .remove()
        } else {
            var exit = selection.exit()
                .remove()
        }

        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        // Existing Groups Update
        //--------------------------------------------------------------------------
        if (vars.draw.timing) {
            selection
                .transition().duration(vars.draw.timing)
                .call(transform)
                .call(className);
        } else {
            selection.call(transform).call(className);
        }

        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        // Groups Enter
        //--------------------------------------------------------------------------
        var opacity = vars.draw.timing ? 0 : 1
        var enter = selection.enter().append("g")
            .attr("opacity", opacity)
            .call(transform)
            .call(className);

        if (vars.draw.timing) {
            enter.transition().duration(vars.draw.timing)
                .attr("opacity", 1)
        }

        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        // All Groups Sort Order
        //--------------------------------------------------------------------------
        selection.order()

        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        // Draw appropriate graphics inside of each group
        //--------------------------------------------------------------------------
        if (vars.dev.value) print.time("drawing \"" + shape + "\" shapes")
        drawShape[shape](vars, selection, enter, exit, transform)
        if (vars.dev.value) print.timeEnd("drawing \"" + shape + "\" shapes")

        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        // Check for active and temp fills for rects and donuts
        //--------------------------------------------------------------------------
        if (["rect", "donut"].indexOf(shape) >= 0 && vars.types[vars.type.value].fill) {
            if (vars.dev.value) print.time("filling \"" + shape + "\" shapes")
            shapeFill(vars, selection, enter, exit, transform)
            if (vars.dev.value) print.timeEnd("filling \"" + shape + "\" shapes")
        }

    }

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Function to Update Edges
    //----------------------------------------------------------------------------
    function edge_update(d) {

        if (d && vars.g.edges.selectAll("g").size() > 0) {

            vars.g.edge_hover
                .selectAll("*")
                .remove()

            vars.g.edges.selectAll("g")
                .each(function(l) {

                    var id = d[vars.id.value],
                        source = l[vars.edges.source][vars.id.value],
                        target = l[vars.edges.target][vars.id.value];

                    if (source == id || source == "left_" + id || source == "right_" + id ||
                        target == id || target == "left_" + id || target == "right_" + id) {
                        var elem = vars.g.edge_hover.node().appendChild(this.cloneNode(true))
                        d3.select(elem).datum(l).attr("opacity", 1)
                            .selectAll("line, path").datum(l)
                    }

                })


            var marker = vars.edges.arrows.value

            vars.g.edge_hover
                .attr("opacity", 0)
                .selectAll("line, path")
                .style("stroke", vars.color.primary)
                .style("stroke-width", function(d) {
                    if (vars.edges.path && d.dy) {
                        return Math.max(1, d.dy);
                    }
                    return vars.edges.size.value ? d3.select(this).style("stroke-width") :
                        vars.data.stroke.width * 2
                })
                .attr("marker-start", function(e) {

                    var direction = vars.edges.arrows.direction.value

                    if ("bucket" in e.d3po) {
                        var d = "_" + e.d3po.bucket
                    } else {
                        var d = ""
                    }

                    return direction == "source" && marker ?
                        "url(#d3po_edge_marker_highlight" + d + ")" : "none"

                })
                .attr("marker-end", function(e) {

                    var direction = vars.edges.arrows.direction.value

                    if ("bucket" in e.d3po) {
                        var d = "_" + e.d3po.bucket
                    } else {
                        var d = ""
                    }

                    return direction == "target" && marker ?
                        "url(#d3po_edge_marker_highlight" + d + ")" : "none"

                })


            vars.g.edge_hover.selectAll("text")
                .style("fill", vars.color.primary)

            if (vars.draw.timing) {

                vars.g.edge_hover
                    .transition().duration(vars.timing.mouseevents)
                    .attr("opacity", 1)

                vars.g.edges
                    .transition().duration(vars.timing.mouseevents)
                    .attr("opacity", 0.5)

            } else {

                vars.g.edge_hover
                    .attr("opacity", 1)

            }

        } else {

            if (vars.draw.timing) {

                vars.g.edge_hover
                    .transition().duration(vars.timing.mouseevents)
                    .attr("opacity", 0)
                    .transition()
                    .selectAll("*")
                    .remove()

                vars.g.edges
                    .transition().duration(vars.timing.mouseevents)
                    .attr("opacity", 1)

            } else {

                vars.g.edge_hover
                    .selectAll("*")
                    .remove()

            }

        }

    }

    edge_update()

    if (vars.tooltip.value) {

        vars.g.data.selectAll("g")
            .on(events.over, function(d) {

                if (touch) touchEvent(vars, d3.event);

                if (!d3.event.buttons && vars.mouse.value && vars.mouse.over.value && !vars.draw.frozen && (!d.d3po || !d.d3po.static)) {

                    var defaultClick = typeof vars.mouse.over.value !== "function";
                    if (typeof vars.mouse.over.value === "function") {
                        defaultClick = vars.mouse.over.value(d, vars.self);
                    }
                    if (defaultClick) {

                        var zoomDir = zoomDirection(d.d3po_data || d, vars)
                        var pointer = typeof vars.mouse.viz === "function" ||
                            typeof vars.mouse.viz[events.click] === "function" ||
                            (vars.zoom.value && (vars.types[vars.type.value].zoom ||
                                (d.d3po.threshold && d.d3po.merged) ||
                                zoomDir === 1 ||
                                (zoomDir === -1 && vars.history.states.length && !vars.tooltip.value.long)));

                        d3.select(this)
                            .style("cursor", pointer ? "pointer" : "auto")
                            .transition().duration(vars.timing.mouseevents)
                            .call(transform, true)

                        d3.select(this).selectAll(".d3po_data")
                            .transition().duration(vars.timing.mouseevents)
                            .attr("opacity", 1)

                        vars.covered = false

                        if (d.values && vars.axes.discrete) {

                            var index = vars.axes.discrete === "x" ? 0 : 1,
                                mouse = d3.mouse(vars.container.value.node())[index],
                                positions = uniqueValues(d.values, function(x) {
                                    return x.d3po[vars.axes.discrete]
                                }),
                                match = closest(positions, mouse)

                            d.d3po_data = d.values[positions.indexOf(match)]
                            d.d3po = d.values[positions.indexOf(match)].d3po

                        }

                        var tooltip_data = d.d3po_data ? d.d3po_data : d

                        createTooltip({
                            "vars": vars,
                            "data": tooltip_data
                        })

                        if (typeof vars.mouse.viz == "function") {
                            vars.mouse.viz(d.d3po_data || d, vars)
                        } else if (vars.mouse.viz[events.over]) {
                            vars.mouse.viz[events.over](d.d3po_data || d, vars)
                        }

                        edge_update(d)

                    }

                } else {
                    removeTooltip(vars.type.value);
                }

            })
            .on(events.move, function(d) {

                if (touch) touchEvent(vars, d3.event);

                if (!d3.event.buttons && vars.mouse.value && vars.mouse.move.value && !vars.draw.frozen && (!d.d3po || !d.d3po.static)) {

                    var defaultClick = typeof vars.mouse.move.value !== "function";
                    if (typeof vars.mouse.move.value === "function") {
                        defaultClick = vars.mouse.move.value(d, vars.self);
                    }
                    if (defaultClick) {

                        var zoomDir = zoomDirection(d.d3po_data || d, vars)
                        var pointer = typeof vars.mouse.viz === "function" ||
                            typeof vars.mouse.viz[events.click] === "function" ||
                            (vars.zoom.value && (vars.types[vars.type.value].zoom ||
                                (d.d3po.threshold && d.d3po.merged) ||
                                zoomDir === 1 ||
                                (zoomDir === -1 && vars.history.states.length && !vars.tooltip.value.long)));


                        d3.select(this).style("cursor", pointer ? "pointer" : "auto");

                        // vars.covered = false
                        var tooltipType = vars.types[vars.type.value].tooltip || "follow"

                        if (d.values && vars.axes.discrete) {

                            var index = vars.axes.discrete === "x" ? 0 : 1,
                                mouse = d3.mouse(vars.container.value.node())[index],
                                positions = uniqueValues(d.values, function(x) {
                                    return x.d3po[vars.axes.discrete]
                                }),
                                match = closest(positions, mouse)

                            d.d3po_data = d.values[positions.indexOf(match)]
                            d.d3po = d.values[positions.indexOf(match)].d3po

                        }

                        var tooltip_data = d.d3po_data ? d.d3po_data : d
                        createTooltip({
                            "vars": vars,
                            "data": tooltip_data
                        })

                        if (typeof vars.mouse.viz == "function") {
                            vars.mouse.viz(d.d3po_data || d, vars)
                        } else if (vars.mouse.viz[events.move]) {
                            vars.mouse.viz[events.move](d.d3po_data || d, vars)
                        }

                    }

                } else {
                    removeTooltip(vars.type.value);
                }

            })
            .on(events.out, function(d) {

                if (touch) touchEvent(vars, d3.event);

                if (!d3.event.buttons && vars.mouse.value && vars.mouse.out.value) {

                    var defaultClick = typeof vars.mouse.out.value !== "function";
                    if (typeof vars.mouse.out.value === "function") {
                        defaultClick = vars.mouse.out.value(d, vars.self);
                    }
                    if (defaultClick) {

                        var childElement = child(this, d3.event.toElement)

                        if (!childElement && !vars.draw.frozen && (!d.d3po || !d.d3po.static)) {

                            d3.select(this)
                                .transition().duration(vars.timing.mouseevents)
                                .call(transform)

                            d3.select(this).selectAll(".d3po_data")
                                .transition().duration(vars.timing.mouseevents)
                                .attr("opacity", vars.data.opacity)

                            if (!vars.covered) {
                                removeTooltip(vars.type.value)
                            }

                            if (typeof vars.mouse.viz == "function") {
                                vars.mouse.viz(d.d3po_data || d, vars)
                            } else if (vars.mouse.viz[events.out]) {
                                vars.mouse.viz[events.out](d.d3po_data || d, vars)
                            }

                            edge_update()

                        }

                    }

                } else {
                    removeTooltip(vars.type.value);
                }

            })

    } else {

        var mouseEvent = function() {
            touchEvent(vars, d3.event)
        }

        vars.g.data.selectAll("g")
            .on(events.over, mouseEvent)
            .on(events.move, mouseEvent)
            .on(events.out, mouseEvent)

    }

    d3.select(window).on("scroll.d3po", function() {
        removeTooltip(vars.type.value);
    });

    vars.g.data.selectAll("g")
        .on(events.click, function(d) {

            if (!(vars.mouse.viz && vars.mouse.viz.click === false) && vars.mouse.value && vars.mouse.click.value && !d3.event.defaultPrevented && !vars.draw.frozen && (!d.d3po || !d.d3po.static)) {

                var defaultClick = typeof vars.mouse.click.value !== "function";
                if (typeof vars.mouse.click.value === "function") {
                    defaultClick = vars.mouse.click.value(d, vars.self);
                }
                if (defaultClick) {

                    if (d.values && vars.axes.discrete) {

                        var index = vars.axes.discrete === "x" ? 0 : 1,
                            mouse = d3.mouse(vars.container.value.node())[index],
                            positions = uniqueValues(d.values, function(x) {
                                return x.d3po[vars.axes.discrete]
                            }),
                            match = closest(positions, mouse)

                        d.d3po_data = d.values[positions.indexOf(match)]
                        d.d3po = d.values[positions.indexOf(match)].d3po

                    }

                    if (typeof vars.mouse.viz == "function") {
                        vars.mouse.viz(d.d3po_data || d, vars)
                    } else if (vars.mouse.viz[events.out]) {
                        vars.mouse.viz[events.out](d.d3po_data || d, vars)
                    } else if (vars.mouse.viz[events.click]) {
                        vars.mouse.viz[events.click](d.d3po_data || d, vars)
                    }

                    var depth_delta = zoomDirection(d.d3po_data || d, vars),
                        previous = vars.id.solo.value,
                        title = fetchText(vars, d)[0],
                        color = legible(fetchColor(vars, d)),
                        prev_sub = vars.title.sub.value || false,
                        prev_color = vars.title.sub.font.color,
                        prev_total = vars.title.total.font.color

                    if (d.d3po.threshold && d.d3po.merged && vars.zoom.value) {

                        vars.history.states.push(function() {

                            vars.self
                                .id({
                                    "solo": previous
                                })
                                .title({
                                    "sub": {
                                        "font": {
                                            "color": prev_color
                                        },
                                        "value": prev_sub
                                    },
                                    "total": {
                                        "font": {
                                            "color": prev_total
                                        }
                                    }
                                })
                                .draw()

                        })

                        vars.self
                            .id({
                                "solo": previous.concat(uniqueValues(d.d3po.merged, vars.id.value, fetchValue, vars))
                            })
                            .title({
                                "sub": {
                                    "font": {
                                        "color": color
                                    },
                                    "value": title
                                },
                                "total": {
                                    "font": {
                                        "color": color
                                    }
                                }
                            })
                            .draw()

                    } else if (depth_delta === 1 && vars.zoom.value) {

                        var id = fetchValue(vars, d.d3po_data || d, vars.id.value)

                        vars.history.states.push(function() {

                            vars.self
                                .depth(vars.depth.value - 1)
                                .id({
                                    "solo": previous
                                })
                                .title({
                                    "sub": {
                                        "font": {
                                            "color": prev_color
                                        },
                                        "value": prev_sub
                                    },
                                    "total": {
                                        "font": {
                                            "color": prev_total
                                        }
                                    }
                                })
                                .draw()

                        })

                        vars.self
                            .depth(vars.depth.value + 1)
                            .id({
                                "solo": previous.concat(id)
                            })
                            .title({
                                "sub": {
                                    "font": {
                                        "color": color
                                    },
                                    "value": title
                                },
                                "total": {
                                    "font": {
                                        "color": color
                                    }
                                }
                            })
                            .draw()

                    } else if (depth_delta === -1 && vars.zoom.value &&
                        vars.history.states.length && !vars.tooltip.value.long) {

                        vars.history.back()

                    } else if (vars.types[vars.type.value].zoom && vars.zoom.value) {

                        edge_update()

                        d3.select(this)
                            .transition().duration(vars.timing.mouseevents)
                            .call(transform)

                        d3.select(this).selectAll(".d3po_data")
                            .transition().duration(vars.timing.mouseevents)
                            .attr("opacity", vars.data.opacity)

                        removeTooltip(vars.type.value)
                        vars.draw.update = false

                        if (!d || d[vars.id.value] == vars.focus.value[0]) {
                            vars.self.focus(false).draw()
                        } else {
                            vars.self.focus(d[vars.id.value]).draw()
                        }

                    } else if (vars.types[vars.type.value].requirements.indexOf("focus") < 0) {

                        edge_update()

                        var tooltip_data = d.d3po_data ? d.d3po_data : d

                        createTooltip({
                            "vars": vars,
                            "data": tooltip_data
                        })

                    }

                }

            }

        })

}
},{"../../../client/pointer.js":69,"../../../client/touch.js":74,"../../../color/legible.js":75,"../../../core/console/print.js":83,"../../../core/fetch/color.js":95,"../../../core/fetch/text.js":98,"../../../core/fetch/value.js":99,"../../../object/validate.js":207,"../../../string/strip.js":210,"../../../tooltip/remove.js":238,"../../../util/child.js":240,"../../../util/closest.js":241,"../../../util/uniques.js":245,"../tooltip/create.js":281,"../zoom/direction.js":291,"../zoom/propagation.js":294,"./arc.js":258,"./area.js":259,"./check.js":260,"./coordinates.js":262,"./cross.js":263,"./diamond.js":264,"./donut.js":265,"./fill.js":268,"./line.js":270,"./radial.js":272,"./rect.js":273,"./segments.js":274,"./triangle_down.js":276,"./triangle_up.js":277,"./whisker.js":278}],267:[function(require,module,exports){
var buckets = require("../../../util/buckets.js"),
    curves = require("../d3functions/curves.js"),
    offset = require("../../../geom/offset.js");

module.exports = function(vars) {

    var edges = vars.returned.edges || [],
        scale = vars.zoom.behavior.scaleExtent()[0];

    if (typeof vars.edges.size.value === "string") {

        var strokeDomain = d3.extent(edges, function(e) {
                return e[vars.edges.size.value];
            }),
            maxSize = d3.min(vars.returned.nodes || [], function(n) {
                return n.d3po.r;
            }) * (vars.edges.size.scale * 2);

        vars.edges.scale = d3.scaleSqrt()
            .domain(strokeDomain)
            .range([vars.edges.size.min, maxSize * scale]);

    } else {

        var defaultWidth = typeof vars.edges.size.value == "number" ?
            vars.edges.size.value : vars.edges.size.min;

        vars.edges.scale = function() {
            return defaultWidth;
        };

    }

    var o = vars.edges.opacity.value;
    var o_type = typeof o;

    if (vars.edges.opacity.changed && o_type === "string") {
        vars.edges.opacity.scale.value
            .domain(d3.extent(edges, function(d) {
                return d[o];
            }))
            .range([vars.edges.opacity.min.value, 1]);
    }

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Initialization of Lines
    //----------------------------------------------------------------------------
    function init(l) {

        l
            .attr("opacity", 0)
            .style("stroke-width", 0)
            .style("stroke", vars.background.value)
            .style("fill", "none");
    }

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Styling of Lines
    //----------------------------------------------------------------------------
    function style(edges) {

        var marker = vars.edges.arrows.value;

        edges
            .attr("opacity", function(d) {
                return o_type === "number" ? o :
                    o_type === "function" ? o(d, vars) :
                    vars.edges.opacity.scale.value(d[o]);
            })
            .style("stroke-width", function(e) {
                return vars.edges.scale(e[vars.edges.size.value]);
            })
            .style("stroke", vars.edges.color)
            .attr("marker-start", function(e) {

                var direction = vars.edges.arrows.direction.value;

                if ("bucket" in e.d3po) {
                    var d = "_" + e.d3po.bucket;
                } else {
                    var d = "";
                }

                return direction == "source" && marker ?
                    "url(#d3po_edge_marker_default" + d + ")" : "none"

            })
            .attr("marker-end", function(e) {

                var direction = vars.edges.arrows.direction.value

                if ("bucket" in e.d3po) {
                    var d = "_" + e.d3po.bucket
                } else {
                    var d = ""
                }

                return direction == "target" && marker ?
                    "url(#d3po_edge_marker_default" + d + ")" : "none"

            })
            .attr("vector-effect", "non-scaling-stroke")
            .attr("pointer-events", "none")
    }

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Positioning of Lines
    //----------------------------------------------------------------------------
    function line(l) {
        l
            .attr("x1", function(d) {
                return d[vars.edges.source].d3po.edges[d[vars.edges.target][vars.id.value]].x;
            })
            .attr("y1", function(d) {
                return d[vars.edges.source].d3po.edges[d[vars.edges.target][vars.id.value]].y;
            })
            .attr("x2", function(d) {
                return d[vars.edges.target].d3po.edges[d[vars.edges.source][vars.id.value]].x;
            })
            .attr("y2", function(d) {
                return d[vars.edges.target].d3po.edges[d[vars.edges.source][vars.id.value]].y;
            });
    }

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Positioning of Splines
    //----------------------------------------------------------------------------
    var curve = d3.line().curve(curves.fromString(vars.edges.interpolate.value));

    function spline(l) {
        l
            .attr("d", function(d) {

                return curve(d.d3po.spline);

            });
    }

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Calculates and Draws Label for edge
    //----------------------------------------------------------------------------
    function label(d) {

        delete d.d3po_label

        if (vars.g.edges.selectAll("line, path").size() < vars.edges.large && vars.edges.label && d[vars.edges.label]) {

            if ("spline" in d.d3po) {

                var length = this.getTotalLength(),
                    center = this.getPointAtLength(length / 2),
                    prev = this.getPointAtLength((length / 2) - (length * .1)),
                    next = this.getPointAtLength((length / 2) + (length * .1)),
                    radians = Math.atan2(next.y - prev.y, next.x - prev.x),
                    angle = radians * (180 / Math.PI),
                    bounding = this.parentNode.getBBox(),
                    width = length * .8,
                    x = center.x,
                    y = center.y

            } else {

                var bounds = this.getBBox(),
                    source = d[vars.edges.source],
                    target = d[vars.edges.target],
                    start = {
                        "x": source.d3po.edges[target[vars.id.value]].x,
                        "y": source.d3po.edges[target[vars.id.value]].y
                    },
                    end = {
                        "x": target.d3po.edges[source[vars.id.value]].x,
                        "y": target.d3po.edges[source[vars.id.value]].y
                    },
                    xdiff = end.x - start.x,
                    ydiff = end.y - start.y,
                    center = {
                        "x": end.x - (xdiff) / 2,
                        "y": end.y - (ydiff) / 2
                    },
                    radians = Math.atan2(ydiff, xdiff),
                    angle = radians * (180 / Math.PI),
                    length = Math.sqrt((xdiff * xdiff) + (ydiff * ydiff)),
                    width = length,
                    x = center.x,
                    y = center.y

            }

            width += vars.labels.padding * 2

            var m = 0
            if (vars.edges.arrows.value) {
                m = typeof vars.edges.arrows.value === "number" ?
                    vars.edges.arrows.value : 8
                m = m / vars.zoom.behavior.scaleExtent()[1]
                width -= m * 2
            }

            if (angle < -90 || angle > 90) {
                angle -= 180
            }

            if (width * vars.zoom.behavior.scaleExtent()[0] > 20) {

                d.d3po_label = {
                    "x": x,
                    "y": y,
                    "translate": {
                        "x": x,
                        "y": y
                    },
                    "w": width,
                    "h": 15 + vars.labels.padding * 2,
                    "angle": angle,
                    "anchor": "middle",
                    "valign": "center",
                    "color": vars.edges.color,
                    "resize": false,
                    "names": [vars.format.value(d[vars.edges.label])],
                    "background": 1
                }

            }

        }

    }

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Enter/update/exit the Arrow Marker
    //----------------------------------------------------------------------------
    var markerData = vars.edges.arrows.value ? typeof vars.edges.size.value == "string" ? ["default_0", "default_1", "default_2",
        "highlight_0", "highlight_1", "highlight_2",
        "focus_0", "focus_1", "focus_2"
    ] : ["default", "highlight", "focus"] : []

    if (typeof vars.edges.size.value == "string") {
        var b = buckets(vars.edges.scale.range(), 4),
            markerSize = []
        for (var i = 0; i < 3; i++) {
            markerSize.push(b[i + 1] + (b[1] - b[0]) * (i + 2) * 2)
        }
    } else {
        var m = typeof vars.edges.arrows.value === "number" ?
            vars.edges.arrows.value : 8

        var markerSize = typeof vars.edges.size.value === "number" ?
            vars.edges.size.value / m : m
    }

    var marker = vars.defs.selectAll(".d3po_edge_marker")
        .data(markerData, String)

    var marker_style = function(path) {
        path
            .attr("d", function(id) {

                var depth = id.split("_")

                if (depth.length == 2 && vars.edges.scale) {
                    depth = parseInt(depth[1])
                    var m = markerSize[depth]
                } else {
                    var m = markerSize
                }

                if (vars.edges.arrows.direction.value == "target") {
                    return "M 0,-" + m / 2 + " L " + m * .85 + ",0 L 0," + m / 2 + " L 0,-" + m / 2
                } else {
                    return "M 0,-" + m / 2 + " L -" + m * .85 + ",0 L 0," + m / 2 + " L 0,-" + m / 2
                }
            })
            .attr("fill", function(d) {

                var type = d.split("_")[0]

                if (type == "default") {
                    return vars.edges.color
                } else if (type == "focus") {
                    return vars.color.focus
                } else {
                    return vars.color.primary
                }
            })
            .attr("transform", "scale(" + 1 / scale + ")")
    }

    if (vars.draw.timing) {
        marker.exit().transition().duration(vars.draw.timing)
            .attr("opacity", 0)
            .remove()

        marker.select("path").transition().duration(vars.draw.timing)
            .attr("opacity", 1)
            .call(marker_style)
    } else {
        marker.exit().remove()

        marker.select("path")
            .attr("opacity", 1)
            .call(marker_style)
    }

    var opacity = vars.draw.timing ? 0 : 1
    var enter = marker.enter().append("marker")
        .attr("id", function(d) {
            return "d3po_edge_marker_" + d
        })
        .attr("class", "d3po_edge_marker")
        .attr("orient", "auto")
        .attr("markerUnits", "userSpaceOnUse")
        .style("overflow", "visible")
        .append("path")
        .attr("opacity", opacity)
        .attr("vector-effect", "non-scaling-stroke")
        .call(marker_style)

    if (vars.draw.timing) {
        enter.transition().duration(vars.draw.timing)
            .attr("opacity", 1)
    }

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Bind "edges" data to lines in the "edges" group
    //----------------------------------------------------------------------------
    var strokeBuckets = typeof vars.edges.size.value == "string" ?
        buckets(vars.edges.scale.domain(), 4) :
        null,
        direction = vars.edges.arrows.direction.value

    var line_data = edges.filter(function(l) {

        if (!l.d3po) l.d3po = {}

        l.d3po.id = "edge_" + l[vars.edges.source][vars.id.value] + "_" + l[vars.edges.target][vars.id.value]

        if (l.d3po.spline !== true) {

            if (strokeBuckets) {
                var size = l[vars.edges.size.value]
                l.d3po.bucket = size < strokeBuckets[1] ? 0 :
                    size < strokeBuckets[2] ? 1 : 2
                var marker = markerSize[l.d3po.bucket] * .85 / scale
            } else {
                delete l.d3po.bucket
                var marker = markerSize * .85 / scale
            }

            var source = l[vars.edges.source],
                target = l[vars.edges.target]

            if (!source.d3po || !target.d3po) return false

            var sourceAngle = Math.atan2(source.d3po.y - target.d3po.y, source.d3po.x - target.d3po.x),
                targetAngle = Math.atan2(target.d3po.y - source.d3po.y, target.d3po.x - source.d3po.x),
                sourceRadius = direction == "source" && vars.edges.arrows.value ?
                source.d3po.r + marker :
                source.d3po.r,
                targetRadius = direction == "target" && vars.edges.arrows.value ?
                target.d3po.r + marker :
                target.d3po.r,
                sourceOffset = offset(sourceAngle, sourceRadius, vars.shape.value),
                targetOffset = offset(targetAngle, targetRadius, vars.shape.value)

            if (!("edges" in source.d3po)) source.d3po.edges = {}
            source.d3po.edges[target[vars.id.value]] = {
                "x": source.d3po.x - sourceOffset.x,
                "y": source.d3po.y - sourceOffset.y
            }

            if (!("edges" in target.d3po)) target.d3po.edges = {}
            target.d3po.edges[source[vars.id.value]] = {
                "x": target.d3po.x - targetOffset.x,
                "y": target.d3po.y - targetOffset.y
            }

            return true
        }

        return false

    })

    var lines = vars.g.edges.selectAll("g.d3po_edge_line")
        .data(line_data, function(d) {

            return d.d3po.id

        })

    var spline_data = edges.filter(function(l) {

        if (l.d3po.spline) {

            if (strokeBuckets) {
                var size = l[vars.edges.size.value]
                l.d3po.bucket = size < strokeBuckets[1] ? 0 :
                    size < strokeBuckets[2] ? 1 : 2
                var marker = markerSize[l.d3po.bucket] * .85 / scale
            } else {
                delete l.d3po.bucket
                var marker = markerSize * .85 / scale
            }

            var source = l[vars.edges.source],
                target = l[vars.edges.target],
                sourceEdge = source.d3po.edges ? source.d3po.edges[target[vars.id.value]] || {} : {},
                targetEdge = target.d3po.edges ? target.d3po.edges[source[vars.id.value]] || {} : {},
                sourceMod = vars.edges.arrows.value && direction == "source" ? marker : 0,
                targetMod = vars.edges.arrows.value && direction == "target" ? marker : 0,
                angleTweak = 0.1,
                sourceTweak = source.d3po.x > target.d3po.x ? 1 - angleTweak : 1 + angleTweak,
                targetTweak = source.d3po.x > target.d3po.x ? 1 + angleTweak : 1 - angleTweak,
                sourceAngle = typeof sourceEdge.angle === "number" ? sourceEdge.angle :
                Math.atan2(source.d3po.y - target.d3po.y, source.d3po.x - target.d3po.x) * sourceTweak,
                sourceOffset = offset(sourceAngle, source.d3po.r + sourceMod, vars.shape.value),
                targetAngle = typeof targetEdge.angle === "number" ? targetEdge.angle :
                Math.atan2(target.d3po.y - source.d3po.y, target.d3po.x - source.d3po.x) * targetTweak,
                targetOffset = offset(targetAngle, target.d3po.r + targetMod, vars.shape.value),
                start = [source.d3po.x - sourceOffset.x, source.d3po.y - sourceOffset.y],
                startOffset = sourceEdge.offset ? offset(sourceAngle, sourceEdge.offset) : false,
                startPoint = startOffset ? [start[0] - startOffset.x, start[1] - startOffset.y] : start,
                end = [target.d3po.x - targetOffset.x, target.d3po.y - targetOffset.y],
                endOffset = targetEdge.offset ? offset(targetAngle, targetEdge.offset) : false,
                endPoint = endOffset ? [end[0] - endOffset.x, end[1] - endOffset.y] : end,
                xd = endPoint[0] - startPoint[0],
                yd = endPoint[1] - startPoint[1],
                sourceDistance = typeof sourceEdge.radius === "number" ? sourceEdge.radius : Math.sqrt(xd * xd + yd * yd) / 4,
                targetDistance = typeof targetEdge.radius === "number" ? targetEdge.radius : Math.sqrt(xd * xd + yd * yd) / 4,
                startAnchor = offset(sourceAngle, sourceDistance - source.d3po.r - sourceMod * 2),
                endAnchor = offset(targetAngle, targetDistance - target.d3po.r - targetMod * 2)

            l.d3po.spline = [start, end]
            var testAngle = Math.abs(Math.atan2(source.d3po.y - target.d3po.y, source.d3po.x - target.d3po.x)).toFixed(5),
                testStart = Math.abs(sourceAngle).toFixed(5),
                testEnd = Math.abs(targetAngle - Math.PI).toFixed(5)

            if (testStart !== testEnd || [testStart, testEnd].indexOf(testAngle) < 0) {

                l.d3po.spline.splice(1, 0, [startPoint[0] - startAnchor.x, startPoint[1] - startAnchor.y], [endPoint[0] - endAnchor.x, endPoint[1] - endAnchor.y])

                if (startOffset) l.d3po.spline.splice(1, 0, startPoint)
                if (endOffset) l.d3po.spline.splice(l.d3po.spline.length - 1, 0, endPoint)

            }

            return true

        }

        return false

    })

    var splines = vars.g.edges.selectAll("g.d3po_edge_path")
        .data(spline_data, function(d) {

            return d.d3po.id

        })

    if (vars.draw.timing) {

        lines.exit().transition().duration(vars.draw.timing)
            .attr("opacity", 0)
            .remove()

        splines.exit().transition().duration(vars.draw.timing)
            .attr("opacity", 0)
            .remove()

        lines.selectAll("text.d3po_label, rect.d3po_label_bg")
            .transition().duration(vars.draw.timing / 2)
            .attr("opacity", 0)
            .remove()

        splines.selectAll("text.d3po_label, rect.d3po_label_bg")
            .transition().duration(vars.draw.timing / 2)
            .attr("opacity", 0)
            .remove()

        lines.selectAll("line")
            .data(function(d) {
                return [d]
            })
            .transition().duration(vars.draw.timing)
            .call(line)
            .call(style)
            .each("end", label)

        splines.selectAll("path")
            .data(function(d) {
                return [d]
            })
            .transition().duration(vars.draw.timing)
            .call(spline)
            .call(style)
            .each("end", label)

        lines.enter().append("g")
            .attr("class", "d3po_edge_line")
            .append("line")
            .call(line)
            .call(init)
            .transition().duration(vars.draw.timing)
            .call(style)
            .each("end", label)

        splines.enter().append("g")
            .attr("class", "d3po_edge_path")
            .append("path")
            .call(spline)
            .call(init)
            .transition().duration(vars.draw.timing)
            .call(style)
            .each("end", label)

    } else {

        lines.exit().remove()

        splines.exit().remove()

        lines.selectAll("text.d3po_label, rect.d3po_label_bg")
            .remove()

        splines.selectAll("text.d3po_label, rect.d3po_label_bg")
            .remove()

        lines.selectAll("line")
            .data(function(d) {
                return [d]
            })
            .call(line)
            .call(style)
            .call(label)

        splines.selectAll("path")
            .data(function(d) {
                return [d]
            })
            .call(spline)
            .call(style)
            .call(label)

        lines.enter().append("g")
            .attr("class", "d3po_edge_line")
            .append("line")
            .call(line)
            .call(init)
            .call(style)
            .call(label)

        splines.enter().append("g")
            .attr("class", "d3po_edge_path")
            .append("path")
            .call(spline)
            .call(init)
            .call(style)
            .call(label)

    }

}
},{"../../../geom/offset.js":195,"../../../util/buckets.js":239,"../d3functions/curves.js":249}],268:[function(require,module,exports){
var copy = require("../../../util/copy.js"),
    fetchColor = require("../../../core/fetch/color.js"),
    fetchValue = require("../../../core/fetch/value.js"),
    segments = require("./segments.js"),
    shapeStyle = require("./style.js");
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Draws "square" and "circle" shapes using svg:rect
//------------------------------------------------------------------------------
module.exports = function(vars, selection, enter, exit) {

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // The position and size of each rectangle on enter and exit.
    //----------------------------------------------------------------------------
    function init(nodes) {

        nodes
            .attr("x", 0)
            .attr("y", 0)
            .attr("width", 0)
            .attr("height", 0);

    }

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // The position and size of each rectangle on update.
    //----------------------------------------------------------------------------
    function update(nodes, mod) {
        if (!mod) mod = 0;
        nodes
            .attr("x", function(d) {
                var w = d.d3po.r ? d.d3po.r * 2 : d.d3po.width;
                return (-w / 2) - (mod / 2);
            })
            .attr("y", function(d) {
                var h = d.d3po.r ? d.d3po.r * 2 : d.d3po.height;
                return (-h / 2) - (mod / 2);
            })
            .attr("width", function(d) {
                var w = d.d3po.r ? d.d3po.r * 2 : d.d3po.width;
                return w + mod;
            })
            .attr("height", function(d) {
                var h = d.d3po.r ? d.d3po.r * 2 : d.d3po.height;
                return h + mod;
            })
            .attr("rx", function(d) {
                var w = d.d3po.r ? d.d3po.r * 2 : d.d3po.width;
                var rounded = ["circle", "donut"].indexOf(vars.shape.value) >= 0;
                return rounded ? (w + mod) / 2 : 0;
            })
            .attr("ry", function(d) {
                var h = d.d3po.r ? d.d3po.r * 2 : d.d3po.height;
                var rounded = ["circle", "donut"].indexOf(vars.shape.value) >= 0;
                return rounded ? (h + mod) / 2 : 0;
            })
            .attr("shape-rendering", function(d) {
                if (["square"].indexOf(vars.shape.value) >= 0) {
                    return vars.shape.rendering.value;
                } else {
                    return "auto";
                }
            });
    }

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // In order to correctly animate each donut's size and arcs, we need to store
    // it's previous values in a lookup object that does not get destroyed when
    // redrawing the visualization.
    //----------------------------------------------------------------------------
    if (!vars.arcs) {
        vars.arcs = {
            "donut": {},
            "active": {},
            "temp": {}
        };
    }

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // This is the main arc function that determines what values to use for each
    // arc angle and radius.
    //----------------------------------------------------------------------------
    var arc = d3.arc()
        .startAngle(0)
        .endAngle(function(d) {
            var a = vars.arcs[d.d3po.shape][d.d3po.id].a;
            return a > Math.PI * 2 ? Math.PI * 2 : a;
        })
        .innerRadius(function(d) {
            if (!d.d3po.static && vars.shape.value === "donut") {
                var r = vars.arcs[d.d3po.shape][d.d3po.id].r;
                return r * vars.data.donut.size;
            } else {
                return 0;
            }
        })
        .outerRadius(function(d) {
            var r = vars.arcs[d.d3po.shape][d.d3po.id].r;
            return vars.shape.value === "donut" ? r : r * 2;
        });

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // This is the main "arcTween" function where all of the animation happens
    // for each arc.
    //----------------------------------------------------------------------------
    function size(path, mod, rad, ang) {
        if (!mod) mod = 0;
        if (typeof rad != "number") rad = undefined;
        if (typeof ang != "number") ang = undefined;
        path.attrTween("d", function(d) {
            if (rad === undefined) var r = d.d3po.r ? d.d3po.r : d3.max([d.d3po.width, d.d3po.height]);
            else var r = rad;
            if (ang === undefined) var a = d.d3po.segments[d.d3po.shape];
            else var a = ang;
            if (!vars.arcs[d.d3po.shape][d.d3po.id]) {
                vars.arcs[d.d3po.shape][d.d3po.id] = {
                    "r": 0
                };
                vars.arcs[d.d3po.shape][d.d3po.id].a = d.d3po.shape === "donut" ? Math.PI * 2 : 0;
            }
            var radius = d3.interpolate(vars.arcs[d.d3po.shape][d.d3po.id].r, r + mod),
                angle = d3.interpolate(vars.arcs[d.d3po.shape][d.d3po.id].a, a);

            return function(t) {
                vars.arcs[d.d3po.shape][d.d3po.id].r = radius(t);
                vars.arcs[d.d3po.shape][d.d3po.id].a = angle(t);
                return arc(d);
            };
        });
    }

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Check each data point for active and temp data
    //----------------------------------------------------------------------------
    selection.each(function(d) {

        var active = segments(vars, d, "active"),
            temp = segments(vars, d, "temp"),
            total = segments(vars, d, "total"),
            group = d3.select(this),
            color = fetchColor(vars, d);

        var fill_data = [],
            hatch_data = [];

        if (total && vars.types[vars.type.value].fill) {

            if (temp) {
                var c = copy(d);
                c.d3po.shape = "temp";
                fill_data.push(c);
                hatch_data = ["temp"];
            }

            if (active && (active < total || temp)) {
                var c = copy(d);
                c.d3po.shape = "active";
                fill_data.push(c);
            }

        }

        function hatch_lines(l) {
            l
                .attr("stroke", color)
                .attr("stroke-width", 1)
                .attr("shape-rendering", vars.shape.rendering.value);
        }

        var pattern = vars.defs.selectAll("pattern#d3po_hatch_" + d.d3po.id)
            .data(hatch_data);

        if (vars.draw.timing) {

            pattern.selectAll("rect")
                .transition().duration(vars.draw.timing)
                .style("fill", color);

            pattern.selectAll("line")
                .transition().duration(vars.draw.timing)
                .style("stroke", color);

        } else {

            pattern.selectAll("rect").style("fill", color);

            pattern.selectAll("line").style("stroke", color);

        }

        var pattern_enter = pattern.enter().append("pattern")
            .attr("id", "d3po_hatch_" + d.d3po.id)
            .attr("patternUnits", "userSpaceOnUse")
            .attr("x", "0")
            .attr("y", "0")
            .attr("width", "10")
            .attr("height", "10")
            .append("g");

        pattern_enter.append("rect")
            .attr("x", "0")
            .attr("y", "0")
            .attr("width", "10")
            .attr("height", "10")
            .attr("fill", color)
            .attr("fill-opacity", 0.25);

        pattern_enter.append("line")
            .attr("x1", "0")
            .attr("x2", "10")
            .attr("y1", "0")
            .attr("y2", "10")
            .call(hatch_lines);

        pattern_enter.append("line")
            .attr("x1", "-1")
            .attr("x2", "1")
            .attr("y1", "9")
            .attr("y2", "11")
            .call(hatch_lines);

        pattern_enter.append("line")
            .attr("x1", "9")
            .attr("x2", "11")
            .attr("y1", "-1")
            .attr("y2", "1")
            .call(hatch_lines);

        var clip_data = fill_data.length ? [d] : [];

        var clip = group.selectAll("#d3po_clip_" + d.d3po.id)
            .data(clip_data);

        clip.enter().insert("clipPath", ".d3po_mouse")
            .attr("id", "d3po_clip_" + d.d3po.id)
            .append("rect")
            .attr("class", "d3po_clipping")
            .call(init);

        if (vars.draw.timing) {

            clip.selectAll("rect").transition().duration(vars.draw.timing)
                .call(update);

            clip.exit().transition().delay(vars.draw.timing)
                .remove();

        } else {

            clip.selectAll("rect").call(update);

            clip.exit().remove();

        }

        var fills = group.selectAll("path.d3po_fill")
            .data(fill_data);

        fills.transition().duration(vars.draw.timing)
            .call(shapeStyle, vars)
            .call(size);

        fills.enter().insert("path", "rect.d3po_mouse")
            .attr("class", "d3po_fill")
            .attr("clip-path", "url(#d3po_clip_" + d.d3po.id + ")")
            .transition().duration(0)
            .call(shapeStyle, vars)
            .call(size, 0, undefined, 0)
            .transition().duration(vars.draw.timing)
            .call(size)
            .call(shapeStyle, vars);

        fills.exit().transition().duration(vars.draw.timing)
            .call(size, 0, undefined, 0)
            .remove();

    });

};
},{"../../../core/fetch/color.js":95,"../../../core/fetch/value.js":99,"../../../util/copy.js":242,"./segments.js":274,"./style.js":275}],269:[function(require,module,exports){
var copy = require("../../../util/copy.js"),
    fetchText = require("../../../core/fetch/text.js"),
    fetchValue = require("../../../core/fetch/value.js"),
    mix = require("../../../color/mix.js"),
    print = require("../../../core/console/print.js"),
    rtl = require("../../../client/rtl.js"),
    segments = require("./segments.js"),
    shapeColor = require("./color.js"),
    stringList = require("../../../string/list.js"),
    textColor = require("../../../color/text.js"),
    textWrap = require("../../../textwrap/textwrap.js");

//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Draws "labels" using svg:text and d3po.textwrap
//------------------------------------------------------------------------------
module.exports = function(vars, group) {

    var scale = vars.types[vars.type.value].zoom ? vars.zoom.behavior.scaleExtent() : [1, 1],
        selection = vars.g[group].selectAll("g");

    var opacity = function(elem) {

        elem
            .attr("opacity", function(d) {
                // if (vars.draw.timing) return 1;
                var size = parseFloat(d3.select(this).attr("font-size"), 10);
                d.visible = size * (vars.zoom.scale / scale[1]) >= 2;
                return d.visible ? 1 : 0;
            });

    };

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Label Exiting
    //----------------------------------------------------------------------------
    var remove = function(text) {

        if (vars.draw.timing) {
            text
                .transition().duration(vars.draw.timing)
                .attr("opacity", 0)
                .remove();
        } else {
            text.remove();
        }

    };

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Label Styling
    //----------------------------------------------------------------------------
    var style = function(text) {

        var salign = vars.labels.valign.value === "bottom" ? "top" : "bottom";

        text
            .attr("font-weight", vars.labels.font.weight)
            .attr("font-family", vars.labels.font.family.value)
            .attr("stroke", "none")
            .attr("pointer-events", function(t) {
                return t.mouse ? "auto" : "none";
            })
            .attr("fill", function(t) {

                if (t.color) return t.color;

                var color = shapeColor(t.parent, vars),
                    legible = textColor(color),
                    opacity = t.text ? 0 : 1;

                return mix(color, legible, 0.2, opacity);

            })
            .each(function(t) {

                if (t.resize instanceof Array) {
                    var min = t.resize[0],
                        max = t.resize[1];
                }

                var size = t.resize,
                    resize = true;

                if (!(t.resize instanceof Array)) {
                    size = [7, 40 * (scale[1] / scale[0])];
                    resize = t.resize;
                }

                var yOffset = vars.labels.valign.value === "bottom" ? t.share : 0;

                if (isNaN(t.percentage)) {
                    textWrap()
                        .align(t.anchor || vars.labels.align.value)
                        .container(d3.select(this))
                        .height(t.h * scale[1] - t.share)
                        .padding(t.padding / 2)
                        .resize(resize)
                        .size(size)
                        .shape(t.shape || "square")
                        .text(t.names)
                        .valign(vars.labels.valign.value)
                        .width(t.w * scale[1])
                        .x(t.x - t.w * scale[1] / 2 + t.padding / 2)
                        .y(t.y - t.h * scale[1] / 2 + t.padding / 2 + yOffset)
                        .draw();
                } else {
                    textWrap()
                        .align(t.anchor || vars.labels.align.value)
                        .container(d3.select(this))
                        .height(t.h * scale[1] - t.share)
                        .padding(t.padding / 2)
                        .resize(resize)
                        .size(size)
                        .shape(t.shape || "square")
                        .text(t.names + "\n" + vars.format.value(t.percentage * 100, {
                            "key": "share",
                            "vars": vars
                        }))
                        .valign(vars.labels.valign.value)
                        .width(t.w * scale[1])
                        .x(t.x - t.w * scale[1] / 2 + t.padding / 2)
                        .y(t.y - t.h * scale[1] / 2 + t.padding / 2 + yOffset)
                        .draw();
                }
            })
            .attr("transform", function(t) {
                var translate = d3.select(this).attr("transform") || "";
                var a = t.angle || 0,
                    x = t.translate && t.translate.x ? t.translate.x : 0,
                    y = t.translate && t.translate.y ? t.translate.y : 0;

                if (translate.length) {
                    translate = translate.split(")").slice(-3).join(")");
                }
                return "rotate(" + a + "," + x + "," + y + ")scale(" + 1 / scale[1] + ")translate(" + (t.x * scale[1] - t.x) + "," + (t.y * scale[1] - t.y) + ")" + translate;

            });

    };

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Loop through each selection and analyze the labels
    //----------------------------------------------------------------------------
    if (group === "edges" || vars.labels.value) {

        if (vars.dev.value) {
            var timerString = "drawing " + group + " labels";
            print.time(timerString);
        }

        selection.each(function(d) {

            var disabled = d.d3po && "label" in d.d3po && !d.d3po.label,
                label = d.d3po_label || null,
                names = d.d3po.text ? d.d3po.text :
                label && label.names ? label.names :
                vars.labels.text.value ?
                fetchValue(vars, d, vars.labels.text.value) :
                fetchText(vars, d),
                group = label && "group" in label ? label.group : d3.select(this),
                share_size = 0,
                fill = vars.types[vars.type.value].fill;

            if (!(names instanceof Array)) names = [names];

            if (label) {

                if (["line", "area"].indexOf(vars.shape.value) >= 0) {
                    var background = true;
                } else if (d && "d3po" in d) {
                    var active = segments(vars, d, "active"),
                        temp = segments(vars, d, "temp"),
                        total = segments(vars, d, "total"),
                        background = (!temp && !active) || (active >= total) || (!active && temp >= total);
                }

            }

            if (!disabled && ((label && label.force) || background || !fill)) {

                if (label) {

                    label.resize = vars.labels.resize.value === false ? false :
                        label && "resize" in label ? label.resize : true;

                    label.padding = typeof label.padding === "number" ? label.padding : vars.labels.padding;

                }

                if (label && label.w * scale[1] - label.padding >= 20 && label.h * scale[1] - label.padding >= 10 && names.length) {

                    var and = vars.format.locale.value.ui.and,
                        more = vars.format.locale.value.ui.more;

                    for (var i = 0; i < names.length; i++) {
                        if (names[i] instanceof Array) {
                            names[i] = stringList(names[i], and, 3, more);
                        }
                    }

                    label.names = names;
                    label.share = share_size;
                    label.percentage = d.d3po.share;
                    label.parent = d;

                    var text = group.selectAll("text#d3po_label_" + d.d3po.id)
                        .data([label], function(t) {
                            if (!t) return false;
                            return t.names;
                        }),
                        fontSize = label.resize ? undefined :
                        (vars.labels.font.size * scale[0]) + "px";

                    if (vars.draw.timing && vars.zoom.scale === 1) {

                        text
                            .transition().duration(vars.draw.timing / 2)
                            .call(style)
                            .call(opacity);

                        text.enter().append("text")
                            .attr("font-size", fontSize)
                            .attr("id", "d3po_label_" + d.d3po.id)
                            .attr("class", "d3po_label")
                            .attr("opacity", 0)
                            .call(style)
                            .transition().duration(vars.draw.timing / 2)
                            .delay(vars.draw.timing / 2)
                            .call(opacity);

                    } else {

                        text
                            .attr("opacity", 1)
                            .call(style)
                            .call(opacity);

                        text.enter().append("text")
                            .attr("font-size", fontSize)
                            .attr("id", "d3po_label_" + d.d3po.id)
                            .attr("class", "d3po_label")
                            .call(style)
                            .call(opacity);

                    }

                    text.exit().call(remove);

                    if (text.size() === 0 || text.selectAll("tspan").size() === 0) {
                        delete d.d3po_label;
                        d3.select(this).selectAll("text#d3po_label_" + d.d3po.id + ", rect#d3po_label_bg_" + d.d3po.id)
                            .call(remove);
                        vars.g.labels.selectAll("text#d3po_label_" + d.d3po.id + ", rect#d3po_label_bg_" + d.d3po.id)
                            .call(remove);
                    } else {

                        if (label.background) {

                            var background_data = ["background"];

                            var box = text.node().getBBox();
                            var bounds = {
                                "height": box.height,
                                "width": box.width,
                                "x": box.x,
                                "y": box.y > 0 ? box.y : -box.height / 2
                            };
                            bounds.width += vars.labels.padding * scale[0];
                            bounds.height += vars.labels.padding * scale[0];
                            bounds.x -= (vars.labels.padding * scale[0]) / 2;
                            bounds.y -= (vars.labels.padding * scale[0]) / 2;
                            var y = text.attr("transform").match(/translate\(([^a-z]+)\)/gi)[0];
                            y = y.replace(/([^a-z])\s([^a-z])/gi, "$1,$2");
                            y = y.split(",");
                            if (y.length > 1) {
                                y = y[y.length - 1];
                                y = y.substring(0, y.length - 1);
                                bounds.y += parseFloat(y);
                            }

                        } else {
                            var background_data = [],
                                bounds = {};
                        }

                        var bg = group.selectAll("rect#d3po_label_bg_" + d.d3po.id)
                            .data(background_data),
                            bg_opacity = typeof label.background === "number" ?
                            label.background :
                            typeof label.background === "string" ? 1 : 0.6;

                        function bg_style(elem) {

                            var color = typeof label.background === "string" ? label.background : vars.background.value === "none" ?
                                "#ffffff" : vars.background.value,
                                fill = typeof label.background === "string" ?
                                label.background : color,
                                transform = text.attr("transform").split(")");
                            transform.pop();
                            transform.pop();
                            transform.push("");
                            transform = transform.join(")");

                            elem
                                .attr("fill", fill)
                                .attr(bounds)
                                .attr("transform", transform);

                        }

                        if (vars.draw.timing) {

                            bg.exit().transition().duration(vars.draw.timing)
                                .attr("opacity", 0)
                                .remove();

                            bg.transition().duration(vars.draw.timing)
                                .attr("opacity", bg_opacity)
                                .call(bg_style);

                            bg.enter().insert("rect", ".d3po_label")
                                .attr("id", "d3po_label_bg_" + d.d3po.id)
                                .attr("class", "d3po_label_bg")
                                .attr("opacity", 0)
                                .call(bg_style)
                                .transition().duration(vars.draw.timing)
                                .attr("opacity", bg_opacity);

                        } else {

                            bg.exit().remove();

                            bg.enter().insert("rect", ".d3po_label")
                                .attr("id", "d3po_label_bg_" + d.d3po.id)
                                .attr("class", "d3po_label_bg");

                            bg.attr("opacity", bg_opacity)
                                .call(bg_style);

                        }

                    }

                } else {
                    delete d.d3po_label;
                    d3.select(this).selectAll("text#d3po_label_" + d.d3po.id + ", rect#d3po_label_bg_" + d.d3po.id)
                        .call(remove);
                    vars.g.labels.selectAll("text#d3po_label_" + d.d3po.id + ", rect#d3po_label_bg_" + d.d3po.id)
                        .call(remove);
                }

            } else {
                delete d.d3po_label;
                d3.select(this).selectAll("text#d3po_label_" + d.d3po.id + ", rect#d3po_label_bg_" + d.d3po.id)
                    .call(remove);
                vars.g.labels.selectAll("text#d3po_label_" + d.d3po.id + ", rect#d3po_label_bg_" + d.d3po.id)
                    .call(remove);
            }
        });

        if (vars.dev.value) print.timeEnd(timerString);

    } else {

        if (vars.dev.value) {
            var timerString = "removing " + group + " labels";
            print.time(timerString);
        }

        selection.selectAll("text.d3po_label, rect.d3po_label_bg")
            .call(remove);

        vars.g.labels.selectAll("text.d3po_label, rect.d3po_label_bg")
            .call(remove);

        if (vars.dev.value) print.timeEnd(timerString);

    }
}
},{"../../../client/rtl.js":71,"../../../color/mix.js":77,"../../../color/text.js":81,"../../../core/console/print.js":83,"../../../core/fetch/text.js":98,"../../../core/fetch/value.js":99,"../../../string/list.js":209,"../../../textwrap/textwrap.js":235,"../../../util/copy.js":242,"./color.js":261,"./segments.js":274}],270:[function(require,module,exports){
var copy = require("../../../util/copy.js"),
    closest = require("../../../util/closest.js"),
    events = require("../../../client/pointer.js"),
    curves = require("../d3functions/curves.js"),
    shapeStyle = require("./style.js"),
    fetchValue = require("../../../core/fetch/value.js");

//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Draws "line" shapes using svg:line
//------------------------------------------------------------------------------
module.exports = function(vars, selection, enter, exit) {

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // The D3 line function that determines what variables to use for x and y
    // positioning, as well as line interpolation defined by the user.
    //----------------------------------------------------------------------------
    var line = d3.line()
        .x(function(d) {
            return d.d3po.x;
        })
        .y(function(d) {
            return d.d3po.y;
        })
        .curve(curves.fromString(vars.shape.interpolate.value));

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Divide each line into it's segments. We do this so that there can be gaps
    // in the line and mouseover.
    //
    // Then, create new data group from values to become small nodes at each
    // point on the line.
    //----------------------------------------------------------------------------

    var stroke = vars.size.value || vars.data.stroke.width,
        discrete = vars[vars.axes.discrete],
        hitarea = function(l) {
            var s = stroke;
            if (s.constructor !== Number) {
                var v = fetchValue(vars, l, stroke);
                if (v && v.length) s = d3.max(v);
                else s = vars.data.stroke.width;
            }
            return s < 15 ? 15 : s;
        };

    var ticks = discrete.ticks.values.map(function(d) {
        if (d.constructor === Date) return d.getTime();
        else return d;
    });

    selection.each(function(d) {

        var lastIndex = false,
            segments = [],
            nodes = [],
            temp = copy(d),
            group = d3.select(this);

        temp.values = [];
        temp.segment_key = temp.key;
        d.values.forEach(function(v, i, arr) {

            var k = fetchValue(vars, v, discrete.value);

            if (k.constructor === Date) k = k.getTime();

            var index = ticks.indexOf(closest(ticks, k));

            if (lastIndex === false || lastIndex === index - 1) {
                temp.values.push(v);
                temp.segment_key += "_" + index;
            } else {
                if (temp.values.length > 1) {
                    segments.push(temp);
                } else {
                    nodes.push(temp.values[0]);
                }
                temp = copy(d);
                temp.values = [v];
            }

            if (i === arr.length - 1) {
                if (temp.values.length > 1) {
                    segments.push(temp);
                } else {
                    nodes.push(temp.values[0]);
                }
            }

            lastIndex = index;

        });

        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        // Bind segment data to "paths"
        //--------------------------------------------------------------------------
        var paths = group.selectAll("path.d3po_line")
            .data(segments, function(d) {
                if (!d.d3po) d.d3po = {};
                d.d3po.shape = "line";
                return d.segment_key;
            });

        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        // Bind node data to "rects"
        //--------------------------------------------------------------------------
        var rects = group.selectAll("rect.d3po_anchor")
            .data(nodes, function(d) {
                if (!d.d3po) d.d3po = {};
                d.d3po.r = stroke;
                return d.d3po.id;
            });

        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        // "paths" and "rects" Enter/Update
        //--------------------------------------------------------------------------
        if (vars.draw.timing) {

            paths.exit().transition().duration(vars.draw.timing)
                .attr("opacity", 0)
                .remove();

            paths.transition().duration(vars.draw.timing)
                .attr("d", function(d) {
                    return line(d.values);
                })
                .call(shapeStyle, vars);

            paths.enter().append("path")
                .attr("class", "d3po_line")
                .style("stroke-linecap", "round")
                .attr("d", function(d) {
                    return line(d.values);
                })
                .call(shapeStyle, vars)
                .attr("opacity", 0)
                .transition().duration(vars.draw.timing)
                .attr("opacity", 1);

            rects.enter().append("rect")
                .attr("class", "d3po_anchor")
                .attr("id", function(d) {
                    return d.d3po.id;
                })
                .call(init)
                .call(shapeStyle, vars);

            rects.transition().duration(vars.draw.timing)
                .call(update)
                .call(shapeStyle, vars);

            rects.exit().transition().duration(vars.draw.timing)
                .call(init)
                .remove();

        } else {

            paths.exit().remove();

            paths.enter().append("path")
                .attr("class", "d3po_line")
                .style("stroke-linecap", "round");

            paths
                .attr("d", function(d) {
                    return line(d.values);
                })
                .call(shapeStyle, vars);

            rects.enter().append("rect")
                .attr("class", "d3po_anchor")
                .attr("id", function(d) {
                    return d.d3po.id;
                });

            rects.exit().remove();

            rects.call(update)
                .call(shapeStyle, vars);

        }

        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        // Create mouse event lines
        //--------------------------------------------------------------------------
        var mouse = group.selectAll("path.d3po_mouse")
            .data(segments, function(d) {
                return d.segment_key;
            });

        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        // Mouse "paths" Enter
        //--------------------------------------------------------------------------
        mouse.enter().append("path")
            .attr("class", "d3po_mouse")
            .attr("d", function(l) {
                return line(l.values);
            })
            .style("stroke", "black")
            .style("stroke-width", hitarea)
            .style("fill", "none")
            .style("stroke-linecap", "round")
            .attr("opacity", 0);

        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        // Mouse "paths" Update
        //--------------------------------------------------------------------------
        mouse
            .on(events.over, function(m) {
                if (!vars.draw.frozen && vars.mouse.value && vars.mouse.over.value) mouseStyle(vars, this, stroke, 2);
            })
            .on(events.out, function(d) {
                if (!vars.draw.frozen && vars.mouse.value && vars.mouse.out.value) mouseStyle(vars, this, stroke, 0);
            });

        if (vars.draw.timing) {

            mouse.transition().duration(vars.draw.timing)
                .attr("d", function(l) {
                    return line(l.values);
                })
                .style("stroke-width", hitarea);

        } else {

            mouse.attr("d", function(l) {
                    return line(l.values);
                })
                .style("stroke-width", hitarea);

        }

        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        // Mouse "paths" Exit
        //--------------------------------------------------------------------------
        mouse.exit().remove();

    });

};

//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// The position and size of each anchor point on enter and exit.
//----------------------------------------------------------------------------
function init(n) {

    n
        .attr("x", function(d) {
            return d.d3po.x;
        })
        .attr("y", function(d) {
            return d.d3po.y;
        })
        .attr("width", 0)
        .attr("height", 0);

}

//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// The position and size of each anchor point on update.
//----------------------------------------------------------------------------
function update(n, mod) {

    if (mod === undefined) mod = 0;

    n
        .attr("x", function(d) {
            var w = d.d3po.r ? d.d3po.r * 2 : d.d3po.width;
            return d.d3po.x - ((w / 2) + (mod / 2));
        })
        .attr("y", function(d) {
            var h = d.d3po.r ? d.d3po.r * 2 : d.d3po.height;
            return d.d3po.y - ((h / 2) + (mod / 2));
        })
        .attr("width", function(d) {
            var w = d.d3po.r ? d.d3po.r * 2 : d.d3po.width;
            return w + mod;
        })
        .attr("height", function(d) {
            var h = d.d3po.r ? d.d3po.r * 2 : d.d3po.height;
            return h + mod;
        })
        .attr("rx", function(d) {
            var w = d.d3po.r ? d.d3po.r * 2 : d.d3po.width;
            return (w + mod) / 2;
        })
        .attr("ry", function(d) {
            var h = d.d3po.r ? d.d3po.r * 2 : d.d3po.height;
            return (h + mod) / 2;
        });

}

function mouseStyle(vars, elem, stroke, mod) {

    var timing = vars.draw.timing ? vars.timing.mouseevents : 0;
    if (mod === undefined) mod = 0;

    if (timing) {

        d3.select(elem.parentNode).selectAll("path.d3po_line")
            .transition().duration(timing)
            .style("stroke-width", function(l) {
                var s = stroke;
                if (s.constructor !== Number) {
                    var v = fetchValue(vars, l, stroke);
                    if (v && v.length) s = d3.max(v);
                    else s = vars.data.stroke.width;
                }
                return s + mod;
            });

        d3.select(elem.parentNode).selectAll("rect")
            .transition().duration(timing)
            .style("stroke-width", function(l) {
                var s = stroke;
                if (s.constructor !== Number) {
                    var v = fetchValue(vars, l, stroke);
                    if (v && v.length) s = d3.max(v);
                    else s = vars.data.stroke.width;
                }
                return s;
            })
            .call(update, mod);

    } else {

        d3.select(elem.parentNode).selectAll("path.d3po_line")
            .style("stroke-width", function(l) {
                var s = stroke;
                if (s.constructor !== Number) {
                    var v = fetchValue(vars, l, stroke);
                    if (v && v.length) s = d3.max(v);
                    else s = vars.data.stroke.width;
                }
                return s + mod;
            });

        d3.select(elem.parentNode).selectAll("rect")
            .style("stroke-width", function(l) {
                var s = stroke;
                if (s.constructor !== Number) {
                    var v = fetchValue(vars, l, stroke);
                    if (v && v.length) s = d3.max(v);
                    else s = vars.data.stroke.width;
                }
                return s;
            })
            .call(update, mod);
    }

}
},{"../../../client/pointer.js":69,"../../../core/fetch/value.js":99,"../../../util/closest.js":241,"../../../util/copy.js":242,"../d3functions/curves.js":249,"./style.js":275}],271:[function(require,module,exports){
module.exports = function(vars) {

    var edges = vars.returned.edges || [];

    var paths = vars.g.edges.selectAll("g.d3po_edge_path")
        .data(edges, function(d) {
            d.d3po.id = "path_" + d[vars.edges.source][vars.id.value] + "_" + d[vars.edges.target][vars.id.value];
            return d.d3po.id;
        });

    function pathStyles(p) {
        p
            .attr("d", vars.edges.path)
            .style("stroke-width", function(d) {
                return Math.max(1, d.dy);
            })
            .style("stroke", "#ddd")
            .style("fill", "none")
            .attr("transform", function(d) {
                return "translate(" + d.d3po.x + "," + d.d3po.y + ")";
            });
    }

    if (vars.draw.timing) {

        paths.exit().transition().duration(vars.draw.timing)
            .attr("opacity", 0)
            .remove();

        paths.selectAll("text.d3po_label, rect.d3po_label_bg")
            .transition().duration(vars.draw.timing / 2)
            .attr("opacity", 0)
            .remove();

        paths.selectAll("path")
            .data(function(d) {
                return [d]
            })
            .transition().duration(vars.draw.timing)
            .call(pathStyles);

        paths.enter().append("g")
            .attr("class", "d3po_edge_path")
            .append("path")
            .style("stroke-width", 0)
            .transition().duration(vars.draw.timing)
            .call(pathStyles);

    } else {

        paths.exit().remove();

        paths.selectAll("text.d3po_label, rect.d3po_label_bg")
            .remove();

        paths.selectAll("path")
            .data(function(d) {
                return [d]
            })
            .call(pathStyles);

        paths.enter().append("g")
            .attr("class", "d3po_edge_path")
            .append("path")
            .call(pathStyles);

    }

}
},{}],272:[function(require,module,exports){
(function() {
    var angles, interpolates, radii, shapeStyle;

    shapeStyle = require("./style.js");

    radii = {};

    angles = {};

    interpolates = {
        r: {},
        a: {}
    };

    module.exports = function(vars, selection, enter, exit) {
        var data, newRadial, nextLevel, radial, radialTween;
        nextLevel = vars.id.nesting[vars.depth.value + 1];
        radial = d3.lineRadial().curve(d3.curveLinearClosed).radius(function(d) {
            return d.d3po.r;
        }).angle(function(d) {
            return d.d3po.a;
        });
        data = function(d) {
            if (vars.labels.value) {
                if (d.d3po.label) {
                    d.d3po_label = d.d3po.label;
                } else {
                    delete d.d3po_label;
                }
            }
            return [d];
        };
        if (vars.draw.timing) {
            selection.each(function(d) {
                var c, j, len, ref, results;
                ref = d[nextLevel];
                results = [];
                for (j = 0, len = ref.length; j < len; j++) {
                    c = ref[j];
                    results.push(c.d3po.id = c[vars.id.value] + "_" + c[nextLevel]);
                }
                return results;
            });
            newRadial = d3.lineRadial().curve(d3.curveLinearClosed).radius(function(d, i) {
                if (radii[d.d3po.id] === void 0) {
                    radii[d.d3po.id] = 0;
                }
                if (isNaN(radii[d.d3po.id])) {
                    radii[d.d3po.id] = d.d3po.r;
                }
                return radii[d.d3po.id];
            }).angle(function(d, i) {
                if (angles[d.d3po.id] === void 0) {
                    angles[d.d3po.id] = d.d3po.a;
                }
                if (isNaN(angles[d.d3po.id])) {
                    angles[d.d3po.id] = d.d3po.a;
                }
                return angles[d.d3po.id];
            });
            radialTween = function(arcs, newRadius) {
                return arcs.attrTween("d", function(d) {
                    var a, c, i, j, len, r, ref;
                    ref = d[nextLevel];
                    for (i = j = 0, len = ref.length; j < len; i = ++j) {
                        c = ref[i];
                        a = c.d3po.a;
                        if (newRadius === void 0) {
                            r = c.d3po.r;
                        } else if (newRadius === 0) {
                            r = 0;
                        }
                        interpolates.a[c.d3po.id] = d3.interpolate(angles[c.d3po.id], a);
                        interpolates.r[c.d3po.id] = d3.interpolate(radii[c.d3po.id], r);
                    }
                    return function(t) {
                        var k, len1, ref1;
                        ref1 = d[nextLevel];
                        for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
                            c = ref1[i];
                            angles[c.d3po.id] = interpolates.a[c.d3po.id](t);
                            radii[c.d3po.id] = interpolates.r[c.d3po.id](t);
                        }
                        return newRadial(d[nextLevel]);
                    };
                });
            };
            enter.append("path").attr("class", "d3po_data").call(shapeStyle, vars).attr("d", function(d) {
                return newRadial(d[nextLevel]);
            });
            selection.selectAll("path.d3po_data").data(data).transition().duration(vars.draw.timing).call(shapeStyle, vars).call(radialTween);
            exit.selectAll("path.d3po_data").transition().duration(vars.draw.timing).call(radialTween, 0);
        } else {
            enter.append("path").attr("class", "d3po_data");
            selection.selectAll("path.d3po_data").data(data).call(shapeStyle, vars).attr("d", function(d) {
                return radial(d[nextLevel]);
            });
        }
    };

}).call(this);
},{"./style.js":275}],273:[function(require,module,exports){
(function() {
    var shapeStyle;

    shapeStyle = require("./style.js");

    module.exports = function(vars, selection, enter, exit) {
        var data, init, update;
        data = function(d) {
            var h, w;
            if (vars.labels.value && !d.d3po.label) {
                w = (d.d3po.r ? d.d3po.r * 2 : d.d3po.width);
                h = (d.d3po.r ? d.d3po.r * 2 : d.d3po.height);
                d.d3po_label = {
                    w: w,
                    h: h,
                    x: 0,
                    y: 0
                };
                d.d3po_share = {
                    w: w,
                    h: h,
                    x: 0,
                    y: 0
                };
                d.d3po_label.shape = (d.d3po.shape === "circle" ? "circle" : "square");
            } else if (d.d3po.label) {
                d.d3po_label = d.d3po.label;
            } else {
                delete d.d3po_label;
            }
            return [d];
        };
        init = function(nodes) {
            return nodes.attr("x", function(d) {
                if (d.d3po.init && "x" in d.d3po.init) {
                    return d.d3po.init.x;
                } else {
                    if (d.d3po.init && "width" in d.d3po.init) {
                        return -d.d3po.width / 2;
                    } else {
                        return 0;
                    }
                }
            }).attr("y", function(d) {
                if (d.d3po.init && "y" in d.d3po.init) {
                    return d.d3po.init.y;
                } else {
                    if (d.d3po.init && "height" in d.d3po.init) {
                        return -d.d3po.height / 2;
                    } else {
                        return 0;
                    }
                }
            }).attr("width", function(d) {
                if (d.d3po.init && "width" in d.d3po.init) {
                    return d.d3po.init.width;
                } else {
                    return 0;
                }
            }).attr("height", function(d) {
                if (d.d3po.init && "height" in d.d3po.init) {
                    return d.d3po.init.height;
                } else {
                    return 0;
                }
            });
        };
        update = function(nodes) {
            return nodes.attr("x", function(d) {
                var w;
                w = d.d3po.r ? d.d3po.r * 2 : d.d3po.width;
                return -w / 2;
            }).attr("y", function(d) {
                var h;
                h = d.d3po.r ? d.d3po.r * 2 : d.d3po.height;
                return -h / 2;
            }).attr("width", function(d) {
                if (d.d3po.r) {
                    return d.d3po.r * 2;
                } else {
                    return d.d3po.width;
                }
            }).attr("height", function(d) {
                if (d.d3po.r) {
                    return d.d3po.r * 2;
                } else {
                    return d.d3po.height;
                }
            }).attr("rx", function(d) {
                var rounded, w;
                rounded = d.d3po.shape === "circle";
                w = d.d3po.r ? d.d3po.r * 2 : d.d3po.width;
                if (rounded) {
                    return (w + 2) / 2;
                } else {
                    return 0;
                }
            }).attr("ry", function(d) {
                var h, rounded;
                rounded = d.d3po.shape === "circle";
                h = d.d3po.r ? d.d3po.r * 2 : d.d3po.height;
                if (rounded) {
                    return (h + 2) / 2;
                } else {
                    return 0;
                }
            }).attr("transform", function(d) {
                if ("rotate" in d.d3po) {
                    return "rotate(" + d.d3po.rotate + ")";
                } else {
                    return "";
                }
            }).attr("shape-rendering", function(d) {
                if (d.d3po.shape === "square" && (!("rotate" in d.d3po))) {
                    return vars.shape.rendering.value;
                } else {
                    return "auto";
                }
            });
        };
        if (vars.draw.timing) {
            enter.append("rect").attr("class", "d3po_data").call(init).call(shapeStyle, vars);
            selection.selectAll("rect.d3po_data").data(data).transition().duration(vars.draw.timing).call(update).call(shapeStyle, vars);
            return exit.selectAll("rect.d3po_data").transition().duration(vars.draw.timing).call(init);
        } else {
            enter.append("rect").attr("class", "d3po_data");
            return selection.selectAll("rect.d3po_data").data(data).call(update).call(shapeStyle, vars);
        }
    };

}).call(this);
},{"./style.js":275}],274:[function(require,module,exports){
(function() {
    var fetchValue;

    fetchValue = require("../../../core/fetch/value.js");

    module.exports = function(vars, d, segment) {
        var ret;
        ret = vars[segment].value;
        if (ret) {
            if (segment in d.d3po) {
                return d.d3po[segment];
            } else {
                return fetchValue(vars, d, ret);
            }
        } else {
            return d.d3po[segment];
        }
    };

}).call(this);
},{"../../../core/fetch/value.js":99}],275:[function(require,module,exports){
// Fill style for all shapes
(function() {
    var color, ie, value;

    color = require("./color.js");

    ie = require("../../../client/ie.js");

    value = require("../../../core/fetch/value.js");

    module.exports = function(nodes, vars) {
        return nodes.attr("fill", function(d) {
            if (d.d3po && d.d3po.spline) {
                return "none";
            } else {
                return color(d, vars);
            }
        }).style("stroke", function(d) {
            var c;
            if (d.d3po && d.d3po.stroke) {
                return d.d3po.stroke;
            } else {
                c = d.values ? color(d.values[0], vars) : color(d, vars, true);
                return d3.rgb(c).darker(0.6).formatHex();
            }
        }).style("stroke-width", function(d) {
            var v;
            if (ie && vars.types[vars.type.value].zoom) {
                return 0;
            }
            if (d.d3po.shape === "line" && vars.size.value) {
                if (vars.size.value.constructor === Number) {
                    return vars.size.value;
                }
                v = value(vars, d, vars.size.value);
                if (v && v.length) {
                    return d3.max(v);
                }
            }
            return vars.data.stroke.width;
        }).attr("opacity", vars.data.opacity).attr("vector-effect", "non-scaling-stroke");
    };

}).call(this);
},{"../../../client/ie.js":68,"../../../core/fetch/value.js":99,"./color.js":261}],276:[function(require,module,exports){
var shapeStyle = require("./style.js")
    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Draws "square" and "circle" shapes using svg:rect
    //------------------------------------------------------------------------------
module.exports = function(vars, selection, enter, exit) {

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Initialize check scale on enter and exit.
    //----------------------------------------------------------------------------
    function init(paths) {
        paths.attr("d", d3.symbol().type(d3.symbolTriangle).size(10))
             .attr("transform", "rotate(180)");
    }

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Change scale of check on update.
    //---------------------------------------------------------------------------
    function update(paths) {
        paths.attr("d", d3.symbol().type(d3.symbolTriangle).size(function(d) {
            var smaller_dim = Math.min(d.d3po.width, d.d3po.height);
            return d3.scalePow().exponent(2)(smaller_dim / 2);
        }))
             .attr("transform", "rotate(180)");
    }

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // "paths" Enter
    //----------------------------------------------------------------------------
    enter.append("path").attr("class", "d3po_data")
        .call(init)
        .call(shapeStyle, vars)

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // "paths" Update
    //----------------------------------------------------------------------------
    selection.selectAll("path.d3po_data")
        .data(function(d) {
            return [d];
        })

    if (vars.draw.timing) {
        selection.selectAll("path.d3po_data")
            .transition().duration(vars.draw.timing)
            .call(update)
            .call(shapeStyle, vars)
    } else {
        selection.selectAll("path.d3po_data")
            .call(update)
            .call(shapeStyle, vars)
    }

}
},{"./style.js":275}],277:[function(require,module,exports){
var shapeStyle = require("./style.js")
    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Draws "square" and "circle" shapes using svg:rect
    //------------------------------------------------------------------------------
module.exports = function(vars, selection, enter, exit) {

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Initialize check scale on enter and exit.
    //----------------------------------------------------------------------------
    function init(paths) {
        paths.attr("d", d3.symbol().type(d3.symbolTriangle).size(10))
    }

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Change scale of check on update.
    //---------------------------------------------------------------------------
    function update(paths) {
        paths.attr("d", d3.symbol().type(d3.symbolTriangle).size(function(d) {
            var smaller_dim = Math.min(d.d3po.width, d.d3po.height);
            return d3.scalePow().exponent(2)(smaller_dim / 2);
        }))
    }

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // "paths" Enter
    //----------------------------------------------------------------------------
    enter.append("path").attr("class", "d3po_data")
        .call(init)
        .call(shapeStyle, vars)

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // "paths" Update
    //----------------------------------------------------------------------------
    selection.selectAll("path.d3po_data")
        .data(function(d) {
            return [d];
        })

    if (vars.draw.timing) {
        selection.selectAll("path.d3po_data")
            .transition().duration(vars.draw.timing)
            .call(update)
            .call(shapeStyle, vars)
    } else {
        selection.selectAll("path.d3po_data")
            .call(update)
            .call(shapeStyle, vars)
    }

}
},{"./style.js":275}],278:[function(require,module,exports){
(function() {
    module.exports = function(vars, selection, enter, exit) {
        var d, data, init, marker, orient, pos, position, size, style;
        data = function(d) {
            if (d.d3po.text) {
                d.d3po_label = {
                    w: size,
                    h: size,
                    x: 0,
                    y: 0,
                    background: "#fff",
                    resize: false,
                    angle: ["left", "right"].indexOf(d.d3po.position) >= 0 ? 90 : 0
                };
            } else if (d.d3po.label) {
                d.d3po_label = d.d3po.label;
            } else {
                delete d.d3po_label;
            }
            return [d];
        };
        style = function(line) {
            return line.style("stroke-width", vars.data.stroke.width).style("stroke", "#444").attr("fill", "none").attr("shape-rendering", vars.shape.rendering.value);
        };
        init = function(line) {
            return line.attr("x1", 0).attr("x2", 0).attr("y1", 0).attr("y2", 0);
        };
        position = function(line) {
            return line.attr("x1", function(d) {
                var offset, w, x;
                if (["top", "bottom"].indexOf(d.d3po.position) >= 0) {
                    return 0;
                } else {
                    offset = d.d3po.offset || 0;
                    w = d.d3po.width || 0;
                    x = offset < 0 ? -w : w;
                    return x + offset;
                }
            }).attr("x2", function(d) {
                if (["top", "bottom"].indexOf(d.d3po.position) >= 0) {
                    return 0;
                } else {
                    return d.d3po.offset || 0;
                }
            }).attr("y1", function(d) {
                var h, offset, y;
                if (["left", "right"].indexOf(d.d3po.position) >= 0) {
                    return 0;
                } else {
                    offset = d.d3po.offset || 0;
                    h = d.d3po.height || 0;
                    y = offset < 0 ? -h : h;
                    return y + offset;
                }
            }).attr("y2", function(d) {
                if (["left", "right"].indexOf(d.d3po.position) >= 0) {
                    return 0;
                } else {
                    return d.d3po.offset || 0;
                }
            }).attr("marker-start", "url(#d3po_whisker_marker)");
        };
        marker = vars.defs.selectAll("#d3po_whisker_marker").data([0]);
        marker.enter().append("marker").attr("id", "d3po_whisker_marker").attr("markerUnits", "userSpaceOnUse").style("overflow", "visible").append("line");
        d = selection.datum();
        if (d) {
            pos = d.d3po.position;
            orient = ["top", "bottom"].indexOf(pos) >= 0 ? "horizontal" : "vertical";
            size = orient === "horizontal" ? d.d3po.width : d.d3po.height;
        } else {
            orient = "horizontal";
            size = 0;
        }
        marker.select("line").attr("x1", orient === "horizontal" ? -size / 2 : 0).attr("x2", orient === "horizontal" ? size / 2 : 0).attr("y1", orient === "vertical" ? -size / 2 : 0).attr("y2", orient === "vertical" ? size / 2 : 0).call(style).style("stroke-width", vars.data.stroke.width * 2);
        if (vars.draw.timing) {
            enter.append("line").attr("class", "d3po_data").call(style).call(init);
            selection.selectAll("line.d3po_data").data(data).transition().duration(vars.draw.timing).call(style).call(position);
            exit.selectAll("line.d3po_data").transition().duration(vars.draw.timing).call(init);
        } else {
            enter.append("line").attr("class", "d3po_data");
            selection.selectAll("line.d3po_data").data(data).call(style).call(position);
        }
    };

}).call(this);
},{}],279:[function(require,module,exports){
var events = require("../../../client/pointer.js"),
    prefix = require("../../../client/prefix.js"),
    print = require("../../../core/console/print.js"),
    touch = require("../../../client/touch.js"),
    touchEvent = require("../zoom/propagation.js");

// Enter SVG Elements
module.exports = function(vars) {

    if (vars.dev.value) print.time("creating SVG elements");

    // Enter SVG
    vars.svg = vars.container.value.selectAll("svg#d3po").data([0]);
    vars.svg.enter().insert("svg", "#d3po_message")
        .attr("id", "d3po")
        .attr("width", vars.width.value)
        .attr("height", vars.height.value)
        .attr("xmlns", "http://www.w3.org/2000/svg")
        .attr("xmlns:xlink", "http://www.w3.org/1999/xlink");

    // Enter BG Rectangle
    vars.g.bg = vars.svg.selectAll("rect#bg").data(["bg"]);
    vars.g.bg.enter().append("rect")
        .attr("id", "bg")
        .attr("fill", vars.background.value)
        .attr("stroke", "none")
        .attr("width", vars.width.value)
        .attr("height", vars.height.value);

    // Enter Timeline Group
    vars.g.timeline = vars.svg.selectAll("g#timeline").data(["timeline"]);
    vars.g.timeline.enter().append("g")
        .attr("id", "timeline")
        .attr("transform", "translate(0," + vars.height.value + ")");

    // Enter Key Group
    vars.g.legend = vars.svg.selectAll("g#key").data(["key"]);
    vars.g.legend.enter().append("g")
        .attr("id", "key")
        .attr("transform", "translate(0," + vars.height.value + ")");

    // Enter Footer Group
    vars.g.footer = vars.svg.selectAll("g#footer").data(["footer"]);
    vars.g.footer.enter().append("g")
        .attr("id", "footer")
        .attr("transform", "translate(0," + vars.height.value + ")");

    // Enter App Clipping Mask
    var clipID = "clipping_" + vars.container.id;
    vars.g.clipping = vars.svg.selectAll("#clipping").data(["clipping"]);
    vars.g.clipping.enter().append("clipPath")
        .attr("id", clipID)
        .append("rect")
        .attr("width", vars.width.viz)
        .attr("height", vars.height.viz);

    // Enter Container Group
    vars.g.container = vars.svg.selectAll("g#container").data(["container"]);
    vars.g.container.enter().append("g")
        .attr("id", "container")
        .attr("clip-path", "url(#" + clipID + ")")
        .attr("transform", "translate(" + vars.margin.left + "," + vars.margin.top + ")");

    // Enter Zoom Group
    vars.g.zoom = vars.g.container.selectAll("g#zoom").data(["zoom"]);
    vars.g.zoom.enter().append("g")
        .attr("id", "zoom");

    // Enter App Background Group
    vars.g.viz = vars.g.zoom.selectAll("g#d3po_viz").data(["d3po_viz"]);
    vars.g.viz.enter().append("g")
        .attr("id", "d3po_viz");

    // Enter App Overlay Rect
    vars.g.overlay = vars.g.viz.selectAll("rect#d3po_overlay").data([{
        "id": "d3po_overlay"
    }]);
    vars.g.overlay.enter().append("rect")
        .attr("id", "d3po_overlay")
        .attr("width", vars.width.value)
        .attr("height", vars.height.value)
        .attr("opacity", 0);

    vars.g.overlay
        .on(events.move, function(d) {

            if (touch) touchEvent(vars, d3.event);

            if (vars.types[vars.type.value].zoom && vars.zoom.pan.value &&
                vars.zoom.behavior.scaleExtent()[0] < vars.zoom.scale) {
                d3.select(this).style("cursor", prefix() + "grab");
            } else {
                d3.select(this).style("cursor", "auto");
            }

        })
        .on(events.up, function(d) {

            if (touch) touchEvent(vars, d3.event);

            if (vars.types[vars.type.value].zoom && vars.zoom.pan.value &&
                vars.zoom.behavior.scaleExtent()[0] < vars.zoom.scale) {
                d3.select(this).style("cursor", prefix() + "grab");
            } else {
                d3.select(this).style("cursor", "auto");
            }

        })
        .on(events.down, function(d) {

            if (touch) touchEvent(vars, d3.event);

            if (vars.types[vars.type.value].zoom && vars.zoom.pan.value &&
                vars.zoom.behavior.scaleExtent()[0] < vars.zoom.scale) {
                d3.select(this).style("cursor", prefix() + "grabbing");
            } else {
                d3.select(this).style("cursor", "auto");
            }

        });

    // Enter App Background Group
    vars.g.app = vars.g.viz.selectAll("g#app").data(["app"]);
    vars.g.app.enter().append("g")
        .attr("id", "app");

    // Enter Edges Group
    vars.g.edges = vars.g.viz.selectAll("g#edges").data(["edges"]);
    vars.g.edges.enter().append("g")
        .attr("id", "edges")
        .attr("opacity", 0);

    // Enter Edge Focus Group
    vars.g.edge_focus = vars.g.viz.selectAll("g#focus").data(["focus"]);
    vars.g.edge_focus.enter().append("g")
        .attr("id", "focus");

    // Enter Edge Hover Group
    vars.g.edge_hover = vars.g.viz.selectAll("g#edge_hover").data(["edge_hover"]);
    vars.g.edge_hover.enter().append("g")
        .attr("id", "edge_hover")
        .attr("opacity", 0);

    // Enter App Data Group
    vars.g.data = vars.g.viz.selectAll("g#data").data(["data"]);
    vars.g.data.enter().append("g")
        .attr("id", "data")
        .attr("opacity", 0);

    // Enter Data Focus Group
    vars.g.data_focus = vars.g.viz.selectAll("g#data_focus").data(["data_focus"]);
    vars.g.data_focus.enter().append("g")
        .attr("id", "data_focus");

    // Enter Top Label Group
    vars.g.labels = vars.g.viz.selectAll("g#d3po_labels").data(["d3po_labels"]);
    vars.g.labels.enter().append("g")
        .attr("id", "d3po_labels");

    vars.defs = vars.svg.selectAll("defs").data(["defs"]);
    vars.defs.enter().append("defs");

    if (vars.dev.value) print.timeEnd("creating SVG elements");

};
},{"../../../client/pointer.js":69,"../../../client/prefix.js":70,"../../../client/touch.js":74,"../../../core/console/print.js":83,"../zoom/propagation.js":294}],280:[function(require,module,exports){
var print = require("../../../core/console/print.js")
    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Updating Elements
    //------------------------------------------------------------------------------
module.exports = function(vars) {

    if (vars.dev.value) print.time("updating SVG elements")

    if (vars.draw.timing) {

        // Update Parent Element
        vars.container.value.transition().duration(vars.draw.timing)
            .style("width", vars.width.value + "px")
            .style("height", vars.height.value + "px")

        // Update SVG
        vars.svg.transition().duration(vars.draw.timing)
            .attr("width", vars.width.value)
            .attr("height", vars.height.value)

        // Update Background Rectangle
        vars.g.bg.transition().duration(vars.draw.timing)
            .attr("width", vars.width.value)
            .attr("height", vars.height.value)
            .attr("fill", vars.background.value);

        // Update App Clipping Rectangle
        vars.g.clipping.select("rect").transition().duration(vars.draw.timing)
            .attr("width", vars.width.viz)
            .attr("height", vars.height.viz)

        // Update Container Groups
        vars.g.container.transition().duration(vars.draw.timing)
            .attr("transform", "translate(" + vars.margin.left + "," + vars.margin.top + ")")

    } else {

        // Update Parent Element
        vars.container.value
            .style("width", vars.width.value + "px")
            .style("height", vars.height.value + "px")

        // Update SVG
        vars.svg
            .attr("width", vars.width.value)
            .attr("height", vars.height.value)

        // Update Background Rectangle
        vars.g.bg
            .attr("width", vars.width.value)
            .attr("height", vars.height.value)
            .attr("fill", vars.background.value);

        // Update App Clipping Rectangle
        vars.g.clipping.select("rect")
            .attr("width", vars.width.viz)
            .attr("height", vars.height.viz)

        // Update Container Groups
        vars.g.container
            .attr("transform", "translate(" + vars.margin.left + "," + vars.margin.top + ")")

    }

    if (vars.dev.value) print.timeEnd("updating SVG elements")

}
},{"../../../core/console/print.js":83}],281:[function(require,module,exports){
var arraySort = require("../../../array/sort.js"),
    createTooltip = require("../../../tooltip/create.js"),
    dataNest = require("../../../core/data/nest.js"),
    fetchData = require("./data.js"),
    fetchColor = require("../../../core/fetch/color.js"),
    fetchText = require("../../../core/fetch/text.js"),
    fetchValue = require("../../../core/fetch/value.js"),
    mergeObject = require("../../../object/merge.js"),
    removeTooltip = require("../../../tooltip/remove.js"),
    segments = require("../shapes/segments.js"),
    scroll = require("../../../client/scroll.js"),
    uniques = require("../../../util/uniques.js"),
    validObject = require("../../../object/validate.js"),
    zoomDirection = require("../zoom/direction.js");
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Creates correctly formatted tooltip for Apps
//-------------------------------------------------------------------
module.exports = function(params) {

    if (!("d3po" in params.data)) {
        params.data.d3po = {}
    }

    var vars = params.vars,
        d = params.data,
        dataDepth = "d3po" in d && "depth" in d.d3po ? d.d3po.depth : vars.depth.value,
        ex = params.ex,
        mouse = params.mouseevents ? params.mouseevents : false,
        arrow = "arrow" in params ? params.arrow : true,
        id = fetchValue(vars, d, vars.id.value),
        tooltip_id = params.id || vars.type.value

    if ((d3.event && d3.event.type == "click") && (vars.tooltip.html.value || vars.tooltip.value.long) && !("fullscreen" in params)) {
        var fullscreen = true,
            arrow = false,
            mouse = true,
            length = "long",
            footer = vars.footer.value

        vars.covered = true
    } else {
        var fullscreen = false,
            align = params.anchor || vars.tooltip.anchor,
            length = params.length || "short",
            zoom = zoomDirection(d, vars)

        if (zoom === -1) {
            var key = vars.id.nesting[dataDepth - 1],
                parent = fetchValue(vars, id, key)
        }

        var text = "";
        if (!(!vars.mouse.click.value || (vars.mouse.viz && vars.mouse.viz.click === false))) {
            if (zoom === 1 && vars.zoom.value) {
                var text = vars.format.value(vars.format.locale.value.ui.expand)
            } else if (zoom === -1 && vars.zoom.value && vars.history.states.length && !vars.tooltip.value.long) {
                var text = vars.format.value(vars.format.locale.value.ui.collapse)
            } else if (!vars.small && length == "short" && (vars.tooltip.html.value || vars.tooltip.value.long) && (vars.focus.value.length !== 1 || vars.focus.value[0] != id)) {
                var text = vars.format.locale.value.ui.moreInfo
            } else if (length == "long") {
                var text = vars.footer.value || ""
            }
        }

        var footer = text.length ? vars.format.value(text, {
            "key": "footer",
            "vars": vars
        }) : false

    }

    if ("x" in params) {
        var x = params.x;
    } else if (vars.types[vars.type.value].tooltip === "static") {
        var x = d.d3po.x;
        if (vars.zoom.translate && vars.zoom.scale) {
            x = vars.zoom.translate[0] + x * vars.zoom.scale;
        }
        x += vars.margin.left;
        if (params.length !== "long") {
            y += scroll.x();
            x += vars.container.value.node().getBoundingClientRect().left;
            x += parseFloat(vars.container.value.style("padding-left"), 10);
        }
    } else {
        var x = d3.mouse(d3.select("html").node())[0];
    }

    if ("y" in params) {
        var y = params.y;
    } else if (vars.types[vars.type.value].tooltip == "static") {
        var y = d.d3po.y;
        if (vars.zoom.translate && vars.zoom.scale) {
            y = vars.zoom.translate[1] + y * vars.zoom.scale;
        }
        y += vars.margin.top;
        if (params.length !== "long") {
            y += scroll.y();
            y += vars.container.value.node().getBoundingClientRect().top;
            y += parseFloat(vars.container.value.style("padding-top"), 10);
        }
    } else {
        var y = d3.mouse(d3.select("html").node())[1];
    }

    if ("offset" in params) {
        var offset = params.offset;
    } else if (vars.types[vars.type.value].tooltip == "static") {
        var offset = d.d3po.r ? d.d3po.r : d.d3po.height / 2;
        if (vars.zoom.scale) {
            offset = offset * vars.zoom.scale;
        }
    } else {
        var offset = 3;
    }

    function make_tooltip(html) {

        var titleDepth = "depth" in params ? params.depth : dataDepth;

        var ex = {},
            children,
            depth = vars.id.nesting[titleDepth + 1] in d ? titleDepth + 1 : titleDepth,
            nestKey = vars.id.nesting[depth],
            nameList = "merged" in d.d3po ? d.d3po.merged : d[nestKey];

        if (!(nameList instanceof Array)) nameList = [nameList];

        var dataValue = fetchValue(vars, d, vars.size.value);

        if (vars.tooltip.children.value) {

            nameList = nameList.slice(0);
            if (nameList.length > 1 && validObject(nameList[0])) nameList = dataNest(vars, nameList, [nestKey]);

            if (vars.size.value && validObject(nameList[0])) {

                var namesNoValues = [];
                var namesWithValues = nameList.filter(function(n) {
                    var val = fetchValue(vars, n, vars.size.value);
                    if (val !== null && (!("d3po" in n) || !n.d3po.merged)) {
                        return true;
                    } else {
                        namesNoValues.push(n);
                    }
                });

                arraySort(namesWithValues, vars.size.value, "desc", [], vars);

                nameList = namesWithValues.concat(namesNoValues);

            }

            var maxChildrenShownInShortMode = vars.tooltip.children.value === true ? 3 : vars.tooltip.children.value;
            var limit = length === "short" ? maxChildrenShownInShortMode : vars.data.large,
                listLength = nameList.length,
                max = d3.min([listLength, limit]),
                objs = [];

            children = {
                "values": []
            };
            for (var i = 0; i < max; i++) {

                if (!nameList.length) break;

                var obj = nameList.shift(),
                    name = fetchText(vars, obj, depth)[0],
                    id = validObject(obj) ? fetchValue(vars, obj, nestKey, depth) : obj;

                if (id !== d[vars.id.nesting[titleDepth]] && name && !children[name]) {

                    var value = validObject(obj) ? fetchValue(vars, obj, vars.size.value, nestKey) : null,
                        color = fetchColor(vars, obj, nestKey);

                    children[name] = value && !(value instanceof Array) ? vars.format.value(value, {
                        "key": vars.size.value,
                        "vars": vars,
                        "data": obj
                    }) : "";
                    var child = {};
                    child[name] = children[name];
                    children.values.push(child);

                    if (color) {
                        if (!children.d3po_colors) children.d3po_colors = {};
                        children.d3po_colors[name] = color;
                    }

                } else {
                    i--;
                }

            }

            if (listLength > max) {
                children.d3poMore = listLength - max;
            }

        }

        if (d.d3po.tooltip) {
            ex = mergeObject(ex, d.d3po.tooltip);
        }

        function getLabel(method) {
            return typeof vars[method].value === "string" ? vars[method].value :
                vars.format.locale.value.method[method];
        }

        if (vars.tooltip.size.value) {
            if (dataValue && typeof vars.size.value !== "number") {
                ex[getLabel("size")] = dataValue;
            }
            if (vars.axes.opposite && vars[vars.axes.opposite].value !== vars.size.value) {
                ex[getLabel(vars.axes.opposite)] = fetchValue(vars, d, vars[vars.axes.opposite].value);
            }
            if (vars.axes.opposite && vars[vars.axes.opposite + "2"].value !== vars.size.value) {
                ex[getLabel(vars.axes.opposite + "2")] = fetchValue(vars, d, vars[vars.axes.opposite + "2"].value);
            }
            if (vars.color.valueScale) {
                ex[getLabel("color")] = fetchValue(vars, d, vars.color.value);
            }
        }

        var active = segments(vars, d, "active"),
            temp = segments(vars, d, "temp"),
            total = segments(vars, d, "total");

        if (typeof active == "number" && active > 0 && total) {
            ex[getLabel("active")] = active + "/" + total + " (" + vars.format.value((active / total) * 100, {
                "key": "share",
                "vars": vars,
                "data": d
            }) + ")";
        }

        if (typeof temp == "number" && temp > 0 && total) {
            ex[getLabel("temp")] = temp + "/" + total + " (" + vars.format.value((temp / total) * 100, {
                "key": "share",
                "vars": vars,
                "data": d
            }) + ")";
        }

        if (vars.tooltip.share.value && d.d3po.share) {
            ex.share = vars.format.value(d.d3po.share * 100, {
                "key": "share",
                "vars": vars,
                "data": d
            });
        }

        var depth = "depth" in params ? params.depth : dataDepth,
            title = params.title || fetchText(vars, d, depth)[0],
            icon = uniques(d, vars.icon.value, fetchValue, vars, vars.id.nesting[depth]),
            tooltip_data = params.titleOnly ? [] : fetchData(vars, d, length, ex, children, depth);

        if (icon.length === 1 && typeof icon[0] === "string") {
            icon = icon[0];
        } else {
            icon = false;
        }

        if ((tooltip_data.length > 0 || footer) || ((!d.d3po_label && length == "short" && title) || (d.d3po_label && (!("visible" in d.d3po_label) || ("visible" in d.d3po_label && d.d3po_label.visible === false))))) {

            if (!title) {
                title = vars.format.value(id, {
                    "key": vars.id.value,
                    "vars": vars
                });
            }

            var depth = "d3po" in d && "merged" in d.d3po ? dataDepth - 1 : "depth" in params ? params.depth : dataDepth;

            if (depth < 0) depth = 0

            depth = vars.id.nesting[depth]

            if (typeof vars.icon.style.value == "string") {
                var icon_style = vars.icon.style.value
            } else if (typeof vars.icon.style.value == "object" && vars.icon.style.value[depth]) {
                var icon_style = vars.icon.style.value[depth]
            } else {
                var icon_style = "default"
            }

            var width = vars.tooltip.small;
            if (params.width) {
                width = params.width;
            } else if (fullscreen) {
                width = vars.tooltip.large;
            }

            var parent = (!fullscreen && params.length !== "long") || (fullscreen && vars.tooltip.fullscreen.value) ? d3.select("body") : vars.container.value;

            if (!params.description && d && vars.tooltip.sub.value) {
                params.description = fetchValue(vars, d, vars.tooltip.sub.value);
            }

            createTooltip({
                "align": align,
                "arrow": arrow,
                "locale": vars.format.locale.value,
                "background": vars.tooltip.background,
                "curtain": vars.tooltip.curtain.color,
                "curtainopacity": vars.tooltip.curtain.opacity,
                "fontcolor": vars.tooltip.font.color,
                "fontfamily": vars.tooltip.font.family.value,
                "fontsize": vars.tooltip.font.size,
                "fontweight": vars.tooltip.font.weight,
                "data": tooltip_data,
                "color": fetchColor(vars, d),
                "allColors": true,
                "footer": params.footer === false ? params.footer : footer,
                "fullscreen": fullscreen,
                "html": html,
                "js": params.js,
                "icon": icon,
                "id": tooltip_id,
                "max_height": params.maxheight,
                "max_width": width,
                "mouseevents": mouse,
                "offset": offset,
                "parent": parent,
                "stacked": vars.tooltip.stacked.value,
                "style": icon_style,
                "title": title,
                "description": params.description,
                "width": !params.width && !fullscreen && tooltip_data.length == 0 ? "auto" : width,
                "x": x,
                "y": y
            })

        } else {
            removeTooltip(tooltip_id)
        }

    }

    if (fullscreen || params.length === "long") {

        if (typeof vars.tooltip.html.value == "string") {
            make_tooltip(vars.tooltip.html.value)
        } else if (typeof vars.tooltip.html.value == "function") {
            make_tooltip(vars.tooltip.html.value(id))
        } else if (vars.tooltip.html.value && typeof vars.tooltip.html.value == "object" && vars.tooltip.html.value.url) {
            var tooltip_url = vars.tooltip.html.value.url;
            if (typeof tooltip_url === "function") tooltip_url = tooltip_url(id);
            d3.json(tooltip_url).then(function(data) {
                var html = vars.tooltip.html.value.callback ? vars.tooltip.html.value.callback(data) : data
                make_tooltip(html)
            })
        } else {
            make_tooltip(params.html)
        }

    } else {
        make_tooltip(params.html)
    }

}
},{"../../../array/sort.js":65,"../../../client/scroll.js":72,"../../../core/data/nest.js":92,"../../../core/fetch/color.js":95,"../../../core/fetch/text.js":98,"../../../core/fetch/value.js":99,"../../../object/merge.js":206,"../../../object/validate.js":207,"../../../tooltip/create.js":236,"../../../tooltip/remove.js":238,"../../../util/uniques.js":245,"../shapes/segments.js":274,"../zoom/direction.js":291,"./data.js":282}],282:[function(require,module,exports){
var copy = require("../../../util/copy.js"),
    fetchValue = require("../../../core/fetch/value.js"),
    fetchColor = require("../../../core/fetch/color.js"),
    fetchText = require("../../../core/fetch/text.js"),
    legible = require("../../../color/legible.js"),
    mergeObject = require("../../../object/merge.js"),
    prefix = require("../../../client/prefix.js"),
    stringFormat = require("../../../string/format.js"),
    validObject = require("../../../object/validate.js");
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Creates a data object for the Tooltip
//------------------------------------------------------------------------------
module.exports = function(vars, id, length, extras, children, depth) {

    if (vars.small) {
        return []
    }

    if (!length) var length = "long"
    if (length == "long") {
        var other_length = "short"
    } else {
        var other_length = "long"
    }

    var extra_data = {}
    if (extras && typeof extras == "string") extras = [extras]
    else if (extras && typeof extras == "object") {
        extra_data = mergeObject(extra_data, extras)
        var extras = []
        for (var k in extra_data) {
            extras.push(k)
        }
    } else if (!extras) var extras = []

    var tooltip_highlights = []

    if (vars.tooltip.value instanceof Array) {
        var a = vars.tooltip.value
    } else if (typeof vars.tooltip.value == "string") {
        var a = [vars.tooltip.value]
    } else {

        if (vars.tooltip.value[vars.id.nesting[depth]]) {
            var a = vars.tooltip.value[vars.id.nesting[depth]]
        } else {
            var a = vars.tooltip.value
        }

        if (!(a instanceof Array)) {

            if (a[length]) {
                a = a[length]
            } else if (a[other_length]) {
                a = []
            } else {
                a = mergeObject({
                    "": []
                }, a)
            }

        }

        if (typeof a == "string") {
            a = [a]
        } else if (!(a instanceof Array)) {
            a = mergeObject({
                "": []
            }, a)
        }

    }

    function format_key(key, group) {

        if (vars.attrs.value[group]) var id_var = group
        else var id_var = null

        if (group) group = vars.format.value(group)

        var value = extra_data[key] || fetchValue(vars, id, key, id_var)

        if (validObject(value)) {
            tooltip_data.push({
                "name": vars.format.value(key),
                "value": vars.format.value(value.value, {
                    "key": value.key,
                    "vars": vars
                }),
                "group": group
            })
        } else if (value != null && value != "undefined" && !(value instanceof Array) && ((typeof value === "string" && value.indexOf("d3po_other") < 0) || !(typeof value === "string"))) {
            var name = vars.format.locale.value.ui[key] ?
                vars.format.value(vars.format.locale.value.ui[key]) :
                vars.format.value(key),
                h = tooltip_highlights.indexOf(key) >= 0

            if (value instanceof Array) {
                value.forEach(function(v) {
                    v = vars.format.value(v, {
                        "key": key,
                        "vars": vars,
                        "data": id
                    })
                })
            } else {
                value = vars.format.value(value, {
                    "key": key,
                    "vars": vars,
                    "data": id
                })
            }

            var obj = {
                "name": name,
                "value": value,
                "highlight": h,
                "group": group
            }

            if (vars.descs.value) {

                if (typeof vars.descs.value === "function") {
                    var descReturn = vars.descs.value(key)
                    if (typeof descReturn === "string") {
                        obj.desc = descReturn
                    }
                } else if (key in vars.descs.value) {
                    obj.desc = vars.descs.value[key]
                }

            }

            tooltip_data.push(obj)

        }

    }

    var tooltip_data = []
    if (a.constructor === Array) a = {
        "": a
    };

    if (vars.id.nesting.length && depth < vars.id.nesting.length - 1) {
        var a = copy(a)
        vars.id.nesting.forEach(function(n, i) {
            if (i > depth && a[n]) delete a[n]
        })
    }

    for (var group in a) {
        if (a[group].constructor !== Array) a[group] = [a[group]]
        for (var i = extras.length; i > 0; i--) {
            if (a[group].indexOf(extras[i - 1]) >= 0) {
                extras.splice(i - 1, 1);
            }
        }
    }

    if (vars.tooltip.value.long && typeof vars.tooltip.value.long == "object") {
        var placed = []

        for (var group in vars.tooltip.value.long) {

            for (var i = extras.length; i > 0; i--) {
                var e = extras[i - 1];
                if (vars.tooltip.value.long[group].indexOf(e) >= 0) {
                    if (!a[group]) a[group] = [];
                    a[group].push(e);
                    extras.splice(i - 1, 1);
                }
            }

        }

    }

    if (extras.length) {
        if (!a[""]) a[""] = []
        a[""] = a[""].concat(extras);
    }

    for (var group in a) {
        a[group].forEach(function(t) {
            format_key(t, group);
        });
    }

    if (children) {

        var title = vars.format.locale.value.ui.including,
            colors = children.d3po_colors

        children.values.forEach(function(child) {
            var name = d3.keys(child)[0];
            tooltip_data.push({
                "group": vars.format.value(title),
                "highlight": colors && colors[name] ? colors[name] : false,
                "name": name,
                "value": child[name]
            })
        });

        if (children.d3poMore) {

            tooltip_data.push({
                "group": vars.format.value(title),
                "highlight": true,
                "name": stringFormat(vars.format.locale.value.ui.more, children.d3poMore),
                "value": ""
            })

        }

    }

    if (vars.tooltip.connections.value && length === "long") {

        var connections = vars.edges.connections(id[vars.id.value], vars.id.value, true)

        if (connections.length) {
            connections.forEach(function(conn) {

                var c = vars.data.viz.filter(function(d) {
                    return d[vars.id.value] === conn[vars.id.value]
                })

                var c = c.length ? c[0] : conn

                var name = fetchText(vars, c)[0],
                    color = fetchColor(vars, c),
                    size = vars.tooltip.font.size,
                    radius = vars.shape.value == "square" ? 0 : size
                styles = [
                    "background-color: " + color,
                    "border-color: " + legible(color),
                    "border-style: solid",
                    "border-width: " + vars.data.stroke.width + "px",
                    "display: inline-block",
                    "height: " + size + "px",
                    "left: 0px",
                    "position: absolute",
                    "width: " + size + "px",
                    "top: 0px",
                    prefix() + "border-radius: " + radius + "px",
                ]
                node = "<div style='" + styles.join("; ") + ";'></div>"

                var nodeClick = function() {
                    vars.self.focus([c[vars.id.value]]).draw()
                }

                tooltip_data.push({
                    "group": vars.format.value(vars.format.locale.value.ui.primary),
                    "highlight": false,
                    "link": nodeClick,
                    "name": "<div id='d3potooltipfocuslink_" + c[vars.id.value] + "' class='d3po_tooltip_focus_link' style='position:relative;padding-left:" + size * 1.5 + "px;'>" + node + name + "</div>"
                })

            })
        }

    }

    return tooltip_data

}
},{"../../../client/prefix.js":70,"../../../color/legible.js":75,"../../../core/fetch/color.js":95,"../../../core/fetch/text.js":98,"../../../core/fetch/value.js":99,"../../../object/merge.js":206,"../../../object/validate.js":207,"../../../string/format.js":208,"../../../util/copy.js":242}],283:[function(require,module,exports){
(function() {
    var print;

    print = require("../../../core/console/print.js");

    module.exports = function(vars) {
        var app, d, dataRequired, drawable, i, len, ref, requirements, returned, visualization;
        vars.group = vars.g.apps[vars.type.value];
        vars.mouse.viz = false;
        vars.edges.path = false;
        visualization = vars.types[vars.type.value];
        requirements = visualization.requirements || [];
        dataRequired = requirements.indexOf("data") >= 0;
        drawable = !dataRequired || (dataRequired && vars.data.viz.length);
        if (!vars.error.internal && drawable) {
            app = vars.format.locale.value.visualization[vars.type.value];
            if (vars.dev.value) {
                print.time("running " + app);
            }
            ref = vars.data.viz;
            for (i = 0, len = ref.length; i < len; i++) {
                d = ref[i];
                if (d.d3po) {
                    delete d.d3po.shape;
                    delete d.d3po.label;
                    delete d.d3po.rotate;
                    delete d.d3po.share;
                }
            }
            returned = visualization(vars);
            if (vars.dev.value) {
                print.timeEnd("running " + app);
            }
        } else {
            returned = null;
        }
        vars.returned = {
            nodes: [],
            edges: null
        };
        if (returned instanceof Array) {
            vars.returned.nodes = returned;
        } else if (returned) {
            if (returned.nodes) {
                vars.returned.nodes = returned.nodes;
            }
            if (returned.edges) {
                vars.returned.edges = returned.edges;
            }
        }
    };

}).call(this);
},{"../../../core/console/print.js":83}],284:[function(require,module,exports){
var copy = require("../../../util/copy.js"),
    form = require("../../../form/form.js"),
    print = require("../../../core/console/print.js"),
    validObject = require("../../../object/validate.js");

//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Draws a UI drawer, if defined.
//------------------------------------------------------------------------------
module.exports = function(vars) {

    var enabled = vars.ui.value && vars.ui.value.length,
        position = vars.ui.position.value;

    if (vars.dev.value && enabled) print.time("drawing custom UI elements");

    var drawer = vars.container.value.selectAll("div#d3po_drawer")
        .data(["d3po_drawer"]);

    drawer.enter().append("div")
        .attr("id", "d3po_drawer");

    var positionStyles = {};
    vars.ui.position.accepted.forEach(function(p) {
        positionStyles[p] = p == position ? vars.margin.bottom + "px" : "auto";
    });

    drawer
        .style("text-align", vars.ui.align.value)
        .style("position", "absolute")
        .style("width", vars.width.value - (vars.ui.padding * 2) + "px")
        .style("height", "auto")
        .style(positionStyles);

    var ui = drawer.selectAll("div.d3po_drawer_ui")
        .data(enabled ? vars.ui.value : [], function(d) {
            return d.method || false;
        });

    ui.exit().remove();

    ui.enter().append("div")
        .attr("class", "d3po_drawer_ui")
        .style("display", "inline-block");

    ui.style("padding", vars.ui.padding + "px")
        .each(function(d) {

            if (!d.form) {

                d.form = form()
                    .container(d3.select(this))
                    .data({
                        "sort": false
                    })
                    .id("id")
                    .text("text");

            }

            var focus, callback;

            if (typeof d.method === "string" && d.method in vars) {
                focus = vars[d.method].value;
                callback = function(value) {
                    if (value !== vars[d.method].value) {
                        vars.self[d.method](value).draw();
                    }
                };
            } else {
                focus = d.focus || d.value[0];
                if (validObject(focus)) focus = focus[d3.keys(focus)[0]];
                if (typeof d.method === "function") {
                    callback = function(value) {
                        if (value !== focus) {
                            focus = value;
                            d.focus = value;
                            d.method(value, vars.self);
                        }
                    };
                }
            }

            var data = [],
                title;

            if (d.label) {
                title = d.label;
            } else if (typeof d.method === "string" && d.method in vars) {
                title = vars.format.locale.value.method[d.method] || d.method;
            }

            d.value.forEach(function(o) {

                var obj = {};

                if (validObject(o)) {
                    obj.id = o[d3.keys(o)[0]];
                    obj.text = vars.format.value(d3.keys(o)[0]);
                } else {
                    obj.id = o;
                    obj.text = vars.format.value(o);
                }

                data.push(obj);

            });

            var font = copy(vars.ui.font);
            font.align = copy(vars.font.align);
            font.secondary = copy(font);

            d.form
                .data(data)
                .font(font)
                .focus(d.value.length > 1 ? focus : false)
                .focus({
                    "callback": callback
                })
                .format(vars.format.locale.language)
                .format({
                    "number": vars.format.number.value,
                    "text": vars.format.text.value
                })
                .title(vars.format.value(title))
                .type(d.type || "auto")
                .ui({
                    "align": vars.ui.align.value,
                    "border": vars.ui.border,
                    "color": {
                        "primary": vars.ui.color.primary.value,
                        "secondary": vars.ui.color.secondary.value
                    },
                    "padding": vars.ui.padding,
                    "margin": 0
                })
                .width(d.width || false)
                .draw();

        });

    var drawerHeight = drawer.node().offsetHeight || drawer.node().getBoundingClientRect().height;

    if (drawerHeight) {
        vars.margin[position] += drawerHeight;
    }

    if (vars.dev.value && enabled) print.timeEnd("drawing custom UI elements");

};
},{"../../../core/console/print.js":83,"../../../form/form.js":138,"../../../object/validate.js":207,"../../../util/copy.js":242}],285:[function(require,module,exports){
// Creates "back" button, if applicable
(function() {
    var events, lighter, print, stylesheet;

    events = require("../../../client/pointer.js");

    lighter = require("../../../color/lighter.js");

    print = require("../../../core/console/print.js");

    stylesheet = require("../../../client/css.js");

    module.exports = function(vars) {
        var button, color, containerPadding, enter, family, left, min_height, padding, size, stripY, style, titleClass, titleGroup, top, weight;
        if (!vars.small && vars.history.value && vars.history.states.length > 0) {
            if (vars.dev.value) {
                print.time("drawing back button");
            }
            button = vars.container.value.selectAll("div#d3po_back_button").data(["d3po_back_button"]).style("position", "relative").style("z-index", 1900);
            size = vars.title.sub.font.size;
            color = vars.title.sub.font.color;
            family = vars.title.sub.font.family.value;
            weight = vars.title.sub.font.weight;
            padding = vars.title.sub.padding;
            titleClass = false;
            if (vars.title.sub.value && ["start", "left"].indexOf(vars.title.sub.font.align) < 0) {
                titleClass = "sub";
            } else if (vars.title.total.value && ["start", "left"].indexOf(vars.title.total.font.align) < 0) {
                titleClass = "total";
            } else if (vars.title.value && ["start", "left"].indexOf(vars.title.font.align) < 0) {
                titleClass = "title";
            }
            if (titleClass) {
                stripY = function(elem) {
                    var y;
                    y = elem.attr("transform").match(/translate\(([^a-z]+)\)/gi)[0];
                    y = y.replace(/([^a-z])\s([^a-z])/gi, "$1,$2");
                    y = y.split(",");
                    y = y[y.length - 1];
                    return parseFloat(y.substring(0, y.length - 1));
                };
                titleGroup = vars.svg.select(".d3po_title." + titleClass);
                top = stripY(titleGroup) + stripY(titleGroup.select("text"));
            } else {
                top = vars.margin.top - vars.title.padding;
                min_height = size + padding * 2;
                vars.margin.top += min_height;
            }
            containerPadding = parseFloat(vars.container.value.style("padding-top"), 10);
            top += containerPadding;
            containerPadding = parseFloat(vars.container.value.style("padding-left"), 10);
            left = vars.margin.left + size / 2 + containerPadding;
            style = function(elem) {
                return elem.style("position", "absolute").style("left", left + "px").style("top", top + "px").style("color", color).style("font-family", family).style("font-weight", weight).style("font-size", size + "px");
            };
            enter = button.enter().append("div").attr("id", "d3po_back_button").style("opacity", 0).call(style).html(function() {
                var arrow;
                if (stylesheet("font-awesome") && vars.icon.back.value.indexOf("fa-") === 0) {
                    arrow = "<i class='fa " + vars.icon.back.value;
                    arrow += "' style='margin-top:2px;margin-right:4px;'></i>";
                } else {
                    arrow = vars.icon.back.value + " ";
                }
                return arrow + vars.format.value(vars.format.locale.value.ui.back);
            });
            button.on(events.over, function() {
                if (!vars.small && vars.history.states.length > 0) {
                    return d3.select(this).style("cursor", "pointer").transition().duration(vars.timing.mouseevents).style("color", lighter(color, .25));
                }
            }).on(events.out, function() {
                if (!vars.small && vars.history.states.length > 0) {
                    return d3.select(this).style("cursor", "auto").transition().duration(vars.timing.mouseevents).style("color", color);
                }
            }).on(events.click, function() {
                return vars.history.back();
            }).transition().duration(vars.draw.timing).style("opacity", 1).call(style);
            if (vars.dev.value) {
                return print.timeEnd("drawing back button");
            }
        } else {
            return vars.container.value.selectAll("div#d3po_back_button").transition().duration(vars.draw.timing).style("opacity", 0).remove();
        }
    };

}).call(this);
},{"../../../client/css.js":67,"../../../client/pointer.js":69,"../../../color/lighter.js":76,"../../../core/console/print.js":83}],286:[function(require,module,exports){
var arraySort = require("../../../array/sort.js"),
    buckets = require("../../../util/buckets.js"),
    copy = require("../../../util/copy.js"),
    createTooltip = require("../tooltip/create.js"),
    dataNest = require("../../../core/data/nest.js"),
    dataURL = require("../../../util/dataurl.js"),
    events = require("../../../client/pointer.js"),
    fetchValue = require("../../../core/fetch/value.js"),
    fetchColor = require("../../../core/fetch/color.js"),
    fetchText = require("../../../core/fetch/text.js"),
    print = require("../../../core/console/print.js"),
    removeTooltip = require("../../../tooltip/remove.js"),
    textColor = require("../../../color/text.js"),
    uniqueValues = require("../../../util/uniques.js"),
    scroll = require("../../../client/scroll.js"),
    stringStrip = require("../../../string/strip.js"),
    textWrap = require("../../../textwrap/textwrap.js"),
    touch = require("../../../client/touch.js"),
    validObject = require("../../../object/validate.js");
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Creates color key
//------------------------------------------------------------------------------
module.exports = function(vars) {

    var key_display = true,
        square_size = 0;

    if (!vars.error.internal && vars.color.value && !vars.small && vars.legend.value) {

        if (!vars.color.valueScale) {

            if (vars.dev.value) print.time("grouping data by colors");

            var data;
            if (vars.nodes.value && vars.types[vars.type.value].requirements.indexOf("nodes") >= 0) {
                data = copy(vars.nodes.restriced || vars.nodes.value);
                if (vars.data.viz.length) {
                    for (var i = 0; i < data.length; i++) {
                        var appData = vars.data.viz.filter(function(a) {
                            return a[vars.id.value] === data[i][vars.id.value];
                        });
                        if (appData.length) {
                            data[i] = appData[0];
                        }
                    }
                }
            } else {
                data = vars.data.viz;
            }

            if (data.length && "key" in data[0] && "values" in data[0]) {
                data = d3.merge(data.map(function(d) {
                    return d.values;
                }));
            }

            var colorFunction = function(d) {
                    return fetchColor(vars, d, colorDepth);
                },
                colorDepth = 0,
                colorKey = vars.id.value;

            var colorIndex = vars.id.nesting.indexOf(vars.color.value);
            if (colorIndex >= 0) {
                colorDepth = colorIndex;
                colorKey = vars.id.nesting[colorIndex];
            } else {

                for (var n = 0; n <= vars.depth.value; n++) {

                    colorDepth = n;
                    colorKey = vars.id.nesting[n];

                    var uniqueIDs = uniqueValues(data, function(d) {
                            return fetchValue(vars, d, colorKey);
                        }),
                        uniqueColors = uniqueValues(data, colorFunction);

                    if (uniqueIDs.length >= uniqueColors.length && uniqueColors.length > 1) {
                        break;
                    }

                }

            }

            var legendNesting = [vars.color.value];
            // if (vars.icon.value && vars.legend.icons.value) legendNesting.push(vars.icon.value);
            var colors = dataNest(vars, data, legendNesting, false);

            if (vars.dev.value) print.timeEnd("grouping data by color")

            var available_width = vars.width.value;

            square_size = vars.legend.size;

            var key_width = square_size * colors.length + vars.ui.padding * (colors.length + 1)

            if (square_size instanceof Array) {

                if (vars.dev.value) print.time("calculating legend size")

                for (var i = square_size[1]; i >= square_size[0]; i--) {
                    key_width = i * colors.length + vars.ui.padding * (colors.length + 1)
                    if (available_width >= key_width) {
                        square_size = i;
                        break;
                    }
                }

                if (vars.dev.value) print.timeEnd("calculating legend size");

            } else if (typeof square_size != "number" && square_size !== false) {
                square_size = 30;
            }

            if (available_width < key_width || colors.length == 1) {
                key_display = false;
            } else {

                key_width -= vars.ui.padding * 2;

                if (vars.dev.value) print.time("sorting legend");

                if (typeof vars.legend.order.value === "function") {
                    colors = vars.legend.order.value(colors)
                } else {
                    var order = vars[vars.legend.order.value].value;

                    var sort_color = vars.color.value;
                    if (!order) {
                        order = vars[vars.color.value].value;
                    } else if (vars.legend.order.value !== "color") {
                        sort_color = [];
                    }

                    arraySort(colors, order, vars.legend.order.sort.value, sort_color, vars, colorDepth);
                }

                if (vars.dev.value) print.timeEnd("sorting legend");

                if (vars.dev.value) print.time("drawing legend");

                var start_x;

                if (vars.legend.align == "start") {
                    start_x = vars.ui.padding;
                } else if (vars.legend.align == "end") {
                    start_x = available_width - vars.ui.padding - key_width;
                } else {
                    start_x = available_width / 2 - key_width / 2;
                }

                vars.g.legend.selectAll("g.d3po_scale")
                    .transition().duration(vars.draw.timing)
                    .attr("opacity", 0)
                    .remove();

                function position(group) {

                    group
                        .attr("transform", function(g, i) {
                            var x = start_x + (i * (vars.ui.padding + square_size))
                            return "translate(" + x + "," + vars.ui.padding + ")"
                        })

                }

                function style(rect) {

                    rect
                        .attr("width", square_size)
                        .attr("height", square_size)
                        .attr("fill", function(g) {

                            d3.select(this.parentNode).select("text").remove();

                            var icon = uniqueValues(g, vars.icon.value, fetchValue, vars, colorKey),
                                color = fetchColor(vars, g, colorKey);

                            if (vars.legend.icons.value && icon.length === 1 &&
                                typeof icon[0] === "string") {
                                icon = icon[0];
                                var short_url = stringStrip(icon + "_" + color),
                                    iconStyle = vars.icon.style.value,
                                    icon_style,
                                    pattern = vars.defs.selectAll("pattern#" + short_url)
                                    .data([short_url]);

                                if (typeof iconStyle === "string") {
                                    icon_style = vars.icon.style.value;
                                } else if (validObject(iconStyle) && iconStyle[colorKey]) {
                                    icon_style = iconStyle[colorKey];
                                } else {
                                    icon_style = "default";
                                }

                                color = icon_style == "knockout" ? color : "none";

                                pattern.select("rect").transition().duration(vars.draw.timing)
                                    .attr("fill", color)
                                    .attr("width", square_size)
                                    .attr("height", square_size);

                                pattern.select("image").transition().duration(vars.draw.timing)
                                    .attr("width", square_size)
                                    .attr("height", square_size);

                                var pattern_enter = pattern.enter().append("pattern")
                                    .attr("id", short_url)
                                    .attr("width", square_size)
                                    .attr("height", square_size);

                                pattern_enter.append("rect")
                                    .attr("fill", color)
                                    .attr("stroke", "none")
                                    .attr("width", square_size)
                                    .attr("height", square_size);

                                pattern_enter.append("image")
                                    .attr("xlink:href", icon)
                                    .attr("width", square_size)
                                    .attr("height", square_size)
                                    .each(function(d) {

                                        if (icon.indexOf("/") === 0 || icon.indexOf(window.location.hostname) >= 0) {
                                            dataURL(icon, function(base64) {
                                                pattern.select("image").attr("xlink:href", base64);
                                            });
                                        } else {
                                            pattern.select("image").attr("xlink:href", icon);
                                        }

                                    });

                                return "url(#" + short_url + ")";
                            } else {

                                if (vars.legend.labels.value) {

                                    var names;
                                    if (vars.legend.text.value) {
                                        names = [fetchValue(vars, g, vars.legend.text.value, colorDepth)];
                                    } else {
                                        names = fetchText(vars, g, colorDepth);
                                    }

                                    if (names.length === 1 && !(names[0] instanceof Array) && names[0].length) {

                                        var text = d3.select(this.parentNode).append("text"),
                                            size = vars.legend.font.size;

                                        if (!(size instanceof Array)) {
                                            size = [size]
                                        }

                                        text
                                            .attr("font-size", size[size.length - 1] + "px")
                                            .attr("font-weight", vars.legend.font.weight)
                                            .attr("font-family", vars.legend.font.family.value)
                                            .attr("stroke", "none")
                                            .attr("fill", textColor(color))
                                            .attr("x", 0)
                                            .attr("y", 0)
                                            .each(function(t) {

                                                textWrap()
                                                    .align("middle")
                                                    .container(d3.select(this))
                                                    .height(square_size)
                                                    .padding(vars.ui.padding)
                                                    .resize(size.length > 1)
                                                    .size(size)
                                                    .text(names[0])
                                                    .width(square_size)
                                                    .valign("middle")
                                                    .draw();

                                            })

                                        if (text.select("tspan").empty()) {
                                            text.remove();
                                        }

                                    }

                                }

                                return color;
                            }

                        });

                }

                var colorInt = {};
                var keys = vars.g.legend.selectAll("g.d3po_color")
                    .data(colors, function(d) {
                        var c = fetchColor(vars, d, colorKey);
                        if (!(c in colorInt)) colorInt[c] = -1;
                        colorInt[c]++;
                        return colorInt[c] + "_" + c;
                    });

                keys.enter().append("g")
                    .attr("class", "d3po_color")
                    .attr("opacity", 0)
                    .call(position)
                    .append("rect")
                    .attr("class", "d3po_color")
                    .attr("stroke", "none")
                    .call(style);

                keys.order()
                    .transition().duration(vars.draw.timing)
                    .call(position)
                    .attr("opacity", 1)
                    .selectAll("rect.d3po_color")
                    .call(style);

                keys.exit()
                    .transition().duration(vars.draw.timing)
                    .attr("opacity", 0)
                    .remove();

                if (vars.legend.tooltip.value) {

                    keys
                        .on(events.over, function(d, i) {

                            d3.select(this).style("cursor", "pointer");

                            var bounds = this.getBoundingClientRect(),
                                x = bounds.left + square_size / 2 + scroll.x(),
                                y = bounds.top + square_size / 2 + scroll.y() + 5;

                            var id = fetchValue(vars, d, colorKey),
                                idIndex = vars.id.nesting.indexOf(colorKey);

                            var title;
                            if (vars.legend.title.value) {
                                title = fetchValue(vars, d, vars.legend.title.value, colorDepth);
                            } else {
                                title = idIndex >= 0 ? fetchText(vars, d, idIndex)[0] :
                                    vars.format.value(fetchValue(vars, d, vars.color.value, colorKey), {
                                        "key": vars.color.value,
                                        "vars": vars,
                                        "data": d
                                    });
                            }

                            var html, js;
                            if (vars.legend.filters.value && !(id instanceof Array)) {
                                html = "<div style='text-align:center;'>";
                                var loc = vars.format.locale.value;
                                html += "<div class='mute'>" + vars.format.value(loc.method.mute) + "</div>";
                                html += "<div class='solo'>" + vars.format.value(loc.method.solo) + "</div>";
                                html += "</div>"
                                js = function(tooltip) {
                                    var style = {
                                        "border": "1px solid #ccc",
                                        "display": "inline-block",
                                        "margin": "1px 2px",
                                        "padding": "3px 5px"
                                    }
                                    tooltip.select(".mute")
                                        .style(style)
                                        .on(events.over, function() {
                                            d3.select(this).style("cursor", "pointer");
                                        })
                                        .on(events.click, function() {
                                            var mute = vars.id.mute.value;
                                            vars.history.states.push(function() {
                                                vars.self.id({
                                                    "mute": mute
                                                }).draw();
                                            })
                                            vars.self.id({
                                                "mute": id
                                            }).draw();
                                        });
                                    tooltip.select(".solo")
                                        .style(style)
                                        .on(events.over, function() {
                                            d3.select(this).style("cursor", "pointer");
                                        })
                                        .on(events.click, function() {
                                            var solo = vars.id.solo.value;
                                            vars.history.states.push(function() {
                                                vars.self.id({
                                                    "solo": solo
                                                }).draw();
                                            })
                                            vars.self.id({
                                                "solo": id
                                            }).draw();
                                        });
                                }
                            }

                            createTooltip({
                                "data": d,
                                "html": html,
                                "js": js,
                                "depth": colorDepth,
                                "footer": false,
                                "vars": vars,
                                "x": x,
                                "y": y,
                                "mouseevents": this,
                                "title": title,
                                "titleOnly": !vars.legend.data.value,
                                "offset": square_size * 0.4
                            });

                        })
                        .on(events.out, function(d) {
                            removeTooltip(vars.type.value);
                        });

                }

                if (vars.dev.value) print.timeEnd("drawing legend");

            }

        } else if (vars.color.valueScale) {

            if (vars.dev.value) print.time("drawing color scale");

            vars.g.legend.selectAll("g.d3po_color")
                .transition().duration(vars.draw.timing)
                .attr("opacity", 0)
                .remove();

            var values = vars.color.valueScale.domain(),
                colors = vars.color.valueScale.range();

            if (values.length <= 2) {
                values = buckets(values, 6);
            }

            var scale = vars.g.legend.selectAll("g.d3po_scale")
                .data(["scale"]);

            scale.enter().append("g")
                .attr("class", "d3po_scale")
                .attr("opacity", 0);

            var heatmapId = vars.container.id + "_legend_heatmap";

            var heatmap = scale.selectAll("#" + heatmapId)
                .data(["heatmap"]);

            heatmap.enter().append("linearGradient")
                .attr("id", heatmapId)
                .attr("x1", "0%")
                .attr("y1", "0%")
                .attr("x2", "100%")
                .attr("y2", "0%")
                .attr("spreadMethod", "pad");

            var stops = heatmap.selectAll("stop")
                .data(d3.range(0, colors.length));

            stops.enter().append("stop")
                .attr("stop-opacity", 1);

            stops
                .attr("offset", function(i) {
                    return Math.round((i / (colors.length - 1)) * 100) + "%";
                })
                .attr("stop-color", function(i) {
                    return colors[i];
                });

            stops.exit().remove();

            var gradient = scale.selectAll("rect#gradient")
                .data(["gradient"]);

            gradient.enter().append("rect")
                .attr("id", "gradient")
                .attr("x", function(d) {
                    if (vars.legend.align == "middle") {
                        return vars.width.value / 2;
                    } else if (vars.legend.align == "end") {
                        return vars.width.value;
                    } else {
                        return 0;
                    }
                })
                .attr("y", vars.ui.padding)
                .attr("width", 0)
                .attr("height", vars.legend.gradient.height)
                .attr("stroke", vars.legend.font.color)
                .attr("stroke-width", 1)
                .style("fill", "url(#" + heatmapId + ")");

            var text = scale.selectAll("text.d3po_tick")
                .data(d3.range(0, values.length));

            text.enter().append("text")
                .attr("class", "d3po_tick")
                .attr("stroke", "none")
                .attr("x", function(d) {
                    if (vars.legend.align == "middle") {
                        return vars.width.value / 2;
                    } else if (vars.legend.align == "end") {
                        return vars.width.value;
                    } else {
                        return 0;
                    }
                })
                .attr("y", function(d) {
                    return this.getBBox().height + vars.legend.gradient.height + vars.ui.padding * 2;
                });

            var label_width = 0;

            text
                .order()
                .attr("font-weight", vars.legend.font.weight)
                .attr("font-family", vars.legend.font.family.value)
                .attr("font-size", vars.legend.font.size + "px")
                .style("text-anchor", vars.legend.font.align)
                .attr("fill", vars.legend.font.color)
                .text(function(d) {
                    return vars.format.value(values[d], {
                        "key": vars.color.value,
                        "vars": vars
                    });
                })
                .attr("y", function(d) {
                    return this.getBBox().height + vars.legend.gradient.height + vars.ui.padding * 2;
                })
                .each(function(d) {
                    var w = Math.ceil(this.getBBox().width);
                    if (w > label_width) label_width = w;
                });

            label_width += vars.labels.padding * 2;

            var key_width = label_width * (values.length - 1);

            if (key_width + label_width < vars.width.value) {

                if (key_width + label_width < vars.width.value / 2) {
                    key_width = vars.width.value / 2;
                    label_width = key_width / values.length;
                    key_width -= label_width;
                }

                var start_x;
                if (vars.legend.align == "start") {
                    start_x = vars.ui.padding;
                } else if (vars.legend.align == "end") {
                    start_x = vars.width.value - vars.ui.padding - key_width;
                } else {
                    start_x = vars.width.value / 2 - key_width / 2;
                }

                text.transition().duration(vars.draw.timing)
                    .attr("x", function(d) {
                        return start_x + (label_width * d);
                    });

                text.exit().transition().duration(vars.draw.timing)
                    .attr("opacity", 0)
                    .remove();

                var ticks = scale.selectAll("rect.d3po_tick")
                    .data(d3.range(0, values.length));

                ticks.enter().append("rect")
                    .attr("class", "d3po_tick")
                    .attr("x", function(d) {
                        if (vars.legend.align == "middle") {
                            return vars.width.value / 2;
                        } else if (vars.legend.align == "end") {
                            return vars.width.value;
                        } else {
                            return 0;
                        }
                    })
                    .attr("y", vars.ui.padding)
                    .attr("width", 0)
                    .attr("height", vars.ui.padding + vars.legend.gradient.height)
                    .attr("fill", vars.legend.font.color);

                ticks.transition().duration(vars.draw.timing)
                    .attr("x", function(d) {
                        var mod = d === 0 ? 1 : 0;
                        return start_x + (label_width * d) - mod;
                    })
                    .attr("y", vars.ui.padding)
                    .attr("width", 1)
                    .attr("height", vars.ui.padding + vars.legend.gradient.height)
                    .attr("fill", vars.legend.font.color);

                ticks.exit().transition().duration(vars.draw.timing)
                    .attr("width", 0)
                    .remove();

                gradient.transition().duration(vars.draw.timing)
                    .attr("x", function(d) {
                        if (vars.legend.align == "middle") {
                            return vars.width.value / 2 - key_width / 2;
                        } else if (vars.legend.align == "end") {
                            return vars.width.value - key_width - vars.ui.padding;
                        } else {
                            return vars.ui.padding;
                        }
                    })
                    .attr("y", vars.ui.padding)
                    .attr("width", key_width)
                    .attr("height", vars.legend.gradient.height);

                scale.transition().duration(vars.draw.timing)
                    .attr("opacity", 1);

                if (vars.dev.value) print.timeEnd("drawing color scale");

            } else {
                key_display = false;
            }

        } else {
            key_display = false;
        }

    } else {
        key_display = false;
    }
    if (vars.legend.value && key && key_display) {

        if (vars.dev.value) print.time("positioning legend");

        if (square_size) {
            var key_height = square_size + vars.ui.padding;
        } else {
            var key_box = vars.g.legend.node().getBBox(),
                key_height = key_box.height + key_box.y;
        }

        if (vars.margin.bottom === 0) {
            vars.margin.bottom += vars.ui.padding;
        }
        vars.margin.bottom += key_height;

        vars.g.legend.transition().duration(vars.draw.timing)
            .attr("transform", "translate(0," + (vars.height.value - vars.margin.bottom) + ")")

        if (vars.dev.value) print.timeEnd("positioning legend")

    } else {

        if (vars.dev.value) print.time("hiding legend")

        vars.g.legend.transition().duration(vars.draw.timing)
            .attr("transform", "translate(0," + vars.height.value + ")")

        if (vars.dev.value) print.timeEnd("hiding legend")

    }

}
},{"../../../array/sort.js":65,"../../../client/pointer.js":69,"../../../client/scroll.js":72,"../../../client/touch.js":74,"../../../color/text.js":81,"../../../core/console/print.js":83,"../../../core/data/nest.js":92,"../../../core/fetch/color.js":95,"../../../core/fetch/text.js":98,"../../../core/fetch/value.js":99,"../../../object/validate.js":207,"../../../string/strip.js":210,"../../../textwrap/textwrap.js":235,"../../../tooltip/remove.js":238,"../../../util/buckets.js":239,"../../../util/copy.js":242,"../../../util/dataurl.js":244,"../../../util/uniques.js":245,"../tooltip/create.js":281}],287:[function(require,module,exports){
var events = require("../../../client/pointer.js"),
    textColor = require("../../../color/text.js");

//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Creates Centered Server Message
//------------------------------------------------------------------------------
module.exports = function(vars, message) {

    message = vars.messages.value ? message : null;

    var size = vars.messages.style.value || (message === vars.error.internal ?
        "large" : vars.messages.style.backup);

    if (size === "large") {
        var font = vars.messages,
            position = "center"
    } else {

        if (vars.footer.value) {
            var font = vars.footer
        } else if (vars.title.value) {
            var font = vars.title
        } else if (vars.title.sub.value) {
            var font = vars.title.sub
        } else if (vars.title.total.value) {
            var font = vars.title.total
        } else {
            var font = vars.title.sub
        }

        var position = font.position

    }

    var font = {
        "color": font.font.color,
        "font-family": font.font.family.value,
        "font-weight": font.font.weight,
        "font-size": font.font.size + "px",
        "padding": font.padding + "px"
    }

    var bg = vars.messages.background.value;
    if (!bg) {
        bg = vars.background.value;
        if (bg === "none" || bg === "transparent") {
            bg = textColor(font.color);
        }
    }

    function style(elem) {

        elem
            .style(font)
            .style("position", "absolute")
            .style("background-color", bg)
            .style("text-align", "center")
            .style("left", function() {
                return position == "center" ? "50%" : "0px"
            })
            .style("width", function() {
                return position == "center" ? "auto" : vars.width.value + "px"
            })
            .style("margin-left", function() {
                return position == "center" ? -(this.offsetWidth / 2) + "px" : "0px";
            })
            .style("top", function() {
                if (position == "center") {
                    return "50%";
                } else if (position == "top") {
                    return "0px"
                } else {
                    return "auto"
                }
            })
            .style("bottom", function() {
                if (position == "bottom") {
                    return "0px"
                } else {
                    return "auto"
                }
            })
            .style("margin-top", function() {
                if (size == "large") {
                    var height = this.offsetHeight || this.getBoundingClientRect().height
                    return -height / 2 + "px"
                }
                return "0px"
            })

    }

    // Enter Message Group
    vars.g.message = vars.container.value.selectAll("div#d3po_message")
        .data(["message"])

    var enter = vars.g.message.enter().append("div")
        .attr("id", "d3po_message")
        .attr("opacity", 0);

    enter.append("div")
        .attr("class", "d3po_message_text")
        .style("display", "block");

    vars.g.message.select(".d3po_message_text")
        .text(message ? message : vars.g.message.text())

    var online = navigator.onLine,
        square = 75;

    vars.g.message
        .style("display", message ? "inline-block" : "none")
        .call(style).style("opacity", message ? 1 : 0)

}
},{"../../../client/pointer.js":69,"../../../color/text.js":81}],288:[function(require,module,exports){
(function() {
    var closest, css, events, fontSizes, mix, playInterval, prefix, print, textColor, timeDetect;

    closest = require("../../../util/closest.js");

    css = require("../../../client/css.js");

    fontSizes = require("../../../font/sizes.js");

    events = require("../../../client/pointer.js");

    mix = require("../../../color/mix.js");

    prefix = require("../../../client/prefix.js");

    print = require("../../../core/console/print.js");

    textColor = require("../../../color/text.js");

    timeDetect = require("../../../core/data/time.js");

    playInterval = false;

    module.exports = function(vars) {
        var availableWidth, background, brush, brushExtent, brush_group, brushed, brushend, d, end, handles, i, init, j, labelWidth, labels, len, max_index, min, min_index, oldWidth, playButton, playIcon, playIconChar, playIconStyle, playStyle, playUpdate, playbackWidth, setYears, start, start_x, step, stopPlayback, tallEnough, text, textFill, textStyle, tickColor, tickStep, ticks, timeFormat, timeReturn, timelineBox, timelineHeight, timelineOffset, timelineWidth, visible, x, yearHeight, yearMS, year_ticks, years;
        if (vars.timeline.value && (!vars.error.internal || !vars.data.missing) && !vars.small && vars.data.time && vars.data.time.values.length > 1) {
            if (vars.dev.value) {
                print.time("drawing timeline");
            }
            textStyle = {
                "font-weight": vars.ui.font.weight,
                "font-family": vars.ui.font.family.value,
                "font-size": vars.ui.font.size + "px",
                "text-anchor": "middle"
            };
            years = vars.data.time.ticks.map(function(d) {
                return new Date(d);
            });
            timeReturn = timeDetect(vars, {
                values: years,
                style: textStyle
            });
            visible = timeReturn.values.map(Number);
            timeFormat = timeReturn.format;
            if (vars.time.solo.value.length) {
                init = d3.extent(vars.time.solo.value);
                for (i = j = 0, len = init.length; j < len; i = ++j) {
                    d = init[i];
                    if (d.constructor !== Date) {
                        d += "";
                        if (d.length === 4 && parseInt(d) + "" === d) {
                            d += "/01/01";
                        }
                        d = new Date(d);
                        init[i] = d;
                    }
                }
            } else {
                init = d3.extent(years);
            }
            year_ticks = years.slice();
            yearHeight = d3.max(timeReturn.sizes.map(function(t) {
                return t.height;
            }));
            labelWidth = ~~(d3.max(timeReturn.sizes.map(function(t) {
                return t.width;
            }))) + 1;
            labelWidth += vars.ui.padding * 2;
            timelineHeight = vars.timeline.height.value || yearHeight + vars.ui.padding * 2;
            timelineWidth = labelWidth * years.length;
            playbackWidth = timelineHeight;
            tallEnough = timelineHeight - vars.ui.padding * 2 >= yearHeight;
            availableWidth = vars.width.value - vars.ui.padding * 2;
            if (tallEnough && vars.timeline.play.value) {
                availableWidth -= playbackWidth + vars.ui.padding;
            }
            if (!tallEnough || visible.length < years.length || availableWidth < labelWidth * visible.length) {
                oldWidth = labelWidth;
                labelWidth = (availableWidth - labelWidth) / years.length;
                timelineWidth = labelWidth * years.length;
                timelineOffset = 1;
                tickStep = ~~(oldWidth / (timelineWidth / visible.length)) + 1;
                while (tickStep < visible.length - 1) {
                    if ((visible.length - 1) % tickStep === 0) {
                        break;
                    }
                    tickStep++;
                }
                visible = visible.filter(function(t, i) {
                    return i % tickStep === 0;
                });
            } else {
                timelineOffset = 0;
                min = new Date(years[0]);
                step = vars.data.time.stepType;
                min["set" + step](min["get" + step]() + years.length);
                year_ticks.push(min);
            }
            start = new Date(init[0]);
            start = closest(year_ticks, start);
            end = new Date(init[1]);
            if (!timelineOffset) {
                end["set" + vars.data.time.stepType](end["get" + vars.data.time.stepType]() + 1);
            }
            end = closest(year_ticks, end);
            yearMS = year_ticks.map(Number);
            min_index = yearMS.indexOf(+start);
            max_index = yearMS.indexOf(+end);
            brushExtent = [start, end];
            if (vars.timeline.align === "start") {
                start_x = vars.ui.padding;
            } else if (vars.timeline.align === "end") {
                start_x = vars.width.value - vars.ui.padding - timelineWidth;
            } else {
                start_x = vars.width.value / 2 - timelineWidth / 2;
            }
            if (tallEnough && vars.timeline.play.value) {
                start_x += (playbackWidth + vars.ui.padding) / 2;
            }
            stopPlayback = function() {
                clearInterval(playInterval);
                playInterval = false;
                return playIcon.call(playIconChar, "icon");
            };
            brushed = function() {
                var extent, max_val, min_val;
                if (d3.event.sourceEvent !== null) {
                    if (playInterval) {
                        stopPlayback();
                    }
                    brushExtent = brush.extent();
                    min_val = closest(year_ticks, brushExtent[0]);
                    max_val = closest(year_ticks, brushExtent[1]);
                    if (min_val === max_val) {
                        min_index = yearMS.indexOf(+min_val);
                        if (min_val < brushExtent[0] || min_index === 0) {
                            max_val = year_ticks[min_index + 1];
                        } else {
                            min_val = year_ticks[min_index - 1];
                        }
                    }
                    min_index = yearMS.indexOf(+min_val);
                    max_index = yearMS.indexOf(+max_val);
                    if (max_index - min_index >= 1) {
                        extent = [min_val, max_val];
                    } else if (min_index + 1 <= years.length) {
                        extent = [min_val, year_ticks[min_index + 1]];
                    } else {
                        extent = [min_val];
                        i = 1;
                        while (i <= 1) {
                            if (min_index + i <= years.length) {
                                extent.push(year_ticks[min_index + i]);
                            } else {
                                extent.unshift(year_ticks[min_index - ((min_index + i) - years.length)]);
                            }
                            i++;
                        }
                        extent = [extent[0], extent[extent.length - 1]];
                    }
                    brushExtent = extent;
                    text.attr("fill", textFill);
                    return d3.select(this).call(brush.extent(extent));
                }
            };
            setYears = function() {
                var newYears;
                if (max_index - min_index === years.length - timelineOffset) {
                    newYears = [];
                } else {
                    newYears = yearMS.filter(function(t, i) {
                        return i >= min_index && i < (max_index + timelineOffset);
                    });
                    newYears = newYears.map(function(t) {
                        return new Date(t);
                    });
                }
                playUpdate();
                return vars.self.time({
                    "solo": newYears
                }).draw();
            };
            brushend = function() {
                var change, old_max, old_min, solo;
                if (d3.event.sourceEvent !== null) {
                    if (vars.time.solo.value.length) {
                        solo = d3.extent(vars.time.solo.value);
                        old_min = yearMS.indexOf(+closest(year_ticks, solo[0]));
                        old_max = yearMS.indexOf(+closest(year_ticks, solo[1]));
                        change = old_min !== min_index || old_max !== max_index;
                    } else {
                        change = max_index - min_index !== years.length - timelineOffset;
                    }
                    if (change) {
                        return setYears();
                    }
                }
            };
            playButton = vars.g.timeline.selectAll("rect.d3po_timeline_play").data(tallEnough && vars.timeline.play.value ? [0] : []);
            playStyle = function(btn) {
                return btn.attr("width", playbackWidth + 1).attr("height", timelineHeight + 1).attr("fill", vars.ui.color.primary.value).attr("stroke", vars.ui.color.primary.value).attr("stroke-width", 1).attr("x", start_x - playbackWidth - 1 - vars.ui.padding).attr("y", vars.ui.padding);
            };
            playButton.enter().append("rect").attr("class", "d3po_timeline_play").attr("shape-rendering", "crispEdges").attr("opacity", 0).call(playStyle);
            playButton.transition().duration(vars.draw.timing).call(playStyle);
            playButton.exit().transition().duration(vars.draw.timing).attr("opacity", 0).remove();
            playIcon = vars.g.timeline.selectAll("text.d3po_timeline_playIcon").data(tallEnough && vars.timeline.play.value ? [0] : []);
            playIconChar = function(text, char) {
                var font;
                char = vars.timeline.play[char];
                if (css("font-awesome")) {
                    char = char.awesome;
                    font = "FontAwesome";
                } else {
                    char = char.fallback;
                    font = "inherit";
                }
                return text.style("font-family", font).text(char);
            };
            playIconStyle = function(text) {
                var y;
                y = timelineHeight / 2 + vars.ui.padding + 1;
                return text.attr("fill", textColor(vars.ui.color.primary.value)).attr("stroke", "none").attr(textStyle).attr("x", start_x - (playbackWidth - 1) / 2 - vars.ui.padding).attr("y", y).attr("dy", "0.5ex").call(playIconChar, playInterval ? "pause" : "icon");
            };
            playIcon.enter().append("text").attr("class", "d3po_timeline_playIcon").call(playIconStyle).style("pointer-events", "none").attr("opacity", 0);
            playIcon.call(playIconStyle).transition().duration(vars.draw.timing).attr("opacity", 1);
            playIcon.exit().transition().duration(vars.draw.timing).attr("opacity", 0).remove();
            playUpdate = function() {
                if (max_index - min_index === years.length - timelineOffset) {
                    playButton.on(events.hover, null).on(events.click, null).transition().duration(vars.draw.timing).attr("opacity", 0.3);
                    return playIcon.transition().duration(vars.draw.timing).attr("opacity", 0.3);
                } else {
                    playButton.on(events.over, function() {
                        return d3.select(this).style("cursor", "pointer");
                    }).on(events.out, function() {
                        return d3.select(this).style("cursor", "auto");
                    }).on(events.click, function() {
                        if (playInterval) {
                            return stopPlayback();
                        } else {
                            playIcon.call(playIconChar, "pause");
                            if (max_index === years.length) {
                                max_index = max_index - min_index;
                                min_index = 0;
                            } else {
                                min_index++;
                                max_index++;
                            }
                            setYears();
                            return playInterval = setInterval(function() {
                                if (max_index === years.length - timelineOffset) {
                                    return stopPlayback();
                                } else {
                                    min_index++;
                                    max_index++;
                                    return setYears();
                                }
                            }, vars.timeline.play.timing.value);
                        }
                    }).transition().duration(vars.draw.timing).attr("opacity", 1);
                    return playIcon.transition().duration(vars.draw.timing).attr("opacity", 1);
                }
            };
            playUpdate();
            textFill = function(d) {
                var color, less, opacity;
                less = timelineOffset ? d <= brushExtent[1] : d < brushExtent[1];
                if (d >= brushExtent[0] && less) {
                    opacity = 1;
                    color = textColor(vars.ui.color.secondary.value);
                } else {
                    opacity = 0.5;
                    color = textColor(vars.ui.color.primary.value);
                }
                if (timelineOffset && vars.background.value && vars.background.value !== "none") {
                    color = d3.rgb(textColor(vars.background.value));
                }
                color = d3.rgb(color);
                return "rgba(" + color.r + "," + color.g + "," + color.b + "," + opacity + ")";
            };
            background = vars.g.timeline.selectAll("rect.d3po_timeline_background").data(["background"]);
            background.enter().append("rect").attr("class", "d3po_timeline_background").attr("shape-rendering", "crispEdges").attr("width", timelineWidth + 2).attr("height", timelineHeight + 2).attr("fill", vars.ui.color.primary.value).attr("x", start_x - 1).attr("y", vars.ui.padding);
            background.transition().duration(vars.draw.timing).attr("width", timelineWidth + 2).attr("height", timelineHeight + 2).attr("fill", vars.ui.color.primary.value).attr("x", start_x - 1).attr("y", vars.ui.padding);
            ticks = vars.g.timeline.selectAll("g#ticks").data(["ticks"]);
            ticks.enter().append("g").attr("id", "ticks").attr("transform", "translate(" + vars.width.value / 2 + "," + vars.ui.padding + ")");
            brush_group = vars.g.timeline.selectAll("g#brush").data(["brush"]);
            brush_group.enter().append("g").attr("id", "brush");
            labels = vars.g.timeline.selectAll("g#labels").data(["labels"]);
            labels.enter().append("g").attr("id", "labels");
            text = labels.selectAll("text").data(years, function(d, i) {
                return i;
            });
            text.enter().append("text").attr("stroke", "none").attr("y", 0).attr("dy", "0.5ex").attr("x", 0);
            x = d3.scaleTime().domain(d3.extent(year_ticks)).rangeRound([0, timelineWidth]);
            text.order().attr(textStyle).text(function(d, i) {
                if (visible.indexOf(+d) >= 0) {
                    return timeFormat(d);
                } else {
                    return "";
                }
            }).attr("opacity", function(d, i) {
                if (vars.data.time.dataSteps.indexOf(i) >= 0) {
                    return 1;
                } else {
                    return 0.4;
                }
            }).attr("fill", textFill).attr("transform", function(d, i) {
                var dx, dy;
                dx = start_x + x(d);
                if (!timelineOffset) {
                    dx += labelWidth / 2;
                }
                dy = timelineHeight / 2 + vars.ui.padding + 1;
                if (timelineOffset) {
                    dy += timelineHeight / 2 + yearHeight;
                }
                return "translate(" + Math.round(dx) + "," + Math.round(dy) + ")";
            });
            text.exit().transition().duration(vars.draw.timing).attr("opacity", 0).remove();
            brush = d3.svg.brush().x(x).extent(brushExtent).on("brush", brushed).on("brushend", brushend);
            if (vars.axes.discrete && vars[vars.axes.discrete].value === vars.time.value) {
                tickColor = vars[vars.axes.discrete].ticks.color;
            } else {
                tickColor = vars.x.ticks.color;
            }
            ticks.attr("transform", "translate(" + start_x + "," + (vars.ui.padding + 1) + ")").transition().duration(vars.draw.timing).call(d3.axisTop().scale(x).ticks(function() {
                return year_ticks;
            }).tickFormat("").tickSize(-timelineHeight).tickPadding(0)).selectAll("line").attr("stroke-width", 1).attr("shape-rendering", "crispEdges").attr("stroke", function(d) {
                if (visible.indexOf(+d) >= 0) {
                    return tickColor;
                } else {
                    return mix(tickColor, vars.background.value, 0.4, 1);
                }
            });
            ticks.selectAll("path").attr("fill", "none");
            brush_group.attr("transform", "translate(" + start_x + "," + (vars.ui.padding + 1) + ")").attr("opacity", 1).call(brush);
            text.attr("pointer-events", "none");
            brush_group.selectAll("rect.background").attr("fill", "none").style("visibility", "visible").attr("height", timelineHeight).attr("shape-rendering", "crispEdges").on(events.move, function() {
                var c;
                c = vars.timeline.hover.value;
                if (["grab", "grabbing"].indexOf(c) >= 0) {
                    c = prefix() + c;
                }
                return d3.select(this).style("cursor", c);
            });
            brush_group.selectAll("rect.extent").attr("opacity", 0.75).attr("height", timelineHeight).attr("fill", vars.ui.color.secondary.value).attr("shape-rendering", "crispEdges").on(events.move, function() {
                var c;
                c = vars.timeline.hover.value;
                if (["grab", "grabbing"].indexOf(c) >= 0) {
                    c = prefix() + c;
                }
                return d3.select(this).style("cursor", c);
            });
            if (vars.timeline.handles.value) {
                handles = brush_group.selectAll("g.resize").selectAll("rect.d3po_handle").data(["d3po_handle"]);
                handles.enter().insert("rect", "rect").attr("class", "d3po_handle");
                handles.attr("fill", vars.timeline.handles.color).attr("transform", function(d) {
                    var mod;
                    if (this.parentNode.className.baseVal === "resize e") {
                        mod = -vars.timeline.handles.size;
                    } else {
                        mod = 0;
                    }
                    return "translate(" + mod + ",0)";
                }).attr("width", vars.timeline.handles.size).style("visibility", "visible").attr("shape-rendering", "crispEdges").attr("opacity", vars.timeline.handles.opacity);
                brush_group.selectAll("g.resize").selectAll("rect").attr("height", timelineHeight);
            } else {
                brush_group.selectAll("g.resize").remove();
            }
            timelineBox = vars.g.timeline.node().getBBox();
            if (vars.margin.bottom === 0) {
                vars.margin.bottom += vars.ui.padding;
            }
            vars.margin.bottom += timelineBox.height + timelineBox.y;
            vars.g.timeline.transition().duration(vars.draw.timing).attr("transform", "translate(0," + Math.round(vars.height.value - vars.margin.bottom - vars.ui.padding / 2) + ")");
            vars.margin.bottom += vars.ui.padding;
            if (vars.dev.value) {
                return print.time("drawing timeline");
            }
        } else {
            return vars.g.timeline.transition().duration(vars.draw.timing).attr("transform", "translate(0," + vars.height.value + ")");
        }
    };

}).call(this);
},{"../../../client/css.js":67,"../../../client/pointer.js":69,"../../../client/prefix.js":70,"../../../color/mix.js":77,"../../../color/text.js":81,"../../../core/console/print.js":83,"../../../core/data/time.js":94,"../../../font/sizes.js":136,"../../../util/closest.js":241}],289:[function(require,module,exports){
var aggs = require("../d3functions/aggs.js"),
    events = require("../../../client/pointer.js"),
    fetchValue = require("../../../core/fetch/value.js"),
    print = require("../../../core/console/print.js"),
    rtl = require("../../../client/rtl.js"),
    textWrap = require("../../../textwrap/textwrap.js")
    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Draws appropriate titles
    //------------------------------------------------------------------------------
module.exports = function(vars) {

    var total_key = vars.size.value ? vars.size.value :
        vars.color.type === "number" ? vars.color.value : false

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // If there is no data or the title bar is not needed,
    // set the total value to 'null'
    //----------------------------------------------------------------------------
    if (!vars.data.viz || !vars.title.total.value || vars.small) {
        var total = false
    }
    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Otherwise, let's calculate it!
    //----------------------------------------------------------------------------
    else if (total_key) {

        if (vars.dev.value) {
            print.time("calculating total value")
        }

        var total_data = vars.data.pool;
        if (vars.focus.value.length) {
            total_data = vars.data.viz.filter(function(d) {
                return d[vars.id.value] == vars.focus.value[0];
            });
        }

        var agg = vars.aggs.value[total_key] || "sum";
        var total;
        if (agg.constructor === Function) {
            total = agg(total_data);
        } else {

            total_data = total_data.reduce(function(arr, d) {
                var vals = fetchValue(vars, d, total_key);
                if (vals instanceof Array) arr = arr.concat(vals);
                else arr.push(vals);
                return arr;
            }, []);

            total = aggs.fromString(agg)(total_data);
        }

        if (total === 0 || total === null || total === undefined) {
            total = false
        }

        if (typeof total === "number") {

            var pct = ""

            if (vars.data.mute.length || vars.data.solo.length || vars.focus.value.length) {

                var overall_total = d3.sum(vars.data.value, function(d) {
                    if (vars.time.solo.value.length > 0) {
                        var match = vars.time.solo.value.indexOf(fetchValue(vars, d, vars.time.value)) >= 0
                    } else if (vars.time.mute.value.length > 0) {
                        var match = vars.time.solo.value.indexOf(fetchValue(vars, d, vars.time.value)) < 0
                    } else {
                        var match = true
                    }
                    if (match) {
                        return fetchValue(vars, d, total_key)
                    }
                })

                if (overall_total > total) {

                    var pct = (total / overall_total) * 100,
                        ot = vars.format.value(overall_total, {
                            "key": vars.size.value,
                            "vars": vars
                        });

                    pct = " (" + vars.format.value(pct, {
                        "key": "share",
                        "vars": vars
                    }) + " " + vars.format.locale.value.dev.of + " " + ot + ")";

                }
            }

            total = vars.format.value(total, {
                "key": vars.size.value,
                "vars": vars
            })
            var obj = vars.title.total.value,
                prefix = obj.prefix || vars.format.value(vars.format.locale.value.ui.total) + ": "
            total = prefix + total
            obj.suffix ? total = total + obj.suffix : null
            total += pct

        }

        if (vars.dev.value) {
            print.timeEnd("calculating total value")
        }

    } else {
        var total = false
    }


    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Initialize titles and detect footer
    //----------------------------------------------------------------------------
    var title_data = []

    if (vars.footer.value) {
        title_data.push({
            "link": vars.footer.link,
            "style": vars.footer,
            "type": "footer",
            "value": vars.footer.value
        })
    }

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // If not in "small" mode, detect titles available
    //----------------------------------------------------------------------------
    if (!vars.small) {

        if (vars.title.value) {
            var title = vars.title.value;
            if (typeof title === "function") title = title(vars.self);
            title_data.push({
                "link": vars.title.link,
                "style": vars.title,
                "type": "title",
                "value": title
            })
        }
        if (vars.title.sub.value) {
            var title = vars.title.sub.value;
            if (typeof title === "function") title = title(vars.self);
            title_data.push({
                "link": vars.title.sub.link,
                "style": vars.title.sub,
                "type": "sub",
                "value": title
            })
        }
        if (vars.title.total.value && total) {
            title_data.push({
                "link": vars.title.total.link,
                "style": vars.title.total,
                "type": "total",
                "value": total
            })
        }

    }

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Enter Titles
    //----------------------------------------------------------------------------
    function style(title) {

        title
            .attr("font-size", function(t) {
                return t.style.font.size
            })
            .attr("fill", function(t) {
                return t.link ? vars.links.font.color : t.style.font.color
            })
            .attr("font-family", function(t) {
                return t.link ? vars.links.font.family.value : t.style.font.family.value
            })
            .attr("font-weight", function(t) {
                return t.link ? vars.links.font.weight : t.style.font.weight
            })
            .style("text-decoration", function(t) {
                return t.link ? vars.links.font.decoration.value : t.style.font.decoration.value
            })
            .style("text-transform", function(t) {
                return t.link ? vars.links.font.transform.value : t.style.font.transform.value
            })

    }

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Enter Titles
    //----------------------------------------------------------------------------
    if (vars.dev.value) print.time("drawing titles")
    var titles = vars.svg.selectAll("g.d3po_title")
        .data(title_data, function(t) {
            return t.type
        })

    var titleWidth = vars.title.width || vars.width.value - vars.margin.left - vars.margin.right;

    titles.enter().append("g")
        .attr("class", function(t) {
            return "d3po_title " + t.type;
        })
        .attr("opacity", 0)
        .append("text")
        .attr("stroke", "none")
        .call(style)

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Wrap text and calculate positions, then transition style and opacity
    //----------------------------------------------------------------------------
    function getAlign(d) {
        var align = d.style.font.align;
        if (align == "center") {
            return "middle";
        } else if ((align == "left" && !rtl) || (align == "right" && rtl)) {
            return "start";
        } else if ((align == "left" && rtl) || (align == "right" && !rtl)) {
            return "end";
        }
        return align;
    }
    titles
        .each(function(d) {

            var container = d3.select(this).select("text").call(style);

            var align = getAlign(d);

            textWrap()
                .align(align)
                .container(container)
                .height(vars.height.value / 2)
                .size(false)
                .text(d.value)
                .width(titleWidth)
                .draw()

            d.y = vars.margin[d.style.position]
            vars.margin[d.style.position] += this.getBBox().height + d.style.padding * 2

        })
        .on(events.over, function(t) {
            if (t.link) {
                d3.select(this)
                    .transition().duration(vars.timing.mouseevents)
                    .style("cursor", "pointer")
                    .select("text")
                    .attr("fill", vars.links.hover.color)
                    .attr("font-family", vars.links.hover.family.value)
                    .attr("font-weight", vars.links.hover.weight)
                    .style("text-decoration", vars.links.hover.decoration.value)
                    .style("text-transform", vars.links.hover.transform.value)
            }
        })
        .on(events.out, function(t) {
            if (t.link) {
                d3.select(this)
                    .transition().duration(vars.timing.mouseevents)
                    .style("cursor", "auto")
                    .select("text")
                    .call(style)
            }
        })
        .on(events.click, function(t) {
            if (t.link) {
                var target = t.link.charAt(0) != "/" ? "_blank" : "_self"
                window.open(t.link, target)
            }
        })
        .attr("opacity", 1)
        .attr("transform", function(t) {
            var pos = t.style.position,
                y = pos == "top" ? 0 + t.y : vars.height.value - t.y
            if (pos == "bottom") {
                y -= this.getBBox().height + t.style.padding
            } else {
                y += t.style.padding
            }
            var align = getAlign(t);
            if (align === "start") {
                var x = vars.margin.left + vars.title.padding;
            } else {
                var w = d3.select(this).select("text").node().getBBox().width;
                if (align === "middle") {
                    x = vars.width.value / 2 - titleWidth / 2;
                } else {
                    x = vars.width.value - titleWidth - vars.margin.right - vars.title.padding;
                }
            }
            return "translate(" + x + "," + y + ")";
        })

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Exit unused titles
    //----------------------------------------------------------------------------
    titles.exit().transition().duration(vars.draw.timing)
        .attr("opacity", 0)
        .remove()

    if (vars.margin.top > 0) {
        vars.margin.top += vars.title.padding
    }

    if (vars.margin.bottom > 0) {
        vars.margin.bottom += vars.title.padding
    }

    var min = vars.title.height
    if (min && vars.margin[vars.title.position] < min) {
        vars.margin[vars.title.position] = min
    }

    if (vars.dev.value) print.timeEnd("drawing titles")

}
},{"../../../client/pointer.js":69,"../../../client/rtl.js":71,"../../../core/console/print.js":83,"../../../core/fetch/value.js":99,"../../../textwrap/textwrap.js":235,"../d3functions/aggs.js":247}],290:[function(require,module,exports){
(function() {
    var labels, transform;

    labels = require("./labels.js");

    transform = require("./transform.js");

    module.exports = function(vars, b, timing) {
        var aspect, extent, fit, max_scale, min, padding, scale, translate, type;
        if (!b) {
            b = vars.zoom.bounds;
        }
        if (typeof timing !== "number") {
            timing = vars.timing.transitions;
        }
        vars.zoom.size = {
            height: b[1][1] - b[0][1],
            width: b[1][0] - b[0][0]
        };
        type = vars.types[vars.type.value];
        fit = vars.coords.fit.value;
        if (fit === "auto" || type.requirements.indexOf("coords") < 0) {
            aspect = d3.max([vars.zoom.size.width / vars.width.viz, vars.zoom.size.height / vars.height.viz]);
        } else {
            aspect = vars.zoom.size[fit] / vars["app_" + fit];
        }
        min = d3.min([vars.width.viz, vars.height.viz]);
        padding = type.zoom ? vars.coords.padding * 2 : 0;
        scale = ((min - padding) / min) / aspect;
        extent = vars.zoom.behavior.scaleExtent();
        if (extent[0] === extent[1] || b === vars.zoom.bounds) {
            vars.zoom.behavior.scaleExtent([scale, scale * 16]);
        }
        max_scale = vars.zoom.behavior.scaleExtent()[1];
        if (scale > max_scale) {
            scale = max_scale;
        }
        vars.zoom.scale = scale;
        translate = [vars.width.viz / 2 - (vars.zoom.size.width * scale) / 2 - (b[0][0] * scale), vars.height.viz / 2 - (vars.zoom.size.height * scale) / 2 - (b[0][1] * scale)];
        vars.zoom.translate = translate;
        vars.zoom.behavior.translate(translate).scale(scale);
        vars.zoom.size = {
            height: vars.zoom.bounds[1][1] - vars.zoom.bounds[0][1],
            width: vars.zoom.bounds[1][0] - vars.zoom.bounds[0][0]
        };
        vars.zoom.reset = false;
        if (vars.labels.value || vars.labels.changed) {
            labels(vars);
        }
        return transform(vars, timing);
    };

}).call(this);
},{"./labels.js":292,"./transform.js":295}],291:[function(require,module,exports){
(function() {
    module.exports = function(data, vars) {
        var depth, max_depth, nextDepth;
        max_depth = vars.id.nesting.length - 1;
        depth = vars.depth.value;
        nextDepth = vars.id.nesting[depth + 1];
        if (vars.types[vars.type.value].nesting === false) {
            return 0;
        } else if ((data.d3po.merged || (nextDepth in data && depth < max_depth)) && (!data || nextDepth in data)) {
            return 1;
        } else if (((depth === max_depth && depth > 0) || (data && nextDepth && (!(nextDepth in data)))) && (vars.small || !vars.tooltip.html.value)) {
            return -1;
        } else {
            return 0;
        }
    };

}).call(this);
},{}],292:[function(require,module,exports){
(function() {
    var print;

    print = require("../../../core/console/print.js");

    module.exports = function(vars) {
        var opacity, scale;
        if (vars.dev.value) {
            print.time("determining label visibility");
        }
        scale = vars.zoom.behavior.scaleExtent();
        opacity = function(text) {
            return text.attr("opacity", function(d) {
                var size;
                if (!d) {
                    d = {};
                }
                size = parseFloat(d3.select(this).attr("font-size"), 10);
                d.visible = size * (vars.zoom.scale / scale[1]) >= 2;
                if (d.visible) {
                    return 1;
                } else {
                    return 0;
                }
            });
        };
        if (vars.draw.timing) {
            vars.g.viz.selectAll("text.d3po_label").transition().duration(vars.draw.timing).call(opacity);
        } else {
            vars.g.viz.selectAll("text.d3po_label").call(opacity);
        }
        if (vars.dev.value) {
            return print.timeEnd("determining label visibility");
        }
    };

}).call(this);
},{"../../../core/console/print.js":83}],293:[function(require,module,exports){
(function() {
    var labels, removeTooltip, transform;

    labels = require("./labels.js");

    removeTooltip = require("../../../tooltip/remove.js");

    transform = require("./transform.js");

    module.exports = function(vars) {
        var delay, eventType, limits, scale, translate, xmax, xmin, xoffset, ymax, ymin, yoffset;
        eventType = d3.event.sourceEvent ? d3.event.sourceEvent.type : null;
        translate = d3.event.translate;
        scale = d3.event.scale;
        limits = vars.zoom.bounds;
        xoffset = (vars.width.viz - (vars.zoom.size.width * scale)) / 2;
        xmin = (xoffset > 0 ? xoffset : 0);
        xmax = (xoffset > 0 ? vars.width.viz - xoffset : vars.width.viz);
        yoffset = (vars.height.viz - (vars.zoom.size.height * scale)) / 2;
        ymin = (yoffset > 0 ? yoffset : 0);
        ymax = (yoffset > 0 ? vars.height.viz - yoffset : vars.height.viz);
        if (translate[0] + limits[0][0] * scale > xmin) {
            translate[0] = -limits[0][0] * scale + xmin;
        } else if (translate[0] + limits[1][0] * scale < xmax) {
            translate[0] = xmax - (limits[1][0] * scale);
        }
        if (translate[1] + limits[0][1] * scale > ymin) {
            translate[1] = -limits[0][1] * scale + ymin;
        } else if (translate[1] + limits[1][1] * scale < ymax) {
            translate[1] = ymax - (limits[1][1] * scale);
        }
        vars.zoom.behavior.translate(translate).scale(scale);
        vars.zoom.translate = translate;
        vars.zoom.scale = scale;
        if (eventType === "wheel") {
            removeTooltip(vars.type.value);
        }
        if (vars.labels.value || vars.labels.changed) {
            if (eventType === "wheel") {
                delay = (vars.draw.timing ? 100 : 250);
                clearTimeout(vars.zoom.wheel);
                vars.zoom.wheel = setTimeout(function() {
                    return labels(vars);
                }, delay);
            } else {
                labels(vars);
            }
        }
        if (eventType === "dblclick") {
            return transform(vars, vars.timing.transitions);
        } else {
            return transform(vars, 0);
        }
    };

}).call(this);
},{"../../../tooltip/remove.js":238,"./labels.js":292,"./transform.js":295}],294:[function(require,module,exports){
(function() {
    module.exports = function(vars, event) {
        var enabled, zoom, zoomable, zoomed;
        zoom = vars.zoom;
        if (!event) {
            event = d3.event;
        }
        zoomed = zoom.scale > zoom.behavior.scaleExtent()[0];
        enabled = vars.types[vars.type.value].zoom && zoom.value && zoom.scroll.value;
        zoomable = event.touches && event.touches.length > 1 && enabled;
        if (!zoomable && !zoomed) {
            event.stopPropagation();
        }
    };

}).call(this);
},{}],295:[function(require,module,exports){
(function() {
    module.exports = function(vars, timing) {
        var translate;
        if (typeof timing !== "number") {
            timing = vars.timing.transitions;
        }
        translate = "translate(" + vars.zoom.translate + ")";
        translate += "scale(" + vars.zoom.scale + ")";
        if (timing) {
            return vars.g.viz.transition().duration(timing).attr("transform", translate);
        } else {
            return vars.g.viz.attr("transform", translate);
        }
    };

}).call(this);
},{}],296:[function(require,module,exports){
(function() {
    var filter;

    filter = require("../../core/methods/filter.js");

    module.exports = {
        accepted: [false, Function, Object, String],
        mute: filter(true),
        solo: filter(true),
        spotlight: {
            accepted: [Boolean],
            value: false
        },
        value: false
    };

}).call(this);
},{"../../core/methods/filter.js":115}],297:[function(require,module,exports){
(function() {
    module.exports = {
        accepted: [Object],
        objectAccess: false,
        value: {}
    };

}).call(this);
},{}],298:[function(require,module,exports){
(function() {
    var process;

    process = require("../../core/methods/process/data.js");

    module.exports = {
        accepted: [false, Array, Object, String],
        delimiter: {
            accepted: String,
            value: "|"
        },
        filetype: {
            accepted: [false, "json", "xml", "html", "csv", "dsv", "tsv", "txt"],
            value: false
        },
        keys: {},
        process: process,
        value: false
    };

}).call(this);
},{"../../core/methods/process/data.js":121}],299:[function(require,module,exports){
(function() {
    var process, rendering;

    process = require("../../core/methods/process/margin.js");

    rendering = require("../../core/methods/rendering.js");

    module.exports = {
        background: {
            color: "#fafafa",
            rendering: rendering(),
            stroke: {
                color: "#ccc",
                width: 1
            }
        },
        margin: {
            accepted: [Number, Object, String],
            process: function(value) {
                var userValue;
                if (value === void 0) {
                    value = this.value;
                }
                userValue = value;
                process(value, this);
                return userValue;
            },
            value: 10
        },
        mirror: {
            accepted: [Boolean],
            value: false
        },
        ticks: {
            accepted: [Boolean],
            value: true
        }
    };

}).call(this);
},{"../../core/methods/process/margin.js":124,"../../core/methods/rendering.js":126}],300:[function(require,module,exports){
(function() {
    module.exports = {
        accepted: [String],
        value: "#ffffff"
    };

}).call(this);
},{}],301:[function(require,module,exports){
(function() {
    module.exports = {
        accepted: [Function, String],
        value: false
    };

}).call(this);
},{}],302:[function(require,module,exports){
(function() {
    var filter, scale;

    filter = require("../../core/methods/filter.js");

    scale = require("../../color/scale.js");

    colorScales = require("../helpers/d3functions/colorscales.js");

    module.exports = {
        accepted: [false, Array, Function, Object, String],
        domain: {
            accepted: [false, Array],
            value: false
        },
        focus: "#444444",
        heatmap: ["#282F6B", "#419391", "#AFD5E8", "#EACE3F", "#B35C1E", "#B22200"],
        missing: "#eeeeee",
        mute: filter(true),
        primary: "#d74b03",
        range: ["#B22200", "#FFEE8D", "#759143"],
        scale: {
            accepted: [Array, Function, "d3po"].concat(colorScales.allowedStrings),
            process: function(value) {
                if (value instanceof Array) {
                    return d3.scaleOrdinal().range(value);
                } else if (value === "d3po") {
                    return scale;
                } else if (typeof value === "string") {
                    return colorScales.fromString(value)();
                } else {
                    return value;
                }
            },
            value: "d3po"
        },
        solo: filter(true),
        secondary: "#e5b3bb",
        value: false
    };

}).call(this);
},{"../../color/scale.js":79,"../../core/methods/filter.js":115,"../helpers/d3functions/colorscales.js":248}],303:[function(require,module,exports){
module.exports = {
    "accepted": [Array, Function, String],
    "index": {
        "accepted": [Boolean],
        "value": true
    },
    "process": function(value, vars) {
        if (typeof value === "string") value = [value]
        return value
    },
    "value": false
}
},{}],304:[function(require,module,exports){
arguments[4][142][0].apply(exports,arguments)
},{"dup":142}],305:[function(require,module,exports){
(function() {
    var d3selection;

    d3selection = require("../../util/d3selection.js");

    module.exports = {
        accepted: [false, Array, Object, String],
        id: "default",
        process: function(value, vars) {
            if (value === false) {
                return false;
            }
            if (vars.container.id === "default") {
                vars.self.container({
                    id: "d3po_" + +new Date()
                });
            }
            if (d3selection(value)) {
                return value.append("div");
            } else if (value instanceof Array) {
                return d3.select(value[0][0]).append("div");
            } else {
                this.selector = value;
                return d3.select(value).append("div");
            }
        },
        value: false
    };

}).call(this);
},{"../../util/d3selection.js":243}],306:[function(require,module,exports){
(function() {
    var filter, process;

    filter = require("../../core/methods/filter.js");

    process = require("../../core/methods/process/data.js");

    projections = require("../helpers/d3functions/projections.js");

    module.exports = {
        accepted: [false, Array, Function, Object, String],
        center: [0, 0],
        filetype: {
            accepted: ["json"],
            value: "json"
        },
        fit: {
            accepted: ["auto", "height", "width"],
            value: "auto"
        },
        key: false,
        mute: filter(false),
        padding: 20,
        process: process,
        projection: {
            accepted: projections.allowedStrings.concat([Function]),
            value: projections.defaultString
        },
        simplify: {
            accepted: [Boolean],
            value: true
        },
        solo: filter(false),
        threshold: {
            accepted: [Number],
            value: 0.9
        },
        value: false
    };

}).call(this);
},{"../../core/methods/filter.js":115,"../../core/methods/process/data.js":121,"../helpers/d3functions/projections.js":251}],307:[function(require,module,exports){
(function() {
    var fetchValue, ie, stringStrip;

    fetchValue = require("../../core/fetch/value.js");

    ie = require("../../client/ie.js");

    stringStrip = require("../../string/strip.js");

    module.exports = {
        accepted: [void 0, true, Array, String],
        chainable: false,
        data: [],
        process: function(value, vars) {
            var blob, c, col, columns, csv_data, csv_to_return, d, dataString, i, j, k, l, len, len1, len2, len3, len4, len5, len6, len7, link, m, max_filename_len, n, node, o, p, q, ref, ref1, ref2, row, title, titles, url, val;
            if (vars.returned === void 0) {
                return [];
            }
            value = value || vars.cols.value;
            if (value instanceof Array) {
                columns = value;
            } else if (typeof value === "string") {
                columns = [value];
            }
            csv_to_return = [];
            titles = [];
            if (vars.title.value) {
                title = vars.title.value;
                if (typeof title === "function") {
                    title = title(vars.self);
                }
                title = stringStrip(title);
                max_filename_len = 250;
                title = title.substr(0, max_filename_len);
            } else {
                title = "d3po Visualization Data";
            }
            if (value === true) {
                columns = d3.keys(vars.data.keys);
                csv_to_return.push(columns);
                ref = vars.data.value;
                for (j = 0, len = ref.length; j < len; j++) {
                    d = ref[j];
                    row = [];
                    for (k = 0, len1 = columns.length; k < len1; k++) {
                        c = columns[k];
                        val = d[c];
                        if (vars.data.keys[c] === "string") {
                            val = '"' + val + '"';
                        }
                        row.push(val);
                    }
                    csv_to_return.push(row);
                }
            } else {
                if (!columns) {
                    columns = [vars.id.value];
                    if (vars.time.value) {
                        columns.push(vars.time.value);
                    }
                    if (vars.size.value) {
                        columns.push(vars.size.value);
                    }
                    if (vars.text.value) {
                        columns.push(vars.text.value);
                    }
                }
                for (l = 0, len2 = columns.length; l < len2; l++) {
                    c = columns[l];
                    titles.push(vars.format.value(c));
                }
                csv_to_return.push(titles);
                ref1 = vars.returned.nodes;
                for (m = 0, len3 = ref1.length; m < len3; m++) {
                    node = ref1[m];
                    if ((node.values != null) && node.values instanceof Array) {
                        ref2 = node.values;
                        for (n = 0, len4 = ref2.length; n < len4; n++) {
                            val = ref2[n];
                            row = [];
                            for (o = 0, len5 = columns.length; o < len5; o++) {
                                col = columns[o];
                                val = fetchValue(vars, val, col);
                                if (typeof val === "string") {
                                    val = '"' + val + '"';
                                }
                                row.push(val);
                            }
                            csv_to_return.push(row);
                        }
                    } else {
                        row = [];
                        for (p = 0, len6 = columns.length; p < len6; p++) {
                            col = columns[p];
                            row.push(fetchValue(vars, node, col));
                        }
                        csv_to_return.push(row);
                    }
                }
            }
            csv_data = "";
            for (i = q = 0, len7 = csv_to_return.length; q < len7; i = ++q) {
                c = csv_to_return[i];
                dataString = c.join(",");
                csv_data += (i < csv_to_return.length ? dataString + "\n" : dataString);
            }
            blob = new Blob([csv_data], {
                type: "text/csv;charset=utf-8;"
            });
            if (ie) {
                navigator.msSaveBlob(blob, title + ".csv");
            } else {
                link = document.createElement("a");
                url = URL.createObjectURL(blob);
                link.setAttribute("href", url);
                link.setAttribute("download", title + ".csv");
                link.style = "visibility:hidden";
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            }
            this.data = csv_to_return;
            return columns;
        },
        value: void 0
    };

}).call(this);
},{"../../client/ie.js":68,"../../core/fetch/value.js":99,"../../string/strip.js":210}],308:[function(require,module,exports){
(function() {
    var process;

    process = require("../../core/methods/process/data.js");

    module.exports = {
        accepted: [false, Array, Function, String],
        cache: {},
        delimiter: {
            accepted: [String],
            value: "|"
        },
        donut: {
            size: 0.35
        },
        filetype: {
            accepted: [false, "json", "xml", "html", "csv", "dsv", "tsv", "txt"],
            value: false
        },
        filters: [],
        keys: {},
        mute: [],
        large: 400,
        opacity: 0.9,
        padding: {
            accepted: [Number],
            value: 1
        },
        process: function(value, vars) {
            return process(value, vars, this);
        },
        solo: [],
        stroke: {
            width: 1
        },
        value: false
    };

}).call(this);
},{"../../core/methods/process/data.js":121}],309:[function(require,module,exports){
(function() {
    module.exports = {
        accepted: [Function, Number],
        value: 0
    };

}).call(this);
},{}],310:[function(require,module,exports){
(function() {
    module.exports = {
        accepted: [false, Function, Object],
        value: false
    };

}).call(this);
},{}],311:[function(require,module,exports){
arguments[4][146][0].apply(exports,arguments)
},{"dup":146}],312:[function(require,module,exports){
var print = require("../../core/console/print.js"),
    stringFormat = require("../../string/format.js")

module.exports = {
    "accepted": [undefined, Function],
    "first": true,
    "frozen": false,
    "process": function(value, vars) {

        if (this.initialized === false) {
            this.initialized = true
            return value
        }

        if (value === undefined && typeof this.value === "function") {
            value = this.value
        }

        if (vars.container.value === false) {

            var str = vars.format.locale.value.dev.setContainer
            print.warning(str, "container")

        } else if (vars.container.value.empty()) {

            var str = vars.format.locale.value.dev.noContainer
            var selector = vars.container.selector || "";
            print.warning(stringFormat(str, "\"" + selector + "\""), "container")

        } else {

            if (vars.dev.value) print.time("total draw time");

            vars.container.value.call(vars.self);

        }

        if (typeof value === "function" && vars.history.chain.length) {

            var changesObject = {}
            vars.history.chain.forEach(function(c) {
                var method = c.method
                delete c.method
                changesObject[method] = c
            })

            value(changesObject)

            vars.history.chain = []

        }

        return value

    },
    "update": true,
    "value": undefined
}
},{"../../core/console/print.js":83,"../../string/format.js":208}],313:[function(require,module,exports){
var process = require("../../core/methods/process/data.js");

module.exports = {
    "accepted": [false, Array, Function, String],
    "arrows": {
        "accepted": [Boolean, Number],
        "direction": {
            "accepted": ["source", "target"],
            "value": "target"
        },
        "value": false
    },
    "color": "#d0d0d0",
    "connections": function(focus, id, objects) {

        var self = this

        if (!self.value) {
            return []
        }

        if (!id) var id = "id"

        var edges = self.restricted || self.value,
            targets = []

        if (!focus) {
            return edges
        }

        var connections = edges.filter(function(edge) {

            var match = false

            if (edge[self.source][id] == focus) {
                match = true
                if (objects) {
                    targets.push(edge[self.target])
                }
            } else if (edge[self.target][id] == focus) {
                match = true
                if (objects) {
                    targets.push(edge[self.source])
                }
            }

            return match

        })

        return objects ? targets : connections

    },
    "delimiter": {
        "accepted": [String],
        "value": "|"
    },
    "filetype": {
        "accepted": [false, "json", "xml", "html", "csv", "dsv", "tsv", "txt"],
        "value": false
    },
    "interpolate": {
        "accepted": ["basis", "cardinal", "linear", "monotone", "step"],
        "value": "basis"
    },
    "label": false,
    "large": 100,
    "limit": {
        "accepted": [false, Function, Number],
        "value": false
    },
    "opacity": {
        "accepted": [Function, Number, String],
        "min": {
            "accepted": [Number],
            "value": 0.25
        },
        "scale": {
            "accepted": [Function],
            "value": d3.scaleLinear()
        },
        "value": 1
    },
    "process": process,
    "size": {
        "accepted": [false, Number, String],
        "min": 1,
        "scale": 0.5,
        "value": false
    },
    "source": "source",
    "strength": {
        "accepted": [false, Function, Number, String],
        "value": false
    },
    "target": "target",
    "value": false
};
},{"../../core/methods/process/data.js":121}],314:[function(require,module,exports){
(function() {
    module.exports = {
        accepted: [Boolean, String],
        value: false
    };

}).call(this);
},{}],315:[function(require,module,exports){
(function() {
    module.exports = {
        accepted: [false, Array, Function, Number, String],
        process: function(value) {
            if (value === false) {
                return [];
            } else if (value instanceof Array) {
                return value;
            } else {
                return [value];
            }
        },
        tooltip: {
            accepted: [Boolean],
            value: true
        },
        value: []
    };

}).call(this);
},{}],316:[function(require,module,exports){
(function() {
    var align, decoration, family, transform;

    align = require("../../core/methods/font/align.js");

    decoration = require("../../core/methods/font/decoration.js");

    family = require("../../core/methods/font/family.js");

    transform = require("../../core/methods/font/transform.js");

    module.exports = {
        align: align(),
        color: "#444444",
        decoration: decoration(),
        family: family(),
        secondary: {
            align: align(),
            color: "#444444",
            decoration: decoration(),
            family: family(),
            size: 12,
            spacing: 0,
            transform: transform(),
            weight: 400
        },
        size: 12,
        spacing: 0,
        transform: transform(),
        weight: 400
    };

}).call(this);
},{"../../core/methods/font/align.js":116,"../../core/methods/font/decoration.js":117,"../../core/methods/font/family.js":118,"../../core/methods/font/transform.js":120}],317:[function(require,module,exports){
(function() {
    var decoration, family, transform;

    family = require("../../core/methods/font/family.js");

    decoration = require("../../core/methods/font/decoration.js");

    transform = require("../../core/methods/font/transform.js");

    module.exports = {
        accepted: [false, Number, String],
        font: {
            align: "center",
            color: "#444",
            decoration: decoration(),
            family: family(),
            size: 11,
            transform: transform(),
            weight: 400
        },
        link: false,
        padding: 0,
        position: "bottom",
        value: false
    };

}).call(this);
},{"../../core/methods/font/decoration.js":117,"../../core/methods/font/family.js":118,"../../core/methods/font/transform.js":120}],318:[function(require,module,exports){
(function() {
    var formatNumber, locale, mergeObject, titleCase;

    formatNumber = require("../../number/format.js");

    locale = require("../../core/locale/locale.js");

    mergeObject = require("../../object/merge.js");

    titleCase = require("../../string/title.js");

    module.exports = {
        accepted: [Function, String],
        affixes: {
            accepted: [Object],
            objectAccess: false,
            value: {}
        },
        locale: {
            accepted: function() {
                return d3.keys(locale);
            },
            process: function(value) {
                var defaultLocale, returnObject;
                defaultLocale = "en_US";
                returnObject = locale[defaultLocale];
                if (value !== defaultLocale) {
                    returnObject = mergeObject(returnObject, locale[value]);
                }
                this.language = value;
                return returnObject;
            },
            value: "en_US"
        },
        number: {
            accepted: [false, Function],
            value: false
        },
        process: function(value, vars) {
            if (typeof value === "string") {
                vars.self.format({
                    locale: value
                });
            } else {
                if (typeof value === "function") {
                    return value;
                }
            }
            return this.value;
        },
        text: {
            accepted: [false, Function],
            value: false
        },
        value: function(value, opts) {
            var f, v, vars;
            if (!opts) {
                opts = {};
            }
            if (!opts.locale) {
                opts.locale = this.locale.value;
            }
            vars = opts.vars || {};
            if (vars.time && vars.time.value && opts.key === vars.time.value) {
                v = value.constructor === Date ? value : new Date(value);
                return vars.data.time.format(v);
            } else if (typeof value === "number") {
                f = this.number.value || formatNumber;
                return f(value, opts);
            } else if (typeof value === "string") {
                f = this.text.value || titleCase;
                return f(value, opts);
            } else {
                return JSON.stringify(value);
            }
        }
    };

}).call(this);
},{"../../core/locale/locale.js":113,"../../number/format.js":205,"../../object/merge.js":206,"../../string/title.js":211}],319:[function(require,module,exports){
(function() {
    module.exports = {
        accepted: [false, Number],
        max: 600,
        secondary: false,
        small: 200,
        value: false
    };

}).call(this);
},{}],320:[function(require,module,exports){
(function() {
    var align, decoration, family, filter, orientMap, position, rendering, transform;

    align = require("../../../core/methods/font/align.js");

    decoration = require("../../../core/methods/font/decoration.js");

    family = require("../../../core/methods/font/family.js");

    filter = require("../../../core/methods/filter.js");

    position = require("../../../core/methods/font/position.js");

    rendering = require("../../../core/methods/rendering.js");

    transform = require("../../../core/methods/font/transform.js");

    orientMap = {
        x: "bottom",
        x2: "top",
        y: "left",
        y2: "right"
    };

    module.exports = function(axis) {
        return {
            accepted: [Array, Boolean, Function, Object, String],
            affixes: {
                accepted: [Boolean],
                separator: {
                    accepted: [Boolean, Array],
                    value: true
                },
                value: false
            },
            axis: {
                accepted: [Boolean],
                color: "#444",
                font: {
                    color: false,
                    decoration: decoration(false),
                    family: family(""),
                    size: false,
                    spacing: 0,
                    transform: transform(false),
                    weight: false
                },
                rendering: rendering(),
                value: true
            },
            dataFilter: true,
            domain: {
                accepted: [false, Array],
                value: false
            },
            grid: {
                accepted: [Boolean],
                color: "#ccc",
                rendering: rendering(),
                value: true
            },
            label: {
                accepted: [Boolean, String],
                fetch: function(vars) {
                    if (this.value === true) {
                        return vars.format.value(vars[axis].value, {
                            key: axis,
                            vars: vars
                        });
                    }
                    return this.value;
                },
                font: {
                    color: "#444",
                    decoration: decoration(),
                    family: family(),
                    size: 12,
                    spacing: 0,
                    transform: transform(),
                    weight: 400
                },
                padding: 3,
                value: true
            },
            lines: {
                accept: [false, Array, Number, Object],
                dasharray: {
                    accepted: [Array, String],
                    process: function(value) {
                        if (value instanceof Array) {
                            value = value.filter(function(d) {
                                return !isNaN(d);
                            });
                            value = value.length ? value.join(", ") : "none";
                        }
                        return value;
                    },
                    value: "10, 10"
                },
                color: "#888",
                font: {
                    align: align("right"),
                    color: "#444",
                    background: {
                        accepted: [Boolean],
                        value: true
                    },
                    decoration: decoration(),
                    family: family(),
                    padding: {
                        accepted: [Number],
                        value: 10
                    },
                    position: position("middle"),
                    size: 12,
                    transform: transform(),
                    weight: 400
                },
                process: Array,
                rendering: rendering(),
                width: 1,
                value: []
            },
            mouse: {
                accept: [Boolean],
                dasharray: {
                    accepted: [Array, String],
                    process: function(value) {
                        if (value instanceof Array) {
                            value = value.filter(function(d) {
                                return !isNaN(d);
                            });
                            value = value.length ? value.join(", ") : "none";
                        }
                        return value;
                    },
                    value: "none"
                },
                rendering: rendering(),
                width: 2,
                value: true
            },
            mute: filter(true),
            orient: {
                accepted: ["top", "right", "bottom", "left"],
                value: orientMap[axis]
            },
            padding: {
                accepted: [Number],
                value: 0.1
            },
            persist: {
                position: {
                    accepted: [Boolean],
                    value: false
                },
                size: {
                    accepted: [Boolean],
                    value: true
                }
            },
            range: {
                accepted: [false, Array],
                value: false
            },
            scale: {
                accepted: ["linear", "log", "discrete", "share"],
                process: function(value, vars) {
                    var i, len, ref, scale;
                    ref = ["log", "discrete", "share"];
                    for (i = 0, len = ref.length; i < len; i++) {
                        scale = ref[i];
                        if (scale === value) {
                            vars.axes[scale] = axis;
                        } else {
                            if (vars.axes[scale] === axis) {
                                vars.axes[scale] = false;
                            }
                        }
                    }
                    if (value === "discrete") {
                        vars.axes.opposite = (axis.indexOf("x") === 0 ? "y" : "x");
                    }
                    return value;
                },
                value: "linear"
            },
            solo: filter(true),
            stacked: {
                accepted: [Boolean],
                process: function(value, vars) {
                    if (!value && vars.axes.stacked === axis) {
                        vars.axes.stacked = false;
                    } else {
                        if (value) {
                            vars.axes.stacked = axis;
                        }
                    }
                    return value;
                },
                value: false
            },
            ticks: {
                accepted: [false, Array],
                color: "#ccc",
                font: {
                    color: "#666",
                    decoration: decoration(),
                    family: family(),
                    size: 10,
                    spacing: 0,
                    transform: transform(),
                    weight: 400
                },
                labels: {
                    accepted: [Boolean, Array],
                    value: true
                },
                rendering: rendering(),
                size: 10,
                width: 1,
                value: false
            },
            value: false,
            zerofill: {
                accepted: [Boolean],
                value: false
            }
        };
    };

}).call(this);
},{"../../../core/methods/filter.js":115,"../../../core/methods/font/align.js":116,"../../../core/methods/font/decoration.js":117,"../../../core/methods/font/family.js":118,"../../../core/methods/font/position.js":119,"../../../core/methods/font/transform.js":120,"../../../core/methods/rendering.js":126}],321:[function(require,module,exports){
(function() {
    module.exports = {
        accepted: [Boolean],
        back: function() {
            if (this.states.length) {
                return this.states.pop()();
            }
        },
        chain: [],
        reset: function() {
            var results;
            results = [];
            while (this.states.length) {
                results.push(this.states.pop()());
            }
            return results;
        },
        states: [],
        value: true
    };

}).call(this);
},{}],322:[function(require,module,exports){
(function() {
    var process;

    process = require("../../core/methods/process/icon.js");

    module.exports = {
        accepted: [false, Array, Function, Object, String],
        back: {
            accepted: [false, String],
            fallback: "&#x276e;",
            opacity: 1,
            process: process,
            rotate: 0,
            value: "fa-angle-left"
        },
        style: {
            accepted: [Object, String],
            value: "default"
        },
        value: false
    };

}).call(this);
},{"../../core/methods/process/icon.js":123}],323:[function(require,module,exports){
(function() {
    var filter;

    filter = require("../../core/methods/filter.js");

    module.exports = {
        accepted: [Array, String],
        dataFilter: true,
        grouping: {
            accepted: [Boolean],
            value: true
        },
        mute: filter(true),
        nesting: ["id"],
        solo: filter(true),
        value: "id"
    };

}).call(this);
},{"../../core/methods/filter.js":115}],324:[function(require,module,exports){
(function() {
    var decoration, family, transform;

    decoration = require("../../core/methods/font/decoration.js");

    family = require("../../core/methods/font/family.js");

    transform = require("../../core/methods/font/transform.js");

    module.exports = {
        accepted: [Boolean],
        align: {
            accepted: ["start", "middle", "end", "left", "center", "right"],
            process: function(value) {
                var css;
                css = ["left", "center", "right"].indexOf(value);
                if (css >= 0) {
                    value = this.accepted[css];
                }
                return value;
            },
            value: "middle"
        },
        color: {
            accepted: [false, String],
            value: false
        },
        font: {
            decoration: decoration(),
            family: family(),
            size: 11,
            transform: transform(),
            weight: 400
        },
        padding: 7,
        resize: {
            accepted: [Boolean],
            value: true
        },
        text: {
            accepted: [false, Function, String],
            value: false
        },
        segments: 2,
        valign: {
            accepted: [false, "top", "middle", "bottom"],
            value: "middle"
        },
        value: true
    };

}).call(this);
},{"../../core/methods/font/decoration.js":117,"../../core/methods/font/family.js":118,"../../core/methods/font/transform.js":120}],325:[function(require,module,exports){
(function() {
    var family;

    family = require("../../core/methods/font/family.js");

    module.exports = {
        accepted: [Boolean],
        align: "middle",
        data: {
            accepted: [Boolean],
            value: true
        },
        filters: {
            accepted: [Boolean],
            value: false
        },
        font: {
            align: "middle",
            color: "#444444",
            family: family(),
            size: [8, 14],
            weight: 400
        },
        gradient: {
            height: 10
        },
        icons: {
            accepted: [Boolean],
            value: true
        },
        labels: {
            accepted: [Boolean],
            value: true
        },
        order: {
            accepted: ["color", "id", "size", "text", Function],
            sort: {
                accepted: ["asc", "desc"],
                value: "asc"
            },
            value: "color"
        },
        size: [8, 30],
        tooltip: {
            accepted: [Boolean],
            value: true
        },
        text: {
            accepted: [false, Function, String],
            value: false
        },
        title: {
            accepted: [false, Function, String],
            value: false
        },
        value: true
    };

}).call(this);
},{"../../core/methods/font/family.js":118}],326:[function(require,module,exports){
(function() {
    var decoration, family, transform;

    decoration = require("../../core/methods/font/decoration.js");

    family = require("../../core/methods/font/family.js");

    transform = require("../../core/methods/font/transform.js");

    module.exports = {
        font: {
            color: "#444444",
            decoration: decoration(),
            family: family(),
            transform: transform(),
            weight: 400
        },
        hover: {
            color: "#444444",
            decoration: decoration(),
            family: family(),
            transform: transform(),
            weight: 400
        }
    };

}).call(this);
},{"../../core/methods/font/decoration.js":117,"../../core/methods/font/family.js":118,"../../core/methods/font/transform.js":120}],327:[function(require,module,exports){
arguments[4][157][0].apply(exports,arguments)
},{"../../core/methods/process/margin.js":124,"dup":157}],328:[function(require,module,exports){
(function() {
    var decoration, family, transform;

    decoration = require("../../core/methods/font/decoration.js");

    family = require("../../core/methods/font/family.js");

    transform = require("../../core/methods/font/transform.js");

    module.exports = {
        accepted: [Boolean, String],
        background: {
            accepted: [false, String],
            value: false
        },
        font: {
            color: "#444",
            decoration: decoration(),
            family: family(),
            size: 16,
            transform: transform(),
            weight: 400
        },
        padding: 5,
        style: {
            accepted: [false, "small", "large"],
            value: false
        },
        value: true
    };

}).call(this);
},{"../../core/methods/font/decoration.js":117,"../../core/methods/font/family.js":118,"../../core/methods/font/transform.js":120}],329:[function(require,module,exports){
(function() {
    module.exports = {
        accepted: [Boolean],
        click: {
            accepted: [Boolean, Function],
            value: true
        },
        move: {
            accepted: [Boolean, Function],
            value: true
        },
        out: {
            accepted: [Boolean, Function],
            value: true
        },
        over: {
            accepted: [Boolean, Function],
            value: true
        },
        value: true
    };

}).call(this);
},{}],330:[function(require,module,exports){
(function() {
    var process;

    process = require("../../core/methods/process/data.js");

    module.exports = {
        accepted: [false, Array, Function, String],
        delimiter: {
            accepted: [String],
            value: "|"
        },
        filetype: {
            accepted: [false, "json", "xml", "html", "csv", "dsv", "tsv", "txt"],
            value: false
        },
        overlap: 0.6,
        process: process,
        value: false
    };

}).call(this);
},{"../../core/methods/process/data.js":121}],331:[function(require,module,exports){
(function() {
    module.exports = {
        accepted: [Boolean, Function, String],
        agg: {
            accepted: [false, Function, "sum", "min", "max", "mean", "median"],
            value: false
        },
        sort: {
            accepted: ["asc", "desc"],
            value: "desc"
        },
        value: false
    };

}).call(this);
},{}],332:[function(require,module,exports){
(function() {
    module.exports = {
        accepted: [Boolean],
        value: false,
        timeout: 400,
        process: function(value, vars) {
            var resize, resizeEnd;
            if (!value) {
                return false;
            }
            resize = null;
            resizeEnd = function() {
                var height, mainNode, width;
                mainNode = vars.container.value.node().parentNode.getBoundingClientRect();
                width = mainNode.width;
                height = mainNode.height;
                vars.self.width(width);
                vars.self.height(height);
                if (vars.width.changed || vars.height.changed) {
                    return vars.self.draw();
                }
            };
            d3.select(window).on("resize." + vars.container.id, (function(_this) {
                return function(e) {
                    clearTimeout(resize);
                    return resize = setTimeout(resizeEnd, _this.timeout);
                };
            })(this));
            return value;
        }
    };

}).call(this);
},{}],333:[function(require,module,exports){
(function() {
    var rendering;

    rendering = require("../../core/methods/rendering.js");

    module.exports = {
        accepted: function(vars) {
            var list;
            list = vars.types[vars.type.value].shapes;
            if (list && !(list instanceof Array)) {
                list = [list];
            }
            if (list.length) {
                return list;
            } else {
                return ["square"];
            }
        },
        interpolate: {
            accepted: ["basis", "basis-open", "cardinal", "cardinal-open", "linear", "monotone", "step", "step-before", "step-after"],
            value: "linear"
        },
        rendering: rendering(),
        value: false
    };

}).call(this);
},{"../../core/methods/rendering.js":126}],334:[function(require,module,exports){
(function() {
    var filter;

    filter = require("../../core/methods/filter.js");

    module.exports = {
        accepted: [false, Function, Number, Object, String],
        dataFilter: true,
        mute: filter(true),
        scale: {
            accepted: [Function],
            domain: {
                min: {
                    accepted: [false, Number],
                    value: false
                },
                max: {
                    accepted: [false, Number],
                    value: false
                }
            },
            range: {
                max: {
                    accepted: [Function, Number],
                    value: function(vars) {
                        return Math.floor(d3.max([d3.min([vars.width.viz, vars.height.viz]) / 15, 6]));
                    }
                },
                min: {
                    accepted: [Function, Number],
                    value: 3
                }
            },
            value: d3.scaleSqrt()
        },
        solo: filter(true),
        threshold: {
            accepted: [Boolean, Function, Number],
            value: false
        },
        value: false
    };

}).call(this);
},{"../../core/methods/filter.js":115}],335:[function(require,module,exports){
(function() {
    module.exports = {
        value: false
    };

}).call(this);
},{}],336:[function(require,module,exports){
(function() {
    var filter;

    filter = require("../../core/methods/filter.js");

    module.exports = {
        accepted: [false, Function, Object, String],
        mute: filter(true),
        solo: filter(true),
        value: false
    };

}).call(this);
},{"../../core/methods/filter.js":115}],337:[function(require,module,exports){
(function() {
    var filter;

    filter = require("../../core/methods/filter.js");

    module.exports = {
        accepted: [Array, Boolean, Function, Object, String],
        nesting: true,
        mute: filter(true),
        solo: filter(true),
        value: false
    };

}).call(this);
},{"../../core/methods/filter.js":115}],338:[function(require,module,exports){
(function() {
    var filter;

    filter = require("../../core/methods/filter.js");

    module.exports = {
        accepted: [Array, Boolean, Function, Object, String],
        dataFilter: true,
        fixed: {
            accepted: [Boolean],
            value: false
        },
        format: {
            accepted: [false, Array, Function, String],
            value: false
        },
        mute: filter(false),
        solo: filter(false),
        value: false
    };

}).call(this);
},{"../../core/methods/filter.js":115}],339:[function(require,module,exports){
(function() {
    module.exports = {
        accepted: [Boolean],
        align: "middle",
        hover: {
            accepted: ["all-scroll", "col-resize", "crosshair", "default", "grab", "grabbing", "move", "pointer"],
            value: "pointer"
        },
        handles: {
            accepted: [Boolean],
            color: "#666",
            opacity: 1,
            size: 3,
            stroke: "#666",
            value: true
        },
        height: {
            accepted: [false, Number],
            value: false
        },
        play: {
            accepted: [Boolean],
            icon: {
                accepted: [false, String],
                awesome: "",
                fallback: "►"
            },
            pause: {
                accepted: [false, String],
                awesome: "",
                fallback: "❚❚"
            },
            timing: {
                accepted: [Number],
                value: 1500
            },
            value: true
        },
        value: true
    };

}).call(this);
},{}],340:[function(require,module,exports){
(function() {
    module.exports = {
        mouseevents: 60,
        transitions: 600,
        ui: 200
    };

}).call(this);
},{}],341:[function(require,module,exports){
(function() {
    var decoration, family, stringStrip, transform;

    decoration = require("../../core/methods/font/decoration.js");

    family = require("../../core/methods/font/family.js");

    transform = require("../../core/methods/font/transform.js");

    stringStrip = require("../../string/strip.js");

    module.exports = {
        accepted: [false, Function, String],
        font: {
            align: "center",
            color: "#444444",
            decoration: decoration(),
            family: family(),
            size: 16,
            transform: transform(),
            weight: 400
        },
        height: false,
        link: false,
        padding: 2,
        position: "top",
        process: function(value, vars) {
            var id;
            if (vars.container.id.indexOf("default") === 0 && value) {
                id = stringStrip(value).toLowerCase();
                vars.self.container({
                    id: id
                });
            }
            return value;
        },
        sub: {
            accepted: [false, Function, String],
            font: {
                align: "center",
                color: "#444444",
                decoration: decoration(),
                family: family(),
                size: 12,
                transform: transform(),
                weight: 400
            },
            link: false,
            padding: 1,
            position: "top",
            value: false
        },
        total: {
            accepted: [Boolean, Object],
            font: {
                align: "center",
                color: "#444444",
                decoration: decoration(),
                family: family(),
                size: 12,
                transform: transform(),
                weight: 400,
                value: false
            },
            link: false,
            padding: 1,
            position: "top",
            value: false
        },
        width: false,
        value: false
    };

}).call(this);
},{"../../core/methods/font/decoration.js":117,"../../core/methods/font/family.js":118,"../../core/methods/font/transform.js":120,"../../string/strip.js":210}],342:[function(require,module,exports){
(function() {
    var family, transform;

    family = require("../../core/methods/font/family.js");

    transform = require("../../core/methods/font/transform.js");

    module.exports = {
        accepted: [Boolean, Array, Function, Object, String],
        anchor: "top center",
        background: "#ffffff",
        children: {
            accepted: [Boolean, Number],
            value: true
        },
        connections: {
            accepted: [Boolean],
            value: true
        },
        curtain: {
            color: "#ffffff",
            opacity: 0.8
        },
        extent: {
            accepted: [Boolean],
            value: true
        },
        font: {
            color: "#444",
            family: family(),
            size: 12,
            transform: transform(),
            weight: 400
        },
        fullscreen: {
            accepted: [Boolean],
            value: false
        },
        html: {
            accepted: [false, Function, Object, String],
            value: false
        },
        iqr: {
            accepted: [Boolean],
            value: true
        },
        large: 250,
        share: {
            accepted: [Boolean],
            value: true
        },
        size: {
            accepted: [Boolean],
            value: true
        },
        small: 225,
        stacked: {
            accepted: [Boolean],
            value: false
        },
        sub: {
            accepted: [false, Function, String],
            value: false
        },
        value: true
    };

}).call(this);
},{"../../core/methods/font/family.js":118,"../../core/methods/font/transform.js":120}],343:[function(require,module,exports){
arguments[4][336][0].apply(exports,arguments)
},{"../../core/methods/filter.js":115,"dup":336}],344:[function(require,module,exports){
(function() {
    module.exports = {
        accepted: function(vars) {
            return d3.keys(vars.types);
        },
        mode: {
            accepted: function(vars) {
                return vars.types[vars.type.value].modes || [false];
            },
            value: false
        },
        value: "treemap"
    };

}).call(this);
},{}],345:[function(require,module,exports){
(function() {
    var align, decoration, family, transform;

    family = require("../../core/methods/font/family.js");

    align = require("../../core/methods/font/align.js");

    decoration = require("../../core/methods/font/decoration.js");

    transform = require("../../core/methods/font/transform.js");

    module.exports = {
        accepted: [Array, Boolean],
        align: align("center"),
        border: 1,
        color: {
            primary: {
                process: function(value, vars) {
                    var primary;
                    primary = this.value;
                    if (!vars.ui.color.secondary.value) {
                        vars.ui.color.secondary.value = d3.rgb(primary).darker(0.75).formatHex();
                    }
                    return value;
                },
                value: "#ffffff"
            },
            secondary: {
                value: false
            }
        },
        display: {
            acceped: ["block", "inline-block"],
            value: "inline-block"
        },
        font: {
            align: "center",
            color: "#444",
            decoration: decoration(),
            family: family(),
            size: 11,
            transform: transform(),
            weight: 400
        },
        margin: 5,
        padding: 5,
        position: {
            accepted: ["top", "right", "bottom", "left"],
            value: "bottom"
        },
        value: false
    };

}).call(this);
},{"../../core/methods/font/align.js":116,"../../core/methods/font/decoration.js":117,"../../core/methods/font/family.js":118,"../../core/methods/font/transform.js":120}],346:[function(require,module,exports){
(function() {
    module.exports = {
        accepted: [false, Number],
        secondary: false,
        small: 200,
        value: false
    };

}).call(this);
},{}],347:[function(require,module,exports){
module.exports = {
    "accepted": [Boolean],
    "behavior": d3.zoom().scaleExtent([1, 1]).duration(0),
    "click": {
        "accepted": [Boolean],
        "value": true
    },
    "pan": {
        "accepted": [Boolean],
        "value": true
    },
    "scroll": {
        "accepted": [Boolean],
        "value": true
    },
    "value": true
}
},{}],348:[function(require,module,exports){
(function() {
    var area, closest, fetchValue, graph, nest, sort, stack, threshold;

    closest = require("../../util/closest.js");

    fetchValue = require("../../core/fetch/value.js");

    graph = require("./helpers/graph/draw.js");

    nest = require("./helpers/graph/nest.js");

    sort = require("../../array/sort.js");

    stack = require("./helpers/graph/stack.js");

    threshold = require("../../core/data/threshold.js");

    area = function(vars) {
        var d, data, discrete, domains, i, j, len, len1, opposite, point, ref;
        graph(vars, {
            buffer: vars.axes.opposite,
            zero: true
        });
        domains = vars.x.domain.viz.concat(vars.y.domain.viz);
        if (domains.indexOf(void 0) >= 0) {
            return [];
        }
        data = sort(vars.data.viz, null, null, null, vars);
        discrete = vars[vars.axes.discrete];
        opposite = vars[vars.axes.opposite];
        for (i = 0, len = data.length; i < len; i++) {
            point = data[i];
            if (!point.d3po) {
                point.d3po = {};
            }
            ref = point.values;
            for (j = 0, len1 = ref.length; j < len1; j++) {
                d = ref[j];
                if (!d.d3po) {
                    d.d3po = {};
                }
                d.d3po.x = discrete.scale.viz(fetchValue(vars, d, discrete.value));
                d.d3po.x += vars.axes.margin.viz.left;
                d.d3po.y = opposite.scale.viz(fetchValue(vars, d, opposite.value));
                d.d3po.y += vars.axes.margin.viz.top;
                if (d.d3po.merged instanceof Array) {
                    if (!point.d3po.merged) {
                        point.d3po.merged = [];
                    }
                    point.d3po.merged = point.d3po.merged.concat(d.d3po.merged);
                }
                if (d.d3po.text && !point.d3po.text) {
                    point.d3po.text = d.d3po.text;
                }
            }
        }
        return stack(vars, data);
    };

    area.filter = function(vars, data) {
        return nest(vars, threshold(vars, data, vars[vars.axes.discrete].value));
    };

    area.requirements = ["data", "x", "y"];

    area.setup = function(vars) {
        var axis, size, y;
        if (!vars.axes.discrete) {
            axis = vars.time.value === vars.y.value ? "y" : "x";
            vars.self[axis]({
                scale: "discrete"
            });
        }
        if (!vars[vars.axes.discrete].zerofill.value) {
            vars.self[vars.axes.discrete]({
                zerofill: true
            });
        }
        if (!vars[vars.axes.opposite].stacked.value && vars.type.value === "stacked") {
            vars.self[vars.axes.opposite]({
                stacked: true
            });
        }
        y = vars[vars.axes.opposite];
        size = vars.size;
        if ((!y.value && size.value) || (size.changed && size.previous === y.value)) {
            return vars.self[vars.axes.opposite](size.value);
        } else if ((!size.value && y.value) || (y.changed && y.previous === size.value)) {
            return vars.self.size(y.value);
        }
    };

    area.shapes = ["area"];

    area.threshold = function(vars) {
        return 20 / vars.height.viz;
    };

    area.tooltip = "static";

    module.exports = area;

}).call(this);
},{"../../array/sort.js":65,"../../core/data/threshold.js":93,"../../core/fetch/value.js":99,"../../util/closest.js":241,"./helpers/graph/draw.js":356,"./helpers/graph/nest.js":362,"./helpers/graph/stack.js":363}],349:[function(require,module,exports){
(function() {
    var bar, buckets, fetchValue, graph, nest, stack, uniques,
        indexOf = [].indexOf || function(item) {
            for (var i = 0, l = this.length; i < l; i++) {
                if (i in this && this[i] === item) return i;
            }
            return -1;
        };

    buckets = require("../../util/buckets.js");

    fetchValue = require("../../core/fetch/value.js");

    graph = require("./helpers/graph/draw.js");

    nest = require("./helpers/graph/nest.js");

    stack = require("./helpers/graph/stack.js");

    uniques = require("../../util/uniques.js");

    bar = function(vars) {
        var bars, base, cMargin, d, data, discrete, discreteVal, divisions, domains, h, i, ids, j, k, l, len, len1, len2, length, maxBars, maxSize, mod, nested, newSize, oMargin, offset, oppDomain, oppMethod, oppVal, opposite, p, padding, point, ref, ref1, space, value, w, x, zero;
        discrete = vars.axes.discrete;
        h = discrete === "x" ? "height" : "width";
        w = discrete === "x" ? "width" : "height";
        opposite = vars.axes.opposite;
        cMargin = discrete === "x" ? "left" : "top";
        oMargin = discrete === "x" ? "top" : "left";
        graph(vars, {
            buffer: true,
            zero: opposite
        });
        domains = vars.x.domain.viz.concat(vars.y.domain.viz);
        if (domains.indexOf(void 0) >= 0) {
            return [];
        }
        nested = vars.data.viz;
        if (vars.axes.stacked) {
            for (j = 0, len = nested.length; j < len; j++) {
                point = nested[j];
                stack(vars, point.values);
            }
        }
        space = vars.axes[w] / vars[vars.axes.discrete].ticks.values.length;
        padding = vars[vars.axes.discrete].padding.value;
        if (padding < 1) {
            padding *= space;
        }
        if (padding * 2 > space) {
            padding = space * 0.1;
        }
        maxSize = space - padding * 2;
        if (!vars.axes.stacked) {
            if (vars[discrete].persist.position.value) {
                if (ref = vars[discrete].value, indexOf.call(vars.id.nesting, ref) >= 0) {
                    divisions = d3.max(nested, function(b) {
                        return b.values.length;
                    });
                } else {
                    divisions = uniques(nested, vars.id.value, fetchValue, vars).length;
                }
                maxSize /= divisions;
                offset = space / 2 - maxSize / 2 - padding;
                x = d3.scaleOrdinal();
                if (divisions === 1) {
                    x.domain([0]).range([0]);
                } else {
                    x.domain([0, divisions - 1]).range([-offset, offset]);
                }
            } else {
                x = d3.scaleLinear();
            }
        }
        data = [];
        oppMethod = vars[opposite];
        oppDomain = oppMethod.scale.viz.domain().slice();
        if (opposite.indexOf("y") === 0) {
            oppDomain = oppDomain.reverse();
        }
        if (oppDomain[0] <= 0 && oppDomain[1] >= 0) {
            zero = 0;
        } else if (oppDomain[0] < 0) {
            zero(d3.max(oppDomain));
        } else {
            zero = d3.min(oppDomain);
        }
        if (vars[discrete].persist.position.value && !vars.axes.stacked) {
            ids = uniques(d3.merge(nested.map(function(d) {
                return d.values;
            })), vars.id.value, fetchValue, vars, vars.id.value, false);
            x.domain(ids);
            if (ids.length === 1) {
                x.range([0]);
            } else {
                x.range(buckets(x.range(), ids.length));
            }
        }
        maxBars = d3.max(nested, function(b) {
            return b.values.length;
        });
        for (k = 0, len1 = nested.length; k < len1; k++) {
            p = nested[k];
            if (vars.axes.stacked) {
                bars = 1;
                newSize = maxSize;
            } else if (vars[discrete].persist.position.value) {
                bars = divisions;
                newSize = maxSize;
            } else {
                bars = p.values.length;
                if (vars[discrete].persist.size.value) {
                    newSize = maxSize / maxBars;
                    offset = space / 2 - ((maxBars - bars) * (newSize / 2)) - newSize / 2 - padding;
                } else {
                    newSize = maxSize / bars;
                    offset = space / 2 - newSize / 2 - padding;
                }
                x.domain([0, bars - 1]);
                x.range([-offset, offset]);
            }
            ref1 = p.values;
            for (i = l = 0, len2 = ref1.length; l < len2; i = ++l) {
                d = ref1[i];
                oppMethod = vars[opposite];
                if (vars.axes.stacked) {
                    mod = 0;
                } else if (vars[discrete].persist.position.value) {
                    mod = x(fetchValue(vars, d, vars.id.value));
                } else {
                    mod = x(i % bars);
                }
                if (vars.axes.stacked) {
                    value = d.d3po[opposite];
                    base = d.d3po[opposite + "0"];
                } else {
                    oppVal = fetchValue(vars, d, oppMethod.value);
                    if (oppVal === null) {
                        oppMethod = vars[opposite + "2"];
                        oppVal = fetchValue(vars, d, oppMethod.value);
                    }
                    if (oppVal === 0) {
                        continue;
                    }
                    if (oppMethod.scale.value === "log") {
                        zero = oppVal < 0 ? -1 : 1;
                    }
                    value = oppMethod.scale.viz(oppVal);
                    base = oppMethod.scale.viz(zero);
                }
                discreteVal = fetchValue(vars, d, vars[discrete].value);
                d.d3po[discrete] = vars[discrete].scale.viz(discreteVal);
                d.d3po[discrete] += vars.axes.margin.viz[cMargin] + mod;
                length = base - value;
                d.d3po[opposite] = base - length / 2;
                if (!vars.axes.stacked) {
                    d.d3po[opposite] += vars.axes.margin.viz[oMargin];
                }
                delete d.d3po.r;
                d.d3po[w] = newSize;
                d.d3po[h] = Math.abs(length);
                d.d3po.init = {};
                d.d3po.init[opposite] = oppMethod.scale.viz(zero);
                d.d3po.init[opposite] -= d.d3po[opposite];
                d.d3po.init[opposite] += vars.axes.margin.viz[oMargin];
                d.d3po.init[w] = d.d3po[w];
                if (vars.text.value) {
                    delete d.d3po.label;
                } else {
                    d.d3po.label = false;
                }
                data.push(d);
            }
        }
        return data;
    };

    bar.filter = function(vars, data) {
        return nest(vars, data, vars[vars.axes.discrete].value);
    };

    bar.requirements = ["data", "x", "y"];

    bar.setup = function(vars) {
        var axis, size, y;
        if (!vars.axes.discrete) {
            axis = vars.time.value === vars.y.value ? "y" : "x";
            vars.self[axis]({
                scale: "discrete"
            });
        }
        y = vars[vars.axes.opposite];
        size = vars.size;
        if ((!y.value && size.value) || (size.changed && size.previous === y.value)) {
            return vars.self[vars.axes.opposite](size.value);
        } else if ((!size.value && y.value) || (y.changed && y.previous === size.value)) {
            return vars.self.size(y.value);
        }
    };

    bar.shapes = ["square"];

    module.exports = bar;

}).call(this);
},{"../../core/fetch/value.js":99,"../../util/buckets.js":239,"../../util/uniques.js":245,"./helpers/graph/draw.js":356,"./helpers/graph/nest.js":362,"./helpers/graph/stack.js":363}],350:[function(require,module,exports){
(function() {
    var box, fetchValue, graph, stringFormat, strip, uniques;

    fetchValue = require("../../core/fetch/value.js");

    graph = require("./helpers/graph/draw.js");

    stringFormat = require("../../string/format.js");

    strip = require("../../string/strip.js");

    uniques = require("../../util/uniques.js");

    box = function(vars) {
        var botstr, disMargin, discrete, domains, h, iqrstr, maxstr, medians, medstr, mergeData, minstr, mode, noData, oppMargin, opposite, pctstr, qt1str, qt3str, returnData, size, space, topstr, w;
        graph(vars, {
            buffer: true
        });
        domains = vars.x.domain.viz.concat(vars.y.domain.viz);
        if (domains.indexOf(void 0) >= 0) {
            return [];
        }
        discrete = vars.axes.discrete;
        opposite = vars.axes.opposite;
        disMargin = discrete === "x" ? vars.axes.margin.viz.left : vars.axes.margin.viz.top;
        oppMargin = opposite === "x" ? vars.axes.margin.viz.left : vars.axes.margin.viz.top;
        h = discrete === "x" ? "height" : "width";
        w = discrete === "x" ? "width" : "height";
        space = vars.axes[w] / vars[discrete].ticks.values.length;
        size = vars.size.value;
        size = typeof size === "number" ? size : 100;
        space = d3.min([space - vars.labels.padding * 2, size]);
        mode = vars.type.mode.value;
        if (!(mode instanceof Array)) {
            mode = [mode, mode];
        }
        mergeData = function(arr) {
            var key, obj, vals;
            obj = {};
            for (key in vars.data.keys) {
                vals = uniques(arr, key, fetchValue, vars);
                obj[key] = vals.length === 1 ? vals[0] : vals;
            }
            return obj;
        };
        noData = false;
        medians = [];
        iqrstr = vars.format.value(vars.format.locale.value.ui.iqr);
        maxstr = vars.format.value(vars.format.locale.value.ui.max);
        minstr = vars.format.value(vars.format.locale.value.ui.min);
        pctstr = vars.format.value(vars.format.locale.value.ui.percentile);
        botstr = vars.format.value(vars.format.locale.value.ui.tukey_bottom);
        topstr = vars.format.value(vars.format.locale.value.ui.tukey_top);
        qt1str = vars.format.value(vars.format.locale.value.ui.quartile_first);
        qt3str = vars.format.value(vars.format.locale.value.ui.quartile_third);
        medstr = vars.format.value(vars.format.locale.value.ui.median);
        returnData = [];
        d3.nest().key(function(d) {
            return fetchValue(vars, d, vars[discrete].value);
        }).rollup(function(leaves) {
            var bottom, bottomLabel, bottomWhisker, boxData, d, diff1, diff2, first, i, iqr, j, key, label, len, len1, median, medianBuffer, medianData, medianHeight, medianText, outliers, scale, second, tooltipData, top, topLabel, topWhisker, uniqs, val, values, x, y;
            scale = vars[opposite].scale.viz;
            values = leaves.map(function(d) {
                return fetchValue(vars, d, vars[opposite].value);
            });
            values.sort(function(a, b) {
                return a - b;
            });
            uniqs = uniques(values);
            first = d3.quantile(values, 0.25);
            median = d3.quantile(values, 0.50);
            second = d3.quantile(values, 0.75);
            tooltipData = {};
            if (mode[1] === "tukey") {
                iqr = first - second;
                top = second - iqr * 1.5;
                topLabel = topstr;
            } else if (mode[1] === "extent") {
                top = d3.max(values);
                topLabel = maxstr;
            } else if (typeof mode[1] === "number") {
                top = d3.quantile(values, (100 - mode[1]) / 100);
                topLabel = stringFormat(pctstr, mode[1]);
            }
            top = d3.min([d3.max(values), top]);
            if (vars.tooltip.extent.value) {
                tooltipData[topLabel] = {
                    key: vars[opposite].value,
                    value: top
                };
            }
            if (vars.tooltip.iqr.value) {
                tooltipData[qt3str] = {
                    key: vars[opposite].value,
                    value: second
                };
                tooltipData[medstr] = {
                    key: vars[opposite].value,
                    value: median
                };
                tooltipData[qt1str] = {
                    key: vars[opposite].value,
                    value: first
                };
            }
            if (mode[0] === "tukey") {
                iqr = first - second;
                bottom = first + iqr * 1.5;
                bottomLabel = botstr;
            } else if (mode[0] === "extent") {
                bottom = d3.min(values);
                bottomLabel = minstr;
            } else if (typeof mode[0] === "number") {
                bottom = d3.quantile(values, mode[0] / 100);
                topLabel = stringFormat(pctstr, mode[0]);
            }
            bottom = d3.max([d3.min(values), bottom]);
            if (vars.tooltip.extent.value) {
                tooltipData[bottomLabel] = {
                    key: vars[opposite].value,
                    value: bottom
                };
            }
            boxData = [];
            bottomWhisker = [];
            topWhisker = [];
            outliers = [];
            for (i = 0, len = leaves.length; i < len; i++) {
                d = leaves[i];
                val = fetchValue(vars, d, vars[opposite].value);
                if (val >= first && val <= second) {
                    boxData.push(d);
                } else if (val >= bottom && val < first) {
                    bottomWhisker.push(d);
                } else if (val <= top && val > second) {
                    topWhisker.push(d);
                } else {
                    outliers.push(d);
                }
            }
            key = fetchValue(vars, leaves[0], vars[discrete].value);
            x = vars[discrete].scale.viz(key);
            x += disMargin;
            label = vars.format.value(key, {
                key: vars[discrete].value,
                vars: vars
            });
            if (key.constructor === Date) {
                key = key.getTime();
            }
            key = strip(key);
            boxData = mergeData(boxData);
            boxData.d3po = {
                color: "white",
                id: "box_" + key,
                init: {},
                label: false,
                shape: "square",
                stroke: "#444",
                text: stringFormat(iqrstr, label)
            };
            boxData.d3po[w] = space;
            boxData.d3po.init[w] = space;
            boxData.d3po[h] = Math.abs(scale(first) - scale(second));
            boxData.d3po[discrete] = x;
            y = d3.min([scale(first), scale(second)]) + boxData.d3po[h] / 2;
            y += oppMargin;
            boxData.d3po[opposite] = y;
            boxData.d3po.tooltip = tooltipData;
            returnData.push(boxData);
            medianData = {
                d3po: {
                    id: "median_line_" + key,
                    position: h === "height" ? "top" : "right",
                    shape: "whisker",
                    "static": true
                }
            };
            medianText = vars.format.value(median, {
                key: vars[opposite].value,
                vars: vars
            });
            label = {
                background: "#fff",
                names: [medianText],
                padding: 0,
                resize: false,
                x: 0,
                y: 0
            };
            diff1 = Math.abs(scale(median) - scale(first));
            diff2 = Math.abs(scale(median) - scale(second));
            medianHeight = d3.min([diff1, diff2]) * 2;
            medianBuffer = vars.data.stroke.width * 2 + vars.labels.padding * 2;
            label[w === "width" ? "w" : "h"] = space - medianBuffer;
            label[h === "width" ? "w" : "h"] = medianHeight - medianBuffer;
            medianData.d3po.label = label;
            medianData.d3po[w] = space;
            medianData.d3po[discrete] = x;
            medianData.d3po[opposite] = scale(median) + oppMargin;
            returnData.push(medianData);
            bottomWhisker = mergeData(bottomWhisker);
            bottomWhisker.d3po = {
                id: "bottom_whisker_line_" + key,
                offset: boxData.d3po[h] / 2,
                position: h === "height" ? "bottom" : "left",
                shape: "whisker",
                "static": true
            };
            if (opposite === "x") {
                bottomWhisker.d3po.offset *= -1;
            }
            bottomWhisker.d3po[h] = Math.abs(scale(bottom) - scale(first));
            bottomWhisker.d3po[w] = space;
            bottomWhisker.d3po[discrete] = x;
            bottomWhisker.d3po[opposite] = y;
            returnData.push(bottomWhisker);
            topWhisker = mergeData(topWhisker);
            topWhisker.d3po = {
                id: "top_whisker_line_" + key,
                offset: boxData.d3po[h] / 2,
                position: h === "height" ? "top" : "right",
                shape: "whisker",
                "static": true
            };
            if (opposite === "y") {
                topWhisker.d3po.offset *= -1;
            }
            topWhisker.d3po[h] = Math.abs(scale(top) - scale(second));
            topWhisker.d3po[w] = space;
            topWhisker.d3po[discrete] = x;
            topWhisker.d3po[opposite] = y;
            returnData.push(topWhisker);
            for (j = 0, len1 = outliers.length; j < len1; j++) {
                d = outliers[j];
                d.d3po[discrete] = x;
                d.d3po[opposite] = scale(fetchValue(vars, d, vars.y.value));
                d.d3po[opposite] += oppMargin;
                d.d3po.r = 4;
                d.d3po.shape = vars.shape.value;
            }
            noData = !outliers.length && top - bottom === 0;
            medians.push(median);
            returnData = returnData.concat(outliers);
            return leaves;
        }).entries(vars.data.viz);
        if (noData && uniques(medians).length === 1) {
            return [];
        } else {
            return returnData;
        }
    };

    box.modes = ["tukey", "extent", Array, Number];

    box.requirements = ["data", "x", "y"];

    box.shapes = ["circle", "check", "cross", "diamond", "square", "triangle", "triangle_up", "triangle_down"];

    box.setup = function(vars) {
        var axis;
        if (!vars.axes.discrete) {
            axis = vars.time.value === vars.y.value ? "y" : "x";
            return vars.self[axis]({
                scale: "discrete"
            });
        }
    };

    module.exports = box;

}).call(this);
},{"../../core/fetch/value.js":99,"../../string/format.js":208,"../../string/strip.js":210,"../../util/uniques.js":245,"./helpers/graph/draw.js":356}],351:[function(require,module,exports){
(function() {
    var arraySort, bubbles, fetchColor, fetchText, fetchValue, groupData, legible;

    arraySort = require("../../array/sort.js");

    fetchValue = require("../../core/fetch/value.js");

    fetchColor = require("../../core/fetch/color.js");

    fetchText = require("../../core/fetch/text.js");

    legible = require("../../color/legible.js");

    groupData = require("../../core/data/group.js");

    bubbles = function(vars) {
        var column_height, column_width, columns, d, data, dataLength, domain, domainMax, domainMin, downscale, groupedData, i, j, k, l, labelHeight, len, len1, len2, obj, pack, padding, row, rows, screenRatio, size, size_max, size_min, t, temp, userDomainMax, userDomainMin, xPadding, xoffset, yMod, yPadding, yoffset;
        groupedData = groupData(vars, vars.data.viz);
        groupedData = arraySort(groupedData, null, null, null, vars);
        dataLength = groupedData.length;
        if (dataLength < 4) {
            columns = dataLength;
            rows = 1;
        } else {
            screenRatio = vars.width.viz / vars.height.viz;
            columns = Math.ceil(Math.sqrt(dataLength * screenRatio));
            rows = Math.ceil(Math.sqrt(dataLength / screenRatio));
        }
        if (dataLength > 0) {
            while ((rows - 1) * columns >= dataLength) {
                rows--;
            }
        }
        column_width = vars.width.viz / columns;
        column_height = vars.height.viz / rows;
        if (vars.size.value) {
            userDomainMin = vars.size.scale.domain.min.value;
            userDomainMax = vars.size.scale.domain.max.value;
            if (typeof userDomainMin === 'number') {
                domainMin = userDomainMin;
            } else {
                domainMin = d3.min(vars.data.viz, function(d) {
                    return fetchValue(vars, d, vars.size.value, vars.id.value, "min");
                });
            }
            if (typeof userDomainMax === 'number') {
                domainMax = userDomainMax;
            } else {
                domainMax = d3.max(vars.data.viz, function(d) {
                    return fetchValue(vars, d, vars.size.value, vars.id.value);
                });
            }
            domain = [domainMin, domainMax];
        } else {
            domain = [0, 0];
        }
        padding = 5;
        size_max = (d3.min([column_width, column_height]) / 2) - (padding * 2);
        labelHeight = vars.labels.value && !vars.small && size_max >= 40 ? d3.max([20, d3.min([size_max * 0.25, 50])]) : 0;
        size_max -= labelHeight;
        size_min = d3.min([size_max, vars.size.scale.range.min.value]);
        size = vars.size.scale.value.domain(domain).rangeRound([size_min, size_max]);
        pack = d3.layout.pack().children(function(d) {
            return d.values;
        }).padding(padding).radius(function(d) {
            return size(d);
        }).size([column_width - padding * 2, column_height - padding * 2 - labelHeight]).value(function(d) {
            return d.value;
        });
        data = [];
        row = 0;
        for (i = j = 0, len = groupedData.length; j < len; i = ++j) {
            d = groupedData[i];
            temp = pack.nodes(d);
            xoffset = (column_width * i) % vars.width.viz;
            yoffset = column_height * row;
            for (k = 0, len1 = temp.length; k < len1; k++) {
                t = temp[k];
                if (t.children) {
                    obj = {
                        d3po: {}
                    };
                    obj[vars.id.value] = t.key;
                } else {
                    obj = t.d3po;
                }
                obj.d3po.depth = vars.id.grouping.value ? t.depth : vars.depth.value;
                obj.d3po.x = t.x;
                obj.d3po.xOffset = xoffset;
                obj.d3po.y = t.y;
                obj.d3po.yOffset = yoffset + labelHeight;
                obj.d3po.r = t.r;
                data.push(obj);
            }
            if ((i + 1) % columns === 0) {
                row++;
            }
        }
        downscale = size_max / d3.max(data, function(d) {
            return d.d3po.r;
        });
        xPadding = pack.size()[0] / 2;
        yPadding = pack.size()[1] / 2;
        for (l = 0, len2 = data.length; l < len2; l++) {
            d = data[l];
            d.d3po.x = ((d.d3po.x - xPadding) * downscale) + xPadding + d.d3po.xOffset;
            d.d3po.y = ((d.d3po.y - yPadding) * downscale) + yPadding + d.d3po.yOffset;
            d.d3po.r = d.d3po.r * downscale;
            delete d.d3po.xOffset;
            delete d.d3po.yOffset;
            d.d3po["static"] = d.d3po.depth < vars.depth.value && vars.id.grouping.value;
            if (labelHeight && (d.d3po.depth === 0 || vars.id.grouping.value === false)) {
                d.d3po.text = fetchText(vars, d[vars.id.value], d.d3po.depth);
                yMod = labelHeight > vars.labels.padding * 3 ? vars.labels.padding : 0;
                d.d3po.label = {
                    x: 0,
                    y: -(size_max + yMod + labelHeight / 2),
                    w: size_max * 2,
                    h: labelHeight - yMod,
                    padding: 0,
                    resize: true,
                    color: legible(fetchColor(vars, d, d.d3po.depth)),
                    force: true
                };
            } else {
                delete d.d3po.label;
            }
        }
        return data.sort(function(a, b) {
            return a.d3po.depth - b.d3po.depth;
        });
    };

    bubbles.fill = true;

    bubbles.requirements = ["data"];

    bubbles.scale = 1.05;

    bubbles.shapes = ["circle", "donut"];

    module.exports = bubbles;

}).call(this);
},{"../../array/sort.js":65,"../../color/legible.js":75,"../../core/data/group.js":88,"../../core/fetch/color.js":95,"../../core/fetch/text.js":98,"../../core/fetch/value.js":99}],352:[function(require,module,exports){
(function() {
    var comparator, dataThreshold, donut, groupData;

    comparator = require("../../array/comparator.js");

    dataThreshold = require("../../core/data/threshold.js");

    groupData = require("../../core/data/group.js");

    donut = function(vars) {
        var d, donutData, donutLayout, groupedData, i, item, len, outer_radius, returnData;
        donutLayout = d3.pie().value(function(d) {
            return d.value;
        }).sort(function(a, b) {
            if (vars.order.value) {
                return comparator(a.d3po, b.d3po, [vars.order.value], vars.order.sort.value, [], vars);
            } else if (vars.id.nesting.length > 1) {
                return comparator(a.d3po, b.d3po, vars.id.nesting.concat([vars.size.value]), void 0, [], vars);
            } else {
                return comparator(a.d3po, b.d3po, [vars.size.value], "desc", [], vars);
            }
        });
        groupedData = groupData(vars, vars.data.viz, []);
        donutData = donutLayout(groupedData);
        returnData = [];
        outer_radius = d3.min([vars.width.viz, vars.height.viz]) / 2 - vars.labels.padding * 2;
        for (i = 0, len = donutData.length; i < len; i++) {
            d = donutData[i];
            item = d.data.d3po;
            item.d3po.startAngle = d.startAngle;
            item.d3po.endAngle = d.endAngle;
            item.d3po.r_inner = outer_radius / 3;
            item.d3po.r_outer = outer_radius;
            item.d3po.x = vars.width.viz / 2;
            item.d3po.y = vars.height.viz / 2;
            item.d3po.share = (d.endAngle - d.startAngle) / (Math.PI * 2);
            returnData.push(item);
        }
        return returnData;
    };

    donut.filter = dataThreshold;

    donut.requirements = ["data", "size"];

    donut.shapes = ["arc"];

    donut.threshold = function(vars) {
        return (40 * 40) / (vars.width.viz * vars.height.viz);
    };

    module.exports = donut;

}).call(this);
},{"../../array/comparator.js":63,"../../core/data/group.js":88,"../../core/data/threshold.js":93}],353:[function(require,module,exports){
(function() {
    var geomap;

    geomap = function(vars) {
        var coords, features, key, mute, solo, topo;
        coords = vars.coords.value;
        key = vars.coords.key || d3.keys(coords.objects)[0];
        topo = topojson.feature(coords, coords.objects[key]);
        features = topo.features;
        solo = vars.coords.solo.value;
        mute = vars.coords.mute.value;
        features = features.filter(function(f) {
            f[vars.id.value] = f.id;
            if (solo.length) {
                return solo.indexOf(f.id) >= 0;
            } else if (mute.length) {
                return mute.indexOf(f.id) < 0;
            } else {
                return true;
            }
        });
        return features;
    };

    geomap.libs = ["topojson"];

    geomap.nesting = false;

    geomap.requirements = ["coords"];

    geomap.scale = 1;

    geomap.shapes = ["coordinates"];

    geomap.zoom = true;

    module.exports = geomap;

}).call(this);
},{}],354:[function(require,module,exports){
(function() {
    var comparator, dataThreshold, groupData, halfdonut;

    comparator = require("../../array/comparator.js");

    dataThreshold = require("../../core/data/threshold.js");

    groupData = require("../../core/data/group.js");

    halfdonut = function(vars) {
        var d, groupedData, halfdonutData, halfdonutLayout, i, item, len, outer_radius, returnData;
        halfdonutLayout = d3.pie().value(function(d) {
            return d.value;
        }).startAngle(function(d) {
            return -90 * (Math.PI / 180);
        }).endAngle(function(d) {
            return 90 * (Math.PI / 180);
        }).sort(function(a, b) {
            if (vars.order.value) {
                return comparator(a.d3po, b.d3po, [vars.order.value], vars.order.sort.value, [], vars);
            } else if (vars.id.nesting.length > 1) {
                return comparator(a.d3po, b.d3po, vars.id.nesting.concat([vars.size.value]), void 0, [], vars);
            } else {
                return comparator(a.d3po, b.d3po, [vars.size.value], "desc", [], vars);
            }
        });
        groupedData = groupData(vars, vars.data.viz, []);
        halfdonutData = halfdonutLayout(groupedData);
        returnData = [];
        outer_radius = d3.min([vars.width.viz / 2, vars.height.viz]) - vars.labels.padding * 2;
        for (i = 0, len = halfdonutData.length; i < len; i++) {
            d = halfdonutData[i];
            item = d.data.d3po;
            item.d3po.startAngle = d.startAngle;
            item.d3po.endAngle = d.endAngle;
            item.d3po.r_inner = outer_radius / 3;
            item.d3po.r_outer = outer_radius;
            item.d3po.x = vars.width.viz / 2;
            item.d3po.y = vars.height.viz;
            item.d3po.share = (d.endAngle - d.startAngle) / (Math.PI * 2);
            returnData.push(item);
        }
        return returnData;
    };

    halfdonut.filter = dataThreshold;

    halfdonut.requirements = ["data", "size"];

    halfdonut.shapes = ["arc"];

    halfdonut.threshold = function(vars) {
        return (40 * 40) / (vars.width.viz * vars.height.viz);
    };

    module.exports = halfdonut;

}).call(this);
},{"../../array/comparator.js":63,"../../core/data/group.js":88,"../../core/data/threshold.js":93}],355:[function(require,module,exports){
(function() {
    var color, legible, print;

    color = require("../../../../core/fetch/color.js");

    legible = require("../../../../color/legible.js");

    print = require("../../../../core/console/print.js");

    module.exports = function(vars) {
        var axes, axis, axisData, data, i, len, margin, ref, style, tick, ticks, timing;
        axes = vars.axes;
        margin = vars.axes.margin.viz;
        data = axes.stacked || !axes.ticks.value ? [] : vars.data.viz;
        timing = data.length * 2 > vars.data.large ? 0 : vars.draw.timing;
        style = function(line, axis) {
            if (axis.indexOf("y") === 0) {
                line.attr("x1", -2).attr("x2", -8).attr("y1", function(d) {
                    return d.d3po.y - margin.top;
                }).attr("y2", function(d) {
                    return d.d3po.y - margin.top;
                });
            } else {
                line.attr("x1", function(d) {
                    return d.d3po.x - margin.left;
                }).attr("x2", function(d) {
                    return d.d3po.x - margin.left;
                }).attr("y1", axes.height + 2).attr("y2", axes.height + 8);
            }
            return line.style("stroke", function(d) {
                return legible(color(vars, d));
            }).style("stroke-width", vars.data.stroke.width).attr("shape-rendering", vars.shape.rendering.value);
        };
        if (vars.dev.value) {
            print.time("creating axis tick groups");
        }
        ticks = vars.group.select("g#d3po_graph_plane").selectAll("g.d3po_data_tick").data(data, function(d) {
            var mod;
            mod = axes.discrete ? "_" + d.d3po[axes.discrete] : "";
            return "tick_" + d[vars.id.value] + "_" + d.d3po.depth + mod;
        });
        ticks.enter().append("g").attr("class", "d3po_data_tick").attr("opacity", 0);
        if (vars.dev.value) {
            print.timeEnd("creating axis tick groups");
        }
        ref = ["x", "y"];
        for (i = 0, len = ref.length; i < len; i++) {
            axis = ref[i];
            if (vars.dev.value && timing) {
                print.time("creating " + axis + " ticks");
            }
            axisData = timing && axis !== axes.discrete ? data : [];
            tick = ticks.selectAll("line.d3po_data_" + axis).data(axisData, function(d) {
                return "tick_" + d[vars.id.value] + "_" + d.d3po.depth;
            });
            if (vars.dev.value && timing) {
                print.timeEnd("creating " + axis + " ticks");
            }
            if (vars.dev.value && timing) {
                print.time("styling " + axis + " ticks");
            }
            if (timing > 0) {
                tick.transition().duration(timing).call(style, axis);
            } else {
                tick.call(style, axis);
            }
            tick.enter().append("line").attr("class", "d3po_data_" + axis).call(style, axis);
            if (vars.dev.value && timing) {
                print.timeEnd("styling " + axis + " ticks");
            }
        }
        if (timing > 0) {
            ticks.transition().duration(timing).attr("opacity", 1);
            ticks.exit().transition().duration(timing).attr("opacity", 0).remove();
        } else {
            ticks.attr("opacity", 1);
            ticks.exit().remove();
        }
    };

}).call(this);
},{"../../../../color/legible.js":75,"../../../../core/console/print.js":83,"../../../../core/fetch/color.js":95}],356:[function(require,module,exports){
(function() {
    var axes, draw, mouse, plot;

    axes = require("./includes/axes.js");

    draw = require("./includes/svg.js");

    mouse = require("./includes/mouse.js");

    plot = require("./includes/plot.js");

    module.exports = function(vars, opts) {
        if (opts === void 0) {
            opts = {};
        }
        axes(vars, opts);
        plot(vars, opts);
        draw(vars, opts);
        vars.mouse.viz = opts.mouse === true ? mouse : false;
    };

}).call(this);
},{"./includes/axes.js":357,"./includes/mouse.js":359,"./includes/plot.js":360,"./includes/svg.js":361}],357:[function(require,module,exports){
(function() {
    var aggs, arraySort, axisRange, buckets, buffer, dataChange, fetchData, fetchValue, getData, getScale, print, sizeScale, uniques;

    aggs = require("../../../../helpers/d3functions/aggs.js");

    arraySort = require("../../../../../array/sort.js");

    buffer = require("./buffer.js");

    buckets = require("../../../../../util/buckets.js");

    fetchData = require("../../../../../core/fetch/data.js");

    fetchValue = require("../../../../../core/fetch/value.js");

    print = require("../../../../../core/console/print.js");

    scales = require("../../../../helpers/d3functions/scales.js");

    uniques = require("../../../../../util/uniques.js");

    module.exports = function(vars, opts) {
        var axes, axis, changed, domains, i, j, len, len1, oppAxis, range, reorder, zero;
        changed = dataChange(vars);
        if (changed || !vars.axes.dataset) {
            vars.axes.dataset = getData(vars);
        }
        vars.axes.scale = opts.buffer && opts.buffer !== true ? sizeScale(vars, opts.buffer) : false;
        axes = vars.width.viz > vars.height.viz ? ["y", "y2", "x", "x2"] : ["x", "x2", "y", "y2"];
        for (i = 0, len = axes.length; i < len; i++) {
            axis = axes[i];
            oppAxis = axis.indexOf("x") === 0 ? "y" : "x";
            reorder = vars.order.changed || vars.order.sort.changed || (vars.order.value === true && vars[oppAxis].changed);
            if (vars[axis].value && (!vars[axis].ticks.values || changed || reorder || (vars[axis].value === vars.time.value && vars.time.fixed.value))) {
                if (vars.dev.value) {
                    print.time("calculating " + axis + " axis");
                }
                vars[axis].reset = true;
                vars[axis].ticks.values = false;
                if (axis === vars.axes.discrete && vars[axis].value !== vars.time.value) {
                    vars[axis].ticks.values = uniques(vars.axes.dataset, vars[axis].value, fetchValue, vars);
                }
                zero = opts.zero === true || axis.indexOf(opts.zero) === 0 ? true : false;
                range = axisRange(vars, axis, zero);
                if (axis.indexOf("y") === 0) {
                    range = range.reverse();
                }
                vars[axis].scale.viz = getScale(vars, axis, range);
                vars[axis].domain.viz = range;
                if (vars.dev.value) {
                    print.timeEnd("calculating " + axis + " axis");
                }
            }
        }
        if (vars.axes.mirror.value) {
            domains = d3.extent(vars.y.domain.viz.concat(vars.x.domain.viz));
            vars.x.domain.viz = domains;
            vars.x.scale.viz.domain(domains);
            domains = domains.slice().reverse();
            vars.y.domain.viz = domains;
            vars.y.scale.viz.domain(domains);
        }
        if (opts.buffer) {
            for (j = 0, len1 = axes.length; j < len1; j++) {
                axis = axes[j];
                if (axis !== vars.axes.discrete) {
                    buffer(vars, axis, opts.buffer);
                }
            }
        }
    };

    dataChange = function(vars) {
        var axis, changed, check, i, j, k, l, len, len1, len2, ref, sub, subs;
        changed = !vars.time.fixed.value && (vars.time.solo.changed || vars.time.mute.changed);
        if (!changed) {
            changed = vars.id.solo.changed || vars.id.mute.changed;
        }
        if (changed) {
            return changed;
        }
        check = ["data", "time", "id", "depth", "type", "width", "height", "x", "y", "x2", "y2"];
        for (i = 0, len = check.length; i < len; i++) {
            k = check[i];
            if (vars[k].changed) {
                changed = true;
                break;
            }
        }
        if (changed) {
            return changed;
        }
        subs = ["mute", "range", "scale", "solo", "stacked", "zerofill"];
        ref = ["x", "y", "x2", "y2"];
        for (j = 0, len1 = ref.length; j < len1; j++) {
            axis = ref[j];
            for (l = 0, len2 = subs.length; l < len2; l++) {
                sub = subs[l];
                if (vars[axis][sub].changed) {
                    changed = true;
                    break;
                }
            }
        }
        return changed;
    };

    getData = function(vars) {
        var d, depths;
        if (!vars.time.fixed.value) {
            return vars.data.viz;
        } else {
            depths = d3.range(0, vars.id.nesting.length);
            return d3.merge(d3.merge([
                (function() {
                    var i, len, results;
                    results = [];
                    for (i = 0, len = depths.length; i < len; i++) {
                        d = depths[i];
                        results.push(fetchData(vars, "all", d));
                    }
                    return results;
                })()
            ]));
        }
    };

    axisRange = function(vars, axis, zero, buffer) {
        var agg, aggType, allNegative, allPositive, axisSums, counts, d, group, i, j, k, l, len, len1, len2, len3, m, min, oppAxis, ref, ref1, ref2, ref3, sort, sortKey, splitData, v, val, values;
        oppAxis = axis.indexOf("x") === 0 ? "y" : "x";
        if (vars[axis].range.value && vars[axis].range.value.length === 2) {
            return vars[axis].range.value.slice();
        } else if (vars[axis].scale.value === "share") {
            vars[axis].ticks.values = d3.range(0, 1.1, 0.1);
            return [0, 1];
        } else if (vars[axis].stacked.value) {
            splitData = [];
            ref = vars.axes.dataset;
            for (i = 0, len = ref.length; i < len; i++) {
                d = ref[i];
                if (d.values) {
                    splitData = splitData.concat(d.values);
                } else {
                    splitData.push(d);
                }
            }
            axisSums = d3.nest().key(function(d) {
                return fetchValue(vars, d, vars[oppAxis].value);
            }).rollup(function(leaves) {
                var negatives, positives;
                positives = d3.sum(leaves, function(d) {
                    var val;
                    val = fetchValue(vars, d, vars[axis].value);
                    if (val > 0) {
                        return val;
                    } else {
                        return 0;
                    }
                });
                negatives = d3.sum(leaves, function(d) {
                    var val;
                    val = fetchValue(vars, d, vars[axis].value);
                    if (val < 0) {
                        return val;
                    } else {
                        return 0;
                    }
                });
                return [negatives, positives];
            }).entries(splitData);
            values = d3.merge(axisSums.map(function(d) {
                return d.values;
            }));
            return d3.extent(values);
        } else if (vars[axis].value === vars.time.value) {
            if (vars.time.solo.value.length) {
                return d3.extent(vars.time.solo.value).map(function(v) {
                    if (v.constructor !== Date) {
                        v = v + "";
                        if (v.length === 4 && parseInt(v) + "" === v) {
                            v += "/01/01";
                        }
                        return new Date(v);
                    } else {
                        return v;
                    }
                });
            } else {
                return d3.extent(vars.data.time.ticks);
            }
        } else {
            values = [];
            ref1 = vars.axes.dataset;
            for (j = 0, len1 = ref1.length; j < len1; j++) {
                d = ref1[j];
                val = fetchValue(vars, d, vars[axis].value);
                if (val instanceof Array) {
                    values = values.concat(val);
                } else {
                    values.push(val);
                }
            }
            values = values.filter(function(d) {
                return d !== null;
            });
            if (axis === vars.axes.discrete) {
                if (vars.order.value === true) {
                    sortKey = vars[oppAxis].value;
                } else {
                    sortKey = vars.order.value;
                }
                if (sortKey) {
                    sort = vars.order.sort.value;
                    agg = vars.order.agg.value || vars.aggs.value[sortKey] || "max";
                    aggType = typeof agg;
                    counts = values.reduce(function(obj, val) {
                        obj[val] = [];
                        return obj;
                    }, {});
                    ref2 = vars.axes.dataset;
                    for (l = 0, len2 = ref2.length; l < len2; l++) {
                        d = ref2[l];
                        if (d.values) {
                            ref3 = d.values;
                            for (m = 0, len3 = ref3.length; m < len3; m++) {
                                v = ref3[m];
                                group = fetchValue(vars, v, vars[axis].value);
                                counts[group].push(fetchValue(vars, v, sortKey));
                            }
                        } else {
                            group = fetchValue(vars, d, vars[axis].value);
                            counts[group].push(fetchValue(vars, d, sortKey));
                        }
                    }
                    for (k in counts) {
                        v = counts[k];
                        if (aggType === "string") {
                            counts[k] = aggs.fromString(agg)(v);
                        } else if (aggType === "function") {
                            counts[k] = agg(v, sortKey);
                        }
                    }
                    counts = arraySort(d3.entries(counts), "value", sort);
                    counts = counts.reduce(function(arr, v) {
                        arr.push(v.key);
                        return arr;
                    }, []);
                    return counts;
                } else if (values[0].constructor === String) {
                    return uniques(values).sort(function(a, b) {
                        return "" + a.localeCompare("" + b);
                    });
                } else {
                    return uniques(values).sort(function(a, b) {
                        return a - b;
                    });
                }
            } else {
                values.sort(function(a, b) {
                    return a - b;
                });
                if (vars[axis].scale.value === "log") {
                    if (values[0] === 0) {
                        values[0] = 1;
                    }
                    if (values[values.length - 1] === 0) {
                        values[values.length - 1] = -1;
                    }
                }
                if (zero) {
                    allPositive = values.every(function(v) {
                        return v > 0;
                    });
                    allNegative = values.every(function(v) {
                        return v < 0;
                    });
                    if (allPositive || allNegative) {
                        min = allPositive ? 1 : -1;
                        values.push(vars[axis].scale.value === "log" ? min : 0);
                    }
                }
                return d3.extent(values);
            }
        }
    };

    getScale = function(vars, axis, range) {
        var rangeArray, rangeMax, retScale, scaleType, t;
        rangeMax = axis.indexOf("x") === 0 ? vars.width.viz : vars.height.viz;
        scaleType = vars[axis].scale.value;
        if (["discrete", "share"].indexOf(scaleType) >= 0) {
            scaleType = "linear";
        }
        t = 10;
        if (typeof range[0] === "string") {
            scaleType = "ordinal";
            rangeArray = buckets([0, rangeMax], range.length);
        } else {
            rangeArray = [0, rangeMax];
            if (vars[axis].scale.value === "linear") {
                t = Math.floor(rangeMax / (vars[axis].ticks.font.size * 4));
            }
        }
        vars[axis].scale.ticks = t;
        retScale = scales.fromString(scaleType)().domain(range).range(rangeArray);
        if ("clamp" in retScale) {
            retScale.clamp(true);
        }
        return retScale;
    };

    sizeScale = function(vars, value) {
        var domain, max, min;
        if (value === true) {
            value = "size";
        }
        if (value in vars) {
            value = vars[value].value;
        }
        min = vars.size.scale.range.min.value;
        if (typeof min === "function") {
            min = min(vars);
        }
        max = vars.size.scale.range.max.value;
        if (typeof max === "function") {
            max = max(vars);
        }
        if (value === false) {
            return vars.size.scale.value.domain([0, 1]).rangeRound([max, max]);
        } else if (typeof value === "number") {
            return vars.size.scale.value.domain([0, 1]).rangeRound([value, value]);
        } else if (value) {
            if (vars.dev.value) {
                print.time("calculating buffer scale");
            }
            domain = d3.extent(vars.axes.dataset, function(d) {
                var val;
                val = fetchValue(vars, d, value);
                if (!val) {
                    return 0;
                } else {
                    return val;
                }
            });
            if (domain[0] === domain[1]) {
                min = max;
            }
            if (vars.dev.value) {
                print.timeEnd("calculating buffer scale");
            }
            return vars.size.scale.value.domain(domain).rangeRound([min, max]);
        }
    };

}).call(this);
},{"../../../../../array/sort.js":65,"../../../../../core/console/print.js":83,"../../../../../core/fetch/data.js":96,"../../../../../core/fetch/value.js":99,"../../../../../util/buckets.js":239,"../../../../../util/uniques.js":245,"../../../../helpers/d3functions/aggs.js":247,"../../../../helpers/d3functions/scales.js":252,"./buffer.js":358}],358:[function(require,module,exports){
(function() {
    var buckets, closest;

    buckets = require("../../../../../util/buckets.js");

    closest = require("../../../../../util/closest.js");

    module.exports = function(vars, axis, buffer) {
        var add, additional, allNegative, allPositive, closestTime, copy, d, diff, difference, domain, domainCompare, domainHigh, domainLow, i, lowerDiff, lowerMod, lowerScale, lowerValue, maxSize, opp, orig_domain, range, rangeMax, second, strings, testScale, timeIndex, upperDiff, upperMod, upperScale, upperValue, zero;
        if (vars[axis].scale.value !== "share" && !vars[axis].range.value && vars[axis].reset) {
            testScale = vars[axis].scale.viz.copy();
            if ("clamp" in testScale) {
                testScale.clamp(false);
            }
            if (axis === vars.axes.discrete) {
                domain = testScale.domain();
                if (typeof domain[0] === "string") {
                    i = domain.length;
                    while (i >= 0) {
                        domain.splice(i, 0, "d3po_buffer_" + i);
                        i--;
                    }
                    range = testScale.range();
                    range = buckets(d3.extent(range), domain.length);
                    return vars[axis].scale.viz.domain(domain).range(range);
                } else {
                    if (axis.indexOf("y") === 0) {
                        domain = domain.slice().reverse();
                    }
                    if (vars[axis].ticks.values.length === 1) {
                        domain = [domain[0], domain[0]];
                        if (vars[axis].value === vars.time.value && vars.data.time.ticks.length !== 1) {
                            closestTime = closest(vars.data.time.ticks, domain[0]);
                            timeIndex = vars.data.time.ticks.indexOf(closestTime);
                            if (timeIndex > 0) {
                                domain[0] = vars.data.time.ticks[timeIndex - 1];
                            } else {
                                diff = vars.data.time.ticks[timeIndex + 1] - closestTime;
                                domain[0] = new Date(closestTime.getTime() - diff);
                            }
                            if (timeIndex < vars.data.time.ticks.length - 1) {
                                domain[1] = vars.data.time.ticks[timeIndex + 1];
                            } else {
                                diff = closestTime - vars.data.time.ticks[timeIndex - 1];
                                domain[1] = new Date(closestTime.getTime() + diff);
                            }
                        } else {
                            domain[0] -= 1;
                            domain[1] += 1;
                        }
                    } else if (vars.axes.scale) {
                        difference = Math.abs(domain[1] - domain[0]);
                        additional = difference / (vars[axis].ticks.values.length - 1);
                        additional = additional / 2;
                        rangeMax = testScale.range()[1];
                        maxSize = vars.axes.scale.range()[1] * 1.5;
                        domainLow = testScale.invert(-maxSize);
                        domainHigh = testScale.invert(rangeMax + maxSize);
                        if (domain[0] - additional < domainLow) {
                            domain[0] = domain[0] - additional;
                            domain[domain.length - 1] = domain[domain.length - 1] + additional;
                        } else {
                            domain = [domainLow, domainHigh];
                            if (axis.indexOf("y") === 0) {
                                domain = domain.reverse();
                            }
                            domainCompare = testScale.domain();
                            domainCompare = domainCompare[1] - domainCompare[0];
                            if (!domainCompare) {
                                domain[0] -= 1;
                                domain[1] += 1;
                            }
                        }
                    } else if (vars[axis].value === vars.time.value) {
                        difference = Math.abs(domain[1] - domain[0]);
                        additional = difference / (vars[axis].ticks.values.length - 1);
                        additional = additional / 2;
                        domain[0] = domain[0] - additional;
                        domain[1] = domain[1] + additional;
                    } else {
                        difference = Math.abs(domain[1] - domain[0]);
                        add = difference / 2;
                        i = domain.length;
                        orig_domain = domain.slice();
                        while (i >= 0) {
                            d = i ? orig_domain[i - 1] + add : orig_domain[i] - add;
                            domain.splice(i, 0, d);
                            i--;
                        }
                        range = testScale.range();
                        range = buckets(d3.extent(range), domain.length);
                        vars[axis].scale.viz.domain(domain).range(range);
                    }
                    if (axis.indexOf("y") === 0) {
                        domain = domain.reverse();
                    }
                    return vars[axis].scale.viz.domain(domain);
                }
            } else if ((buffer === "x" && axis.indexOf("x") === 0) || (buffer === "y" && axis.indexOf("y") === 0) || (buffer === true)) {
                domain = testScale.domain();
                allPositive = domain[0] >= 0 && domain[1] >= 0;
                allNegative = domain[0] <= 0 && domain[1] <= 0;
                if (vars[axis].scale.value === "log") {
                    zero = allPositive ? 1 : -1;
                    if (allPositive && axis.indexOf("y") === 0) {
                        domain = domain.slice().reverse();
                    }
                    lowerScale = Math.pow(10, parseInt(Math.abs(domain[0])).toString().length - 1) * zero;
                    lowerMod = domain[0] % lowerScale;
                    lowerDiff = lowerMod;
                    if (lowerMod && lowerDiff / lowerScale <= 0.1) {
                        lowerDiff += lowerScale * zero;
                    }
                    lowerValue = lowerMod === 0 ? lowerScale : lowerDiff;
                    domain[0] -= lowerValue;
                    if (domain[0] === 0) {
                        domain[0] = zero;
                    }
                    upperScale = Math.pow(10, parseInt(Math.abs(domain[1])).toString().length - 1) * zero;
                    upperMod = domain[1] % upperScale;
                    upperDiff = Math.abs(upperScale - upperMod);
                    if (upperMod && upperDiff / upperScale <= 0.1) {
                        upperDiff += upperScale * zero;
                    }
                    upperValue = upperMod === 0 ? upperScale : upperDiff;
                    domain[1] += upperValue;
                    if (domain[1] === 0) {
                        domain[1] = zero;
                    }
                    if (allPositive && axis.indexOf("y") === 0) {
                        domain = domain.reverse();
                    }
                } else {
                    zero = 0;
                    if (axis.indexOf("y") === 0) {
                        domain = domain.slice().reverse();
                    }
                    strings = domain.filter(function(d) {
                        return d.constructor === String;
                    });
                    additional = Math.abs(domain[1] - domain[0]) * 0.05 || 1;
                    if (!strings.length) {
                        domain[0] = domain[0] - additional;
                        domain[1] = domain[1] + additional;
                        if ((allPositive && domain[0] < zero) || (allNegative && domain[0] > zero)) {
                            domain[0] = zero;
                        }
                        if ((allPositive && domain[1] < zero) || (allNegative && domain[1] > zero)) {
                            domain[1] = zero;
                        }
                    }
                    if (axis.indexOf("y") === 0) {
                        domain = domain.reverse();
                    }
                }
                return vars[axis].scale.viz.domain(domain);
            } else if (vars.axes.scale) {
                copy = false;
                if (vars.axes.mirror.value) {
                    opp = axis.indexOf("y") === 0 ? "x" : "y";
                    copy = vars[opp].scale.viz;
                    second = vars.width.viz > vars.height.viz ? "x" : "y";
                }
                if (axis === second && copy) {
                    domain = copy.domain().slice().reverse();
                } else {
                    rangeMax = testScale.range()[1];
                    maxSize = vars.axes.scale.range()[1];
                    domainLow = testScale.invert(-maxSize * 1.5);
                    domainHigh = testScale.invert(rangeMax + maxSize * 1.5);
                    domain = [domainLow, domainHigh];
                    if (axis.indexOf("y") === 0) {
                        domain = domain.reverse();
                    }
                    domainCompare = testScale.domain();
                    domainCompare = domainCompare[1] - domainCompare[0];
                    if (!domainCompare) {
                        domain[0] -= 1;
                        domain[1] += 1;
                    }
                    if (axis.indexOf("y") === 0) {
                        domain = domain.reverse();
                    }
                }
                return vars[axis].scale.viz.domain(domain);
            }
        }
    };

}).call(this);
},{"../../../../../util/buckets.js":239,"../../../../../util/closest.js":241}],359:[function(require,module,exports){
(function() {
    var copy, events, fetchColor, fetchValue, legible, textColor;

    copy = require("../../../../../util/copy.js");

    events = require("../../../../../client/pointer.js");

    fetchColor = require("../../../../../core/fetch/color.js");

    fetchValue = require("../../../../../core/fetch/value.js");

    legible = require("../../../../../color/legible.js");

    textColor = require("../../../../../color/text.js");

    module.exports = function(node, vars) {
        var clickRemove, color, create, graph, lineData, lineInit, lineStyle, lineUpdate, lines, margin, r, rectStyle, rects, s, textStyle, texts, timing, x, y;
        clickRemove = d3.event.type === events.click && (vars.tooltip.value.long || vars.tooltip.html.value);
        create = [events.over, events.move].indexOf(d3.event.type) >= 0;
        x = node.d3po.x;
        y = node.d3po.y;
        r = node.d3po.r || 0;
        s = vars.types[vars.type.value].scale || 1;
        r = r * s;
        graph = vars.axes;
        margin = vars.axes.margin.viz;
        timing = vars.draw.timing ? vars.timing.mouseevents : 0;
        if (!clickRemove && create) {
            color = legible(fetchColor(vars, node));
            lineData = ["x", "y", "x2", "y2"].filter(function(axis) {
                var val;
                val = fetchValue(vars, node, vars[axis].value);
                return val && !(val instanceof Array) && axis !== vars.axes.stacked && vars[axis].mouse.value;
            });
        } else {
            lineData = [];
        }
        lineInit = function(line) {
            return line.attr("x1", function(d) {
                if (d.indexOf("x") === 0) {
                    return x;
                } else {
                    return x - r;
                }
            }).attr("y1", function(d) {
                if (d.indexOf("y") === 0) {
                    return y;
                } else {
                    return y + r;
                }
            }).attr("x2", function(d) {
                if (d.indexOf("x") === 0) {
                    return x;
                } else {
                    return x - r;
                }
            }).attr("y2", function(d) {
                if (d.indexOf("y") === 0) {
                    return y;
                } else {
                    return y + r;
                }
            }).attr("opacity", 0);
        };
        lineStyle = function(line) {
            return line.style("stroke", function(d) {
                if (vars.shape.value === "area") {
                    return "white";
                } else {
                    return color;
                }
            }).attr("stroke-dasharray", function(d) {
                return vars[d].mouse.dasharray.value;
            }).attr("shape-rendering", function(d) {
                return vars[d].mouse.rendering.value;
            }).style("stroke-width", function(d) {
                return vars[d].mouse.width;
            });
        };
        lineUpdate = function(line) {
            return line.attr("x1", function(d) {
                if (d.indexOf("x") === 0) {
                    return x;
                } else {
                    return x - r;
                }
            }).attr("y1", function(d) {
                if (d.indexOf("y") === 0) {
                    return y;
                } else {
                    return y + r;
                }
            }).attr("x2", function(d) {
                if (d.indexOf("x") === 0) {
                    return x;
                } else if (node.d3po.x0) {
                    return node.d3po.x0;
                } else if (d === "y") {
                    return margin.left - vars[d].ticks.size;
                } else {
                    return margin.left + graph.width + vars[d].ticks.size;
                }
            }).attr("y2", function(d) {
                if (d.indexOf("y") === 0) {
                    return y;
                } else if (node.d3po.y0) {
                    return node.d3po.y0;
                } else if (d === "x") {
                    return graph.height + margin.top + vars[d].ticks.size;
                } else {
                    return margin.top - vars[d].ticks.size;
                }
            }).style("opacity", 1);
        };
        lines = vars.g.labels.selectAll("line.d3po_mouse_axis_label").data(lineData);
        if (timing) {
            lines.enter().append("line").attr("class", "d3po_mouse_axis_label").attr("pointer-events", "none").call(lineInit).call(lineStyle);
            lines.transition().duration(timing).call(lineUpdate).call(lineStyle);
            lines.exit().transition().duration(timing).call(lineInit).remove();
        } else {
            lines.call(lineUpdate).call(lineStyle);
            lines.enter().append("line").attr("class", "d3po_mouse_axis_label").attr("pointer-events", "none").call(lineInit).call(lineStyle);
            lines.exit().remove();
        }
        textStyle = function(text) {
            return text.attr("font-size", function(d) {
                return vars[d].ticks.font.size + "px";
            }).attr("font-family", function(d) {
                return vars[d].ticks.font.family.value;
            }).attr("font-weight", function(d) {
                return vars[d].ticks.font.weight;
            }).attr("x", function(d) {
                if (d.indexOf("x") === 0) {
                    return x;
                } else if (d === "y") {
                    return margin.left - 5 - vars[d].ticks.size;
                } else {
                    return margin.left + graph.width + 5 + vars[d].ticks.size;
                }
            }).attr("y", function(d) {
                if (d.indexOf("y") === 0) {
                    return y;
                } else if (node.d3po.y0) {
                    return node.d3po.y + (node.d3po.y0 - node.d3po.y) / 2 + margin.top - 6;
                } else if (d === "x") {
                    return graph.height + margin.top + 5 + vars[d].ticks.size;
                } else {
                    return margin.top - 5 - vars[d].ticks.size - (vars[d].ticks.font.size * 1.35);
                }
            }).attr("fill", vars.shape.value === "area" ? "white" : textColor(color));
        };
        texts = vars.g.labels.selectAll("text.d3po_mouse_axis_label").data(lineData);
        texts.enter().append("text").attr("class", "d3po_mouse_axis_label").attr("id", function(d) {
            return d + "_d3pomouseaxislabel";
        }).attr("dy", function(d) {
            if (d.indexOf("y") === 0) {
                return vars[d].ticks.font.size * 0.35;
            } else {
                return vars[d].ticks.font.size;
            }
        }).style("text-anchor", function(d) {
            if (d === "y") {
                return "end";
            } else if (d === "y2") {
                return "start";
            } else {
                return "middle";
            }
        }).attr("opacity", 0).attr("pointer-events", "none").call(textStyle);
        texts.text(function(d) {
            var axis, val;
            axis = vars.axes.stacked || d;
            val = fetchValue(vars, node, vars[axis].value);
            return vars.format.value(val, {
                key: vars[axis].value,
                vars: vars,
                labels: vars[axis].affixes.value
            });
        });
        if (timing) {
            texts.transition().duration(timing).delay(timing).attr("opacity", 1).call(textStyle);
            texts.exit().transition().duration(timing).attr("opacity", 0).remove();
        } else {
            texts.attr("opacity", 1).call(textStyle);
            texts.exit().remove();
        }
        rectStyle = function(rect) {
            var getText;
            getText = function(axis) {
                var l;
                l = d3.select("text#" + axis + "_d3pomouseaxislabel");
                if (l.size()) {
                    return l.node().getBBox();
                } else {
                    return {
                        "width": 0,
                        "height": 0
                    };
                }
            };
            return rect.attr("x", function(d) {
                var width;
                width = getText(d).width;
                if (d.indexOf("x") === 0) {
                    return x - width / 2 - 5;
                } else if (d === "y") {
                    return margin.left - vars[d].ticks.size - width - 10;
                } else {
                    return margin.left + graph.width + vars[d].ticks.size;
                }
            }).attr("y", function(d) {
                var height;
                height = getText(d).height;
                if (d.indexOf("y") === 0) {
                    return y - (height / 2 + 5);
                } else if (node.d3po.y0) {
                    return node.d3po.y + (node.d3po.y0 - node.d3po.y) / 2 + margin.top - (height / 2 + 5);
                } else if (d === "x") {
                    return graph.height + margin.top + vars[d].ticks.size;
                } else {
                    return margin.top - vars[d].ticks.size - height - 10;
                }
            }).attr("width", function(d) {
                return getText(d).width + 10;
            }).attr("height", function(d) {
                return getText(d).height + 10;
            }).style("stroke", vars.shape.value === "area" ? "transparent" : color).attr("fill", color).attr("shape-rendering", function(d) {
                return vars[d].mouse.rendering.value;
            }).style("stroke-width", function(d) {
                return vars[d].mouse.width;
            });
        };
        rects = vars.g.labels.selectAll("rect.d3po_mouse_axis_label").data(lineData);
        if (timing) {
            rects.enter().insert("rect", "text.d3po_mouse_axis_label").attr("class", "d3po_mouse_axis_label").attr("pointer-events", "none").attr("opacity", 0).call(rectStyle);
            rects.transition().duration(timing).delay(timing).attr("opacity", 1).call(rectStyle);
            return rects.exit().transition().duration(timing).attr("opacity", 0).remove();
        } else {
            rects.attr("opacity", 1).call(rectStyle);
            rects.enter().insert("rect", "text.d3po_mouse_axis_label").attr("class", "d3po_mouse_axis_label").attr("pointer-events", "none").call(rectStyle);
            return rects.exit().remove();
        }
    };

}).call(this);
},{"../../../../../client/pointer.js":69,"../../../../../color/legible.js":75,"../../../../../color/text.js":81,"../../../../../core/fetch/color.js":95,"../../../../../core/fetch/value.js":99,"../../../../../util/copy.js":242}],360:[function(require,module,exports){
(function() {
    var buckets, buffer, createAxis, fetchValue, fontSizes, formatPower, labelPadding, superscript, textwrap, timeDetect, uniques;

    buckets = require("../../../../../util/buckets.js");

    buffer = require("./buffer.js");

    fetchValue = require("../../../../../core/fetch/value.js");

    fontSizes = require("../../../../../font/sizes.js");

    textwrap = require("../../../../../textwrap/textwrap.js");

    timeDetect = require("../../../../../core/data/time.js");

    uniques = require("../../../../../util/uniques.js");

    module.exports = function(vars, opts) {
        var axes, axis, axisStyle, extent, j, k, l, len, len1, len2, newtick, opp, otherScale, scale, step, tens, tick, ticks, timeReturn, values;
        vars.axes.margin.viz = {
            top: vars.axes.margin.top,
            right: vars.axes.margin.right,
            bottom: vars.axes.margin.bottom,
            left: vars.axes.margin.left
        };
        vars.axes.height = vars.height.viz;
        vars.axes.width = vars.width.viz;
        axes = vars.width.viz > vars.height.viz ? ["y", "y2", "x", "x2"] : ["x", "x2", "y", "y2"];
        for (j = 0, len = axes.length; j < len; j++) {
            axis = axes[j];
            if (vars[axis].value) {
                if (vars[axis].ticks.values === false) {
                    if (vars[axis].value === vars.time.value) {
                        ticks = vars.time.solo.value;
                        if (ticks.length) {
                            ticks = ticks.map(function(d) {
                                if (d.constructor !== Date) {
                                    d = d + "";
                                    if (d.length === 4 && parseInt(d) + "" === d) {
                                        d += "/01/01";
                                    }
                                    d = new Date(d);
                                }
                                return d;
                            });
                        } else {
                            ticks = vars.data.time.values;
                        }
                        extent = d3.extent(ticks);
                        step = vars.data.time.stepType;
                        ticks = [extent[0]];
                        tick = extent[0];
                        while (tick < extent[1]) {
                            newtick = new Date(tick);
                            tick = new Date(newtick["set" + step](newtick["get" + step]() + 1));
                            ticks.push(tick);
                        }
                        vars[axis].ticks.values = ticks;
                    } else {
                        if (axis.indexOf("2") === 1) {
                            otherScale = vars[axis.slice(0, 1)].scale.viz;
                            scale = vars[axis].scale.viz;
                            ticks = vars[axis.slice(0, 1)].scale.ticks;
                            vars[axis].ticks.values = otherScale.ticks(ticks).map(function(t) {
                                return parseFloat(d3.format(".5f")(scale.invert(otherScale(t))));
                            });
                        } else {
                            vars[axis].ticks.values = vars[axis].scale.viz.ticks(vars[axis].scale.ticks);
                        }
                    }
                }
                if (!vars[axis].ticks.values.length) {
                    values = fetchValue(vars, vars.data.viz, vars[axis].value);
                    if (!(values instanceof Array)) {
                        values = [values];
                    }
                    vars[axis].ticks.values = values;
                }
                opp = axis.indexOf("x") === 0 ? "y" : "x";
                if (vars[axis].ticks.values.length === 1 || (opts.buffer && opts.buffer !== opp && axis === vars.axes.discrete && vars[axis].reset === true)) {
                    buffer(vars, axis, opts.buffer);
                }
                vars[axis].reset = false;
                if (vars[axis].value === vars.time.value) {
                    axisStyle = {
                        "font-family": vars[axis].ticks.font.family.value,
                        "font-weight": vars[axis].ticks.font.weight,
                        "font-size": vars[axis].ticks.font.size + "px",
                        "text-transform": vars[axis].ticks.font.transform.value,
                        "letter-spacing": vars[axis].ticks.font.spacing + "px"
                    };
                    timeReturn = timeDetect(vars, {
                        values: vars[axis].ticks.values,
                        limit: vars.width.viz,
                        style: axisStyle
                    });
                    if (vars[axis].ticks.value) {
                        vars[axis].ticks.visible = vars[axis].ticks.value.map(Number);
                    } else if (vars[axis].ticks.labels.value.constructor === Array) {
                        vars[axis].ticks.visible = vars[axis].ticks.labels.value.map(Number);
                    } else {
                        vars[axis].ticks.visible = timeReturn.values.map(Number);
                    }
                    vars[axis].ticks.format = timeReturn.format;
                } else if (vars[axis].ticks.value) {
                    vars[axis].ticks.values = vars[axis].ticks.value;
                    if (vars[axis].ticks.labels.value.constructor === Array) {
                        vars[axis].ticks.visible = vars[axis].ticks.labels.value;
                    } else {
                        vars[axis].ticks.visible = vars[axis].ticks.value;
                    }
                } else if (vars[axis].ticks.labels.value.constructor === Array) {
                    vars[axis].ticks.visible = vars[axis].ticks.labels.value;
                } else if (vars[axis].scale.value === "log") {
                    ticks = vars[axis].ticks.values;
                    tens = ticks.filter(function(t) {
                        return Math.abs(t).toString().charAt(0) === "1";
                    });
                    if (tens.length < 3) {
                        vars[axis].ticks.visible = ticks;
                    } else {
                        vars[axis].ticks.visible = tens;
                    }
                } else {
                    vars[axis].ticks.visible = vars[axis].ticks.values;
                }
                if (vars[axis].value === vars.time.value) {
                    vars[axis].ticks.visible = vars[axis].ticks.visible.map(function(d) {
                        if (d.constructor === Number && ("" + d).length > 4) {
                            return d;
                        }
                        d += "";
                        if (d.length === 4 && parseInt(d) + "" === d) {
                            d += "/01/01";
                        }
                        return new Date(d).getTime();
                    });
                }
            }
        }
        if (vars.small) {
            vars.axes.width -= vars.axes.margin.viz.left + vars.axes.margin.viz.right;
            vars.axes.height -= vars.axes.margin.viz.top + vars.axes.margin.viz.bottom;
            for (k = 0, len1 = axes.length; k < len1; k++) {
                axis = axes[k];
                vars[axis].label.height = 0;
            }
        } else {
            if (!vars.small) {
                labelPadding(vars);
            }
        }
        for (l = 0, len2 = axes.length; l < len2; l++) {
            axis = axes[l];
            vars[axis].axis.svg = createAxis(vars, axis);
        }
    };

    labelPadding = function(vars) {
        var axis, j, k, lastTick, len, len1, margin, ref, ref1, rightLabel, rightMod, x2Domain, xAttrs, xAxisHeight, xAxisWidth, xDomain, xLabel, xLabelAttrs, xMaxWidth, xSizes, xText, xValues, y2Domain, yAttrs, yAxisWidth, yDomain, yLabel, yLabelAttrs, yText, yValues;
        xDomain = vars.x.scale.viz.domain();
        yDomain = vars.y.scale.viz.domain();
        if (vars.x2.value) {
            x2Domain = vars.x2.scale.viz.domain();
        }
        if (vars.y2.value) {
            y2Domain = vars.y2.scale.viz.domain();
        }
        ref = ["y", "y2"];
        for (j = 0, len = ref.length; j < len; j++) {
            axis = ref[j];
            if (vars[axis].value) {
                margin = axis === "y" ? "left" : "right";
                yAttrs = {
                    "font-size": vars[axis].ticks.font.size + "px",
                    "font-family": vars[axis].ticks.font.family.value,
                    "font-weight": vars[axis].ticks.font.weight,
                    "text-transform": vars[axis].ticks.font.transform.value,
                    "letter-spacing": vars[axis].ticks.font.spacing + "px"
                };
                yValues = vars[axis].ticks.visible;
                if (vars[axis].scale.value === "log") {
                    yText = yValues.map(function(d) {
                        return formatPower(d);
                    });
                } else if (vars[axis].scale.value === "share") {
                    yText = yValues.map(function(d) {
                        return vars.format.value(d * 100, {
                            key: "share",
                            vars: vars,
                            output: axis
                        });
                    });
                } else if (vars[axis].value === vars.time.value) {
                    yText = yValues.map(function(d, i) {
                        return vars[axis].ticks.format(new Date(d));
                    });
                } else {
                    if (typeof yValues[0] === "string") {
                        yValues = vars[axis].scale.viz.domain().filter(function(d) {
                            return d.indexOf("d3po_buffer_") !== 0;
                        });
                    }
                    yText = yValues.map(function(d) {
                        return vars.format.value(d, {
                            key: vars[axis].value,
                            vars: vars,
                            labels: vars[axis].affixes.value,
                            output: axis
                        });
                    });
                }
                if (vars[axis].ticks.labels.value) {
                    vars[axis].ticks.hidden = false;
                    yAxisWidth = d3.max(fontSizes(yText, yAttrs), function(d) {
                        return d.width;
                    });
                    if (yAxisWidth) {
                        yAxisWidth = Math.ceil(yAxisWidth + vars.labels.padding);
                        vars.axes.margin.viz[margin] += yAxisWidth;
                    }
                } else {
                    vars[axis].ticks.hidden = true;
                }
                yLabel = vars[axis].label.fetch(vars);
                if (yLabel) {
                    yLabelAttrs = {
                        "font-family": vars[axis].label.font.family.value,
                        "font-weight": vars[axis].label.font.weight,
                        "font-size": vars[axis].label.font.size + "px",
                        "text-transform": vars[axis].label.font.transform.value,
                        "letter-spacing": vars[axis].label.font.spacing + "px"
                    };
                    vars[axis].label.height = fontSizes([yLabel], yLabelAttrs)[0].height;
                } else {
                    vars[axis].label.height = 0;
                }
                if (vars[axis].label.value) {
                    vars.axes.margin.viz[margin] += vars[axis].label.height;
                    vars.axes.margin.viz[margin] += vars[axis].label.padding * 2;
                }
            }
        }
        vars.axes.width -= vars.axes.margin.viz.left + vars.axes.margin.viz.right;
        vars.x.scale.viz.range(buckets([0, vars.axes.width], xDomain.length));
        if (x2Domain) {
            vars.x2.scale.viz.range(buckets([0, vars.axes.width], x2Domain.length));
        }
        ref1 = ["x", "x2"];
        for (k = 0, len1 = ref1.length; k < len1; k++) {
            axis = ref1[k];
            if (vars[axis].value) {
                margin = axis === "x" ? "bottom" : "top";
                if (vars[axis].ticks.labels.value) {
                    vars[axis].ticks.hidden = false;
                    xAttrs = {
                        "font-size": vars[axis].ticks.font.size + "px",
                        "font-family": vars[axis].ticks.font.family.value,
                        "font-weight": vars[axis].ticks.font.weight,
                        "text-transform": vars[axis].ticks.font.transform.value,
                        "letter-spacing": vars[axis].ticks.font.spacing + "px"
                    };
                    xValues = vars[axis].ticks.visible;
                    if (vars[axis].scale.value === "log") {
                        xText = xValues.map(function(d) {
                            return formatPower(d);
                        });
                    } else if (vars[axis].scale.value === "share") {
                        xText = xValues.map(function(d) {
                            return vars.format.value(d * 100, {
                                key: "share",
                                vars: vars,
                                output: axis
                            });
                        });
                    } else if (vars[axis].value === vars.time.value) {
                        xText = xValues.map(function(d, i) {
                            return vars[axis].ticks.format(new Date(d));
                        });
                    } else {
                        if (typeof xValues[0] === "string") {
                            xValues = vars[axis].scale.viz.domain().filter(function(d) {
                                return d.indexOf("d3po_buffer_") !== 0;
                            });
                        }
                        xText = xValues.map(function(d) {
                            return vars.format.value(d, {
                                key: vars[axis].value,
                                vars: vars,
                                labels: vars[axis].affixes.value,
                                output: axis
                            });
                        });
                    }
                    xSizes = fontSizes(xText, xAttrs);
                    xAxisWidth = d3.max(xSizes, function(d) {
                        return d.width;
                    });
                    xAxisHeight = d3.max(xSizes, function(d) {
                        return d.height;
                    });
                    if (xValues.length === 1) {
                        xMaxWidth = vars.axes.width;
                    } else {
                        xMaxWidth = vars[axis].scale.viz(xValues[1]) - vars[axis].scale.viz(xValues[0]);
                        xMaxWidth = Math.abs(xMaxWidth);
                    }
                    if (xAxisWidth > xMaxWidth && xText.join("").indexOf(" ") > 0) {
                        vars[axis].ticks.wrap = true;
                        xSizes = fontSizes(xText, xAttrs, {
                            mod: function(elem) {
                                return textwrap().container(d3.select(elem)).height(vars.axes.height / 2).width(xMaxWidth).draw();
                            }
                        });
                        xAxisWidth = d3.max(xSizes, function(d) {
                            return d.width;
                        });
                        xAxisHeight = d3.max(xSizes, function(d) {
                            return d.height;
                        });
                    } else {
                        vars[axis].ticks.wrap = false;
                    }
                    vars[axis].ticks.baseline = "auto";
                    if (xAxisWidth <= xMaxWidth) {
                        vars[axis].ticks.rotate = 0;
                    } else if (xAxisWidth < vars.axes.height / 2) {
                        xSizes = fontSizes(xText, xAttrs, {
                            mod: function(elem) {
                                return textwrap().container(d3.select(elem)).width(vars.axes.height / 2).height(xMaxWidth).draw();
                            }
                        });
                        xAxisHeight = d3.max(xSizes, function(d) {
                            return d.width;
                        });
                        xAxisWidth = d3.max(xSizes, function(d) {
                            return d.height;
                        });
                        vars[axis].ticks.rotate = -90;
                    } else {
                        xAxisWidth = 0;
                        xAxisHeight = 0;
                    }
                    if (!(xAxisWidth && xAxisHeight)) {
                        vars[axis].ticks.hidden = true;
                        vars[axis].ticks.rotate = 0;
                    }
                    xAxisWidth = Math.ceil(xAxisWidth);
                    xAxisHeight = Math.ceil(xAxisHeight);
                    vars[axis].ticks.maxHeight = xAxisHeight;
                    vars[axis].ticks.maxWidth = xAxisWidth;
                    if (xAxisHeight) {
                        vars.axes.margin.viz[margin] += xAxisHeight + vars.labels.padding;
                    }
                    lastTick = vars[axis].ticks.visible[vars[axis].ticks.visible.length - 1];
                    rightLabel = vars[axis].scale.viz(lastTick);
                    rightLabel += xAxisWidth / 2 + vars.axes.margin.viz.left;
                    if (rightLabel > vars.width.value) {
                        rightMod = rightLabel - vars.width.value + vars.axes.margin.viz.right;
                        vars.axes.width -= rightMod;
                        vars.axes.margin.viz.right += rightMod;
                    }
                } else {
                    vars[axis].ticks.hidden = true;
                }
                xLabel = vars[axis].label.fetch(vars);
                if (xLabel) {
                    xLabelAttrs = {
                        "font-family": vars[axis].label.font.family.value,
                        "font-weight": vars[axis].label.font.weight,
                        "font-size": vars[axis].label.font.size + "px",
                        "text-transform": vars[axis].label.font.transform.value,
                        "letter-spacing": vars[axis].label.font.spacing + "px"
                    };
                    vars[axis].label.height = fontSizes([xLabel], xLabelAttrs)[0].height;
                } else {
                    vars[axis].label.height = 0;
                }
                if (vars[axis].label.value) {
                    vars.axes.margin.viz[margin] += vars[axis].label.height;
                    vars.axes.margin.viz[margin] += vars[axis].label.padding * 2;
                }
            }
        }
        vars.axes.height -= vars.axes.margin.viz.top + vars.axes.margin.viz.bottom;
        vars.x.scale.viz.range(buckets([0, vars.axes.width], xDomain.length));
        if (x2Domain) {
            vars.x2.scale.viz.range(buckets([0, vars.axes.width], x2Domain.length));
        }
        vars.y.scale.viz.range(buckets([0, vars.axes.height], yDomain.length));
        if (y2Domain) {
            return vars.y2.scale.viz.range(buckets([0, vars.axes.height], y2Domain.length));
        }
    };

    createAxis = function(vars, axis) {
        return d3.svg.axis().tickSize(vars[axis].ticks.size).tickPadding(5).orient(vars[axis].orient.value).scale(vars[axis].scale.viz).tickValues(vars[axis].ticks.values).tickFormat(function(d, i) {
            var c, scale;
            if (vars[axis].ticks.hidden) {
                return null;
            }
            scale = vars[axis].scale.value;
            c = d.constructor === Date ? +d : d;
            if (vars[axis].ticks.visible.indexOf(c) >= 0) {
                if (scale === "share") {
                    return vars.format.value(d * 100, {
                        key: "share",
                        vars: vars,
                        labels: vars[axis].affixes.value,
                        output: axis
                    });
                } else if (d.constructor === Date) {
                    return vars[axis].ticks.format(d);
                } else if (scale === "log") {
                    return formatPower(d);
                } else {
                    return vars.format.value(d, {
                        key: vars[axis].value,
                        vars: vars,
                        labels: vars[axis].affixes.value,
                        output: axis
                    });
                }
            } else {
                return null;
            }
        });
    };

    superscript = "⁰¹²³⁴⁵⁶⁷⁸⁹";

    formatPower = function(d) {
        var n, p, t;
        p = Math.round(Math.log(Math.abs(d)) / Math.LN10);
        t = Math.abs(d).toString().charAt(0);
        n = 10 + " " + (p + "").split("").map(function(c) {
            return superscript[c];
        }).join("");
        if (t !== "1") {
            n = t + " x " + n;
        }
        if (d < 0) {
            return "-" + n;
        } else {
            return n;
        }
    };

}).call(this);
},{"../../../../../core/data/time.js":94,"../../../../../core/fetch/value.js":99,"../../../../../font/sizes.js":136,"../../../../../textwrap/textwrap.js":235,"../../../../../util/buckets.js":239,"../../../../../util/uniques.js":245,"./buffer.js":358}],361:[function(require,module,exports){
(function() {
    var mix, textwrap, validObject;

    mix = require("../../../../../color/mix.js");

    textwrap = require("../../../../../textwrap/textwrap.js");

    validObject = require("../../../../../object/validate.js");

    module.exports = function(vars) {
        var affixes, alignMap, axis, axisData, axisGroup, axisLabel, bg, bgStyle, d, domain, domains, getFontStyle, grid, gridData, groupEnter, j, k, l, label, labelData, labelStyle, len, len1, len2, len3, len4, line, lineData, lineFont, lineGroup, lineRects, lineStyle, lines, linetexts, m, mirror, n, opp, plane, planeTrans, position, realData, rectData, rectStyle, ref, ref1, ref2, ref3, rotated, sep, style, textData, textPad, textPos, tickFont, tickPosition, tickStyle, userLines, valid, xStyle, yStyle;
        domains = vars.x.domain.viz.concat(vars.y.domain.viz);
        if (domains.indexOf(void 0) >= 0) {
            return null;
        }
        bgStyle = {
            width: vars.axes.width,
            height: vars.axes.height,
            fill: vars.axes.background.color,
            stroke: vars.axes.background.stroke.color,
            "stroke-width": vars.axes.background.stroke.width,
            "shape-rendering": vars.axes.background.rendering.value
        };
        alignMap = {
            left: "start",
            center: "middle",
            right: "end"
        };
        axisData = vars.small ? [] : [0];
        tickPosition = function(tick, axis) {
            return tick.attr("x1", function(d) {
                if (axis.indexOf("x") === 0) {
                    return vars.x.scale.viz(d);
                } else {
                    return 0;
                }
            }).attr("x2", function(d) {
                if (axis.indexOf("x") === 0) {
                    return vars.x.scale.viz(d);
                } else {
                    return vars.axes.width;
                }
            }).attr("y1", function(d) {
                if (axis.indexOf("y") === 0) {
                    return vars.y.scale.viz(d);
                } else {
                    return 0;
                }
            }).attr("y2", function(d) {
                if (axis.indexOf("y") === 0) {
                    return vars.y.scale.viz(d);
                } else {
                    return vars.axes.height;
                }
            });
        };
        tickStyle = function(tick, axis, grid) {
            var color, log, visibles;
            color = grid ? vars[axis].grid.color : vars[axis].ticks.color;
            log = vars[axis].scale.value === "log";
            visibles = vars[axis].ticks.visible || [];
            return tick.attr("stroke", function(d) {
                var visible;
                if (d === 0) {
                    return vars[axis].axis.color;
                }
                if (d.constructor === Date) {
                    d = +d;
                }
                visible = visibles.indexOf(d) >= 0;
                if (visible && (!log || Math.abs(d).toString().charAt(0) === "1")) {
                    return color;
                } else if (grid && vars.axes.background.color !== "transparent") {
                    return mix(color, vars.axes.background.color, 0.4, 1);
                } else if (vars.background.value !== "transparent") {
                    return mix(color, vars.background.value, 0.4, 1);
                } else {
                    return mix(color, "white", 0.4, 1);
                }
            }).attr("stroke-width", vars[axis].ticks.width).attr("shape-rendering", vars[axis].ticks.rendering.value);
        };
        getFontStyle = function(axis, val, style) {
            var type;
            type = val === 0 ? "axis" : "ticks";
            val = vars[axis][type].font[style];
            if (val && (val.length || typeof val === "number")) {
                return val;
            } else {
                return vars[axis].ticks.font[style];
            }
        };
        tickFont = function(tick, axis) {
            var log;
            log = vars[axis].scale.value === "log";
            return tick.attr("font-size", function(d) {
                return getFontStyle(axis, d, "size") + "px";
            }).attr("stroke", "none").attr("fill", function(d) {
                var color;
                color = getFontStyle(axis, d, "color");
                if (!log || Math.abs(d).toString().charAt(0) === "1") {
                    return color;
                } else {
                    return mix(color, vars.background.value, 0.4, 1);
                }
            }).attr("font-family", function(d) {
                return getFontStyle(axis, d, "family").value;
            }).attr("font-weight", function(d) {
                return getFontStyle(axis, d, "weight");
            }).style("text-transform", function(d) {
                return getFontStyle(axis, d, "transform").value;
            }).style("letter-spacing", function(d) {
                return getFontStyle(axis, d, "spacing") + "px";
            });
        };
        lineStyle = function(line, axis) {
            var max, opp;
            max = axis.indexOf("x") === 0 ? "height" : "width";
            opp = axis.indexOf("x") === 0 ? "y" : "x";
            return line.attr(opp + "1", 0).attr(opp + "2", vars.axes[max]).attr(axis + "1", function(d) {
                return d.coords.line;
            }).attr(axis + "2", function(d) {
                return d.coords.line;
            }).attr("stroke", function(d) {
                return d.color || vars[axis].lines.color;
            }).attr("stroke-width", vars[axis].lines.width).attr("shape-rendering", vars[axis].lines.rendering.value).attr("stroke-dasharray", vars[axis].lines.dasharray.value);
        };
        lineFont = function(text, axis) {
            var opp;
            opp = axis.indexOf("x") === 0 ? "y" : "x";
            return text.attr(opp, function(d) {
                return d.coords.text[opp] + "px";
            }).attr(axis, function(d) {
                return d.coords.text[axis] + "px";
            }).attr("dy", vars[axis].lines.font.position.value).attr("text-anchor", alignMap[vars[axis].lines.font.align.value]).attr("transform", function(d) {
                return d.transform;
            }).attr("font-size", vars[axis].lines.font.size + "px").attr("fill", function(d) {
                return d.color || vars[axis].lines.color;
            }).attr("font-family", vars[axis].lines.font.family.value).attr("font-weight", vars[axis].lines.font.weight);
        };
        planeTrans = "translate(" + vars.axes.margin.viz.left + "," + vars.axes.margin.viz.top + ")";
        plane = vars.group.selectAll("g#d3po_graph_plane").data([0]);
        plane.transition().duration(vars.draw.timing).attr("transform", planeTrans);
        plane.enter().append("g").attr("id", "d3po_graph_plane").attr("transform", planeTrans);
        bg = plane.selectAll("rect#d3po_graph_background").data([0]);
        bg.transition().duration(vars.draw.timing).attr(bgStyle);
        bg.enter().append("rect").attr("id", "d3po_graph_background").attr("x", 0).attr("y", 0).attr(bgStyle);
        mirror = plane.selectAll("path#d3po_graph_mirror").data([0]);
        mirror.enter().append("path").attr("id", "d3po_graph_mirror").attr("fill", "#000").attr("fill-opacity", 0.03).attr("stroke-width", 1).attr("stroke", "#ccc").attr("stroke-dasharray", "10,10").attr("opacity", 0);
        mirror.transition().duration(vars.draw.timing).attr("opacity", function() {
            if (vars.axes.mirror.value) {
                return 1;
            } else {
                return 0;
            }
        }).attr("d", function() {
            var h, w;
            w = bgStyle.width;
            h = bgStyle.height;
            return "M " + w + " " + h + " L 0 " + h + " L " + w + " 0 Z";
        });
        rotated = vars.x.ticks.rotate !== 0;
        xStyle = function(group, axis) {
            var groups, offset;
            offset = axis === "x" ? vars.axes.height : 0;
            groups = group.attr("transform", "translate(0," + offset + ")").call(vars[axis].axis.svg.scale(vars[axis].scale.viz)).selectAll("g.tick");
            groups.selectAll("line").attr("y2", function(d) {
                var y2;
                if (d.constructor === Date) {
                    d = +d;
                }
                y2 = d3.select(this).attr("y2");
                if (vars[axis].ticks.visible.indexOf(d) >= 0) {
                    return y2;
                } else {
                    return y2 / 2;
                }
            });
            return groups.select("text").style("text-anchor", rotated && axis === "x" ? "end" : rotated ? "start" : "middle").call(tickFont, axis).each(function(d) {
                d3.select(this).attr("dy", "0px").attr("font-size", function(d) {
                    return getFontStyle(axis, d, "size") + "px";
                });
                if (d.constructor === Date) {
                    d = +d;
                }
                if (!vars[axis].ticks.hidden && vars[axis].ticks.visible.indexOf(d) >= 0) {
                    return textwrap().container(d3.select(this)).rotate(vars[axis].ticks.rotate).align(rotated ? "end" : "center").valign(rotated ? "middle" : axis === "x" ? "top" : "bottom").width(vars[axis].ticks.maxWidth + 2).height(vars[axis].ticks.maxHeight).padding(0).x(-vars[axis].ticks.maxWidth / 2).y(axis === "x2" ? -(vars[axis].ticks.maxHeight + vars.labels.padding * 2) : 0).draw();
                }
            });
        };
        yStyle = function(group, axis) {
            var groups, offset;
            offset = axis === "y2" ? vars.axes.width : 0;
            groups = group.attr("transform", "translate(" + offset + ", 0)").call(vars[axis].axis.svg.scale(vars[axis].scale.viz)).selectAll("g.tick");
            groups.selectAll("line").attr("y2", function(d) {
                var y2;
                if (d.constructor === Date) {
                    d = +d;
                }
                y2 = d3.select(this).attr("y2");
                if (vars.x.ticks.visible.indexOf(d) >= 0) {
                    return y2;
                } else {
                    return y2 / 2;
                }
            });
            return groups.select("text").call(tickFont, axis);
        };
        ref = ["x", "x2", "y", "y2"];
        for (j = 0, len = ref.length; j < len; j++) {
            axis = ref[j];
            style = axis.indexOf("x") === 0 ? xStyle : yStyle;
            realData = axisData.length && vars[axis].value ? [0] : [];
            axisGroup = plane.selectAll("g#d3po_graph_" + axis + "ticks").data(realData);
            axisGroup.transition().duration(vars.draw.timing).call(style, axis);
            axisGroup.selectAll("line").transition().duration(vars.draw.timing).call(tickStyle, axis);
            groupEnter = axisGroup.enter().append("g").attr("id", "d3po_graph_" + axis + "ticks").call(style, axis);
            groupEnter.selectAll("path").attr("fill", "none").attr("stroke", "none");
            groupEnter.selectAll("line").call(tickStyle, axis);
            axisGroup.exit().transition().duration(vars.data.timing).attr("opacity", 0).remove();
        }
        labelStyle = function(label, axis) {
            return label.attr("x", axis.indexOf("x") === 0 ? vars.width.viz / 2 : -(vars.axes.height / 2 + vars.axes.margin.viz.top)).attr("y", axis === "x" ? vars.height.viz - vars[axis].label.height / 2 - vars[axis].label.padding : axis === "y2" ? vars.width.viz - vars[axis].label.height / 2 - vars[axis].label.padding : vars[axis].label.height / 2 + vars[axis].label.padding).attr("transform", axis.indexOf("y") === 0 ? "rotate(-90)" : null).attr("font-family", vars[axis].label.font.family.value).attr("font-weight", vars[axis].label.font.weight).attr("font-size", vars[axis].label.font.size + "px").attr("fill", vars[axis].label.font.color).style("text-anchor", "middle").attr("dominant-baseline", "central").style("text-transform", vars[axis].label.font.transform.value).style("letter-spacing", vars[axis].label.font.spacing + "px");
        };
        ref1 = ["x", "y"];
        for (k = 0, len1 = ref1.length; k < len1; k++) {
            axis = ref1[k];
            if (vars[axis].grid.value) {
                if (vars[axis].ticks.value) {
                    gridData = vars[axis].ticks.value;
                } else {
                    gridData = vars[axis].ticks.values;
                }
            } else {
                gridData = [];
                opp = axis === "x" ? "y" : "x";
                if (vars[axis].ticks.values.indexOf(0) >= 0 && vars[opp].axis.value) {
                    gridData = [0];
                }
            }
            if (vars[axis].value === vars.time.value) {
                gridData = gridData.map(function(d) {
                    d += "";
                    if (d.length === 4 && parseInt(d) + "" === d) {
                        d += "/01/01";
                    }
                    return new Date(d).getTime();
                });
            }
            grid = plane.selectAll("g#d3po_graph_" + axis + "grid").data([0]);
            grid.enter().append("g").attr("id", "d3po_graph_" + axis + "grid");
            lines = grid.selectAll("line").data(gridData, function(d, i) {
                if (d.constructor === Date) {
                    return d.getTime();
                } else {
                    return d;
                }
            });
            lines.transition().duration(vars.draw.timing).call(tickPosition, axis).call(tickStyle, axis, true);
            lines.enter().append("line").style("opacity", 0).call(tickPosition, axis).call(tickStyle, axis, true).transition().duration(vars.draw.timing).delay(vars.draw.timing / 2).style("opacity", 1);
            lines.exit().transition().duration(vars.draw.timing / 2).style("opacity", 0).remove();
        }
        ref2 = ["x", "x2", "y", "y2"];
        for (l = 0, len2 = ref2.length; l < len2; l++) {
            axis = ref2[l];
            if (vars[axis].value) {
                axisLabel = vars[axis].label.fetch(vars);
                labelData = axisData && axisLabel && !vars.small ? [0] : [];
                affixes = vars.format.affixes.value[vars[axis].value];
                if (axisLabel && !vars[axis].affixes.value && affixes) {
                    sep = vars[axis].affixes.separator.value;
                    if (sep === true) {
                        sep = ["[", "]"];
                    } else if (sep === false) {
                        sep = ["", ""];
                    }
                    axisLabel += " " + sep[0] + affixes[0] + " " + affixes[1] + sep[1];
                }
            } else {
                axisLabel = "";
                labelData = [];
            }
            label = vars.group.selectAll("text#d3po_graph_" + axis + "label").data(labelData);
            label.text(axisLabel).transition().duration(vars.draw.timing).call(labelStyle, axis);
            label.enter().append("text").attr("stroke", "none").attr("id", "d3po_graph_" + axis + "label").text(axisLabel).call(labelStyle, axis);
            label.exit().transition().duration(vars.data.timing).attr("opacity", 0).remove();
        }
        ref3 = ["x", "y", "x2", "y2"];
        for (m = 0, len3 = ref3.length; m < len3; m++) {
            axis = ref3[m];
            if (vars[axis].value) {
                lineGroup = plane.selectAll("g#d3po_graph_" + axis + "_userlines").data([0]);
                lineGroup.enter().append("g").attr("id", "d3po_graph_" + axis + "_userlines");
                domain = vars[axis].scale.viz.domain();
                if (axis.indexOf("y") === 0) {
                    domain = domain.slice().reverse();
                }
                textData = [];
                lineData = [];
                userLines = vars[axis].lines.value || [];
                for (n = 0, len4 = userLines.length; n < len4; n++) {
                    line = userLines[n];
                    d = validObject(line) ? line.position : line;
                    if (axis === vars.axes.discrete) {
                        valid = domain.indexOf(d) >= 0;
                    } else {
                        valid = d >= domain[0] && d <= domain[1];
                    }
                    if (valid) {
                        d = !validObject(line) ? {
                            "position": d
                        } : line;
                        d.coords = {
                            line: vars[axis].scale.viz(d.position)
                        };
                        lineData.push(d);
                        if (d.text) {
                            d.axis = axis;
                            d.padding = vars[axis].lines.font.padding.value * 0.5;
                            d.align = vars[axis].lines.font.align.value;
                            position = vars[axis].lines.font.position.text;
                            textPad = position === "middle" ? 0 : d.padding * 2;
                            if (position === "top") {
                                textPad = -textPad;
                            }
                            if (axis.indexOf("x") === 0) {
                                textPos = d.align === "left" ? vars.axes.height : d.align === "center" ? vars.axes.height / 2 : 0;
                                if (d.align === "left") {
                                    textPos -= d.padding * 2;
                                }
                                if (d.align === "right") {
                                    textPos += d.padding * 2;
                                }
                            } else {
                                textPos = d.align === "left" ? 0 : d.align === "center" ? vars.axes.width / 2 : vars.axes.width;
                                if (d.align === "right") {
                                    textPos -= d.padding * 2;
                                }
                                if (d.align === "left") {
                                    textPos += d.padding * 2;
                                }
                            }
                            d.coords.text = {};
                            d.coords.text[axis.indexOf("x") === 0 ? "y" : "x"] = textPos;
                            d.coords.text[axis] = vars[axis].scale.viz(d.position) + textPad;
                            d.transform = axis.indexOf("x") === 0 ? "rotate(-90," + d.coords.text.x + "," + d.coords.text.y + ")" : null;
                            textData.push(d);
                        }
                    }
                }
                lines = lineGroup.selectAll("line.d3po_graph_" + axis + "line").data(lineData, function(d) {
                    return d.position;
                });
                lines.enter().append("line").attr("class", "d3po_graph_" + axis + "line").attr("opacity", 0).call(lineStyle, axis);
                lines.transition().duration(vars.draw.timing).attr("opacity", 1).call(lineStyle, axis);
                lines.exit().transition().duration(vars.draw.timing).attr("opacity", 0).remove();
                linetexts = lineGroup.selectAll("text.d3po_graph_" + axis + "line_text").data(textData, function(d) {
                    return d.position;
                });
                linetexts.enter().append("text").attr("class", "d3po_graph_" + axis + "line_text").attr("id", function(d) {
                    var id;
                    id = d.position + "";
                    id = id.replace("-", "neg");
                    id = id.replace(".", "p");
                    return "d3po_graph_" + axis + "line_text_" + id;
                }).attr("opacity", 0).call(lineFont, axis);
                linetexts.text(function(d) {
                    return d.text;
                }).transition().duration(vars.draw.timing).attr("opacity", 1).call(lineFont, axis);
                linetexts.exit().transition().duration(vars.draw.timing).attr("opacity", 0).remove();
                rectStyle = function(rect) {
                    var getText;
                    getText = function(d) {
                        var id;
                        id = d.position + "";
                        id = id.replace("-", "neg");
                        id = id.replace(".", "p");
                        return plane.select("text#d3po_graph_" + d.axis + "line_text_" + id).node().getBBox();
                    };
                    return rect.attr("x", function(d) {
                        return getText(d).x - d.padding;
                    }).attr("y", function(d) {
                        return getText(d).y - d.padding;
                    }).attr("transform", function(d) {
                        return d.transform;
                    }).attr("width", function(d) {
                        return getText(d).width + (d.padding * 2);
                    }).attr("height", function(d) {
                        return getText(d).height + (d.padding * 2);
                    }).attr("fill", vars.axes.background.color !== "transparent" ? vars.axes.background.color : "white");
                };
                rectData = vars[axis].lines.font.background.value ? textData : [];
                lineRects = lineGroup.selectAll("rect.d3po_graph_" + axis + "line_rect").data(rectData, function(d) {
                    return d.position;
                });
                lineRects.enter().insert("rect", "text.d3po_graph_" + axis + "line_text").attr("class", "d3po_graph_" + axis + "line_rect").attr("pointer-events", "none").attr("opacity", 0).call(rectStyle);
                lineRects.transition().delay(vars.draw.timing).each("end", function(d) {
                    return d3.select(this).transition().duration(vars.draw.timing).attr("opacity", 1).call(rectStyle);
                });
                lineRects.exit().transition().duration(vars.draw.timing).attr("opacity", 0).remove();
            }
        }
    };

}).call(this);
},{"../../../../../color/mix.js":77,"../../../../../object/validate.js":207,"../../../../../textwrap/textwrap.js":235}],362:[function(require,module,exports){
(function() {
    var fetchValue, stringStrip, uniqueValues;

    fetchValue = require("../../../../core/fetch/value.js");

    stringStrip = require("../../../../string/strip.js");

    uniqueValues = require("../../../../util/uniques.js");

    module.exports = function(vars, data, keys) {
        var discrete, extras, key, opposite, serialized, ticks, timeAxis;
        if (keys === void 0) {
            keys = vars.id.nesting.slice(0, vars.depth.value + 1);
        } else if (keys.constructor !== Array) {
            keys = [keys];
        }
        if (extras === void 0) {
            extras = [];
        }
        if (!data) {
            data = vars.data.viz;
        }
        discrete = vars[vars.axes.discrete];
        opposite = vars[vars.axes.opposite];
        timeAxis = discrete.value === vars.time.value;
        if (timeAxis) {
            ticks = vars.data.time.ticks;
            key = vars.time.solo.value.length ? "solo" : "mute";
            if (vars.time[key].value.length) {
                serialized = vars.time[key].value.slice().map(function(f) {
                    if (f.constructor !== Date) {
                        f = f + "";
                        if (f.length === 4 && parseInt(f) + "" === f) {
                            f += "/01/01";
                        }
                        f = new Date(f);
                    }
                    return +f;
                });
                ticks = ticks.filter(function(f) {
                    if (key === "solo") {
                        return serialized.indexOf(+f) >= 0;
                    } else {
                        return serialized.indexOf(+f) < 0;
                    }
                });
            }
        } else if (discrete.ticks.values) {
            ticks = discrete.ticks.values;
        } else {
            ticks = uniqueValues(data, discrete.value, fetchValue, vars);
        }
        return d3.nest().key(function(d) {
            var id, j, len, return_id, val;
            return_id = "nesting";
            for (j = 0, len = keys.length; j < len; j++) {
                id = keys[j];
                val = fetchValue(vars, d, id);
                if (val instanceof Array) {
                    val = val.join("_");
                }
                return_id += "_" + stringStrip(val);
            }
            return return_id;
        }).rollup(function(leaves) {
            var availables, filler, i, j, k, len, len1, obj, ref, tester, tick, timeVar;
            availables = uniqueValues(leaves, discrete.value, fetchValue, vars);
            timeVar = availables.length && availables[0].constructor === Date;
            if (timeVar) {
                availables = availables.map(Number);
            }
            if (discrete.zerofill.value) {
                if (discrete.scale.value === "log") {
                    if (opposite.scale.viz.domain().every(function(d) {
                            return d < 0;
                        })) {
                        filler = -1;
                    } else {
                        filler = 1;
                    }
                } else {
                    filler = 0;
                }
                for (i = j = 0, len = ticks.length; j < len; i = ++j) {
                    tick = ticks[i];
                    tester = timeAxis ? +tick : tick;
                    if (availables.indexOf(tester) < 0) {
                        obj = {
                            d3po: {}
                        };
                        ref = vars.id.nesting;
                        for (k = 0, len1 = ref.length; k < len1; k++) {
                            key = ref[k];
                            if (key in leaves[0]) {
                                obj[key] = leaves[0][key];
                            }
                        }
                        obj[discrete.value] = tick;
                        obj[opposite.value] = 0;
                        obj[opposite.value] = filler;
                        leaves.splice(i, 0, obj);
                    }
                }
            }
            if (typeof leaves[0][discrete.value] === "string") {
                return leaves;
            } else {
                return leaves.sort(function(a, b) {
                    var ad, ao, bd, bo, xsort;
                    ad = fetchValue(vars, a, discrete.value);
                    bd = fetchValue(vars, b, discrete.value);
                    xsort = ad - bd;
                    if (xsort) {
                        return xsort;
                    }
                    ao = fetchValue(vars, a, opposite.value);
                    bo = fetchValue(vars, b, opposite.value);
                    return ao - bo;
                });
            }
        }).entries(data);
    };

}).call(this);
},{"../../../../core/fetch/value.js":99,"../../../../string/strip.js":210,"../../../../util/uniques.js":245}],363:[function(require,module,exports){
(function() {
    var fetchValue;

    fetchValue = require("../../../../core/fetch/value.js");

    module.exports = function(vars, data) {
        var d, flip, i, j, len, len1, margin, neg, negativeData, offset, opposite, positiveData, scale, stack, stacked, v, val;
        stacked = vars.axes.stacked || vars.axes.opposite;
        flip = vars[stacked].scale.viz(0);
        scale = vars[stacked].scale.value;
        opposite = stacked === "x" ? "y" : "x";
        margin = stacked === "y" ? vars.axes.margin.viz.top : vars.axes.margin.viz.left;
        offset = scale === "share" ? "expand" : "zero";
        stack = d3.layout.stack().values(function(d) {
            return d.values || [d];
        }).offset(offset).x(function(d) {
            return d.d3po[opposite];
        }).y(function(d) {
            return flip - vars[stacked].scale.viz(fetchValue(vars, d, vars[stacked].value));
        }).out(function(d, y0, y) {
            var negative, value;
            value = fetchValue(vars, d, vars[stacked].value);
            negative = value < 0;
            if (scale === "share") {
                d.d3po[stacked + "0"] = (1 - y0) * flip;
                d.d3po[stacked] = d.d3po[stacked + "0"] - (y * flip);
            } else {
                d.d3po[stacked + "0"] = flip;
                if (vars.axes.stacked) {
                    d.d3po[stacked + "0"] -= y0;
                }
                d.d3po[stacked] = d.d3po[stacked + "0"] - y;
            }
            d.d3po[stacked] += margin;
            return d.d3po[stacked + "0"] += margin;
        });
        positiveData = [];
        negativeData = [];
        for (i = 0, len = data.length; i < len; i++) {
            d = data[i];
            val = fetchValue(vars, d, vars[stacked].value);
            if (val instanceof Array) {
                neg = true;
                for (j = 0, len1 = val.length; j < len1; j++) {
                    v = val[j];
                    if (v >= 0) {
                        neg = false;
                        break;
                    }
                }
                if (neg) {
                    negativeData.push(d);
                } else {
                    positiveData.push(d);
                }
            } else {
                if (val >= 0) {
                    positiveData.push(d);
                }
                if (val < 0) {
                    negativeData.push(d);
                }
            }
        }
        if (positiveData.length === 0 || negativeData.length === 0) {
            return stack(data);
        } else {
            if (positiveData.length) {
                positiveData = stack(positiveData);
            }
            if (negativeData.length) {
                negativeData = stack(negativeData);
            }
            return positiveData.concat(negativeData);
        }
    };

}).call(this);
},{"../../../../core/fetch/value.js":99}],364:[function(require,module,exports){
(function() {
    var fetchValue, graph, line, nest, sort, stack;

    fetchValue = require("../../core/fetch/value.js");

    graph = require("./helpers/graph/draw.js");

    nest = require("./helpers/graph/nest.js");

    sort = require("../../array/sort.js");

    stack = require("./helpers/graph/stack.js");

    line = function(vars) {
        var d, data, domains, i, j, len, len1, point, ref, xval, yval;
        graph(vars, {
            buffer: vars.axes.opposite,
            mouse: true
        });
        domains = vars.x.domain.viz.concat(vars.y.domain.viz);
        if (domains.indexOf(void 0) >= 0) {
            return [];
        }
        data = sort(vars.data.viz, null, null, null, vars);
        for (i = 0, len = data.length; i < len; i++) {
            point = data[i];
            ref = point.values;
            for (j = 0, len1 = ref.length; j < len1; j++) {
                d = ref[j];
                xval = fetchValue(vars, d, vars.x.value);
                if (xval !== null) {
                    d.d3po.x2 = false;
                    d.d3po.x = vars.x.scale.viz(xval);
                } else {
                    d.d3po.x2 = true;
                    d.d3po.x = vars.x2.scale.viz(fetchValue(vars, d, vars.x2.value));
                }
                d.d3po.x += vars.axes.margin.viz.left;
                yval = fetchValue(vars, d, vars.y.value);
                if (yval !== null) {
                    d.d3po.y2 = false;
                    d.d3po.y = vars.y.scale.viz(yval);
                } else {
                    d.d3po.y2 = true;
                    d.d3po.y = vars.y2.scale.viz(fetchValue(vars, d, vars.y2.value));
                }
                d.d3po.y += vars.axes.margin.viz.top;
            }
        }
        if (vars.axes.stacked) {
            return stack(vars, data);
        } else {
            return data;
        }
    };

    line.filter = function(vars, data) {
        return nest(vars, data);
    };

    line.requirements = ["data", "x", "y"];

    line.setup = function(vars) {
        var axis;
        if (!vars.axes.discrete) {
            axis = vars.time.value === vars.y.value ? "y" : "x";
            vars.self[axis]({
                scale: "discrete"
            });
        }
    };

    line.shapes = ["line"];

    line.tooltip = "static";

    module.exports = line;

}).call(this);
},{"../../array/sort.js":65,"../../core/fetch/value.js":99,"./helpers/graph/draw.js":356,"./helpers/graph/nest.js":362,"./helpers/graph/stack.js":363}],365:[function(require,module,exports){
var smallestGap = require("../../network/smallestgap.js"),
    fetchValue = require("../../core/fetch/value.js");
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Network
//------------------------------------------------------------------------------
var network = function(vars) {

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Use filtered lists if they are available
    //----------------------------------------------------------------------------
    var nodes = vars.nodes.restricted || vars.nodes.value,
        edges = vars.edges.restricted || vars.edges.value || [];

    var x_range = d3.extent(nodes, function(n) {
            return n.x
        }),
        y_range = d3.extent(nodes, function(n) {
            return n.y
        })

    var val_range = [1, 1]
    if (typeof vars.size.value === "number") {
        val_range = [vars.size.value, vars.size.value]
    } else if (vars.size.value) {
        val_range = d3.extent(nodes, function(d) {
            var val = fetchValue(vars, d, vars.size.value)
            return val === 0 ? null : val
        })
    }
    if (typeof val_range[0] == "undefined") val_range = [1, 1]

    if (typeof vars.size.value === "number") {
        var max_size = vars.size.value;
        var min_size = vars.size.value;
    } else {

        var max_size = smallestGap(nodes, {
            "accessor": function(n) {
                return [n.x, n.y];
            }
        });

        var limit = max_size / 2;

        var overlap = vars.size.value ? vars.nodes.overlap : 0.4
        max_size = max_size * overlap;

        if (vars.edges.arrows.value) {
            max_size = max_size * 0.5;
        }

        if (val_range[0] === val_range[1]) {
            var min_size = limit;
            max_size = limit;
        } else {

            var width = (x_range[1] + max_size * 1.1) - (x_range[0] - max_size * 1.1),
                height = (y_range[1] + max_size * 1.1) - (y_range[0] - max_size * 1.1),
                aspect = width / height,
                app = vars.width.viz / vars.height.viz;

            if (app > aspect) {
                var scale = vars.height.viz / height;
            } else {
                var scale = vars.width.viz / width;
            }
            var min_size = max_size * 0.25;
            if (min_size * scale < 2) {
                min_size = 2 / scale;
            }

        }
    }

    // Create size scale
    var radius = vars.size.scale.value
        .domain(val_range)
        .range([min_size, max_size])

    vars.zoom.bounds = [
        [x_range[0] - max_size * 1.1, y_range[0] - max_size * 1.1],
        [x_range[1] + max_size * 1.1, y_range[1] + max_size * 1.1]
    ]

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Match nodes to data
    //----------------------------------------------------------------------------
    var data = [],
        lookup = {}
    nodes.forEach(function(n) {

        var d = vars.data.viz.filter(function(a) {
            return a[vars.id.value] == n[vars.id.value]
        })[0]

        var obj = d || {}

        obj[vars.id.value] = n[vars.id.value]

        obj.d3po = {}
        obj.d3po.x = n.x
        obj.d3po.y = n.y
        var val = fetchValue(vars, obj, vars.size.value)
        obj.d3po.r = val ? radius(val) : radius.range()[0]
        lookup[obj[vars.id.value]] = {
            "x": obj.d3po.x,
            "y": obj.d3po.y,
            "r": obj.d3po.r
        }

        data.push(obj)
    })

    data.sort(function(a, b) {
        return b.d3po.r - a.d3po.r
    })

    edges.forEach(function(l, i) {

        if (l.d3po) {
            delete l.d3po.spline
        }

        l[vars.edges.source].d3po = {}
        var source = lookup[l[vars.edges.source][vars.id.value]]
        if (source !== undefined) {
            l[vars.edges.source].d3po.r = source.r
            l[vars.edges.source].d3po.x = source.x
            l[vars.edges.source].d3po.y = source.y
        } else {
            delete l[vars.edges.source].d3po;
        }

        l[vars.edges.target].d3po = {}
        var target = lookup[l[vars.edges.target][vars.id.value]]
        if (target !== undefined) {
            l[vars.edges.target].d3po.r = target.r
            l[vars.edges.target].d3po.x = target.x
            l[vars.edges.target].d3po.y = target.y
        } else {
            delete l[vars.edges.target].d3po;
        }

    })

    return {
        "nodes": data,
        "edges": edges
    }

}

//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Visualization Settings and Helper Functions
//------------------------------------------------------------------------------
network.nesting = false
network.requirements = ["nodes"]
network.scale = 1.05
network.shapes = ["circle"]
network.tooltip = "static"
network.zoom = true

module.exports = network
},{"../../core/fetch/value.js":99,"../../network/smallestgap.js":203}],366:[function(require,module,exports){
(function() {
    var fetchValue, shortestPath, uniqueValues, viz,
        indexOf = [].indexOf || function(item) {
            for (var i = 0, l = this.length; i < l; i++) {
                if (i in this && this[i] === item) return i;
            }
            return -1;
        };

    shortestPath = require("../../network/shortestpath.js");

    fetchValue = require("../../core/fetch/value.js");

    uniqueValues = require("../../util/uniques.js");

    viz = function(vars) {
        var base, base1, base2, base3, col, colIndex, columnWidth, columns, edge, edgeInt, edges, i, id, j, k, l, labelSpace, lastDir, lastHop, len, len1, len2, len3, len4, len5, len6, len7, m, maxRadius, minRadius, n, newPath, next, nextDir, nextHop, nextIndex, node, o, p, path, pathInt, pathLookup, paths, prev, prevIndex, q, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, rowHeight, rows, size, sizeDomain, val, x, xDiff, y, yDomain;
        edges = [];
        pathLookup = {};
        pathLookup[vars.focus.value[0]] = 0;
        pathLookup[vars.focus.value[1]] = 0;
        paths = {
            all: [
                [vars.focus.value[0]],
                [vars.focus.value[1]]
            ]
        };
        ref = viz.paths;
        for (pathInt = j = 0, len = ref.length; j < len; pathInt = ++j) {
            path = ref[pathInt];
            edges = edges.concat(path.edges);
            lastHop = vars.focus.value[0];
            paths[pathInt] = [lastHop];
            ref1 = path.edges;
            for (edgeInt = k = 0, len1 = ref1.length; k < len1; edgeInt = ++k) {
                edge = ref1[edgeInt];
                edge[vars.edges.source] = vars.data.viz.filter(function(d) {
                    return edge[vars.edges.source][vars.id.value] === d[vars.id.value];
                })[0];
                edge[vars.edges.target] = vars.data.viz.filter(function(d) {
                    return edge[vars.edges.target][vars.id.value] === d[vars.id.value];
                })[0];
                nextDir = edge[vars.edges.source][vars.id.value] === lastHop ? "target" : "source";
                nextHop = edge[vars.edges[nextDir]][vars.id.value];
                if (pathLookup[nextHop] === void 0) {
                    pathLookup[nextHop] = pathInt;
                }
                paths[pathInt].push(nextHop);
                lastHop = nextHop;
            }
        }
        rows = 0;
        for (pathInt in paths) {
            path = paths[pathInt];
            if (pathInt !== "all") {
                newPath = 0;
                for (i = l = 0, len2 = path.length; l < len2; i = ++l) {
                    id = path[i];
                    if ((i !== 0 && i !== (path.length - 1)) && pathLookup[id] === parseFloat(pathInt)) {
                        newPath = 1;
                        prev = path[i - 1];
                        next = path[i + 1];
                        prevIndex = null;
                        nextIndex = null;
                        ref2 = paths.all;
                        for (colIndex = m = 0, len3 = ref2.length; m < len3; colIndex = ++m) {
                            col = ref2[colIndex];
                            if (indexOf.call(col, prev) >= 0) {
                                prevIndex = colIndex;
                            }
                            if (indexOf.call(col, next) >= 0) {
                                nextIndex = colIndex;
                            }
                        }
                        if (prevIndex !== null && nextIndex === null) {
                            if (prevIndex + 1 === paths.all.length - 1) {
                                paths.all.splice(prevIndex + 1, 0, [id]);
                            } else {
                                paths.all[prevIndex + 1].push(id);
                            }
                        } else if (nextIndex - prevIndex === 1) {
                            paths.all.splice(nextIndex, 0, [id]);
                        } else if (nextIndex - prevIndex > 1) {
                            paths.all[nextIndex - 1].push(id);
                        }
                    }
                }
                rows += newPath;
            }
        }
        rowHeight = Math.floor(vars.height.viz / rows);
        yDomain = [];
        i = 0;
        while (i < rows) {
            if (i % 2 === 0) {
                yDomain.push(i);
            } else {
                yDomain.unshift(i);
            }
            i++;
        }
        labelSpace = vars.size.value && !vars.small ? 30 : 0;
        y = d3.scaleOrdinal().domain(yDomain).range(d3.range(rowHeight / 2 - labelSpace, vars.height.viz + rowHeight / 2 - labelSpace, (vars.height.viz - rowHeight) / (rows - 1)));
        columns = paths["all"].length;
        columnWidth = Math.floor(vars.width.viz / columns);
        x = d3.scaleLinear().domain([0, columns - 1]).rangeRound([columnWidth / 2, vars.width.viz - columnWidth / 2]);
        minRadius = 5;
        maxRadius = d3.min([columnWidth, rowHeight - labelSpace]) * 0.4;
        sizeDomain = d3.extent(vars.data.viz, function(node) {
            var val;
            val = fetchValue(vars, node, vars.size.value);
            return val || 0;
        });
        size = vars.size.scale.value.domain(sizeDomain).rangeRound([minRadius, maxRadius]);
        ref3 = vars.data.viz;
        for (n = 0, len4 = ref3.length; n < len4; n++) {
            node = ref3[n];
            if (node.d3po == null) {
                node.d3po = {};
            }
            ref4 = paths["all"];
            for (colIndex = o = 0, len5 = ref4.length; o < len5; colIndex = ++o) {
                col = ref4[colIndex];
                if (ref5 = node[vars.id.value], indexOf.call(col, ref5) >= 0) {
                    node.d3po.x = x(colIndex);
                }
            }
            node.d3po.y = y(pathLookup[node[vars.id.value]]);
            if (vars.size.value) {
                val = fetchValue(vars, node, vars.size.value);
                node.d3po.r = val ? size(val) : minRadius;
            } else {
                node.d3po.r = maxRadius;
            }
            if (node.d3po.r < columnWidth * 0.1 && !vars.small) {
                node.d3po.label = {
                    x: 0,
                    y: node.d3po.r + vars.labels.padding * 2,
                    w: columnWidth * 0.6,
                    h: labelSpace + maxRadius - node.d3po.r,
                    resize: false
                };
            } else {
                delete node.d3po.label;
            }
        }
        ref6 = viz.paths;
        for (pathInt = p = 0, len6 = ref6.length; p < len6; pathInt = ++p) {
            path = ref6[pathInt];
            lastHop = vars.focus.value[0];
            ref7 = path.edges;
            for (edgeInt = q = 0, len7 = ref7.length; q < len7; edgeInt = ++q) {
                edge = ref7[edgeInt];
                nextDir = edge[vars.edges.source][vars.id.value] === lastHop ? "target" : "source";
                lastDir = nextDir === "target" ? "source" : "target";
                nextHop = edge[vars.edges[nextDir]][vars.id.value];
                if (pathLookup[lastHop] !== pathLookup[nextHop]) {
                    edge.d3po = {
                        spline: true
                    };
                    if ((base = edge[vars.edges.source]).d3po == null) {
                        base.d3po = {};
                    }
                    if ((base1 = edge[vars.edges.source].d3po).edges == null) {
                        base1.edges = {};
                    }
                    if ((base2 = edge[vars.edges.target]).d3po == null) {
                        base2.d3po = {};
                    }
                    if ((base3 = edge[vars.edges.target].d3po).edges == null) {
                        base3.edges = {};
                    }
                    xDiff = edge[nextDir].d3po.x - edge[lastDir].d3po.x;
                    edge[lastDir].d3po.edges[edge[nextDir][vars.id.value]] = {
                        angle: Math.PI,
                        radius: columnWidth / 2
                    };
                    edge[nextDir].d3po.edges[edge[lastDir][vars.id.value]] = {
                        angle: 0,
                        radius: columnWidth / 2,
                        offset: xDiff - columnWidth
                    };
                } else {
                    delete edge.d3po;
                }
                lastHop = nextHop;
            }
        }
        return {
            nodes: vars.data.viz,
            edges: edges
        };
    };

    viz.filter = function(vars, data) {
        var added, d, edge, edges, id, ids, j, k, l, len, len1, len2, obj, path, ref, ref1, returnData, source, target;
        edges = vars.edges.filtered || vars.edges.value;
        viz.paths = shortestPath(edges, vars.focus.value[0], {
            target: vars.focus.value[1],
            distance: vars.edges.size.value || void 0,
            nodeid: vars.id.value,
            startpoint: vars.edges.source,
            endpoint: vars.edges.target,
            K: vars.edges.limit.value || 5
        });
        viz.nodes = [];
        added = [];
        ref = viz.paths;
        for (j = 0, len = ref.length; j < len; j++) {
            path = ref[j];
            ref1 = path.edges;
            for (k = 0, len1 = ref1.length; k < len1; k++) {
                edge = ref1[k];
                source = edge[vars.edges.source];
                target = edge[vars.edges.target];
                if (added.indexOf(source[vars.id.value]) < 0) {
                    viz.nodes.push(source);
                    added.push(source[vars.id.value]);
                }
                if (added.indexOf(target[vars.id.value]) < 0) {
                    viz.nodes.push(target);
                    added.push(target[vars.id.value]);
                }
            }
        }
        ids = uniqueValues(viz.nodes, vars.id.value, fetchValue, vars);
        returnData = [];
        for (l = 0, len2 = ids.length; l < len2; l++) {
            id = ids[l];
            d = data.filter(function(d) {
                return d[vars.id.value] === id;
            });
            if (!d[0]) {
                obj = {
                    d3po: {}
                };
                obj[vars.id.value] = id;
                returnData.push(obj);
            } else {
                returnData.push(d[0]);
            }
        }
        return returnData;
    };

    viz.nesting = false;

    viz.requirements = [
        function(vars) {
            return {
                status: vars.focus.value.length === 2,
                text: vars.format.locale.value.method.focus + " x 2"
            };
        }, "edges"
    ];

    viz.scale = 1;

    viz.shapes = ["circle", "square", "donut"];

    viz.tooltip = "static";

    module.exports = viz;

}).call(this);
},{"../../core/fetch/value.js":99,"../../network/shortestpath.js":202,"../../util/uniques.js":245}],367:[function(require,module,exports){
(function() {
    var comparator, dataThreshold, groupData, pie;

    comparator = require("../../array/comparator.js");

    dataThreshold = require("../../core/data/threshold.js");

    groupData = require("../../core/data/group.js");

    pie = function(vars) {
        var d, groupedData, i, item, len, pieData, pieLayout, radius, returnData;
        pieLayout = d3.pie().value(function(d) {
            return d.value;
        }).sort(function(a, b) {
            if (vars.order.value) {
                return comparator(a.d3po, b.d3po, [vars.order.value], vars.order.sort.value, [], vars);
            } else if (vars.id.nesting.length > 1) {
                return comparator(a.d3po, b.d3po, vars.id.nesting.concat([vars.size.value]), void 0, [], vars);
            } else {
                return comparator(a.d3po, b.d3po, [vars.size.value], "desc", [], vars);
            }
        });
        groupedData = groupData(vars, vars.data.viz, []);
        pieData = pieLayout(groupedData);
        returnData = [];
        radius = d3.min([vars.width.viz, vars.height.viz]) / 2 - vars.labels.padding * 2;
        for (i = 0, len = pieData.length; i < len; i++) {
            d = pieData[i];
            item = d.data.d3po;
            item.d3po.startAngle = d.startAngle;
            item.d3po.endAngle = d.endAngle;
            item.d3po.r_inner = 0;
            item.d3po.r_outer = radius;
            item.d3po.x = vars.width.viz / 2;
            item.d3po.y = vars.height.viz / 2;
            item.d3po.share = (d.endAngle - d.startAngle) / (Math.PI * 2);
            returnData.push(item);
        }
        return returnData;
    };

    pie.filter = dataThreshold;

    pie.requirements = ["data", "size"];

    pie.shapes = ["arc"];

    pie.threshold = function(vars) {
        return (40 * 40) / (vars.width.viz * vars.height.viz);
    };

    module.exports = pie;

}).call(this);
},{"../../array/comparator.js":63,"../../core/data/group.js":88,"../../core/data/threshold.js":93}],368:[function(require,module,exports){
(function() {
    var buckets, comparator, dataThreshold, fetchText, fetchValue, fontSizes, offset, radar, sort, textwrap, uniques;

    comparator = require("../../array/comparator.js");

    sort = require("../../array/sort.js");

    dataThreshold = require("../../core/data/threshold.js");

    fetchText = require("../../core/fetch/text.js");

    fetchValue = require("../../core/fetch/value.js");

    fontSizes = require("../../font/sizes.js");

    offset = require("../../geom/offset.js");

    textwrap = require("../../textwrap/textwrap.js");

    buckets = require("../../util/buckets.js");

    uniques = require("../../util/uniques.js");

    radar = function(vars) {
        var a, a2, anchor, angle, buffer, c, center, children, d, data, first, grid, gridStyle, i, idIndex, ids, intervals, j, k, l, labelData, labelGroup, labelHeight, labelIndex, labelStyle, labelWidth, labels, len, len1, len2, len3, m, maxData, maxRadius, n, nextDepth, nextLevel, o, ov, radius, ref, ref1, righty, ringData, ringStyle, rings, second, sizes, text, textStyle, top, total, x, y;
        data = vars.data.viz;
        nextDepth = vars.depth.value + 1;
        nextLevel = vars.id.nesting[nextDepth];
        children = (function() {
            var j, len, results;
            results = [];
            for (j = 0, len = data.length; j < len; j++) {
                d = data[j];
                results.push(d[nextLevel]);
            }
            return results;
        })();
        total = (function() {
            var j, len, results;
            results = [];
            for (j = 0, len = data.length; j < len; j++) {
                d = data[j];
                results.push(uniques(data, nextLevel, fetchValue, vars, nextDepth));
            }
            return results;
        })();
        total = uniques(d3.merge(total)).length;
        angle = Math.PI * 2 / total;
        maxRadius = d3.min([vars.width.viz, vars.height.viz]) / 2;
        labelHeight = 0;
        labelWidth = 0;
        labels = (function() {
            var j, len, results;
            results = [];
            for (j = 0, len = children.length; j < len; j++) {
                c = children[j];
                results.push(fetchText(vars, c, nextDepth)[0]);
            }
            return results;
        })();
        labels = uniques(d3.merge(labels));
        if (vars.labels.value) {
            first = offset(Math.PI / 2, maxRadius);
            second = offset(angle + Math.PI / 2, maxRadius);
            labelHeight = (first.x - second.x) - vars.labels.padding * 2;
            textStyle = {
                "fill": vars.x.ticks.font.color,
                "font-family": vars.x.ticks.font.family.value,
                "font-weight": vars.x.ticks.font.weight,
                "font-size": vars.x.ticks.font.size + "px"
            };
            sizes = fontSizes(labels, textStyle, {
                mod: function(elem) {
                    return textwrap().container(d3.select(elem)).width(vars.height.viz / 8).height(labelHeight).draw();
                }
            });
            labelWidth = d3.max(sizes, function(d) {
                return d.width;
            });
            maxRadius -= labelWidth;
            maxRadius -= vars.labels.padding * 2;
        }
        maxData = (function() {
            var j, len, results;
            results = [];
            for (j = 0, len = children.length; j < len; j++) {
                c = children[j];
                results.push((function() {
                    var k, len1, results1;
                    results1 = [];
                    for (k = 0, len1 = c.length; k < len1; k++) {
                        d = c[k];
                        results1.push(fetchValue(vars, d, vars.size.value));
                    }
                    return results1;
                })());
            }
            return results;
        })();
        maxData = d3.max(d3.merge(maxData));
        radius = d3.scaleLinear().domain([0, maxData]).range([0, maxRadius]);
        ids = (function() {
            var j, len, results;
            results = [];
            for (j = 0, len = children.length; j < len; j++) {
                c = children[j];
                results.push(fetchValue(vars, c, nextLevel));
            }
            return results;
        })();
        ids = uniques(d3.merge(ids));
        idIndex = d3.scaleOrdinal().domain(ids).range(d3.range(0, ids.length));
        for (j = 0, len = data.length; j < len; j++) {
            d = data[j];
            d.d3po.x = vars.width.viz / 2 + vars.margin.top;
            d.d3po.y = vars.height.viz / 2 + vars.margin.left;
            ref = d[nextLevel];
            for (i = k = 0, len1 = ref.length; k < len1; i = ++k) {
                a = ref[i];
                if (!a.d3po) {
                    a.d3po = {};
                }
                a.d3po.r = radius(fetchValue(vars, a, vars.size.value));
                a.d3po.a = idIndex(fetchValue(vars, a, nextLevel)) * angle;
            }
        }
        intervals = 1;
        ref1 = [10, 5, 4, 2];
        for (m = 0, len2 = ref1.length; m < len2; m++) {
            i = ref1[m];
            if (maxRadius / i >= 20) {
                intervals = i;
                break;
            }
        }
        ringData = buckets([maxRadius / intervals, maxRadius], intervals - 1).reverse();
        if (ringData.length === intervals) {
            ringData.shift();
        }
        rings = vars.group.selectAll(".d3po_radar_rings").data(ringData, function(d, i) {
            return i;
        });
        ringStyle = function(ring) {
            return ring.attr("fill", function(d, i) {
                if (i === 0) {
                    return vars.axes.background.color;
                } else {
                    return "transparent";
                }
            }).attr("cx", vars.width.viz / 2 + vars.margin.top).attr("cy", vars.height.viz / 2 + vars.margin.left).attr("stroke", vars.x.grid.value ? vars.x.grid.color : "transparent");
        };
        rings.enter().append("circle").attr("class", "d3po_radar_rings").call(ringStyle).attr("r", 0);
        rings.transition().duration(vars.draw.timing).call(ringStyle).attr("r", function(d) {
            return d;
        });
        rings.exit().transition().duration(vars.draw.timing).attr("opacity", 0).remove();
        labelIndex = d3.scaleOrdinal().domain(labels).range(d3.range(0, labels.length));
        labelData = [];
        for (n = 0, len3 = labels.length; n < len3; n++) {
            l = labels[n];
            a2 = (angle * labelIndex(l)) - Math.PI / 2;
            a = a2 * (180 / Math.PI);
            if (a < -90 || a > 90) {
                a = a - 180;
                buffer = -(maxRadius + vars.labels.padding * 2 + labelWidth);
                anchor = "end";
            } else {
                buffer = maxRadius + vars.labels.padding * 2;
                anchor = "start";
            }
            top = a2 < 0 || a2 > Math.PI;
            righty = a2 < Math.PI / 2;
            ov = maxRadius;
            if (vars.labels.value) {
                ov += vars.labels.padding;
            }
            o = offset(a2, ov);
            x = o.x;
            y = o.y;
            if (!righty) {
                x -= labelWidth;
            }
            if (top) {
                y -= labelHeight;
            }
            center = [0, Math.PI].indexOf(angle * labelIndex(l)) >= 0;
            if (center) {
                x -= labelWidth / 2;
            }
            labelData.push({
                "text": l,
                "angle": a,
                "x": buffer,
                "anchor": anchor,
                "offset": o
            });
        }
        labelGroup = vars.group.selectAll("g.d3po_radar_label_group").data([0]);
        labelGroup.enter().append("g").attr("class", "d3po_radar_label_group").attr("transform", "translate(" + vars.width.viz / 2 + "," + vars.height.viz / 2 + ")");
        labelGroup.transition().duration(vars.draw.timing).attr("transform", "translate(" + vars.width.viz / 2 + "," + vars.height.viz / 2 + ")");
        text = labelGroup.selectAll(".d3po_radar_labels").data((vars.labels.value ? labelData : []), function(d, i) {
            return i;
        });
        labelStyle = function(label) {
            return label.attr(textStyle).each(function(l, i) {
                return textwrap().container(d3.select(this)).height(labelHeight).width(labelWidth).align(l.anchor).text(l.text).padding(0).valign("middle").x(l.x).y(-labelHeight / 2).draw();
            }).attr("transform", function(t) {
                var translate;
                translate = d3.select(this).attr("transform") || "";
                if (translate.length) {
                    translate = translate.split(")").slice(-3).join(")");
                }
                return "rotate(" + t.angle + ")" + translate;
            });
        };
        text.call(labelStyle);
        text.enter().append("text").attr("class", "d3po_radar_labels").attr("opacity", 0).call(labelStyle).transition().duration(vars.draw.timing).attr("opacity", 1);
        text.exit().transition().duration(vars.draw.timing).attr("opacity", 0).remove();
        grid = vars.group.selectAll(".d3po_radar_lines").data(labelData, function(d, i) {
            return i;
        });
        gridStyle = function(grid) {
            return grid.attr("stroke", vars.x.grid.color).attr("x1", vars.width.viz / 2 + vars.margin.left).attr("y1", vars.height.viz / 2 + vars.margin.top);
        };
        grid.enter().append("line").attr("class", "d3po_radar_lines").call(gridStyle).attr("x2", vars.width.viz / 2 + vars.margin.left).attr("y2", vars.height.viz / 2 + vars.margin.top);
        grid.transition().duration(vars.draw.timing).call(gridStyle).attr("x2", function(d) {
            return vars.width.viz / 2 + vars.margin.left + d.offset.x;
        }).attr("y2", function(d) {
            return vars.height.viz / 2 + vars.margin.top + d.offset.y;
        });
        grid.exit().transition().duration(vars.draw.timing).attr("opacity", 0).remove();
        vars.mouse.viz = {
            click: false
        };
        return data;
    };

    radar.requirements = ["data", "size"];

    radar.shapes = ["radial"];

    module.exports = radar;

}).call(this);
},{"../../array/comparator.js":63,"../../array/sort.js":65,"../../core/data/threshold.js":93,"../../core/fetch/text.js":98,"../../core/fetch/value.js":99,"../../font/sizes.js":136,"../../geom/offset.js":195,"../../textwrap/textwrap.js":235,"../../util/buckets.js":239,"../../util/uniques.js":245}],369:[function(require,module,exports){
var arraySort = require("../../array/sort.js"),
    events = require("../../client/pointer.js"),
    fetchValue = require("../../core/fetch/value.js"),
    fetchColor = require("../../core/fetch/color.js"),
    legible = require("../../color/legible.js"),
    removeTooltip = require("../../tooltip/remove.js"),
    smallestGap = require("../../network/smallestgap.js"),
    textColor = require("../../color/text.js"),
    uniqueValues = require("../../util/uniques.js")

var rings = function(vars) {

    var radius = d3.min([vars.height.viz, vars.width.viz]) / 2,
        ring_width = vars.small || !vars.labels.value ?
        (radius - vars.labels.padding * 2) / 2 : radius / 3,
        primaryRing = vars.small || !vars.labels.value ?
        ring_width * 1.4 : ring_width,
        secondaryRing = ring_width * 2,
        edges = [],
        nodes = []

    var center = vars.data.viz.filter(function(d) {
        return d[vars.id.value] === vars.focus.value[0]
    })[0]

    if (!center) {
        center = {
            "d3po": {}
        }
        center[vars.id.value] = vars.focus.value[0]
    }

    center.d3po.x = vars.width.viz / 2
    center.d3po.y = vars.height.viz / 2
    center.d3po.r = primaryRing * .65

    var primaries = [],
        claimed = [vars.focus.value[0]]
    vars.edges.connections(vars.focus.value[0], vars.id.value).forEach(function(edge) {

        var c = edge[vars.edges.source][vars.id.value] == vars.focus.value[0] ? edge[vars.edges.target] : edge[vars.edges.source]
        var n = vars.data.viz.filter(function(d) {
            return d[vars.id.value] === c[vars.id.value]
        })[0]

        if (!n) {
            n = {
                "d3po": {}
            }
            n[vars.id.value] = c[vars.id.value]
        }

        n.d3po.edges = vars.edges.connections(n[vars.id.value], vars.id.value).filter(function(c) {
            return c[vars.edges.source][vars.id.value] != vars.focus.value[0] && c[vars.edges.target][vars.id.value] != vars.focus.value[0]
        })
        n.d3po.edge = edge
        claimed.push(n[vars.id.value])
        primaries.push(n)

    })

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Sort primary nodes by children (smallest to largest) and then by sort
    // order.
    //--------------------------------------------------------------------------
    var sort = vars.order.value || vars.color.value ||
        vars.size.value || vars.id.value

    primaries.sort(function(a, b) {

        var lengthdiff = a.d3po.edges.length - b.d3po.edges.length

        if (lengthdiff) {

            return lengthdiff

        } else {

            return arraySort([a, b], sort, vars.order.sort.value, vars.color.value || [], vars)

        }

    })

    if (typeof vars.edges.limit.value == "number") {
        primaries = primaries.slice(0, vars.edges.limit.value)
    } else if (typeof vars.edges.limit.value == "function") {
        primaries = vars.edges.limit.value(primaries)
    }

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Check for similar children and give preference to nodes with less
    // overall children.
    //----------------------------------------------------------------------------
    var secondaries = [],
        total = 0
    primaries.forEach(function(p) {

        var primaryId = p[vars.id.value]

        p.d3po.edges = p.d3po.edges.filter(function(c) {

            var source = c[vars.edges.source][vars.id.value],
                target = c[vars.edges.target][vars.id.value]
            return (claimed.indexOf(source) < 0 && target == primaryId) ||
                (claimed.indexOf(target) < 0 && source == primaryId)

        })

        total += p.d3po.edges.length || 1

        p.d3po.edges.forEach(function(c) {

            var source = c[vars.edges.source],
                target = c[vars.edges.target]
            var claim = target[vars.id.value] == primaryId ? source : target
            claimed.push(claim[vars.id.value])

        })
    })

    arraySort(primaries, sort, vars.order.sort.value, vars.color.value || [], vars)

    var offset = 0,
        radian = Math.PI * 2,
        start = 0

    primaries.forEach(function(p, i) {

        var children = p.d3po.edges.length || 1,
            space = (radian / total) * children

        if (i == 0) {
            start = angle
            offset -= space / 2
        }

        var angle = offset + (space / 2)
        angle -= radian / 4

        p.d3po.radians = angle
        p.d3po.x = vars.width.viz / 2 + (primaryRing * Math.cos(angle))
        p.d3po.y = vars.height.viz / 2 + (primaryRing * Math.sin(angle))

        offset += space
        p.d3po.edges.sort(function(a, b) {

            var a = a[vars.edges.source][vars.id.value] == p[vars.id.value] ?
                a[vars.edges.target] : a[vars.edges.source],
                b = b[vars.edges.source][vars.id.value] == p[vars.id.value] ?
                b[vars.edges.target] : b[vars.edges.source]

            return arraySort([a, b], sort, vars.order.sort.value, vars.color.value || [], vars)

        })

        p.d3po.edges.forEach(function(edge, i) {

            var c = edge[vars.edges.source][vars.id.value] == p[vars.id.value] ?
                edge[vars.edges.target] : edge[vars.edges.source],
                s = radian / total

            var d = vars.data.viz.filter(function(a) {
                return a[vars.id.value] === c[vars.id.value]
            })[0]

            if (!d) {
                d = {
                    "d3po": {}
                }
                d[vars.id.value] = c[vars.id.value]
            }

            a = (angle - (s * children / 2) + (s / 2)) + ((s) * i)
            d.d3po.radians = a
            d.d3po.x = vars.width.viz / 2 + ((secondaryRing) * Math.cos(a))
            d.d3po.y = vars.height.viz / 2 + ((secondaryRing) * Math.sin(a))
            secondaries.push(d)
        })

    })

    var primaryDistance = smallestGap(primaries, {
            "accessor": function(n) {
                return [n.d3po.x, n.d3po.y]
            }
        }),
        secondaryDistance = smallestGap(secondaries, {
            "accessor": function(n) {
                return [n.d3po.x, n.d3po.y]
            }
        })

    if (!primaryDistance) {
        primaryDistance = ring_width / 2
    }

    if (!secondaryDistance) {
        secondaryDistance = ring_width / 4
    }

    if (primaryDistance / 2 - 4 < 8) {
        var primaryMax = d3.min([primaryDistance / 2, 8])
    } else {
        var primaryMax = primaryDistance / 2 - 4
    }

    if (secondaryDistance / 2 - 4 < 4) {
        var secondaryMax = d3.min([secondaryDistance / 2, 4])
    } else {
        var secondaryMax = secondaryDistance / 2 - 4
    }

    if (secondaryMax > ring_width / 10) {
        secondaryMax = ring_width / 10
    }

    if (secondaryMax > primaryMax && secondaryMax > 10) {
        secondaryMax = primaryMax * .75
    }
    if (primaryMax > secondaryMax * 1.5) {
        primaryMax = secondaryMax * 1.5
    }

    primaryMax = Math.floor(primaryMax)
    secondaryMax = Math.floor(secondaryMax)

    var ids = uniqueValues(primaries, vars.id.value, fetchValue, vars)
    ids = ids.concat(uniqueValues(secondaries, vars.id.value, fetchValue, vars))
    ids.push(vars.focus.value[0])

    var data = vars.data.viz.filter(function(d) {
        return ids.indexOf(d[vars.id.value]) >= 0
    })

    if (vars.size.value) {

        var domain = d3.extent(data, function(d) {
            return fetchValue(vars, d, vars.size.value)
        })

        if (domain[0] == domain[1]) {
            domain[0] = 0
        }

        var radius = d3.scaleLinear()
            .domain(domain)
            .rangeRound([3, d3.min([primaryMax, secondaryMax])])

        var val = fetchValue(vars, center, vars.size.value)
        center.d3po.r = radius(val)

    } else {

        var radius = d3.scaleLinear()
            .domain([1, 2])
            .rangeRound([primaryMax, secondaryMax])


        if (vars.edges.label) {
            center.d3po.r = radius(1) * 1.5
        }

    }

    secondaries.forEach(function(s) {
        s.d3po.ring = 2
        var val = vars.size.value ? fetchValue(vars, s, vars.size.value) : 2
        s.d3po.r = radius(val)
    })

    primaries.forEach(function(p) {
        p.d3po.ring = 1
        var val = vars.size.value ? fetchValue(vars, p, vars.size.value) : 1
        p.d3po.r = radius(val)
    })

    nodes = [center].concat(primaries).concat(secondaries)

    primaries.forEach(function(p, i) {

        var check = [vars.edges.source, vars.edges.target],
            edge = p.d3po.edge

        check.forEach(function(node) {

            edge[node] = nodes.filter(function(n) {
                return n[vars.id.value] == edge[node][vars.id.value]
            })[0]

        })

        delete edge.d3po
        edges.push(edge)

        vars.edges.connections(p[vars.id.value], vars.id.value).forEach(function(edge) {

            var c = edge[vars.edges.source][vars.id.value] == p[vars.id.value] ?
                edge[vars.edges.target] : edge[vars.edges.source]

            if (c[vars.id.value] != center[vars.id.value]) {

                var target = secondaries.filter(function(s) {
                    return s[vars.id.value] == c[vars.id.value]
                })[0]

                if (!target) {
                    var r = primaryRing
                    target = primaries.filter(function(s) {
                        return s[vars.id.value] == c[vars.id.value]
                    })[0]
                } else {
                    var r = secondaryRing
                }

                if (target) {

                    edge.d3po = {
                        "spline": true,
                        "translate": {
                            "x": vars.width.viz / 2,
                            "y": vars.height.viz / 2
                        }
                    }

                    var check = [vars.edges.source, vars.edges.target]

                    check.forEach(function(node, i) {

                        edge[node] = nodes.filter(function(n) {
                            return n[vars.id.value] == edge[node][vars.id.value]
                        })[0]

                        if (edge[node].d3po.edges === undefined) edge[node].d3po.edges = {}

                        var oppID = i === 0 ? edge[vars.edges.target][vars.id.value] : edge[vars.edges.source][vars.id.value]

                        if (edge[node][vars.id.value] == p[vars.id.value]) {

                            edge[node].d3po.edges[oppID] = {
                                "angle": p.d3po.radians + Math.PI,
                                "radius": ring_width / 2
                            }

                        } else {

                            edge[node].d3po.edges[oppID] = {
                                "angle": target.d3po.radians,
                                "radius": ring_width / 2
                            }

                        }
                    })

                    edges.push(edge)

                }

            }

        })

    })

    var labelColor = false;
    if (vars.background.value && ["transparent", "none"].indexOf(vars.background.value) < 0 &&
        d3.hsl(vars.background.value).l < 0.5) {
        labelColor = textColor(vars.background.value);
    }

    nodes.forEach(function(n) {

        if (!vars.small && vars.labels.value) {

            if (n[vars.id.value] != vars.focus.value[0]) {

                n.d3po.rotate = n.d3po.radians * (180 / Math.PI)

                var angle = n.d3po.rotate,
                    width = ring_width - (vars.labels.padding * 3) - n.d3po.r

                if (angle < -90 || angle > 90) {
                    angle = angle - 180
                    var buffer = -(n.d3po.r + width / 2 + vars.labels.padding),
                        anchor = "end"
                } else {
                    var buffer = n.d3po.r + width / 2 + vars.labels.padding,
                        anchor = "start"
                }

                var background = primaries.indexOf(n) >= 0 ? true : false

                var height = n.d3po.ring == 1 ? primaryDistance : secondaryDistance

                n.d3po.label = {
                    "x": buffer,
                    "y": 0,
                    "w": width,
                    "h": height,
                    "angle": angle,
                    "anchor": anchor,
                    "valign": "center",
                    "color": labelColor || legible(fetchColor(vars, n)),
                    "resize": [8, vars.labels.font.size],
                    "background": background,
                    "mouse": true
                }

            } else if (vars.size.value || vars.edges.label) {

                var height = primaryRing - n.d3po.r * 2 - vars.labels.padding * 2

                n.d3po.label = {
                    "x": 0,
                    "y": n.d3po.r + height / 2,
                    "w": primaryRing,
                    "h": height,
                    "color": labelColor || legible(fetchColor(vars, n)),
                    "resize": [10, 40],
                    "background": true,
                    "mouse": true
                }

            } else {
                delete n.d3po.rotate
                delete n.d3po.label
            }

        } else {
            delete n.d3po.rotate
            delete n.d3po.label
        }

    })

    vars.mouse.viz = {};
    vars.mouse.viz[events.click] = function(d) {
        if (d[vars.id.value] != vars.focus.value[0]) {
            removeTooltip(vars.type.value);
            var old_focus = vars.focus.value[0];
            vars.history.states.push(function() {
                vars.self.focus(old_focus).draw();
            })
            vars.self.focus(d[vars.id.value]).draw();
        }
    }

    return {
        "edges": edges,
        "nodes": nodes,
        "data": data
    }

};

//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Visualization Settings and Helper Functions
//------------------------------------------------------------------------------
rings.filter = function(vars, data) {

    var primaries = vars.edges.connections(vars.focus.value[0], vars.id.value, true),
        secondaries = []

    primaries.forEach(function(p) {
        secondaries = secondaries.concat(vars.edges.connections(p[vars.id.value], vars.id.value, true))
    })

    var connections = primaries.concat(secondaries),
        ids = uniqueValues(connections, vars.id.value, fetchValue, vars),
        returnData = []

    ids.forEach(function(id) {

        var d = data.filter(function(d) {
            return d[vars.id.value] == id
        })[0]

        if (!d) {
            var obj = {
                "d3po": {}
            }
            obj[vars.id.value] = id
            returnData.push(obj)
        } else {
            returnData.push(d)
        }

    })

    return returnData

}
rings.nesting = false
rings.scale = 1
rings.shapes = ["circle", "square", "donut"]
rings.requirements = ["edges", "focus"]
rings.tooltip = "static"

module.exports = rings
},{"../../array/sort.js":65,"../../client/pointer.js":69,"../../color/legible.js":75,"../../color/text.js":81,"../../core/fetch/color.js":95,"../../core/fetch/value.js":99,"../../network/smallestgap.js":203,"../../tooltip/remove.js":238,"../../util/uniques.js":245}],370:[function(require,module,exports){
(function() {
    var d3sankey, events, removeTooltip, sankey, uniques;

    d3sankey = require("./sankey.js");

    events = require("../../client/pointer.js");

    removeTooltip = require("../../tooltip/remove.js");

    uniques = require("../../util/uniques.js");

    sankey = function(vars) {
        var d, e, edges, focus, i, j, layout, len, len1, n, nodes, padding, placed, returnData, size;
        focus = vars.focus.value[0];
        padding = vars.data.stroke.width * 2;
        size = vars.size.value.constructor === Number ? vars.size.value : 20;
        edges = vars.edges.connections(focus, vars.id.value).filter(function(e) {
            return e[vars.edges.source][vars.id.value] !== focus || e[vars.edges.target][vars.id.value] !== focus;
        });
        nodes = [];
        placed = [];
        edges = edges.map(function(e) {
            var s, t;
            if (e[vars.edges.target][vars.id.value] === focus) {
                s = {
                    id: "left_" + e[vars.edges.source][vars.id.value],
                    dupe: "left",
                    data: e[vars.edges.source],
                    value: e[vars.edges.strength.value]
                };
                t = e[vars.edges.target];
            } else {
                s = e[vars.edges.source];
                t = {
                    id: "right_" + e[vars.edges.target][vars.id.value],
                    dupe: "right",
                    data: e[vars.edges.target],
                    value: e[vars.edges.strength.value]
                };
            }
            if (placed.indexOf(s.id) < 0) {
                nodes.push(s);
            }
            if (placed.indexOf(t.id) < 0) {
                nodes.push(t);
            }
            placed.push(s.id);
            placed.push(t.id);
            return {
                source: s,
                target: t,
                value: e[vars.edges.strength.value] || 1
            };
        });
        layout = d3sankey().nodeWidth(size).nodePadding(vars.data.padding.value).size([vars.width.viz - padding * 2, vars.height.viz - padding * 2]).nodes(nodes).links(edges).layout(2);
        returnData = [];
        for (i = 0, len = nodes.length; i < len; i++) {
            n = nodes[i];
            d = n.data || n;
            d = {
                id: d[vars.id.value]
            };
            d.d3po = {
                x: n.x + n.dx / 2 + padding,
                y: n.y + n.dy / 2 + padding,
                width: n.dx,
                height: n.dy,
                suffix: n.dupe
            };
            if (d.id !== focus) {
                d[vars.edges.strength.value] = n.value;
            }
            returnData.push(d);
        }
        vars.edges.path = layout.link();
        for (j = 0, len1 = edges.length; j < len1; j++) {
            e = edges[j];
            e.d3po = {
                x: padding,
                y: padding
            };
        }
        vars.mouse.viz = {};
        vars.mouse.viz[events.click] = function(d) {
            var old_focus;
            if (d[vars.id.value] !== vars.focus.value[0]) {
                removeTooltip(vars.type.value);
                old_focus = vars.focus.value[0];
                vars.history.states.push(function() {
                    return vars.self.focus(old_focus).draw();
                });
                return vars.self.focus(d[vars.id.value]).draw();
            }
        };
        return {
            nodes: returnData,
            edges: edges
        };
    };

    sankey.requirements = ["edges", "focus", "nodes"];

    sankey.shapes = ["square"];

    module.exports = sankey;

}).call(this);
},{"../../client/pointer.js":69,"../../tooltip/remove.js":238,"../../util/uniques.js":245,"./sankey.js":370}],371:[function(require,module,exports){
(function() {
    var fetchValue, graph, print, scatter, sort, ticks;

    fetchValue = require("../../core/fetch/value.js");

    graph = require("./helpers/graph/draw.js");

    print = require("../../core/console/print.js");

    sort = require("../../array/sort.js");

    ticks = require("./helpers/graph/dataticks.js");

    scatter = function(vars) {
        var d, domains, i, len, ref;
        graph(vars, {
            buffer: "size",
            mouse: true
        });
        domains = vars.x.domain.viz.concat(vars.y.domain.viz);
        if (domains.indexOf(void 0) >= 0) {
            return [];
        }
        ref = vars.data.viz;
        for (i = 0, len = ref.length; i < len; i++) {
            d = ref[i];
            d.d3po.x = vars.x.scale.viz(fetchValue(vars, d, vars.x.value));
            d.d3po.x += vars.axes.margin.viz.left;
            d.d3po.y = vars.y.scale.viz(fetchValue(vars, d, vars.y.value));
            d.d3po.y += vars.axes.margin.viz.top;
            if (typeof vars.size.value === "number" || !vars.size.value) {
                d.d3po.r = vars.axes.scale(0);
            } else {
                d.d3po.r = vars.axes.scale(fetchValue(vars, d, vars.size.value));
            }
        }
        ticks(vars);
        return sort(vars.data.viz, vars.order.value || vars.size.value || vars.id.value, vars.order.sort.value === "desc" ? "asc" : "desc", vars.color.value || [], vars);
    };

    scatter.fill = true;

    scatter.requirements = ["data", "x", "y"];

    scatter.scale = 1.1;

    scatter.setup = function(vars) {
        if (vars.time.value && !vars.axes.discrete) {
            if (vars.time.value === vars.x.value) {
                vars.self.x({
                    scale: "discrete"
                });
            }
            if (vars.time.value === vars.y.value) {
                return vars.self.y({
                    scale: "discrete"
                });
            }
        }
    };

    scatter.shapes = ["circle"];

    scatter.tooltip = "static";

    module.exports = scatter;

}).call(this);
},{"../../array/sort.js":65,"../../core/console/print.js":83,"../../core/fetch/value.js":99,"./helpers/graph/dataticks.js":355,"./helpers/graph/draw.js":356}],372:[function(require,module,exports){
var fetchValue = require("../../core/fetch/value.js");
var uniques = require("../../util/uniques.js");
var copy = require("../../util/copy.js");
var rand_col = require("../../color/random.js");

//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Table
//------------------------------------------------------------------------------

var table = function(vars) {

    // get unique IDs and columns
    var ids = uniques(vars.data.viz, vars.id.value, fetchValue, vars);
    var cols = uniques(vars.cols.value);

    // if user wants to show the row labels (default behavior) add this as a col
    if (cols.indexOf("label") < 0 && vars.cols.index.value) {
        cols.unshift("label");
    }

    // width/height are a function of number of IDs and columns
    var item_height = vars.height.viz / (ids.length + 1); // add 1 for header offset
    var item_width = vars.width.viz / cols.length;

    //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Setup background
    //----------------------------------------------------------------------------
    vars.group.selectAll("rect").data([0]).enter()
        .append("rect")
        .attr("class", "background")
        .attr("height", vars.height.viz)
        .attr("width", vars.width.viz)
        .style("fill", vars.color.missing)
        // draw line separater w/ enter/update/exit
    var lines_horiz = vars.group.selectAll("line.horiz").data(vars.data.viz);
    lines_horiz.enter().append("line").attr("class", "horiz")
    lines_horiz
        .attr("x1", 0)
        .attr("y1", function(d, row_i) {
            return (item_height * row_i) + item_height
        })
        .attr("x2", vars.width.viz)
        .attr("y2", function(d, row_i) {
            return (item_height * row_i) + item_height
        })
        .style("fill", "#fff")
        .style("stroke", "#fff")
    lines_horiz.exit().remove()
        // draw line separater w/ enter/update/exit
    var lines_vert = vars.group.selectAll("line.vert").data(cols);
    lines_vert.enter().append("line").attr("class", "vert")
    lines_vert
        .attr("x1", function(d, col_i) {
            return (item_width * col_i) + item_width
        })
        .attr("y1", 0)
        .attr("x2", function(d, col_i) {
            return (item_width * col_i) + item_width
        })
        .attr("y2", vars.height.viz)
        .style("fill", "#fff")
        .style("stroke", "#fff")
    lines_vert.exit().remove()

    var ret = []
    var colors = {}

    // doing 2 things here, first we add our column headers to our ret array as
    // items dor d3po to draw. We also compute the color scales for each column
    cols.forEach(function(col, col_i) {
        // add columns
        var header = {
            "d3po": {
                "x": (item_width * col_i) + item_width / 2,
                "y": item_height / 2,
                "width": item_width,
                "height": item_height,
                "id": "d3p_header_" + col.toString().replace(/ /g, "_"),
                "shape": "square",
                "color": "#fff",
                "text": vars.format.value(col)
            }
        }
        if (col == vars.id.value) {
            header.d3po.color = "#fff";
        }
        if (col == "label") {
            header.d3po.label = false;
            header.d3po.color = "#fff";
            header.d3po.stroke = "#fff";
        }
        ret.push(header)

        // set up color scales
        if (vars.data.keys[col] == "number") {
            var domain_extent = d3.extent(vars.data.viz, function(d) {
                return d[col];
            })
            if (domain_extent[0] == domain_extent[1]) {
                domain_extent = [domain_extent[0] - 1, domain_extent[1]]
            }
            colors[col] = d3.scaleLinear().domain(domain_extent).range([vars.color.missing, rand_col(col)])
        } else if (vars.data.keys[col] == "boolean") {
            colors[col] = function(bool) {
                return bool ? rand_col(col) : vars.color.missing;
            }
        }
    })

    vars.data.viz.forEach(function(d, row_i) {
        // offset for column headers
        row_i += 1;

        // loop through each user defined column to create new "object" to draw
        cols.forEach(function(col, col_i) {

            // need to clone data since we'll be dupliating it for each column
            var d_clone = copy(d);

            // set unique ID otherwise it'd be the same in each column
            d_clone.d3po.id = "d3p_" + d_clone[vars.id.value].toString().replace(/ /g, "_") + "_" + col;
            d_clone.d3po.x = (item_width * col_i) + item_width / 2;
            d_clone.d3po.y = (item_height * row_i) + item_height / 2;
            d_clone.d3po.width = item_width;
            d_clone.d3po.height = item_height;

            if (col == "label") {
                d_clone.d3po.shape = "square";
                d_clone.d3po.color = "#fff";
                // special case for top left corner
                ret.push(d_clone)
            }

            // be sure that this column is actually in this data item
            if (d3.keys(d).indexOf(col) >= 0 && col in d) {
                if (colors[col]) {
                    d_clone.d3po.color = colors[col](d_clone[col]);
                }
                d_clone.d3po.text = vars.format.value(d_clone[col]);
                if (vars.data.keys[col] == "boolean") {
                    d_clone.d3po.label = false;
                } else if (vars.data.keys[col] == "string") {
                    d_clone.d3po.color = vars.color.missing;
                    d_clone.d3po.stroke = "#fff";
                    d_clone.d3po.shape = "square";
                }
                ret.push(d_clone)
            }
        })

    })

    return ret

};

//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Visualization Settings and Helper Functions
//------------------------------------------------------------------------------
table.shapes = ["check", "cross", "diamond", "square", "triangle", "triangle_up", "triangle_down"]
table.requirements = ["data", "cols"]

module.exports = table
},{"../../color/random.js":78,"../../core/fetch/value.js":99,"../../util/copy.js":242,"../../util/uniques.js":245}],373:[function(require,module,exports){
(function() {
    var dataThreshold, groupData, mergeObject, treemap;

    dataThreshold = require("../../core/data/threshold.js");

    groupData = require("../../core/data/group.js");

    mergeObject = require("../../object/merge.js");

    treemap = function(vars) {
        var d, data, groupedData, i, len, returnData, root;
        groupedData = groupData(vars, vars.data.viz);
        data = d3.layout.treemap().mode(vars.type.mode.value).round(true).size([vars.width.viz, vars.height.viz]).children(function(d) {
            return d.values;
        }).padding(vars.data.padding.value).sort(function(a, b) {
            var sizeDiff;
            sizeDiff = a.value - b.value;
            if (sizeDiff === 0) {
                return a.id < b.id;
            } else {
                return sizeDiff;
            }
        }).nodes({
            name: "root",
            values: groupedData
        }).filter(function(d) {
            return !d.values && d.area;
        });
        if (data.length) {
            root = data[0];
            while (root.parent) {
                root = root.parent;
            }
            returnData = [];
            for (i = 0, len = data.length; i < len; i++) {
                d = data[i];
                d.d3po.d3po = mergeObject(d.d3po.d3po, {
                    x: d.x + d.dx / 2,
                    y: d.y + d.dy / 2,
                    width: d.dx,
                    height: d.dy,
                    share: d.value / root.value
                });
                returnData.push(d.d3po);
            }
        }
        return returnData;
    };

    treemap.filter = dataThreshold;

    treemap.modes = ["squarify", "slice", "dice", "slice-dice"];

    treemap.requirements = ["data", "size"];

    treemap.shapes = ["square"];

    treemap.threshold = function(vars) {
        return (40 * 40) / (vars.width.viz * vars.height.viz);
    };

    module.exports = treemap;

}).call(this);
},{"../../core/data/group.js":88,"../../core/data/threshold.js":93,"../../object/merge.js":206}],374:[function(require,module,exports){
(function() {
    var attach, axis, container, flash, getSteps, print, validObject;

    attach = require("../core/methods/attach.js");

    axis = require("./methods/helpers/axis.js");

    flash = require("./helpers/ui/message.js");

    getSteps = require("./helpers/drawSteps.js");

    print = require("../core/console/print.js");

    container = require("./helpers/container.js");

    validObject = require("../object/validate.js");

    module.exports = function() {
        var vars;
        vars = {
            g: {
                apps: {}
            },
            types: {
                area: require("./types/area.js"),
                bar: require("./types/bar.js"),
                bubbles: require("./types/bubbles.js"),
                box: require("./types/box.js"),
                donut: require("./types/donut.js"),
                geomap: require("./types/geomap.js"),
                halfdonut: require("./types/halfdonut.js"),
                line: require("./types/line.js"),
                network: require("./types/network.js"),
                paths: require("./types/paths.js"),
                pie: require("./types/pie.js"),
                radar: require("./types/radar.js"),
                rings: require("./types/rings.js"),
                sankey: require("./types/sankey.js"),
                scatter: require("./types/scatter.js"),
                stacked: require("./types/area.js"),
                table: require("./types/table.js"),
                treemap: require("./types/treemap.js")
            }
        };
        vars.self = function(selection) {
            selection.each(function() {
                var lastMessage, nextStep, runFunction, runStep, small_height, small_width, steps;
                vars.draw.frozen = true;
                vars.error.internal = null;
                if (!("timing" in vars.draw)) {
                    vars.draw.timing = vars.timing.transitions;
                }
                if (vars.error.value) {
                    vars.draw.timing = 0;
                }
                container(vars);
                small_width = vars.width.value <= vars.width.small;
                small_height = vars.height.value <= vars.height.small;
                vars.small = small_width || small_height;
                vars.width.viz = vars.width.value;
                vars.height.viz = vars.height.value;
                lastMessage = false;
                nextStep = function() {
                    if (steps.length) {
                        runStep();
                    } else {
                        if (vars.dev.value) {
                            print.groupEnd();
                            print.timeEnd("total draw time");
                            print.log("\n");
                        }
                    }
                };
                runFunction = function(step, name) {
                    name = name || "function";
                    if (step[name] instanceof Array) {
                        step[name].forEach(function(f) {
                            f(vars, nextStep);
                        });
                    } else {
                        if (typeof step[name] === "function") {
                            step[name](vars, nextStep);
                        }
                    }
                    if (!step.wait) {
                        nextStep();
                    }
                };
                runStep = function() {
                    var message, run, same, step;
                    step = steps.shift();
                    same = vars.g.message && lastMessage === step.message;
                    run = "check" in step ? step.check : true;
                    if (typeof run === "function") {
                        run = run(vars);
                    }
                    if (run) {
                        if (!same) {
                            if (vars.dev.value) {
                                if (lastMessage !== false) {
                                    print.groupEnd();
                                }
                                print.group(step.message);
                            }
                            if (typeof vars.messages.value === "string") {
                                lastMessage = vars.messages.value;
                                message = vars.messages.value;
                            } else {
                                lastMessage = step.message;
                                message = vars.format.value(step.message);
                            }
                            if (vars.draw.update) {
                                flash(vars, message);
                                if (vars.error.value) {
                                    runFunction(step);
                                } else {
                                    setTimeout((function() {
                                        return runFunction(step);
                                    }), 10);
                                }
                            } else {
                                runFunction(step);
                            }
                        } else {
                            runFunction(step);
                        }
                    } else {
                        if ("otherwise" in step) {
                            if (vars.error.value) {
                                runFunction(step, "otherwise");
                            } else {
                                setTimeout((function() {
                                    return runFunction(step, "otherwise");
                                }), 10);
                            }
                        } else {
                            nextStep();
                        }
                    }
                };
                vars.messages.style.backup = vars.group && vars.group.attr("opacity") === "1" ? "small" : "large";
                steps = getSteps(vars);
                runStep();
            });
            return vars.self;
        };
        attach(vars, {
            active: require("./methods/active.js"),
            aggs: require("./methods/aggs.js"),
            attrs: require("./methods/attrs.js"),
            axes: require("./methods/axes.js"),
            background: require("./methods/background.js"),
            "class": require("./methods/class.js"),
            color: require("./methods/color.js"),
            cols: require("./methods/cols.js"),
            config: require("./methods/config.js"),
            container: require("./methods/container.js"),
            coords: require("./methods/coords.js"),
            csv: require("./methods/csv.js"),
            data: require("./methods/data.js"),
            depth: require("./methods/depth.js"),
            descs: require("./methods/descs.js"),
            dev: require("./methods/dev.js"),
            draw: require("./methods/draw.js"),
            edges: require("./methods/edges.js"),
            error: require("./methods/error.js"),
            focus: require("./methods/focus.js"),
            font: require("./methods/font.js"),
            footer: require("./methods/footer.js"),
            format: require("./methods/format.js"),
            height: require("./methods/height.js"),
            history: require("./methods/history.js"),
            icon: require("./methods/icon.js"),
            id: require("./methods/id.js"),
            labels: require("./methods/labels.js"),
            legend: require("./methods/legend.js"),
            links: require("./methods/links.js"),
            margin: require("./methods/margin.js"),
            messages: require("./methods/messages.js"),
            mouse: require("./methods/mouse.js"),
            nodes: require("./methods/nodes.js"),
            order: require("./methods/order.js"),
            resize: require("./methods/resize.js"),
            shape: require("./methods/shape.js"),
            size: require("./methods/size.js"),
            style: require("./methods/style.js"),
            temp: require("./methods/temp.js"),
            text: require("./methods/text.js"),
            time: require("./methods/time.js"),
            timeline: require("./methods/timeline.js"),
            timing: require("./methods/timing.js"),
            title: require("./methods/title.js"),
            tooltip: require("./methods/tooltip.js"),
            total: require("./methods/total.js"),
            type: require("./methods/type.js"),
            ui: require("./methods/ui.js"),
            width: require("./methods/width.js"),
            x: axis("x"),
            x2: axis("x2"),
            y: axis("y"),
            y2: axis("y2"),
            zoom: require("./methods/zoom.js")
        });
        return vars.self;
    };

}).call(this);
},{"../core/console/print.js":83,"../core/methods/attach.js":114,"../object/validate.js":207,"./helpers/container.js":246,"./helpers/drawSteps.js":253,"./helpers/ui/message.js":287,"./methods/active.js":296,"./methods/aggs.js":297,"./methods/attrs.js":298,"./methods/axes.js":299,"./methods/background.js":300,"./methods/class.js":301,"./methods/color.js":302,"./methods/cols.js":303,"./methods/config.js":304,"./methods/container.js":305,"./methods/coords.js":306,"./methods/csv.js":307,"./methods/data.js":308,"./methods/depth.js":309,"./methods/descs.js":310,"./methods/dev.js":311,"./methods/draw.js":312,"./methods/edges.js":313,"./methods/error.js":314,"./methods/focus.js":315,"./methods/font.js":316,"./methods/footer.js":317,"./methods/format.js":318,"./methods/height.js":319,"./methods/helpers/axis.js":320,"./methods/history.js":321,"./methods/icon.js":322,"./methods/id.js":323,"./methods/labels.js":324,"./methods/legend.js":325,"./methods/links.js":326,"./methods/margin.js":327,"./methods/messages.js":328,"./methods/mouse.js":329,"./methods/nodes.js":330,"./methods/order.js":331,"./methods/resize.js":332,"./methods/shape.js":333,"./methods/size.js":334,"./methods/style.js":335,"./methods/temp.js":336,"./methods/text.js":337,"./methods/time.js":338,"./methods/timeline.js":339,"./methods/timing.js":340,"./methods/title.js":341,"./methods/tooltip.js":342,"./methods/total.js":343,"./methods/type.js":344,"./methods/ui.js":345,"./methods/width.js":346,"./methods/zoom.js":347,"./types/area.js":348,"./types/bar.js":349,"./types/box.js":350,"./types/bubbles.js":351,"./types/donut.js":352,"./types/geomap.js":353,"./types/halfdonut.js":354,"./types/line.js":364,"./types/network.js":365,"./types/paths.js":366,"./types/pie.js":367,"./types/radar.js":368,"./types/rings.js":369,"./types/sankey.js":370,"./types/scatter.js":371,"./types/table.js":372,"./types/treemap.js":373}]},{},[198,197]);
